<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>可怜队长雪见的妙妙屋</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/Challestend/"/>
  <updated>2025-02-17T12:53:18.860Z</updated>
  <id>https://github.com/Challestend/</id>
  
  <author>
    <name>Yukimi Soromon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>建成了全新的博客</title>
    <link href="https://github.com/Challestend/new-blog-built/"/>
    <id>https://github.com/Challestend/new-blog-built/</id>
    <published>2025-02-17T11:21:01.000Z</published>
    <updated>2025-02-17T12:53:18.860Z</updated>
    
    <content type="html"><![CDATA[<p>由此向下，四百六十五亿光年。</p><a id="more"></a><p><a href="http://www.yukimisdiary.org/">http://www.yukimisdiary.org/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由此向下，四百六十五亿光年。&lt;/p&gt;
    
    </summary>
    
      <category term="颓废" scheme="https://github.com/Challestend/categories/%E9%A2%93%E5%BA%9F/"/>
    
    
      <category term="颓废" scheme="https://github.com/Challestend/tags/%E9%A2%93%E5%BA%9F/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Ct. 4</title>
    <link href="https://github.com/Challestend/random-solution-ct-5/"/>
    <id>https://github.com/Challestend/random-solution-ct-5/</id>
    <published>2024-10-14T16:28:28.000Z</published>
    <updated>2024-10-14T17:15:15.390Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/2025">Educational Codeforces Round 170 (Rated for Div. 2)</a></p><p>呵呵呵，许久不曾 CF 了……</p><a id="more"></a><h2 id="A-B-C"><a href="#A-B-C" class="headerlink" title="A. B. C."></a>A. B. C.</h2><p>略。</p><h2 id="D-Attribute-Checks"><a href="#D-Attribute-Checks" class="headerlink" title="D. Attribute Checks"></a>D. Attribute Checks</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>考虑一款游戏，游戏角色有两个属性：力量和智力。</p><p>接下来会发生 $n$ 个事件。第 $i$ 个事件可能是：</p><ol><li>属性分配：你可以选择力量 $+1$ 或智力 $+1$</li><li>力量检查：给出一个阈值 $r$，如果你的力量 $\geqslant r$，你获得一分</li><li>智力检查：给出一个阈值 $r$，如果你的智力 $\geqslant r$，你获得一分</li></ol><p>并且恰好会有 $m$ 个事件是属性分配。</p><p>问 $n$ 个事件结束之后你最多能拿多少得分。</p><p>$1 \leqslant m \leqslant 5000$，$m \lt n \leqslant 2 \cdot 10^6$。$r \leqslant m$。</p><p>$\texttt{2.5s/512MiB}$。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>令 $\text{dp}[i][j]$ 表示第 $i$ 次属性分配之后力量为 $j$，这样的最高得分。然后 DP。</p><h2 id="E-Card-Game"><a href="#E-Card-Game" class="headerlink" title="E. Card Game"></a>E. Card Game</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>现在这里有 $n \cdot m$ 张卡牌。$m$ 是偶数。每张卡牌都有花色和点数两个属性。花色是 $1 \sim n$ 的整数，点数是 $1 \sim m$ 的整数。花色和点数的 $n \cdot m$ 种组合每种恰好只有一张。</p><p>对于两张卡牌：</p><ol><li>如果花色不同，花色为 $1$ 的卡牌总能打赢花色非 $1$ 的卡牌</li><li>如果花色相同，点数更高的卡牌能打赢点数更低的卡牌</li></ol><p>现将这 $n \cdot m$ 张卡牌两两配对，使得每对卡牌的其中一张能够打赢另外一张。问方案数。对 $998244353$ 取模。</p><p>$1 \leqslant n, m \leqslant 500$。</p><p>$\texttt{2s/512MiB}$。</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>考虑给每张卡牌分配一个括号。</p><p>对于 $2 \sim n$ 的每种花色，将这种花色的 $m$ 张卡牌按点数从大到小排开，可以得到一个括号序列。</p><p>比如说 <code>()(())</code> 就是说 $1-2, 3-6, 4-5$ 两两配对。</p><p>如果出现不匹配的情况，比如说 <code>()()))</code>，这个例子里多出来 $2$ 个右括号，那么花色 $1$ 的括号序列里就需要多出来 $2$ 个左括号。</p><p>如果这些括号序列里存在没有使用的左括号，因为整体的括号数量要是一样的，花色 $1$ 的括号序列里就会多出来等量的右括号。它们就配对不上了。</p><p>那么，对于 $2 \sim n$ 的每种花色，实际合法的括号序列就是：</p><ol><li>总和 $\leqslant 0$</li><li>最后一个括号是右括号</li></ol><p>花色 $1$ 的合法括号序列就是：</p><ol><li>前缀和总是 $\geqslant 0$</li><li>总和 $= - \sum$ 其他花色括号序列的总和</li></ol><p>然后就是 DP 水平（</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/2025&quot;&gt;Educational Codeforces Round 170 (Rated for Div. 2)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;呵呵呵，许久不曾 CF 了……&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="Codeforces" scheme="https://github.com/Challestend/tags/Codeforces/"/>
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="DP" scheme="https://github.com/Challestend/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Ex. 1</title>
    <link href="https://github.com/Challestend/random-solution-ex-1/"/>
    <id>https://github.com/Challestend/random-solution-ex-1/</id>
    <published>2024-05-11T05:35:36.000Z</published>
    <updated>2024-05-11T06:20:34.851Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/694FA7A82D66D9316B7A84E47302E711.jpg" alt=""></p><p>校内 ACM 群里看到的申必数学题。</p><a id="more"></a><p>令 $p_{n, k}$ 表示给定 $n$ 的初值，那一坨东西等于 $k$ 的概率。有</p><script type="math/tex; mode=display">p_{n, k} = \sum_{i = k - 1}^{n - 1} \frac{p_{n - 1, i}}{i + 1}</script><p>边界条件</p><script type="math/tex; mode=display">p_{1, 1} = 1</script><p>假设</p><script type="math/tex; mode=display">\lim_{n \rightarrow \infty} p_{n, k} = p_k</script><p>那么</p><script type="math/tex; mode=display">p_k = \sum_{i = k - 1}^n \frac{p_i}{i + 1}</script><p>把右边那个求和为记作 $s_{k - 1}$。不难通过归纳法得出</p><script type="math/tex; mode=display">p_k = k (k + 1) s_{k + 1}</script><p>再用这个柿子来回捣鼓一下可以得到</p><script type="math/tex; mode=display">p_k = \frac{p_{k - 1}}{k - 1} = \frac{p_1}{(k - 1)!}</script><p>于是</p><script type="math/tex; mode=display">\sum_{k \geqslant 1} p_k = \sum_{k \geqslant 1} \frac{1}{(k - 1)!} p_1 = e p_1 = 1</script><p>可以解得</p><script type="math/tex; mode=display">p_1 = \frac{1}{e} \qquad p_k = \frac{1}{(k - 1)! e}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/694FA7A82D66D9316B7A84E47302E711.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;校内 ACM 群里看到的申必数学题。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="数学归纳法" scheme="https://github.com/Challestend/tags/%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95/"/>
    
      <category term="概率期望" scheme="https://github.com/Challestend/tags/%E6%A6%82%E7%8E%87%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Pb. 9</title>
    <link href="https://github.com/Challestend/random-solution-pb-9/"/>
    <id>https://github.com/Challestend/random-solution-pb-9/</id>
    <published>2024-04-11T09:37:32.000Z</published>
    <updated>2025-01-02T17:48:02.410Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://yukicoder.me/problems/no/2720">yukicoder contest 426 G. Sum of Subarray of Subsequence of…</a></p><a id="more"></a><p><strong>注意：本题解的记号可能与原题面存在出入。</strong></p><p>给你一个长度为 $N$ 的序列 $A$ 和一个长度为 $M$ 的字符串 $S$。$S$ 只包含 $\texttt{a}$ 和 $\texttt{s}$ 两种字符。</p><p>设 $a$ 为一序列。如下定义一系列函数 $f_0, f_1, \dots, f_M$：</p><ol><li>$f_0(a)$ 为 $a$ 中所有元素的和</li><li>对于 $i \gt 0$<ol><li>如果 $S_i = \texttt{a}$，$f_i(a)$ 为 $a$ 的所有 <strong>子区间（连续）</strong> 上的 $f_{i - 1}$ 的函数值的和</li><li>如果 $S_i = \texttt{s}$，$f_i(a)$ 为 $a$ 的所有 <strong>子序列（不一定连续）</strong> 上的 $f_{i - 1}$ 的函数值的和</li></ol></li></ol><p>让你求出 $f_M(A)$。对 $998244353$ 取模。</p><p>$1 \leqslant N, M \leqslant 10^5$。$0 \leqslant A_i \lt 998244353$。</p><p>$\texttt{4s/512MiB}$。</p><hr><p>不难发现，$f_i(a)$ 一定是 $a$ 中所有元素的某种带权和。</p><p>考虑设 $\lambda_i(x, y)$ 表示对于一个长度为 $x + y + 1$ 的序列 $a$，$f_i(a)$ 里 $a_{x + 1}$ 的权值。即</p><script type="math/tex; mode=display">f_i(a) = \sum_{j = 1}^{|a|} \lambda_i(j - 1, |a| - j) a_j</script><p>至于为什么下标要写成这样，因为这样更直观：$a_{x + 1}$ 的左侧有 $x$ 个其他元素，右侧有 $y$ 个其他元素。</p><p>边界条件是</p><script type="math/tex; mode=display">\lambda_0(p, q) = 1</script><p>再令 $\lambda_i$ 的 OGF 为</p><script type="math/tex; mode=display">\Lambda_i(x, y) = \sum_{p \geqslant 0} \sum_{q \geqslant 0} \lambda_i(p, q) x^p y^q</script><p>如果 $S_i = \texttt{a}$</p><script type="math/tex; mode=display">\lambda_i(p, q) = \sum_{r = 0}^p \sum_{s = 0}^q \lambda_{i - 1}(r, s)</script><script type="math/tex; mode=display">\begin{aligned}\Lambda_i(x, y) =& \sum_{p \geqslant 0} \sum_{q \geqslant 0} \lambda_i(p, q) x^p y^q \\=& \sum_{p \geqslant 0} \sum_{q \geqslant 0} \sum_{r = 0}^p \sum_{s = 0}^q \lambda_{i - 1}(r, s) x^p y^q \\=& \sum_{r \geqslant 0} \sum_{s \geqslant 0} \lambda_{i - 1}(r, s) \sum_{p \geqslant r} \sum_{q \geqslant s} x^p y^q \\=& \sum_{r \geqslant 0} \sum_{s \geqslant 0} \lambda_{i - 1}(r, s) \frac{x^r y^s}{(1 - x) (1 - y)} \\=& \frac{\Lambda_{i - 1}(x, y)}{(1 - x) (1 - y)}\end{aligned}</script><p>如果 $S_i = \texttt{s}$</p><script type="math/tex; mode=display">\lambda_i(p, q) = \sum_{r = 0}^p \sum_{s = 0}^q \binom{p}{r} \binom{q}{s} \lambda_{i - 1}(r, s)</script><script type="math/tex; mode=display">\begin{aligned}\Lambda_i(x, y) =& \sum_{p \geqslant 0} \sum_{q \geqslant 0} \lambda_i(p, q) x^p y^q \\=& \sum_{p \geqslant 0} \sum_{q \geqslant 0} \sum_{r = 0}^p \sum_{s = 0}^q \binom{p}{r} \binom{q}{s} \lambda_{i - 1}(r, s) x^p y^q \\=& \sum_{r \geqslant 0} \sum_{s \geqslant 0} \lambda_{i - 1}(r, s) \sum_{p \geqslant r} \sum_{q \geqslant s} \binom{p}{r} \binom{q}{s} x^p y^q \\=& \sum_{r \geqslant 0} \sum_{s \geqslant 0} \lambda_{i - 1}(r, s) \frac{x^r y^s}{(1 - x)^{r + 1} (1 - y)^{s + 1}} \\=& \frac{\Lambda_{i - 1}(x / (1 - x), y / (1 - y))}{(1 - x) (1 - y)}\end{aligned}</script><p>我们想要求的是 $\Lambda_M(x, y)$ 的系数。</p><p>考虑从 $\Lambda_i(\tilde x, \tilde y)$ 到 $\Lambda_{i - 1}(\tilde x, \tilde y)$ 的过程。这里 $\tilde x$ 和 $\tilde y$ 表示到这一步的时候的实际的自变量。</p><p>首先会在柿子里面留下一个</p><script type="math/tex; mode=display">\frac{1}{(1 - \tilde x) (1 - \tilde y)}</script><p>然后如果 $S_i = \texttt{s}$，两个自变量会分别变成</p><script type="math/tex; mode=display">\frac{\tilde x}{1 - \tilde x}, \frac{\tilde y}{1 - \tilde y}</script><p>手玩以下可以发现，上面这个过程如果说进行了 $l$ 次，两个自变量会变成</p><script type="math/tex; mode=display">\frac{x}{1 - lx}, \frac{y}{1 - ly}</script><p>这里的 $x, y$ 表示一开始代进 $\Lambda_M$ 的两个自变量。</p><p>然后每次再柿子里留下的那一部分会变成</p><script type="math/tex; mode=display">\frac{1 - lx}{1 - (l + 1) x}, \frac{1 - ly}{1 - (l + 1) y}</script><p>并且到 $\Lambda_0$ 还没完。所以你可以想象后面还有一个 $\Lambda_{-1} \equiv 1$。</p><p>那么结论就是，存在 $r_0, r_1, \dots, r_{M + 1}$ 使得</p><script type="math/tex; mode=display">\Lambda_M(x, y) = \prod_{j = 0}^{M + 1} (1 - jx)^{r_j} (1 - jy)^{r_j}</script><p>最后的答案就是</p><script type="math/tex; mode=display">\begin{aligned}& \sum_{i = 1}^N [x^{i - 1} y^{n - i}] \Lambda_M(x, y) A_i \\=& \sum_{i = 1}^N \left( [x^{i - 1}] \prod_{j = 0}^{M + 1} (1 - jx)^{r_j} \right) \left( [y^{n - i}] \prod_{j = 0}^{M + 1} (1 - jy)^{r_j} \right) A_i\end{aligned}</script><p>然后你会发现 $x$ 和 $y$ 的部分完全分开了。而且两部分其实长得一模一样。</p><p>中间那两坨我们可以用分治 + NTT 的技巧求解。时间复杂度 $\Theta(N \log_2^2 N)$。</p><p><a href="https://yukicoder.me/submissions/971254">评测记录</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://yukicoder.me/problems/no/2720&quot;&gt;yukicoder contest 426 G. Sum of Subarray of Subsequence of…&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="生成函数" scheme="https://github.com/Challestend/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
      <category term="yukicoder" scheme="https://github.com/Challestend/tags/yukicoder/"/>
    
      <category term="yukicoder contest" scheme="https://github.com/Challestend/tags/yukicoder-contest/"/>
    
  </entry>
  
  <entry>
    <title>ずっと面倒臭い時代の端で思い込んでいた少女だった</title>
    <link href="https://github.com/Challestend/ccpc-final-2023-notes/"/>
    <id>https://github.com/Challestend/ccpc-final-2023-notes/</id>
    <published>2024-04-01T02:50:25.000Z</published>
    <updated>2024-04-01T21:32:17.356Z</updated>
    
    <content type="html"><![CDATA[<p>居然混到了一个 CCPC Final 的名额……</p><a id="more"></a><h2 id="Day-0（2024-3-29）"><a href="#Day-0（2024-3-29）" class="headerlink" title="Day 0（2024-3-29）"></a>Day 0（2024-3-29）</h2><p>熬了一个晚上，打算赶今天上午的飞机。</p><p>结果估算错了从学校到机场的时间。我本来以为只需要 30min 的结果花了我整整 1h+。</p><p>过安检的时候广播已经开始催了。</p><p>于是急得我从安检处跑步冲到登机口。（知识点，圈起来后面要考）</p><p>到了成都，还没出机场就开始和阿块快乐讨论大分块题。</p><p>结果到了酒店之后我突然意识到一个很严重的问题——我的电脑不见了。</p><p>相信聪明的读者到这里已经明白发生什么了吧——我过安检的时候太急了把电脑落下了。</p><p>于是联系了一下机场，说是让我周日晚上回去的时候取。</p><p>但是因为他们 21：00 下班，所以让我如果赶不上的话就第二天去取。</p><h2 id="Day-1（2024-3-30）"><a href="#Day-1（2024-3-30）" class="headerlink" title="Day 1（2024-3-30）"></a>Day 1（2024-3-30）</h2><p>一整个晚上几乎没有睡着。</p><p>不知道是不是趴在实验室的桌子上睡太久了，已经不习惯在床上睡觉了。</p><p>在酒店附近的一家乡村基解决了早餐之后前往赛场报道并参加热身赛。</p><p>因为比赛结束之后忘记带走题面了，所以笔者已经记不清哪道题是哪道题了。</p><p>只记得 B 题是个原题。</p><p>热身赛进行到一半甚至有提供午餐。每名选手两个三明治。</p><p>下午参加了慎老师邀请我参加的 THU 的致理杯。</p><p>把 Div. 2 的两道签到题和 Div. 1 的一道签到题写出来了。</p><p>后面的就不会了。</p><p>真不愧是 THU，强而有力的题目啊。</p><p>顺便一提，是借用的鸭的电脑打的。</p><p>晚上和阿稳，阿烜还有 zhuoer 一起致命公司捡垃圾。</p><p>当然，用的还是鸭的电脑。</p><h2 id="Day-2（2024-3-31）"><a href="#Day-2（2024-3-31）" class="headerlink" title="Day 2（2024-3-31）"></a>Day 2（2024-3-31）</h2><p>这个晚上也没睡好。</p><p>考虑到昨天差点没赶上，今天就没吃早餐了。</p><p>到赛场拿到题面一看——</p><p>从过题数量看出了签到题，然后因为很 sb 的错误调了 20min 才过。</p><p>然后用 40min 开出来第二题，然后就开始坐牢。</p><p>就这样毫无进展地到了比赛结束前 30min。</p><p>今天的午餐还是三明治。你们是有多喜欢三明治啊。</p><p>然后我看出来了一道题的解法，用了 20min 分钟写了出来并过了。</p><p>顺便一提，上面这个做法在赛后讲题的时候被出题人评价为「最简洁，但是正常人基本上想不出来的做法」。</p><p>三题，罚时还这么严重，这必然是一块牌子都捞不到了。</p><p>于是滚榜也没看夹着尾巴就跑了。</p><p>在这之后和 HMD 一起去街机厅打了一会音游。</p><p>17：00 赶往机场，结果到机场已经是 19：40 了。</p><p>于是非常失败地没能赶上飞机，被迫在机场过夜然后坐第二天早上的飞机。</p><h2 id="归途（2024-4-1）"><a href="#归途（2024-4-1）" class="headerlink" title="归途（2024-4-1）"></a>归途（2024-4-1）</h2><p>但是机场地椅子真的不适合睡觉。</p><p>于是又熬了一个通宵。<del>小心别猝死了。</del></p><p>但是这个时候我的手机已经完全没电了。</p><p>更绝望的是我的充电宝也没电了。</p><p>于是我通过利用鸭的电脑来充电的方法总算是苟到了合肥。</p><p>去失物招领处拿回电脑之后发现，电脑也没电了。</p><p>然后这个时候我的手机只剩 $1\%$ 的电量了。</p><p>于是我通过手机的超级省电模式继续拼命的苟，打了一辆出租车成功地返回了学校。</p><p>以上就是可怜队长极其失败的 CCPC Final 之旅。</p><p>话说回来，安大的校赛马上就要进行了啊。似乎还剩两周。</p><p>我是真的想把周五和阿块讨论的那道分块题扔进校赛，但是想想还是算了吧。给新人留点活路。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;居然混到了一个 CCPC Final 的名额……&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://github.com/Challestend/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="难题" scheme="https://github.com/Challestend/tags/%E9%9A%BE%E9%A2%98/"/>
    
      <category term="2023" scheme="https://github.com/Challestend/tags/2023/"/>
    
      <category term="失败" scheme="https://github.com/Challestend/tags/%E5%A4%B1%E8%B4%A5/"/>
    
      <category term="CCPC Final" scheme="https://github.com/Challestend/tags/CCPC-Final/"/>
    
      <category term="成都" scheme="https://github.com/Challestend/tags/%E6%88%90%E9%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Pb. 8</title>
    <link href="https://github.com/Challestend/random-solution-pb-8/"/>
    <id>https://github.com/Challestend/random-solution-pb-8/</id>
    <published>2023-12-17T19:37:07.000Z</published>
    <updated>2024-01-08T17:05:06.147Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://atcoder.jp/contests/agc065/tasks/agc065_d">AtCoder Grand Contest 065 D. Not Intersect</a></p><p>史诗题目，震撼我的大脑和小脑。</p><p>试图挑战时隔已久的 AGC，结果被 A 题当头棒喝（悲</p><a id="more"></a><p>单位圆上分布着 $N$ 个可区分的标记点。试在这些标记点之间连恰好 $M$ 条边，且任意两条不同的边在除去标记点之外的地方不相交，这样的方案数。对 $10^9 + 7$ 取模。</p><p>$1 \leqslant N \leqslant 10^7$，$0 \leqslant M \leqslant N (N - 1) / 2$。</p><p>$\mathtt{3s/1024MB}$。</p><p>$N \leqslant 2$ 直接打表。</p><p>对于 $N \geqslant 3$ 的情况，我们令 $a_{n, m}$ 表示在题设条件上再追加「圆上相邻的标记点之间不连边」，这样的在 $n$ 个标记点之间连 $m$ 条边的方案数。令</p><script type="math/tex; mode=display">f_n = \sum_{m \geqslant 0} a_{n + 3, m} y^m</script><script type="math/tex; mode=display">F = \sum_{n \geqslant 0} f_n x^n</script><p>最终我们需要的答案是 $[x^{N - 2}] [y^M] {(1 + y)}^N F$。</p><p>对于</p><script type="math/tex; mode=display">{(1 + y)}^{n + 3} f_n</script><p>考虑连到 $1$ 号标记点的边，可以分为以下几种情况：</p><p>$1$ 号标记点不和其他标记点连边：</p><p>那么我们将其无视即可。这部分的方案数为</p><script type="math/tex; mode=display">{(1 + y)}^{n + 2} f_{n - 1}</script><p>和 $1$ 号标记点连边的标记点中，标号最小的是 $2$ 号：</p><p>那么只需要标记 $(1, 2)$ 必选即可。这部分的方案数为</p><script type="math/tex; mode=display">y {(1 + y)}^{n + 2} f_n</script><p>和 $1$ 号标记点连边的标记点中，标号最小的是 $3$ 号：</p><p>考虑相邻边，那么除去 $(1, 2)$ 以外的 $n + 2$ 条相邻边还都可以连；考虑非相邻边，那么相当于孤立 $2$ 号标记点之后剩下的 $n + 2$ 个标记点之间连边。再算上必选的 $(1, 3)$，得到这部分的方案数为</p><script type="math/tex; mode=display">y {(1 + y)}^{n + 2} f_{n - 1}</script><p>和 $1$ 号标记点连边的标记点中，标号最小的是 $n + 3$ 号：</p><p>那么只需标记 $(1, n + 3)$ 必选，然后孤立 $1$ 号标记点即可。这部分的方案数为</p><script type="math/tex; mode=display">y {(1 + y)}^{n + 2} f_{n - 1}</script><p>和 $1$ 号标记点连边的标记点中，标号最小的是 $i$ 号（$4 \leqslant i \leqslant n + 2$）：</p><p>相当于将整个圆分成了两部分：左半部分共 $i - 1$ 个标记点；右半部分共 $(n + 3) - (i - 1) + 1 = n - i + 5$ 个标记点。再算上必选的 $(1, i)$，得到这部分的方案数为</p><script type="math/tex; mode=display">[y^m] {(1 + y)}^{i - 1} f_{i - 4} \times y {(1 + y)}^{n - i + 4} f_{n - i + 2}</script><p>整理一下上面的柿子，我们可以得到</p><script type="math/tex; mode=display"> f_n = (1 + 2y) f_{n - 1} + y (1 + y) \sum_{i = 0}^{n - 2} f_i \times f_{n - i - 2}</script><p>也就是说</p><script type="math/tex; mode=display">F = 1 + x (1 + 2y) F + x^2 y (1 + y) F^2</script><p>这是一个关于 $F$ 的一元二次方程。根据 $[x^0] F = 1$，我们可以解得（当然这个柿子我是抄的官方题解）</p><script type="math/tex; mode=display">F = \frac{(1 - x - 2xy) - (1 - x) \sqrt{1 - \frac{4xy}{(1 - x)^2}}}{2xy (1 + y)}</script><p>然后我们看到一坨很丑陋的柿子</p><script type="math/tex; mode=display">\sqrt{1 - \frac{4xy}{(1 - x)^2}}</script><p>根据官方题解给出的奇妙结论</p><script type="math/tex; mode=display">[x^n] [y^m] \sqrt{1 - \frac{4xy}{(1 - x)^2}} = [x^n] \frac{x^m}{(1 - x)^{2m}} \cdot [y^m] \sqrt{1 - 4y} = - \frac{2}{2m - 1} \frac{(n + m - 1)!}{(n - m)! (m - 1)! m!}</script><p>那么我们预处理以下阶乘和阶乘逆元就可以 $\Theta(1)$ 求单个 $[x^n] [y^m] F$ 了。</p><p>最终答案就是 $[x^{N - 2}] [y^M] {(1 + y)}^N F$。枚举两部分 $y$ 的次数就可以 $\Theta(N)$ 求了。</p><p>数学，妙不可言。</p><p>……什么，你问我说不应该是 $[x^{N - 3}]$ 吗？</p><p>不是很懂，反正我按照 $[x^{N - 2}]$ 求是对的，按照 $[x^{N - 3}]$ 求是错的。官方题解写的也是前者。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://atcoder.jp/contests/agc065/tasks/agc065_d&quot;&gt;AtCoder Grand Contest 065 D. Not Intersect&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;史诗题目，震撼我的大脑和小脑。&lt;/p&gt;
&lt;p&gt;试图挑战时隔已久的 AGC，结果被 A 题当头棒喝（悲&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="生成函数" scheme="https://github.com/Challestend/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
      <category term="AtCoder" scheme="https://github.com/Challestend/tags/AtCoder/"/>
    
      <category term="AGC" scheme="https://github.com/Challestend/tags/AGC/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Pb. 7</title>
    <link href="https://github.com/Challestend/random-solution-pb-7/"/>
    <id>https://github.com/Challestend/random-solution-pb-7/</id>
    <published>2023-11-26T18:19:16.000Z</published>
    <updated>2024-01-08T14:54:20.783Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1900/problem/F">Codeforces Round 911 (Div. 2) F. Local Deletions</a></p><p>什么？我连 Div. 2 F 都写出来了？</p><a id="more"></a><p><strong>以下是前置知识。</strong></p><p>对于一个序列 $a_1, a_2, \dots, a_n$，定义 $a_i$ 是一个局部最小值当且仅当</p><script type="math/tex; mode=display">(i = 1 \vee a_i \lt a_{i - 1}) \wedge (i = n \vee a_i \lt a_{i + 1})</script><p>定义 $a_i$ 是一个局部最大值当且仅当</p><script type="math/tex; mode=display">(i = 1 \vee a_i \gt a_{i - 1}) \wedge (i = n \vee a_i \gt a_{i + 1})</script><p>设 $x$ 是一个序列，其中的数字互不相同。定义 <strong>操作</strong> $f_1(x)$ 表示保留 $x$ 中的所有局部最小值，并将这些数字按照原顺序拼接起来；$f_2(x)$ 类似，只不过是保留局部最大值。<strong>操作不给出返回值，而是会直接修改 $x$。</strong></p><p>定义 <strong>函数</strong> $f(x)$ 表示在 $x$ 上按照 $f_1, f_2, f_1, f_2, \dots$ 的顺序应用上述两种操作，直到 $x$ 中只剩下一个数字。那个数字就是 $f(x)$ 的值。</p><p>比如说，考虑 $[1, 3, 2]$。应用 $f_1$ 得到 $[1, 2]$，再应用 $f_2$ 得到 $[2]$。于是 $f([1, 3, 2]) = 2$。</p><p><strong>以下是正文。</strong></p><p>给出一个长度为 $n$ 的排列 $a_1, a_2, \dots, a_n$。$m$ 次询问，每次给出一个区间 $[l, r]$，试求 $f([a_l, a_{l + 1}, \dots, a_r])$。</p><p>$1 \leqslant n, m \leqslant 10^5$。</p><p>$\mathtt{3s/256MiB}$。</p><p>首先我们可以（或感性或理性地）注意到以下几点：</p><ol><li>大部分 $[l, r]$ 区间上的局部最值同时也是整个序列的局部最值</li><li>只有 $[l, r]$ 最靠两侧的两个数字可能不满足上一条</li><li>每次应用 $f_1$ 或 $f_2$，都会使得序列的长度至少减半</li></ol><p>我们可以预处理出整个序列应用 $k$ 次操作之后会变成什么样，记为 $A_k$。</p><p>对于依次针对 $[l, r]$ 的询问，应用 $k$ 次操作之后得到的序列，它的核心部分一定是 $A_k$ 的一个子区间。考虑到最靠两侧的两个数字可能会出问题，我们可以直接把它们拆成散点，然后对于所有拆出来的散点暴力求解。</p><p>这样，最多 $\log n$ 次模拟之后，核心区间就会完全消失，剩下最多 $2 \log n$ 个散点同样暴力求解。</p><p>时间复杂度的一个很松的上界是 $O(n \log n + m \log^2 n)$。但是基本跑不满，在实际数据上的表现非常优秀。</p><p>看了一眼官方题解，看到还提到了一个性质：左右两边的散点数量各自不会超过一个。</p><p>这十分明显：每次核心区间分裂出散点之后，这个新的散点和之前旧的散点必定只能保留一个。</p><p>这样一看的话时间复杂度应该在 $\Theta((n + m) \log n)$ 左右。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1900/problem/F&quot;&gt;Codeforces Round 911 (Div. 2) F. Local Deletions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;什么？我连 Div. 2 F 都写出来了？&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="Codeforces" scheme="https://github.com/Challestend/tags/Codeforces/"/>
    
      <category term="暴力" scheme="https://github.com/Challestend/tags/%E6%9A%B4%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>アイリスの咲く季節が巡り、四十八月の雨が降る</title>
    <link href="https://github.com/Challestend/karen-captain-contest-notes-2023/"/>
    <id>https://github.com/Challestend/karen-captain-contest-notes-2023/</id>
    <published>2023-10-23T21:22:40.000Z</published>
    <updated>2024-04-01T03:03:15.023Z</updated>
    
    <content type="html"><![CDATA[<p>就是可怜队长 CLT 的 2023 下半年的比赛游记了。</p><p>大一那年在集训队里的地位还没有构建起来，大二那年还有疫情影响，导致大三才体验到到处跑打比赛是什么感受。</p><a id="more"></a><h2 id="CCSP-Day-2（2023-10-22）"><a href="#CCSP-Day-2（2023-10-22）" class="headerlink" title="CCSP Day -2（2023-10-22）"></a>CCSP Day -2（2023-10-22）</h2><p>听说冬权老师率领的三队在 ICPC 西安站势如破竹勇夺一块银牌。</p><p>鱼的那一队似乎也银了。现在压力来到一队这边。</p><h2 id="CCSP-Day-1（2023-10-23）"><a href="#CCSP-Day-1（2023-10-23）" class="headerlink" title="CCSP Day -1（2023-10-23）"></a>CCSP Day -1（2023-10-23）</h2><p>试着补了一下昨天的 CF。Div. 1 + 2 + 3 还真是第一次见。</p><p>看了一下 Div. 1 的 A 和 B，感觉不一定能写出来。</p><p>写了一下 C，但是因为低级错误交了五发才过。</p><p>我是罚时国王（绝望</p><h2 id="CCSP-Day-0（2023-10-24）"><a href="#CCSP-Day-0（2023-10-24）" class="headerlink" title="CCSP Day 0（2023-10-24）"></a>CCSP Day 0（2023-10-24）</h2><p>早上试着单人 VP 了一下 <a href="https://atcoder.jp/contests/ttpc2023">東京工業大学プログラミングコンテスト 2023</a>。</p><p>写了 A。</p><p>B 是一个有点技巧的优化建图题，感觉有点麻烦就没写。</p><p>C 是一个不知道怎么回事的数学题，看了一眼题解感觉挺麻烦的就放弃了。</p><p>E 一看感觉很高深，看了题解发现需要用到高斯整数，感觉超出了自己的知识储备就放弃了。</p><p>F 是一个复杂度分析理论 + 大模拟，看了题解发现细节非常多就懒得写了。</p><p>H 是一个以前嘴巴过的字符串题，基本上是套个板子就差不多了的题于是就没写。</p><p>剩下又看了几道题感觉都不会，于是就润了。</p><p>感觉心态莫名其妙地浮躁，平静不下来。这个样子去打比赛怕不是要打铁了。</p><p>马上就要坐飞机赶去沈阳准备打 CCSP 了。话说回来我上一次坐飞机是几岁来着了。</p><p>打车 11：00 左右到了机场，但是因为没有做过飞机不会办理手续于是只能等鸭佬过来。</p><p>午饭品鉴了排骨面，虽然但是一整碗面只有一块排骨而且没有多少肉。感觉被坑了。</p><p>吃完午饭去办理值机的时候发现座位已经没有了。于是被临时调了一个商务舱的座位。于是白嫖了商务舱的服务。</p><p>品鉴了飞机上提供的辣子鸡，还不错。不过橙汁是真的酸。</p><p>下飞机之后又坐了一个小时的地铁到酒店。</p><p>这个时候突然被告知 CCF 之前发过一封邮件，里面有这次 CCSP 的赛程。</p><p>一看发现我超，从 9：00 考到 21：00，整整 12h 的极致坐牢体验。</p><p>然后就去学校报道了。</p><p><img src="/img/游记/CSP 六人组（笔者在左二；没有鱼）.jpg" alt="CSP 六人组（笔者在左二；没有鱼）"></p><p><img src="/img/游记/CSP 高分墙.jpg" alt="CSP 高分墙"></p><p>晚餐和群友一起品鉴了铁锅炖。非常的美味。</p><p>这个时候鱼佬姗姗来迟，跟我们分享了他们队伍在 ICPC 西安站勇夺「顽强拼搏奖」的故事（指比赛结束前 2s 交题并过题）。</p><p><img src="/img/游记/夜间的沈阳街头 1.jpg" alt="夜间的沈阳街头"></p><p><img src="/img/游记/夜间的沈阳街头 2.jpg" alt="夜间的沈阳街头"></p><p><img src="/img/游记/夜间的沈阳街头 3.jpg" alt="夜间的沈阳街头"></p><p><img src="/img/游记/夜间的沈阳街头 4.jpg" alt="夜间的沈阳街头"></p><p><img src="/img/游记/铁锅炖.jpg" alt="铁锅炖"></p><p>晚餐之后群友又去品鉴了沈阳街头小吃。</p><p><img src="/img/游记/安大妈丸子.jpg" alt="安大妈丸子"></p><p>回到酒店之后就葛优躺了。</p><h2 id="CCSP-Day-1（2023-10-25）"><a href="#CCSP-Day-1（2023-10-25）" class="headerlink" title="CCSP Day 1（2023-10-25）"></a>CCSP Day 1（2023-10-25）</h2><p>一整个晚上感觉没太睡好。</p><p>8：30 左右赶到考场。和 XCPC 不一样，这边是给提供电脑的。</p><p>几位群友执意要合影留念。我感觉有点公开处刑就润了。</p><p><img src="/img/游记/白天的沈阳街头.jpg" alt="白天的沈阳街头"></p><p><img src="/img/游记/沈阳师范大学 1.jpg" alt="沈阳师范大学"></p><p><img src="/img/游记/沈阳师范大学 2.jpg" alt="沈阳师范大学"></p><p><img src="/img/游记/CSP 六人组（没有笔者）.jpg" alt="CSP 六人组（没有笔者）"></p><p>但是只能用电脑自带的薄膜键盘。最左下角甚至不是 Ctrl 键是 Fn 键导致非常的难用。</p><p>试机一共两道题。一道是 A + B，另外一道是非常简单的树上 DP。</p><p>正赛一共五道题。然而前三道题的题面加起来一共 7 页。然后 D 题 11 页，E 题 19 页。</p><p>我看不懂，但我大受震撼。</p><p>花了 40min 写出来了 A 题的 60 分。然后又花了 40min 写出来了 B 题的 50 分。</p><p>冷静了一下之后用 20min 切掉了 B 题。然后又用了 20min 把 A 题改到了 95 分。</p><p>接下来的 C 题整整花了我 2.5h（不包括吃午饭的用时），而且还只写出来了一个 80 分的做法。</p><p>这个时候已经 14：00 了。对着剩下两道题看了看感觉实在不是自己能够写得了的题目。于是品鉴玩晚饭 18：00 左右就离场了。</p><p>在外面等了 1h 左右（因为房卡在鸭佬那里），然后鸭佬也出来了。</p><p>和鸭佬一起买了蜜雪冰城，品鉴了麻辣烫。</p><p>本来想去吃麦当劳的，结果进店看了看感觉有点贵，消费力跟不上就放弃了。</p><p><img src="/img/游记/麻辣烫.jpg" alt="麻辣烫"></p><p><img src="/img/游记/夜间的沈阳街头 5.jpg" alt="夜间的沈阳街头"></p><p><img src="/img/游记/夜间的沈阳街头 6.jpg" alt="夜间的沈阳街头"></p><p><img src="/img/游记/夜间的沈阳街头 7.jpg" alt="夜间的沈阳街头"></p><p>回到酒店，被阿烜怒斥说这种提前跑路的行为没有奥林匹克精神。</p><p>然后收到了鱼佬刑满释放的消息。</p><blockquote><p>我「这不给鱼佬颁个『耐力奖』（」</p><p>LXR「『顽强拼搏奖』（」</p></blockquote><h2 id="CCPC-桂林-Day-1（2023-10-26）"><a href="#CCPC-桂林-Day-1（2023-10-26）" class="headerlink" title="CCPC 桂林 Day -1（2023-10-26）"></a>CCPC 桂林 Day -1（2023-10-26）</h2><p>早上六点就醒了然后睡不着了。</p><p>为什么这个酒店一到这个点窗外就会有鸽子啊，在外面又是咕咕叫又是拍翅膀的吵死了（全脑</p><p>这该不会是什么奇妙的叫醒服务吧。</p><p><img src="/img/游记/鸽子.jpg" alt="鸽子"></p><p>中午的时候鸭佬说想去沈阳市区逛一逛，于是换了一家酒店住。</p><p>下午有点困于是一觉睡到五点。然后鸭佬出去逛街了。</p><p>似乎 zhuoer 也在沈阳，本来想去找他的结果拖到 20：00 就没去了。</p><p>以及听说铜首了。这就是 CCSP 的含金量吗 275 铜牌。</p><p>这个酒店房间的隔音似乎很差，甚至能听到隔壁的说话声。</p><p>晚上点了麦当劳，然后又看到了可可爱爱送外卖机器人。</p><p>之前去 EC Final 的时候就想过，机器人是怎么按电梯按钮的，看来是内部系统是连在一起的。</p><p><img src="/img/游记/送外卖机器人.jpg" alt="送外卖机器人"></p><h2 id="CCPC-桂林-Day-0（2023-10-27）"><a href="#CCPC-桂林-Day-0（2023-10-27）" class="headerlink" title="CCPC 桂林 Day 0（2023-10-27）"></a>CCPC 桂林 Day 0（2023-10-27）</h2><p>下午坐飞机去桂林打 CCPC。</p><p><img src="/img/游记/桂林站酒店.jpg" alt="桂林站酒店"></p><p>到九点的时候已经 23：00 了，于是和鸭佬一起品鉴了塔斯汀汉堡。</p><p>本来想点麦门的不过确实是有点贵。</p><h2 id="CCPC-桂林-Day-1（2023-10-28）"><a href="#CCPC-桂林-Day-1（2023-10-28）" class="headerlink" title="CCPC 桂林 Day 1（2023-10-28）"></a>CCPC 桂林 Day 1（2023-10-28）</h2><p>一觉睡到 10：00 没赶上酒店的早餐，于是直接跳过早餐到午餐了。</p><p>和鸭佬一起品鉴了外卖猪脚饭。</p><p>下午正准备去考场的时候遇到了高中同学 SWY。</p><p>振奋 .jpg</p><p>到了考场发现居然开幕式还有表演。</p><p><img src="/img/游记/表演.jpg" alt="表演"></p><p><img src="/img/游记/桂林站考场.jpg" alt="桂林站考场"></p><p><img src="/img/游记/学校墙.jpg" alt="学校墙"></p><p><img src="/img/游记/三条可怜.jpg" alt="三条可怜"></p><p><img src="/img/游记/奇妙的提交与罚时.jpg" alt="奇妙的提交与罚时"></p><p><img src="/img/游记/奇妙的问答.jpg" alt="奇妙的问答"></p><p><img src="/img/游记/我去，柚子厨！.jpg" alt="我去，柚子厨！"></p><p>开幕式进行到一半的时候发现可以看题了，于是看了看 A。</p><p>队友提供了一个思路，写完正准备交发现比赛推迟了。</p><p>过了一会又回去看的时候发现突然可以交了。喜提 6min 罚时。</p><p>然后队友去看 B。似乎是一个 LIS，不过鸭佬直接开始写线段树了。</p><p>这个时候我去看了看 D。花了几分钟验证了一下一个关于欧拉函数的柿子，虽然实际上并没有用到。</p><p>想了想感觉出来了一个关于 D 的性质。写了一发结果 T 了。</p><p>又仔细想了想发现那个性质是不对的。于是就放弃了。</p><p>旁边队友讨论了很久，写了 1h+ 才磕磕绊绊开出 B。</p><p>然后就只剩下大概 30min 开 C 了。队友写了个凸包发现不对，于是就下机了。</p><p>快结束的时候去和 SWY 交流了一下想法，获取到了 C 的正解。</p><p>赛后看了看 dalao 在知乎上发的题解，感觉好像也不是很难（bushi</p><p><img src="/img/游记/热身赛的三条可怜.jpg" alt="热身赛的三条可怜"></p><p>这个时候我的手机已经没电了，去找了个小卖部租了一个充电宝充到了 6%。虽然很少不过还好撑到回到酒店了。</p><p>晚上跟着 HMD dalao 去电玩城打街机。</p><p>看到 dalao 在旁边像八爪鱼一样敲着音游机台感觉十分震撼。</p><p>在旁边找到了一个 STG 的台子，于是打开了《怒首领蜂》。</p><p>经过十把左右的尝试，成功地见到了 4 BOSS。</p><p>然后被打死了。</p><p>最后续了一个币进了五面，结果被道中打成筛子，大败落荒而逃。</p><p><img src="/img/游记/街机厅 1.jpg" alt="街机厅"></p><p><img src="/img/游记/街机厅 2.jpg" alt="街机厅"></p><p><img src="/img/游记/投篮游戏.jpg" alt="投篮游戏"></p><p><img src="/img/游记/（似乎是）格斗游戏.jpg" alt="（似乎是）格斗游戏"></p><p><img src="/img/游记/舞萌 DX 1.jpg" alt="舞萌 DX"></p><p><img src="/img/游记/舞萌 DX 2.jpg" alt="舞萌 DX"></p><p><img src="/img/游记/飞机.jpg" alt="飞机"></p><p><img src="/img/游记/大战怒蜂 1 道中 BOSS（鸭佬拍摄）.jpg" alt="大战怒蜂 1 道中 BOSS（鸭佬拍摄）"></p><h2 id="CCPC-桂林-Day-2（2023-10-29）"><a href="#CCPC-桂林-Day-2（2023-10-29）" class="headerlink" title="CCPC 桂林 Day 2（2023-10-29）"></a>CCPC 桂林 Day 2（2023-10-29）</h2><p>早上 7：30 痛苦地爬起来去打比赛。</p><p>听群友说学校有打印店。于是 7：40 到学校之后极限让鸭佬跑去把板子打印出来了。</p><p>首先把签到 M 写出来了。</p><p>然后鸭佬开 G 我开 I。</p><p>鸭佬写了 1h 的 G 结果 WA 了，让我去看看。</p><p>我看了一眼题面 2min 给出了一个做法，写了写交上去过了。</p><p>然后我感觉 I 有一些想法，结果写了 2h+ 没有写出来。</p><p>中间主办方给发了午餐，一袋（包装上写着「手抓饼」的）鸡块和一个汉堡，还有一小瓶可口可乐。</p><p>这个时候 HMD 发现 K 的数据范围非常巧妙，只需要小小地分类讨论一下就可以暴力过。于是写了 1h 过了。</p><p>这个时候我发现我 I 维护的其中一部分信息可能是冗余的，我把这部分去掉之后就过了。</p><p>然后队友去看 B，给我了一个思路然后我磕磕绊绊地在比赛最后 2min 的时候写了出来交上去过了。</p><p>最后 5 题将近 1000 罚时，喜提铜首。</p><blockquote><p>冬权老师「成功拿铁，庆功宴改开批斗大会。」</p></blockquote><p><img src="/img/游记/正式赛的三条可怜.jpg" alt="正式赛的三条可怜"></p><p><img src="/img/游记/诸神之战（确信）.jpg" alt="诸神之战（确信）"></p><p>晚上又和 HMD 去街机厅打游戏。</p><p>续币两次突破了 5 BOSS，结果我超你这游戏怎么还有 6 面的。</p><p>尝试了舞萌 DX，感觉良好。</p><p>安大附近似乎也有机台，以前都没了解过。改天可以找鸭佬再去打（bushi</p><p><img src="/img/游记/蓝屏.jpg" alt="蓝屏"></p><p><img src="/img/游记/舞萌 DX 2.jpg" alt="舞萌 DX"></p><h2 id="归途-·-其一（2023-10-30）"><a href="#归途-·-其一（2023-10-30）" class="headerlink" title="归途 · 其一（2023-10-30）"></a>归途 · 其一（2023-10-30）</h2><p>一觉睡到 10：00 才起来。</p><p>中午和两名队友一起品鉴了肯德基。</p><p>晚上坐着鸭佬家长公司的员工的车回到了龙河。在那之前一起去品鉴了椰子火锅，可惜忘记拍照了。</p><h2 id="CCPC-深圳-Day-1（2023-11-9）"><a href="#CCPC-深圳-Day-1（2023-11-9）" class="headerlink" title="CCPC 深圳 Day -1（2023-11-9）"></a>CCPC 深圳 Day -1（2023-11-9）</h2><p>鸭佬订的是 22：00 的飞机，于是 19：30 打车去机场。</p><p>花了 50，略贵。</p><p>然后飞机还延误了整整 1h，第二天 1：20 左右才到的深圳。</p><p>然后又做了 1.5h 的公交车和 0.5h 的出租车才辗转到了酒店。</p><h2 id="CCPC-深圳-Day-0（2023-11-10）"><a href="#CCPC-深圳-Day-0（2023-11-10）" class="headerlink" title="CCPC 深圳 Day 0（2023-11-10）"></a>CCPC 深圳 Day 0（2023-11-10）</h2><p>这次订的酒店房间是一张大床，于是要和鸭佬同床共枕了。</p><p>太不像话了，这简直就是楠桐 .jpg</p><p>虽然已经凌晨 4：00 了但是有点饿于是点了华莱士外卖。</p><p>吃完外卖之后完了一会游戏，6：00 左右试图睡觉然而睡不着。</p><p>中午和鸭佬一起品鉴了猪脚饭。非常的好吃。</p><p>然后我就昏迷过去了，一直到 20：00 才醒来。</p><p>这期间鸭佬和 HMD 去逛街了。</p><h2 id="CCPC-深圳-Day-1（2023-11-11）"><a href="#CCPC-深圳-Day-1（2023-11-11）" class="headerlink" title="CCPC 深圳 Day 1（2023-11-11）"></a>CCPC 深圳 Day 1（2023-11-11）</h2><p>因为前一天起的很晚所以晚上完全睡不着。</p><p>1：00 睡着，醒了两次 3：00 去上了个厕所睡不着了。</p><p>鸭佬下楼品鉴了麦当劳早餐，顺便给我带了一份。</p><p>11：30 左右和队友们去深圳科技大学报到。</p><p>报道完之后品鉴了食堂，感觉还行。</p><p>去听了开幕式，感觉就是一堆领导上去放屁。</p><blockquote><p>主持人「开幕式到此结束。请参赛选手前往羽毛球场进行热身。」</p></blockquote><p>热身（指打羽毛球（bushi</p><p>等着进考场的时候有人过来问我说「你们这个三条可怜是什么意思啊。」</p><p>「我只知道九条可怜。」</p><p>于是我就回答说「因为我们是三个人所以叫三条可怜。」</p><p>考场还蛮大的，可以清楚的看到旁边和对面的各一个队伍。</p><p><img src="/img/游记/深圳站考场 1.jpg" alt="深圳站考场"></p><p><img src="/img/游记/深圳站考场 2.jpg" alt="深圳站考场"></p><p>热身赛一共三题。A 是神仙构造；B 是思博暴力；C 是 lxl。</p><p>看了看 A 感觉不会于是交给队友了。</p><p>想了 1.5h 的 C 想出来一个解法，可以归纳成单点插入和区间求和。</p><p>可惜忘记拿板子了敲不出来平衡树。</p><p>感觉平衡树的熟练度还是需要提升一下的，至少提升到像线段树一样随手可以写出来吧。</p><p>赛后和同校队伍交流了 A 题，发现居然要用到异或。干败吓疯 .jpg</p><p>逛了逛考场，用鸭佬的手机拍了几张逆天队名。</p><p><img src="/img/游记/难铜首银摄金.jpg" alt="难铜首银摄金"></p><p><img src="/img/游记/真的是菜狗，吗？.jpg" alt="真的是菜狗，吗？"></p><p>这里甚至还配备有 AED。</p><p><img src="/img/游记/AED.jpg" alt="AED"></p><p>想象一下，参赛选手因为开不出题而突发心脏病，志愿者对其进行紧急救助（bushi</p><p>晚宴懒得去了，和鸭佬回到了酒店。</p><p>19：00 的时候不知道为什么突然非常困于是睡过去了。</p><p>一觉睡到第二天 3：00</p><h2 id="CCPC-深圳-Day-2（2023-11-12）"><a href="#CCPC-深圳-Day-2（2023-11-12）" class="headerlink" title="CCPC 深圳 Day 2（2023-11-12）"></a>CCPC 深圳 Day 2（2023-11-12）</h2><p>早上起来之后直接退房了。</p><p>然后坐另一位可能是参赛选手的车到了考场。</p><p>这个考场查得似乎很严啊还要过金属探测器。</p><p>进场之后发现板子么没带于是极限跑过去拿，成功在比赛开始前 1min 赶回去了。</p><p>开题之后，一看 A 就感觉有思路，于是开始写。</p><p>写了 1h 发现过不了，于是交给队友写 I。</p><p>然后队友写了 1h 的 I 发现过不了，于是我们开始一起看 A。</p><p>然而想了很久的 A 都没有想出来。</p><p>这个时候我看了看 F 感觉可以，于是交了一发过了。</p><p>这个时候已经比赛过去 3h+ 了。</p><p>剩下两个小时我们一直在想 A，然而还是没过。</p><p>中间我推了推 B 的柿子。推出来一个多项式 $\exp$ 一写发现不对。</p><p>又算了算发现上面那个柿子是假的。然后就放弃了。</p><p>最后 1 题，喜提铜牌。连去颁奖典礼的脸都没了。</p><p>三条可怜，大败而归（绝望</p><p>晚上找了一个网吧试图过夜。</p><p>听说在网吧电脑登 Steam 账号会很危险，于是试图登小号。</p><p>但是小号上全都是黄油。网吧电脑上也没有什么会玩的游戏。</p><p>于是玩了一个晚上的手机。到半夜还没电了。</p><p>体验很差，下次不去网吧了。</p><p><img src="/img/游记/恶臭机号.jpg" alt="恶臭机号"></p><p><img src="/img/游记/卷.jpg" alt="卷"></p><h2 id="归途-·-其二（2023-11-13）"><a href="#归途-·-其二（2023-11-13）" class="headerlink" title="归途 · 其二（2023-11-13）"></a>归途 · 其二（2023-11-13）</h2><p>虽然只睡了 2h+ 但是我感觉精神状态非常良好。</p><p>早上和队友们一起品鉴了深圳街头叉烧包。非常的好吃。</p><p>7：20 坐飞机飞往南京。等我们赶到登机口的时候广播已经开始催了。</p><p>最极限的一集。</p><p>到了南京之后马上就被巨大的温差冻得浑身发抖。</p><p>然后就坐火车回合肥，再然后就分头回学校了。</p><h2 id="ICPC-合肥-Day-1（2023-11-25）"><a href="#ICPC-合肥-Day-1（2023-11-25）" class="headerlink" title="ICPC 合肥 Day 1（2023-11-25）"></a>ICPC 合肥 Day 1（2023-11-25）</h2><p>一觉睡到 12：00 才醒来。</p><p>因为龙河直接就在科大旁边，所以可以直接走路过去。</p><p>品鉴了科大的食堂。感觉非常地成功。</p><p>看到考场门口还有一些小游戏，甚至还有奖品。</p><p>可惜我到的时候已经结束了。</p><p><img src="/img/游记/合肥站校徽墙.jpg" alt="合肥站校徽墙"></p><p><img src="/img/游记/击倒 BUG 规则.jpg" alt="击倒 BUG 规则"></p><p><img src="/img/游记/击倒 BUG.jpg" alt="击倒 BUG"></p><p><img src="/img/游记/弹走 BUG 规则.jpg" alt="弹走 BUG 规则"></p><p><img src="/img/游记/弹走 BUG.jpg" alt="弹走 BUG"></p><p>到了考场之后发现 BJ 也在。看到了位置但是有点可惜没有上去打招呼。</p><p>当然块也在。</p><p><img src="/img/游记/三条可怜（夏季限定）.jpg" alt="三条可怜（夏季限定）"></p><p><img src="/img/游记/合肥站三条可怜 1.jpg" alt="合肥站三条可怜"></p><p><img src="/img/游记/合肥站三条可怜 2.jpg" alt="合肥站三条可怜"></p><p>热身赛开始前 10min 左右试题册就发下来了。</p><p>看到周围的队伍都在打开试题册开始看题于是我们也开始了。</p><p>直到过了一会监考人员过来告诉我们说不要打开试题册。</p><p>A 是一个构造题——算是吧——给你 $n$ 个点为根的 DFS 序，让你还原出整棵树。保证有解。</p><p>一开始我有一个想法，就是类似于二叉树前中后序遍历的相互转化一样。</p><p>一个点的子树必定对应了 DFS 序上的一段连续区间。</p><p>后来一想，这是在所有 DFS 序都以 $1$ 号点为根的前提下的性质。</p><p>可能在求以 $2$ 号点为根的 DFS 序的时候，一上来直接访问 $1$ 号点。这样就出锅了。</p><p>看了看 B。乍一看是个很板子的树上背包，但是数据范围给的很大。</p><p>$n k^2$ 差不多有 $1.4 \times 10^9$ 那么大。</p><p>后来再仔细一看，B 的时间给了 $\mathtt{8s}$。</p><p>或许正解真的就是 $\Theta(n k^2)$ 卡常吧。</p><p>C 是一个看上去就很容易搞的数据结构题。</p><p>无穷大的二位格点网格，初始点权均为 $0$。$m$ 次操作 / 询问，每次操作给所有点的点权加上</p><script type="math/tex; mode=display">w \cdot \max\{d - \operatorname{dist}((x, y), (x_0, y_0)), 0\}</script><p>这里 $\operatorname{dist}$ 表示切比雪夫距离；每次询问就是给出一个矩形范围求点权和。</p><p>因为 $m$ 非常地小，甚至可以 $\Theta(m^2)$ 暴力枚举所有修改 - 询问的对来算贡献。</p><p>可惜最后没有写出来。</p><p>最后的 D 是一个 diaomao 知识问答。给了你六道判断题像是「中国科学技术大学是否位于中国的首都——北京」「中国科学技术大学是否流传着一则校园传说，说是第一教学楼的地底埋藏着黄金」。</p><p>比赛结束之后再次品鉴了科大食堂。</p><p>科大是每个队三个人给了一张临时饭卡，里面有 180 元。</p><p>还是非常豪华的。</p><p><img src="/img/游记/中科大校内 1.jpg" alt="中科大校内"></p><p><img src="/img/游记/中科大校内 2.jpg" alt="中科大校内"></p><p><img src="/img/游记/中科大校内 3.jpg" alt="中科大校内"></p><p>晚上和高中同学块一起去逛街。于是提出去之心城。</p><p>在路上的时候和他分享了新生赛的 C 题，就是那道莫队题。</p><p>块在一段时间的思考之后给出了一个在线的做法。</p><p>到了之心城之后发现，因为我也不熟，所以只是逛了逛就离开了。</p><p>只是到处走了走，到处看了看，然后就离开了。</p><p><img src="/img/游记/阿块的酒店 1.jpg" alt="阿块的酒店"></p><p><img src="/img/游记/阿块的酒店 2.jpg" alt="阿块的酒店"></p><blockquote><p>我「太失败了。」</p></blockquote><h2 id="ICPC-合肥-Day-2（2023-11-26）"><a href="#ICPC-合肥-Day-2（2023-11-26）" class="headerlink" title="ICPC 合肥 Day 2（2023-11-26）"></a>ICPC 合肥 Day 2（2023-11-26）</h2><p>早上 8：00 被鸭佬的非常吵闹的闹铃吵醒了。</p><p>到了考场之后本来想到 BJ 的队伍去看一看的，结果实在是没认出来。</p><p>打开题面一看。感觉 B 是一个还行的 $\Theta(n^3)$ 的 DP。</p><p>往后看了看感觉没有那种一看就非常简洁的题目。</p><p>这个时候听到隔壁在说 F 是签到题，于是去看，发现确实。</p><p>用了 15min 左右写了出来，一交发现 WA 了。</p><p>改了改又一交发现 TLE 了。</p><p>又仔细看了看题目描述发现读错题了。</p><p>改了改又一交发现又 TLE 了。</p><p>这个时候旁边公告说是评测机出锅了。于是跳过 F 开始看其他题。</p><p>然后队友去开 E，交了一发过了。</p><p>于是自己去开 G，感觉二分一下再写个 DP 可以，于是用了 1h 的时间写出来了。</p><p>这个时候评测机已经很卡了。随便交一发就需要测个 3min+。</p><p>然后 F 的重测还没好，于是就又交了一发过了。</p><p>虽然过了一会发现一开始的那发重测也过了。于是喜提 1h 多余的罚时。</p><p>这个时候去写 B，然后写到一半发现假了。</p><p>然后队友开始开 J。结果一直开到比赛结束都没有开出来。</p><p>中间我看着 L 可以写，就是个模拟，于是打算写。</p><p>写了些发现不对，又仔细分析了一下发现自己想得太简单了。</p><p>感受到了概率的玄妙之处。</p><p>最后 3 题末尾。滚榜的时候惊人地发现居然还有一块铜牌。</p><p><img src="/img/游记/合肥站滚榜.jpg" alt="合肥站滚榜"></p><p><img src="/img/游记/合肥站 J 题解.jpg" alt="合肥站 J 题解"></p><p>下午去科大小卖部把卡里剩下的 80 块钱全部花掉买了一大堆零食。</p><p>物尽其用 .jpg</p><p><img src="/img/游记/科大美食广场.jpg" alt="科大美食广场"></p><p><img src="/img/游记/美食广场机器人.jpg" alt="美食广场机器人"></p><p><img src="/img/游记/超市里大扫货.jpg" alt="超市里大扫货"></p><h2 id="ICPC-杭州-Day-0（2023-23-8）"><a href="#ICPC-杭州-Day-0（2023-23-8）" class="headerlink" title="ICPC 杭州 Day 0（2023-23-8）"></a>ICPC 杭州 Day 0（2023-23-8）</h2><p>下午和队友们乘坐高铁到达了杭州，然后坐地铁到达了酒店附近。</p><p>地铁还正好是在「打铁关」站换乘。这也太不吉利了。</p><p><img src="/img/游记/打铁关.jpg" alt="打铁关"></p><p>这个时候导航突然开始抽风，带着我们在酒店附近随机游走。</p><p><img src="/img/游记/夜间的杭州街头 1.jpg" alt="夜间的杭州街头"></p><p><img src="/img/游记/夜间的杭州街头 2.jpg" alt="夜间的杭州街头"></p><p><img src="/img/游记/夜间的杭州街头 3.jpg" alt="夜间的杭州街头"></p><p><img src="/img/游记/夜间的杭州街头 4.jpg" alt="夜间的杭州街头"></p><p><img src="/img/游记/夜间的杭州街头 5.jpg" alt="夜间的杭州街头"></p><p>酒店房间里面还是很高级的。</p><p><img src="/img/游记/名言警句.jpg" alt="名言警句"></p><p><img src="/img/游记/俯瞰夜间的杭州街头.jpg" alt="俯瞰夜间的杭州街头"></p><p>晚上和 HMD 一起去品鉴了麦当劳的板烧鸡腿堡套餐</p><p><img src="/img/游记/麦当劳店内.jpg" alt="麦当劳店内"></p><p>听说附近有音游机厅。跟着 HMD 去了最近的万达广场发现不对，机厅在另一家万达。</p><p>结果另一家万达离这里 2km 之远。而且还剩 1h 就有关门了于是今天晚上就放弃了。</p><p>最后一场区域赛了。希望这次能有大金牌吧。</p><h2 id="ICPC-杭州-Day-1（2023-23-9）"><a href="#ICPC-杭州-Day-1（2023-23-9）" class="headerlink" title="ICPC 杭州 Day 1（2023-23-9）"></a>ICPC 杭州 Day 1（2023-23-9）</h2><p>本来今天应该有热身赛的，但是懒得去打了。</p><p>两个队友倒是去打了。</p><p>他们好像开了两题，然后把 CD 两题发给了我。</p><p>场外求助 .jpg</p><p>C 题我一眼就知道是 CF 原题。</p><p>上网搜了搜真的给搜到了。是 CF1840G1/2 的数据范围强化版本。</p><p>看了看 CF 官方题解，研究了一下看懂了。</p><p>D 题是个奇妙的异或题目。不会。</p><h2 id="ICPC-杭州-Day-2（2023-23-10）"><a href="#ICPC-杭州-Day-2（2023-23-10）" class="headerlink" title="ICPC 杭州 Day 2（2023-23-10）"></a>ICPC 杭州 Day 2（2023-23-10）</h2><p>0：00 睡觉，7：00 起床。健康作息。</p><p><img src="/img/游记/俯瞰早晨的杭州街头.jpg" alt="俯瞰早晨的杭州街头"></p><p><img src="/img/游记/深圳站校徽墙.jpg" alt="深圳站校徽墙"></p><p>到了学校发现生态环境非常好。</p><p>河里面还有鹅。而且鹅叫得非常吵。</p><p><img src="/img/游记/鹅.jpg" alt="鹅"></p><p>到了考场，映入眼帘的便是……</p><p>便是原神手办！</p><p>每个队伍给发了三个盲盒手办。</p><p><img src="/img/游记/原神手办.jpg" alt="原神手办"></p><p><img src="/img/游记/三条可怜（冬季限定）.jpg" alt="三条可怜（冬季限定）"></p><p>9：00 开始，8：55 才下发纸质试题集。</p><p>看着好像很厚的一个文件袋。打开一看发现居然有三份英文题面和三份中文题面。</p><p>一打开题面。HMD 开始看 A。我从后往前看。</p><p>过了一会 HMD 的 A 有了想法但是发现假了。</p><p>这个时候我看其他队伍好像开始过 M，于是也开始想。</p><p>结果写了 30min+ 终于艰难地通过了。</p><p>然后鸭佬接手并过了 J。好像是个神奇的交互题的样子。</p><p>看了看 D，简单构造了一下就过了。</p><p>然后我看到了 H。感觉是一个挺简单的基环树概率 DP。</p><p>结果写了大半天喜提 20 多发 RE + WA。</p><p>另一边 HMD 在看 G，但是也是写了大半天喜提 WA。</p><p>最后三题。封榜前铜尾。这一揭榜必然打铁。</p><p>打铁关的诅咒 .jpg</p><p>感觉确实是水平不够。干败吓疯 .jpg</p><p>离开考场前打开了盲盒手办。是芭芭拉的。</p><p><img src="/img/游记/芭芭拉.jpg" alt="芭芭拉"></p><p>下午紧急买了高铁票赶回合肥。</p><p>落荒而逃（bushi</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就是可怜队长 CLT 的 2023 下半年的比赛游记了。&lt;/p&gt;
&lt;p&gt;大一那年在集训队里的地位还没有构建起来，大二那年还有疫情影响，导致大三才体验到到处跑打比赛是什么感受。&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://github.com/Challestend/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="难题" scheme="https://github.com/Challestend/tags/%E9%9A%BE%E9%A2%98/"/>
    
      <category term="2023" scheme="https://github.com/Challestend/tags/2023/"/>
    
      <category term="失败" scheme="https://github.com/Challestend/tags/%E5%A4%B1%E8%B4%A5/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Pb. 6</title>
    <link href="https://github.com/Challestend/random-solution-pb-6/"/>
    <id>https://github.com/Challestend/random-solution-pb-6/</id>
    <published>2023-08-16T09:23:00.000Z</published>
    <updated>2024-01-08T14:54:20.767Z</updated>
    
    <content type="html"><![CDATA[<p>我对我暑假期间的摸鱼行为表示沉痛反省。</p><p>虽然但是，下次还敢。</p><p>有些套路的一道题。但是可以拿来锻炼代码能力。</p><p>来源懒得找了。</p><a id="more"></a><p>给出一个长度为 $n$ 的序列 $a_1, a_2, \dots, a_n$。对于所有 $k = 1, 2, \dots, n$，计算以下问题的答案：</p><ul><li>将序列 $a$ 划分为尽可能少的子区间，使得在每一个子区间内都至多出现 $k$ 个不同的数字。</li></ul><p>比如 $a = [1, 5, 7, 8, 1, 7, 6, 1]$，$k = 1, 2, \dots, 8$ 时的答案依次为 $[8, 4, 3, 2, 1, 1, 1, 1]$。具体方案如下：</p><ul><li>$k = 1$：$[[1], [5], [7], [8], [1], [7], [6], [1]]$</li><li>$k = 2$：$[[1, 5], [7, 8], [1, 7], [6, 1]]$</li><li>$k = 3$：$[[1, 5, 7], [8, 1, 7], [6, 1]]$</li><li>$k = 4$：$[[1, 5, 7, 8], [1, 7, 6, 1]]$</li><li>$k \geqslant 5$：$[[1, 5, 7, 8, 1, 7, 6, 1]]$</li></ul><p>$1 \leqslant n \leqslant 10^5$。$1 \leqslant a_i \leqslant n$。</p><p>$\texttt{2s/256MiB}$。</p><p>假设我们确定了一个 $k$ 的值，考虑这样一个简单直接的思路：每次贪心地删去最长的颜色数不超过 $k$ 的前缀。</p><p>注意到，对于序列的一个任意的长度为 $k$ 的子区间，它里面的颜色数必定不超过 $k$。即每次删去的前缀长度至少为 $k$。设每次确定前缀长度需要的时间复杂度为 $f(n)$，我们有</p><script type="math/tex; mode=display">\sum_{k = 1}^n \left\lceil \frac{n}{k} \right\rceil f(n) = n \log n \cdot f(n)</script><p>于是考虑如何确定前缀长度。做法显然：对于每个位置 $i$，令 $p_i$ 表示 $a_i$ 下一次出现的位置，没有则为 $n + 1$。那么「区间 $[l, r]$ 内的颜色数」就可以转化为「区间 $[l, r]$ 内 $p_i \gt r$ 的 $i$ 的数量」。后者是一个二维数点问题，可以使用主席树求解。</p><p>二分一个 $\log$，主席树一个 $\log$，再加上最外层的部分就是 $\Theta(n \log^3 n)$。</p><p>很遗憾，这样是无法通过本题的。</p><p>平时我们在写线段树的时候，经常会用到线段树上二分的技巧来省去一个 $\log$。但是很遗憾，这种技巧在本题时不适用的。笔者表达能力有限，这部分就留给读者作为习题了。</p><p>考虑回顾整道题。现在我们已经将问题转化为了二维数点问题。但是仔细分析发现，我们的标记点只有 $\Theta(n)$ 个，但是询问次数却可以达到 $\Theta(n \log^2 n)$ 次。考虑想办法平衡时间复杂度。</p><p>考虑根号算法。将原序列每 $\sqrt n$ 个元素分成一个块。首先维护 <code>cnt1[i][j]</code> 表示前 $i$ 个块里面有多少个数字 $\leqslant j$。</p><p>然后考虑散块。注意到块内颜色数必定不会超过 $\sqrt n$，于是考虑块内离散化。即维护 <code>rank[i][j]</code> 表示第 $i$ 个块内 $j$ 的排名（$\lt j$ 的数字的数量 $+1$），<code>cnt2[i][j]</code> 表示 $i$ 这个位置所在的块内，$i$ 本身以及 $i$ 前面的位置里面，有多少个数字块内排名 $\leqslant j$。</p><p>上面三个数组的大小均为 $n^{1.5}$。预处理所需要的时间复杂度自然也是 $\Theta(n^{1.5})$。于是总时间复杂度 $\Theta(n^{1.5} + n \log^2 n)$。</p><p>还有一点，在本题的数据范围下，一个 $n^{1.5}$ 大小的 <code>int</code> 类型数组需要占用约 $\texttt{120MiB}$ 的内存，所以说三个这样的数组其实是开不下的。但是注意到 <code>rank</code> 和 <code>cnt2</code> 两个数组的值都很小，不会超过 $\sqrt n$。而在本题的数据范围下，后者的极限值约为 $320$。因此可以将这两个数组开成 <code>short</code> 类型。这样就可以通过了。</p><p><a href="https://codeforces.com/group/VWnF2uaMLi/contest/468262/submission/219065742">评测记录</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我对我暑假期间的摸鱼行为表示沉痛反省。&lt;/p&gt;
&lt;p&gt;虽然但是，下次还敢。&lt;/p&gt;
&lt;p&gt;有些套路的一道题。但是可以拿来锻炼代码能力。&lt;/p&gt;
&lt;p&gt;来源懒得找了。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="分块" scheme="https://github.com/Challestend/tags/%E5%88%86%E5%9D%97/"/>
    
      <category term="Codeforces" scheme="https://github.com/Challestend/tags/Codeforces/"/>
    
      <category term="贪心" scheme="https://github.com/Challestend/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="数据结构" scheme="https://github.com/Challestend/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>「AHU 2023 校赛 J」沉默乐团</title>
    <link href="https://github.com/Challestend/ahu2310-solution/"/>
    <id>https://github.com/Challestend/ahu2310-solution/</id>
    <published>2023-04-19T10:42:38.000Z</published>
    <updated>2024-01-08T14:54:20.764Z</updated>
    
    <content type="html"><![CDATA[<p>防 AK 题。只可惜多项式技巧不够炉火纯青，差一点就把柿子推出来了。</p><p>所以说爱妈题面呢搞快点 /se</p><p><a href="https://hydro.ac/d/ahuacm/p/AHU2310">传送门</a></p><a id="more"></a><p>或者说这里还有一份形式化题面：</p><p>给定 $n, m, k$ 和 $a, b \in (\mathbb Z_p / \{0\})^n$。令</p><script type="math/tex; mode=display">t_i = ([1, a_i] \cap \mathbb Z)^{b_i}</script><script type="math/tex; mode=display">T = \prod_{i = 1}^n t_i</script><script type="math/tex; mode=display">f(x) = \sum_{s \in T} \left[\sum_{v \in s} [v \geqslant k] = x\right]</script><p>试求 $f(0), f(1), \dots, f(m)$ 的值。对 $998244353$ 取模。</p><p>应该没有写错吧……</p><p>首先忽略所有 $a_i \lt k$ 的演奏家。这部分的贡献是很容易计算的。</p><p>以下只考虑 $a_i \geqslant k$ 的情况。</p><p>我们可以容易地写出第 $i$ 位演奏家的一次演奏的生成函数</p><script type="math/tex; mode=display">(a_i - k + 1)x + (k - 1)</script><p>那么第 $i$ 位演奏家的生成函数就是</p><script type="math/tex; mode=display">((a_i - k + 1)x + (k - 1))^{b_i}</script><p>总体的生成函数就是</p><script type="math/tex; mode=display">\prod_{i = 1}^n ((a_i - k + 1)x + (k - 1))^{b_i}</script><p>于是开始推柿子</p><script type="math/tex; mode=display">\begin{aligned}& \prod_{i = 1}^n ((a_i - k + 1) x + (k - 1))^{b_i} \\= & \prod_{i = 1}^n (k - 1)^{b_i} \prod_{i = 1}^n \left(1 + \frac{a_i - k + 1}{k - 1} x\right)^{b_i} \\= & \prod_{i = 1}^n (k - 1)^{b_i} \exp \sum_{i = 1}^n b_i \ln \left(1 + \frac{a_i - k + 1}{k - 1} x\right) \\= & \prod_{i = 1}^n (k - 1)^{b_i} \exp \sum_{i = 1}^n b_i \sum_{j \geqslant 1} \frac{(-1)^{j - 1} \left(\frac{a_i - k + 1}{k - 1}\right)^j x^j}{j} \\= & \prod_{i = 1}^n (k - 1)^{b_i} \exp \sum_{j \geqslant 1} \frac{(-1)^{j - 1} x^j}{j} \sum_{i = 1}^n b_i \left(\frac{a_i - k + 1}{k - 1}\right)^j\end{aligned}</script><p>注意到里面有一个 $\sum x^j \sum b_i d_i^j$ 的形式。这个该怎么处理呢？</p><script type="math/tex; mode=display">\begin{aligned}& \sum_{j \geqslant 0} x^j \sum_{i = 1}^n b_i d_i^j \\= & \sum_{i = 1}^n b_i \sum_{j \geqslant 0} (d_i x)^j \\= & \sum_{i = 1}^n \frac{b_i}{1 - d_i x} \\= & \frac{\sum_{i = 1}^n b_i \prod_{j \neq i}(1 - d_i x)}{\prod_{i = 1}^n (1 - d_i x)}\end{aligned}</script><p>总结：菜就多刷题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;防 AK 题。只可惜多项式技巧不够炉火纯青，差一点就把柿子推出来了。&lt;/p&gt;
&lt;p&gt;所以说爱妈题面呢搞快点 /se&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hydro.ac/d/ahuacm/p/AHU2310&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="NTT" scheme="https://github.com/Challestend/tags/NTT/"/>
    
  </entry>
  
  <entry>
    <title>ホリゾントに辿り着かなかった者</title>
    <link href="https://github.com/Challestend/ec-final-2023-notes/"/>
    <id>https://github.com/Challestend/ec-final-2023-notes/</id>
    <published>2023-03-25T15:31:43.000Z</published>
    <updated>2024-04-01T02:51:52.298Z</updated>
    
    <content type="html"><![CDATA[<p>有幸参加 2023 年的 ICPC EC Final。</p><p>标题取自《东方眠世界 ~ Wonderful Waking World》的 Stage 6 标题。</p><p>文章内图片由同行 dalao SHX 提供。</p><a id="more"></a><h2 id="Day-1（2023-3-24）"><a href="#Day-1（2023-3-24）" class="headerlink" title="Day 1（2023-3-24）"></a>Day 1（2023-3-24）</h2><p>早上就像早八一样快 8：00 起来，然后和 CHR 打车到合肥南站，坐高铁去上海。</p><p>到了酒店放下东西正准备乘坐电梯下楼的时候，电梯一打开发现里面有一个半人高的机器人呆在里面。然后那个机器人让我们让开。</p><blockquote><p>「你看这个机器人它都没有手，它是怎么按到电梯按钮的呢？」</p><p>「它前面好像有一个盖子。它说不定就是从那个盖子里面伸出来一条触手去按按钮。」</p></blockquote><p>去 SHU 的路上看到了一个邮筒。正在我们感叹都什么年代了还有邮筒的时候，走近一看发现邮筒上贴着一个二维码。</p><p><img src="/img/QQ图片20230329165055.jpg" alt="可可爱爱二维码邮筒（只可远观不可近玩）"></p><p>下午 15：00 有热身赛，我们成功地在 15：30 之前赶到了考场。</p><p><img src="/img/QQ图片20230329165049.jpg" alt="SHU"></p><p><img src="/img/QQ图片20230329165050.jpg" alt="当时甚至正在下着雨"></p><p><img src="/img/QQ图片20230329165045.jpg" alt="热身赛赛场"></p><p><img src="/img/QQ图片20230329165052.jpg" alt="「三条可怜」的英文队名（虽然说原计划是 Karen Sanjou 的来着）"></p><p>看了一下。A 题不难，C 题经典猜数二分（虽然因为题意修改和交互题最后忘记输出换行 WA 了几发）。B 题看了看，不会。跑路了。</p><p>晚上和实验室老学长 HLS 共进晚餐。听到学长们在谈论一些求职相关地话题，感觉完全不懂，插不上话。</p><p>晚上在酒店和 SHX 回忆高中生活。向他展示了我高中时期写的《楠书》。</p><blockquote><p>「下次团建可以推广一下 100% 鲜橙汁。」</p></blockquote><p>晚上和 SHX 一起点了汉堡外卖。过了一会 SHX 接到电话说外卖已经送到门口了。然后我一打开门发现那个机器人就站在门口。它的显示屏提示我按下按钮打开。然后我一按，那个机器人瞬间就开膛破肚，里面放着我们俩的外卖。</p><p><img src="/img/QQ图片20230329165057.jpg" alt="可可爱爱送外卖机器人（拍摄时间本日下午）"></p><p><img src="/img/mmexport1680080464189.jpg" alt="和学长们的外滩合影（像素凑合一下吧）（似乎站得有些靠边上了）"></p><h2 id="Day-2（2023-3-25）"><a href="#Day-2（2023-3-25）" class="headerlink" title="Day 2（2023-3-25）"></a>Day 2（2023-3-25）</h2><p>虽然人在上海，但是还是需要 8：00 起床。</p><blockquote><p>「就像早八一样。」</p></blockquote><p>10：00 开始比赛。扫了一眼题目，M 好像可做但是队友已经在写了。看了看 B 和 J 感觉可以写。</p><p>队友用了半个小时写完了 M，然后我写 J。结果写到一半发现思路不完备，墨迹了一整个小时修正思路才 A 掉。</p><p>然后队友开始开 C 和 F 两题。结果直到比赛结束都没有搞出来。</p><p>到最后喜提两题，铁牌，Honourable。</p><p>吃完晚饭后和实验室群友一起去看《铃芽之旅》。在那之前顺便感受了一下 LC 带过来的没有玩过的桌游《爆炸猫咪》。玩了两个小时喜提一次胜利。</p><p>某些人不管看什么东西都能联想到卷绩点上，我不说是谁。</p><p>晚饭 SHX 吃了一碗盖饭和一碗拉面，然后看完电影回到酒店还跟我说想要吃夜宵。这食量不愧是肥鸭哥（</p><h2 id="Day-3（2023-3-26）"><a href="#Day-3（2023-3-26）" class="headerlink" title="Day 3（2023-3-26）"></a>Day 3（2023-3-26）</h2><p>SHX 去参加华为挑战赛了。自己一个人在酒店打游戏。</p><p>下午没去颁奖典礼。听群友说主持人在台上暴论「三条可怜真可怜啊」。</p><p>好家伙，我们队哪怕有一个人在现场，多少不得冲上去邦邦给 TA 两拳。</p><p>晚上去参加华为晚宴。因为一些原因只能在教练席通过投屏感受现场的氛围。</p><p>抽奖环节喜提一个三等奖。奖品是智能牙刷，蓝牙音箱和台灯三选一。觉得都没啥用于是选了一个蓝牙音箱。</p><p><img src="/img/IMG20230329170016.jpg" alt="可可爱爱蓝牙音箱（拍摄于 AHU 龙河实验室）"></p><p>从 SHU 回来乘坐的是公交车。但是司机师傅不知道为什么把我们带到了完全反方向的一个校门。然后我们必须要横穿整个 SHU 才能到达地铁站。</p><blockquote><p>低情商：把你们放在这里了。我走了。</p><p>高情商：给我们最后一次参观 SHU 校园的机会。</p></blockquote><p>因为不熟悉 SHU 校内构造，我们不得不求助导航。LC 负责看导航并告诉我们该往哪里走。</p><blockquote><p><em>（过了一会）</em></p><p>LXR「稍等一下，我们有人在看导航吗？我们现在是走在正确的道路上的吗？」</p><p>LC「让我看看……<em>（掏出导航）</em>哦不好意思走过了。<em>（带着我们折返）</em>」</p><p><em>（过了一会）</em></p><p>CHR「是不是又没有人在看导航了？」</p><p>LC「确实，让我看看……<em>（掏出导航）</em>哦我们又走错了。<em>（带着我们折返）</em>」</p><p><em>（过了一会）</em></p><p>SHX「这条路看着不对劲啊。我们是不是走错了。」</p><p>LC「让我看看……<em>（掏出导航）</em>哦确实走错了。<em>（带着我们折返）</em>」</p><p>CHR「你这交互系统做得不够好啊。你还得用户询问才能知道走错路了。」</p></blockquote><p>回来的路上最后一次路过了那个带着二维码的可爱小邮筒。</p><blockquote><p>CHR「拍张照片吧。明天就见不到了。」</p></blockquote><p>回来之后在酒店房间里没事干，听到隔壁 313（我们是 311，313 是 LC 和 LXR）。敲门进去一看发现在玩《爆炸猫咪》，于是加入了他们。</p><p>基础描述可以自行查询搜索引擎。</p><p>以下是精彩片段回放：</p><blockquote><p><em>（游戏开局）</em></p><p>我「我有点怂，让我打一张『<ruby>幻觉<rt>See the Future</rt></ruby>』看看情况……好的没问题。」</p><p>MS「这玩的也太怂了。开局肯定是要尽可能多的抽牌啊。怎么会有人开局就抽到『<ruby>爆炸猫<rt>Exploding Kitten</rt></ruby>』呢？你看……<em>（抽到『<ruby>爆炸猫<rt>Exploding Kitten</rt></ruby>』）</em>」</p><p>CHR「好看。」</p><p>MS「『<ruby>调情<rt>Favor</rt></ruby>』！<em>（对着我）</em>给我一张牌。」</p><p>我「我……我……我扔了<em>（打出『<ruby>鬼扯<rt>Nope</rt></ruby>』）</em>也不给你！」</p><p>LC「太棒了！就该这样！宁愿粉身碎骨也不要被剥削！」</p><p><em>（游戏终局：四人存活，抽牌堆里只剩下三张『<ruby>爆炸猫<rt>Exploding Kitten</rt></ruby>』）</em></p><p>CHR「现在再洗牌什么的其实已经没有意义了。你看吧，我就直接明牌了，这里面剩下三张全是炸弹。」</p><p>LC「选择一张你喜欢的炸弹，然后被它炸死吧。」</p><p><em>（巅峰对决：两人存活，抽牌堆里只剩下一张『<ruby>爆炸猫<rt>Exploding Kitten</rt></ruby>』）</em></p><p>我「我……我是不是已经死了。<em>（察觉）</em>欸你们看，这个『<ruby>捣乱<rt>Shuffle</rt></ruby>』的描述，它不是要求我至少要切洗一次抽牌堆吗？如果抽牌堆里只剩下一张牌了，我没有办法切洗我是不是就卡住永远停不下来了。」</p><p>MS「卡 bug 是吧。」</p><p><em>（游戏后期：抽牌堆从上面开始两张牌都是『<ruby>爆炸猫<rt>Exploding Kitten</rt></ruby>』）</em></p><p>CHR「『<ruby>高潮<rt>Attack</rt></ruby>』！」</p><p>我「完了我死了……我需不需要死两次？」</p><p>CHR「一次就够了。」</p><p>我「<em>（准备抽牌）（把手放到抽牌堆顶部）</em>至少……我没有把炸弹放在这个位置。<em>（抽到『<ruby>爆炸猫<rt>Exploding Kitten</rt></ruby>』）</em>」</p><p>LC「<em>（自己放进抽牌堆的『<ruby>爆炸猫<rt>Exploding Kitten</rt></ruby>』被狙击目标抽到了）</em>但是……我也没有害死你啊。我只是让你掉了一点血而已。你上一把可是直接把我斩杀了。」</p><p>我「不是……但是我就只有一滴血啊。<em>（进行我的回合）</em>哦不对，我应该是两滴血，初始自带的『<ruby>泻火<rt>Defuse</rt></ruby>』算是一滴血。」</p><p>LC「有没有人来『<ruby>调情<rt>Favor</rt></ruby>』我啊……有没有人来让我『<ruby>泻火<rt>Defuse</rt></ruby>』啊。」</p><p>CHR「？」</p></blockquote><p><img src="/img/IMG20230329165957.jpg" alt="以此谨记我的上海之旅（拍摄于 AHU 龙河实验室）"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有幸参加 2023 年的 ICPC EC Final。&lt;/p&gt;
&lt;p&gt;标题取自《东方眠世界 ~ Wonderful Waking World》的 Stage 6 标题。&lt;/p&gt;
&lt;p&gt;文章内图片由同行 dalao SHX 提供。&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://github.com/Challestend/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="难题" scheme="https://github.com/Challestend/tags/%E9%9A%BE%E9%A2%98/"/>
    
      <category term="EC Final" scheme="https://github.com/Challestend/tags/EC-Final/"/>
    
      <category term="2023" scheme="https://github.com/Challestend/tags/2023/"/>
    
      <category term="上海" scheme="https://github.com/Challestend/tags/%E4%B8%8A%E6%B5%B7/"/>
    
      <category term="SHU" scheme="https://github.com/Challestend/tags/SHU/"/>
    
      <category term="失败" scheme="https://github.com/Challestend/tags/%E5%A4%B1%E8%B4%A5/"/>
    
  </entry>
  
  <entry>
    <title>Crypt of the Necrodancer：命悬一线，诅咒与血的死之舞会</title>
    <link href="https://github.com/Challestend/crypt-of-the-necrodancer/"/>
    <id>https://github.com/Challestend/crypt-of-the-necrodancer/</id>
    <published>2023-02-07T03:42:07.000Z</published>
    <updated>2024-01-08T14:54:20.755Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://store.steampowered.com/app/247080/Crypt_of_the_NecroDancer/">Steam 页面</a></p><center><font color=##DD0000>MY PULSE IS BEATING LIKE A DRUM,</font></center><center><font color=##DD0000>我的脉管搏动，如同擂鼓，</font></center><center><font color=##DD0000>BUT MY BLOOD IS RUNNING COLD.</font></center><center><font color=##DD0000>但我的血液冰冷，毫无生气。</font></center><a id="more"></a><p><br>前几天在知乎上刷到一个问题「Steam 上最难达成全成就的游戏是哪一款？」然后看到了这个游戏。</p><p>顺便一提，那个问题下面还有人回答 Rabi-Ribi（</p><p>于是打算买来玩一玩，然后发现……</p><p><img src="/img/TIM图片20181221165111.jpg" alt=""></p><p>一进游戏就会有一段剧情，描述的大概是一名叫做凯登丝（Cadence$^\dagger$）的女性不顾家人反对去挑战一座地牢，失足掉了下去，但是没死，被什么人上了一个诅咒，然后挂着这个诅咒在地牢里探索<del>，并逐渐发现背后隐藏的真相</del>。</p><p>Cadence$^\dagger$：n.（说话时语调的）抑扬顿挫，起落；（乐段或乐句的）收束，静止。</p><p>整体玩法大概是肉鸽打怪，但是加上了一个条件：所有行动，包括但不限于移动，攻击（虽然大部分情况下往敌人身上创过去就是攻击），使用道具，都需要<strong>卡着音乐的节拍</strong>，<strong>且每一拍只能行动一步</strong>；玩家角色行动一步之后，所有敌人也都会同时行动一步。</p><p>（凯登丝的话）可以空拍，虽然根据套路不空拍会有更多收益。</p><p>整个游戏一共四大关，每一大关又细分为三个小关和一个 BOSS。</p><p>游戏中敌人死亡会掉落钱币，可以用来在商店购买道具。<del>甚至商店老板也能给杀了。</del></p><p>地图上可能会生成一些钻石，可以用来购买永久升级。</p><p>游戏中还有一个「全区域模式」，需要把四个大关连在一起打完，而且初始血上限固定三格。</p><p>然而截至今天（2023-2-7），「用凯登丝通关全区域模式」这个成就的获取率也仅仅只有 4.0%。</p><p>然后就是这样一个仅仅只是通关就已经十分困难的角色还要不断地更新各种新奇的阴间角色。</p><p>比如说虽然自带一瓶复活药，但是血量锁死半颗心受伤即死空拍即死并且只能使用初始自带的攻击范围一格伤害一颗心的小匕首的 Aria；拥有无穷多颗炸弹但是只能用炸弹输出的 Eli；虽然可以免费获取商店里的商品但是不能拾取钱币否则暴毙的 Monk；一次移动往前跳出去两格，想要只移动一格必须要消耗掉半颗心的血量的 Dorian；简单粗暴地把游戏调到两倍速的 Bolt；以及究极缝合怪 Coda = Aria + Monk + Bolt……</p><p>1-1 的 BPM 是 120，二倍速就是 240——这个数值已经超过了死亡金属的 175，其中后者是正常速率下 BPM 最高的 BOSS 战。这个速度相当于每秒需要按键 3.33 次。</p><p>至于二倍速下的死亡金属，BPM 已经达到了 350。这个速度相当于每秒按键 5.83 次。</p><p>我看懂了，且我大受震撼 .jpg</p><p>建议都去玩一下，再进一步拉低成就获取率（</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://store.steampowered.com/app/247080/Crypt_of_the_NecroDancer/&quot;&gt;Steam 页面&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;font color=##DD0000&gt;MY PULSE IS BEATING LIKE A DRUM,&lt;/font&gt;&lt;/center&gt;

&lt;center&gt;&lt;font color=##DD0000&gt;我的脉管搏动，如同擂鼓，&lt;/font&gt;&lt;/center&gt;

&lt;center&gt;&lt;font color=##DD0000&gt;BUT MY BLOOD IS RUNNING COLD.&lt;/font&gt;&lt;/center&gt;

&lt;center&gt;&lt;font color=##DD0000&gt;但我的血液冰冷，毫无生气。&lt;/font&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="颓废" scheme="https://github.com/Challestend/categories/%E9%A2%93%E5%BA%9F/"/>
    
    
      <category term="肉鸽" scheme="https://github.com/Challestend/tags/%E8%82%89%E9%B8%BD/"/>
    
      <category term="（广义）音游" scheme="https://github.com/Challestend/tags/%EF%BC%88%E5%B9%BF%E4%B9%89%EF%BC%89%E9%9F%B3%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>当一名半东方玩家试图分析觉醒珠的 Masterpieces 符卡会发生什么</title>
    <link href="https://github.com/Challestend/thfmva-masterpieces/"/>
    <id>https://github.com/Challestend/thfmva-masterpieces/</id>
    <published>2023-01-17T02:45:54.000Z</published>
    <updated>2024-01-08T14:54:20.752Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/fan-made-virtual-autography">之前的文章</a></p><p><strong>内含大量图片！</strong></p><a id="more"></a><p>昨天（2022-1-17）觉醒珠突然更新了 Masterpieces，类比一下相当于是永夜抄的 Last Words。</p><p>虽然好像除了 2/3/5 BOSS 以外其他 BOSS 的 Masterpiece 符卡名都和之前版本拆包拆出来的不一样了……</p><p>懒得接说了，看图吧（bushi</p><h2 id="博丽灵梦"><a href="#博丽灵梦" class="headerlink" title="博丽灵梦"></a>博丽灵梦</h2><p>「夢想櫺子」/「梦想棂子」</p><p><a href="https://hanyu.baidu.com/zici/s?from=aladdin&amp;query=%E6%A3%82&amp;srcid=51368&amp;wd=%E6%A3%82">https://hanyu.baidu.com/zici/s?from=aladdin&amp;query=%E6%A3%82&amp;srcid=51368&amp;wd=%E6%A3%82</a></p><p>梦想窗户格子（bushi</p><p>之前版本的游戏内符卡名叫做「夢想朱印」/「梦想朱印」。</p><p><img src="/img/THFmVA/A1.jpg" alt=""></p><p><img src="/img/THFmVA/A2.jpg" alt=""></p><p><img src="/img/THFmVA/A3.jpg" alt=""></p><p><img src="/img/THFmVA/A4.jpg" alt=""></p><p><img src="/img/THFmVA/A5.jpg" alt=""></p><h2 id="雾雨魔理沙"><a href="#雾雨魔理沙" class="headerlink" title="雾雨魔理沙"></a>雾雨魔理沙</h2><p>「ブレイジングツアー・幻想郷」/「Blazing Tour（炫目之旅）・幻想乡」</p><p>之前版本的游戏内符卡名叫做「移り気なマスタースパーク」/「性情不定的 Master Spark（极限火花）」。</p><p><img src="/img/THFmVA/B1.jpg" alt=""></p><p><img src="/img/THFmVA/B2.jpg" alt=""></p><p><img src="/img/THFmVA/B3.jpg" alt=""></p><h2 id="宇佐见堇子"><a href="#宇佐见堇子" class="headerlink" title="宇佐见堇子"></a>宇佐见堇子</h2><p>「ドローンに引かれて善光寺参り」/「被无人机引到善光寺参拜」</p><p>好像官方专辑里面有一首歌叫做《被牛引到善光寺参拜》的来着。</p><p>之前版本的游戏内符卡名叫做「ギガ級ポケット Wi-Fi」/「GiB 级口袋 Wi-Fi」。</p><p><img src="/img/THFmVA/C1.jpg" alt=""></p><p><img src="/img/THFmVA/C2.jpg" alt=""></p><p><img src="/img/THFmVA/C3.jpg" alt=""></p><h2 id="藏人未见"><a href="#藏人未见" class="headerlink" title="藏人未见"></a>藏人未见</h2><p>「スペルカードアタック」/「Spellcard Attack」（符卡攻击）</p><p>这符卡名……确定就叫这个吗……</p><p>之前版本的游戏内符卡名叫做「ファイナルラブレター」/「Final Love Letter」（最后的情书）。</p><p><img src="/img/THFmVA/11.jpg" alt=""></p><p><img src="/img/THFmVA/12.jpg" alt=""></p><h2 id="平贺生然"><a href="#平贺生然" class="headerlink" title="平贺生然"></a>平贺生然</h2><p>「丑の日参り」/「丑日参拜」</p><p>之前版本的游戏内符卡名也是这个。</p><p><img src="/img/THFmVA/21.jpg" alt=""></p><p><img src="/img/THFmVA/22.jpg" alt=""></p><p><img src="/img/THFmVA/23.jpg" alt=""></p><p><img src="/img/THFmVA/24.jpg" alt=""></p><p><img src="/img/THFmVA/25.jpg" alt=""></p><p><img src="/img/THFmVA/26.jpg" alt=""></p><p><img src="/img/THFmVA/27.jpg" alt=""></p><h2 id="八云紫"><a href="#八云紫" class="headerlink" title="八云紫"></a>八云紫</h2><p>「ルドゥスとパイディアの決別」/「Ludus 和 Paidia 的诀别」</p><p>关于 Ludus 和 Paidia 这两个词，我在<a href="https://www.mighty-boards.com/blog/game-studies-101/ludus-and-paidia">这篇文章</a> 中找到了一些解释。这篇文章是英文的，因此我会在下面提取一些关键信息：</p><blockquote><p>Back in the 1950s, <strong>the French sociologist Roger Caillois</strong> already had the same thought. He tried to make sense of play by breaking it$^\dagger$ down into <strong>a whole taxonomy of different concepts</strong> – <strong>different kinds</strong> of play, if you will. We don’t need to get into all the details of this taxonomy here, but let’s take a look at his idea that all forms of play exist between two opposing poles: <strong>paidia and ludus</strong>.</p><p>$^\dagger$ 指前文中的 play，即「玩」这一词汇。</p></blockquote><p>大意：法国社会学家 Roger Caillois 试图将「玩」这一词汇分割成更多更加精细的词汇——用来具体形容怎么玩的词汇。他的理论提到，「玩」可以被分为两类——Paidia 和 Ludus。</p><p>顺便一提，ludus 的源语言是拉丁语，包含 “play, game, sport, training” 等含义；paidia 的源语言是希腊语 παιδιά，包含 “childish play, amusement” 等含义。</p><blockquote><p>When children first begin to play, Caillois says, there is <strong>no structure to what they’re doing</strong>. Their play is a kind of joyful excess of energy – running around with <strong>no apparent purpose</strong>, throwing things, taking on, dropping and reshaping roles in games of make-believe. <strong>This is paidia.</strong> With enough repetition, though, this free, anarchic kind of play starts to take on structure and form. <strong>Rules are established</strong> to regulate it. It becomes a focused attempt at facing up to a challenge by strictly regulated means. <strong>This is ludus.</strong> </p></blockquote><p>大意：Paidia 表示毫无目的地瞎 jb 闹；Ludus 表示在遵循某种特定的，被公认的规则的前提下进行的游戏。</p><p>或许可以翻译成「守序和混乱的诀别」？（小声</p><p>盘古开天地（bushi</p><p>之前版本的游戏内符卡名也是这个。</p><p><img src="/img/THFmVA/31.jpg" alt=""></p><p><img src="/img/THFmVA/32.jpg" alt=""></p><p><img src="/img/THFmVA/33.jpg" alt=""></p><p><img src="/img/THFmVA/34.jpg" alt=""></p><p><img src="/img/THFmVA/35.jpg" alt=""></p><p><img src="/img/THFmVA/36.jpg" alt=""></p><p><img src="/img/THFmVA/37.jpg" alt=""></p><h2 id="刺田严姬"><a href="#刺田严姬" class="headerlink" title="刺田严姬"></a>刺田严姬</h2><p>「光鴉二重結界」/「光鸦二重结界」</p><p>之前版本的游戏内符卡名叫做「光烏陣」/「光乌阵」。</p><p><img src="/img/THFmVA/41.jpg" alt=""></p><p><img src="/img/THFmVA/42.jpg" alt=""></p><p><img src="/img/THFmVA/43.jpg" alt=""></p><p><img src="/img/THFmVA/44.jpg" alt=""></p><h2 id="仙觉寺鞠子"><a href="#仙觉寺鞠子" class="headerlink" title="仙觉寺鞠子"></a>仙觉寺鞠子</h2><p>「<ruby>閄<rt>ものかげからきゅうにとびだしてひとをおどろかせるときにはっするこえ</rt></ruby>」/「<ruby>閄<rt>人躲在暗处突然发出的使人惊骇的声音</rt></ruby>」</p><p>关于「閄」这个字，根据给出的解释，对应的汉语读音应该是 huò。</p><p>查到日语似乎可以读作「こく」或者是「わく」，但是输入法似乎打不出来。</p><p>年度最佳 diaomao 符卡名确信。虽然今年才不到二十天。</p><p>之前版本的游戏内符卡名也是这个。</p><p><img src="/img/THFmVA/51.jpg" alt=""></p><p><img src="/img/THFmVA/52.jpg" alt=""></p><p><img src="/img/THFmVA/53.jpg" alt=""></p><p><img src="/img/THFmVA/54.jpg" alt=""></p><p><img src="/img/THFmVA/55.jpg" alt=""></p><p><img src="/img/THFmVA/56.jpg" alt=""></p><h2 id="大伴家珠叶"><a href="#大伴家珠叶" class="headerlink" title="大伴家珠叶"></a>大伴家珠叶</h2><p>「アルスポエティカの祝砲」/「Ars Poetica（《诗艺》）的礼炮」</p><p>在 Wikipedia 上找到<a href="https://en.wikipedia.org/wiki/Ars_Poetica">这样一个词条</a>。</p><p>虽然没看，但是好像很厉害的样子。</p><p>之前版本的游戏内符卡名叫做「鎮守府に水漬く屍」/「镇守府的沉水尸骸」。</p><p><img src="/img/THFmVA/61.jpg" alt=""></p><p><img src="/img/THFmVA/62.jpg" alt=""></p><p><img src="/img/THFmVA/63.jpg" alt=""></p><p><img src="/img/THFmVA/64.jpg" alt=""></p><h2 id="轩端目目"><a href="#轩端目目" class="headerlink" title="轩端目目"></a>轩端目目</h2><p>「サイトマエステラ」/「Site Maestra」</p><p>查了一下，首先 Site Maestra 整个的格式 neta 自东方幻想乡的四面道中 BGM，那首歌的名字叫做 Alice Maestra。</p><p>这里的 maestra 是意大利语词汇 maestro 的阴性形式，似乎是可以笼统地翻译为 master。</p><p>那么 Site Maestra 是不是就是 Site Master，即「网站大师」呢？</p><p>润色能力有限，就这样吧。</p><p>之前版本的游戏内符卡名叫做「京都グランドオーダー」/「京都 Grand Order」。</p><p>搜 Grand Order 基本上只能搜到 FGO……</p><p><img src="/img/THFmVA/71.jpg" alt=""></p><p><img src="/img/THFmVA/72.jpg" alt=""></p><p><img src="/img/THFmVA/73.jpg" alt=""></p><p><img src="/img/THFmVA/74.jpg" alt=""></p><p><img src="/img/THFmVA/75.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/fan-made-virtual-autography&quot;&gt;之前的文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内含大量图片！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="颓废" scheme="https://github.com/Challestend/categories/%E9%A2%93%E5%BA%9F/"/>
    
    
      <category term="东方" scheme="https://github.com/Challestend/tags/%E4%B8%9C%E6%96%B9/"/>
    
      <category term="STG" scheme="https://github.com/Challestend/tags/STG/"/>
    
      <category term="RPG" scheme="https://github.com/Challestend/tags/RPG/"/>
    
  </entry>
  
  <entry>
    <title>浅谈基于转置原理的多项式多点求值算法</title>
    <link href="https://github.com/Challestend/polynomial-multipoint/"/>
    <id>https://github.com/Challestend/polynomial-multipoint/</id>
    <published>2022-12-10T04:36:05.000Z</published>
    <updated>2024-01-08T14:54:20.746Z</updated>
    
    <content type="html"><![CDATA[<p>考虑一个经典的问题。给定 $n$ 次多项式</p><script type="math/tex; mode=display">F(x)=\sum_{i=0}^nf_ix^i</script><p>和 $n+1$ 个点值 $a_0,a_1,\dots,a_n$。您需要对于每个 $k$，求出 $b_k=F(a_k)$，对 $998244353$ 取模。</p><p>据说以前这种问题都是采用多项式取模的方法。但是现在我们有新科技了。</p><p>本篇文章将会以我个人认为十分通俗易懂的方式来详细地讲解这种新科技。</p><p>参考文献略。</p><a id="more"></a><h2 id="线性算法"><a href="#线性算法" class="headerlink" title="线性算法"></a>线性算法</h2><p>若一个算法可以被看作是方阵 $A$，输入向量 $\mathbf v$，输出向量 $A\mathbf v$，则称该算法为线性算法。</p><p>比如说，FFT 就是一个线性算法，其对应的方阵为</p><script type="math/tex; mode=display">\begin{bmatrix}1&1&1&\cdots&1\\1&\omega_n^1&\omega_n^2&\cdots&\omega_n^n\\1&\omega_n^2&\omega_n^4&\cdots&\omega_n^{2n}\\\vdots&\vdots&\vdots&\ddots&\vdots\\1&\omega_n^n&\omega_n^{2n}&\cdots&\omega_n^{n^2}\\\end{bmatrix}</script><h2 id="转置原理"><a href="#转置原理" class="headerlink" title="转置原理"></a>转置原理</h2><p>对于一个线性算法，设其对应的方阵 $A$ 满足</p><script type="math/tex; mode=display">A=E_1E_2\cdots E_n</script><p>其中 $E_i$ 均为初等矩阵。则有</p><script type="math/tex; mode=display">A^{\mathrm T}=E_n^{\mathrm T}\cdots E_2^{\mathrm T}E_1^{\mathrm T}</script><p>这里稍微复习一下，初等矩阵指的是只进行一次初等变换的矩阵。这里的初等变换包括</p><ol><li>$v_i\leftarrow v_i\cdot k$</li><li>$v_i\leftarrow v_i+v_j\cdot k$</li></ol><p>如果 $E_i$ 对应第一种初等变换，它的转置就是自身；如果是第二种，转置后 $i$ 和 $j$ 互换，即对应的初等变换变为 $v_j\leftarrow v_j+v_i\cdot k$。</p><p>这里的关键点在于，如果 $A\mathbf v$ 比较好求，而 $A^{\mathrm T}\mathbf v$ 相对难求，我们可以将求 $A\mathbf v$ 的过程分析出来，把每一步转置然后倒序执行，就可以求出 $A^{\mathrm T}\mathbf v$ 了。</p><h2 id="多项式乘积的转置"><a href="#多项式乘积的转置" class="headerlink" title="多项式乘积的转置"></a>多项式乘积的转置</h2><p>考虑两个多项式</p><script type="math/tex; mode=display">F(x)=\sum_{i=0}^nf_ix^i</script><p>和</p><script type="math/tex; mode=display">G(x)=\sum_{i=0}^mg_ix^i</script><p>令它们的乘积为</p><script type="math/tex; mode=display">H(x)=\sum_{i=0}^{n+m}h_ix^i</script><p>考虑计算这一乘积的算法。为了便于理解，我们将 $G(x)$ 视作常量，$F(x)$ 和 $H(x)$ 视作变量，考虑一个作用在如下 $(n+1)+(n+m+1)=2n+m+2$ 维列向量上的线性算法</p><script type="math/tex; mode=display">\begin{bmatrix}f_0\\f_1\\f_2\\\vdots\\f_n\\h_0\\h_1\\\vdots\\h_{n+m}\end{bmatrix}</script><p>初始时 $f_i$ 已经有值，而 $h_i$ 为 $0$。算法流程如下：</p><ol><li>循环变量 $i\leftarrow 0\dots n+m$</li><li>循环变量 $j\leftarrow \max(0,i-m)\dots\min(n,i)$</li><li>执行 $h_i\leftarrow h_i+f_j\times g_{i-j}$</li></ol><p>考虑这一过程的转置，其流程如下：</p><ol><li>循环变量 $i\leftarrow n+m\dots 0$</li><li>循环变量 $j\leftarrow \min(n,i)\dots\max(0,i-m)$</li><li>执行 $f_j\leftarrow f_j+h_i\times g_{i-j}$</li></ol><p>相当于在已知 $H(x)$ 和 $G(x)$ 的情况下求解 $F(x)$。其中</p><script type="math/tex; mode=display">f_k=\sum_{i-j=k}h_ig_j=\sum_{i+(m-j)=m+k}h_ig^{\mathrm R}_{m-j}=\sum_{i+j=m+k}h_ig^{\mathrm R}_j</script><p>其中 $g^{\mathrm R}_i=g_{m-i}$，即 $G$ 的所有系数翻转过来。</p><p>于是我们可以如下定义多项式乘积的转置</p><script type="math/tex; mode=display">[x^k](H\times^{\mathrm T}G)=[x^{m+k}](H\times G^{\mathrm R})</script><p>不难发现，如果 $F(x)$ 是 $n$ 次多项式，$G(x)$ 是 $m$ 次多项式，那么 $(F\times^{\mathrm T}G)(x)$ 会是 $n-m$ 次多项式。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>令</p><script type="math/tex; mode=display">A=\begin{bmatrix}1&a_0^1&a_0^2&\cdots&a_0^n\\1&a_1^1&a_1^2&\cdots&a_1^n\\1&a_2^1&a_2^2&\cdots&a_2^n\\\vdots&\vdots&\vdots&\ddots&\vdots\\1&a_n^1&a_n^2&\cdots&a_n^n\\\end{bmatrix}\qquad\varphi=\begin{bmatrix}f_0\\f_1\\f_2\\\vdots\\f_n\end{bmatrix}\qquad\beta=\begin{bmatrix}b_0\\b_1\\b_2\\\vdots\\b_n\end{bmatrix}</script><p>我们有</p><script type="math/tex; mode=display">A\varphi=\beta</script><p>考虑</p><script type="math/tex; mode=display">\gamma=A^{\mathrm T}\varphi=\begin{bmatrix}1&1&1&\cdots&1\\a_0^1&a_1^1&a_2^1&\cdots&a_n^1\\a_0^2&a_1^2&a_2^2&\cdots&a_n^2\\\vdots&\vdots&\vdots&\ddots&\vdots\\a_0^n&a_1^n&a_2^n&\cdots&a_n^n\\\end{bmatrix}\begin{bmatrix}f_0\\f_1\\f_2\\\vdots\\f_n\end{bmatrix}=\begin{bmatrix}c_0\\c_1\\c_2\\\vdots\\c_n\end{bmatrix}</script><p>不难发现</p><script type="math/tex; mode=display">c_k=\sum_{i=0}^nf_ia_i^k</script><p>定义生成函数</p><script type="math/tex; mode=display">C(x)=\sum_{i=0}^n\frac{f_i}{1-a_ix}</script><p>则</p><script type="math/tex; mode=display">c_k=[x^k]C(x)</script><p>这里 $C(x)$ 可以通过经典的分治 NTT 求解。令</p><script type="math/tex; mode=display">C_{l,r}(x)=\frac{P_{l,r}(x)}{Q_{l,r}(x)}</script><p>对于叶子节点 $[i,i]$，执行</p><script type="math/tex; mode=display">P_{i,i}(x)=f_i</script><script type="math/tex; mode=display">Q_{i,i}(x)=1-a_ix</script><p>对于内部节点 $[l,r]$，执行</p><script type="math/tex; mode=display">P_{l,r}(x)=P_{l,m}(x)Q_{m+1,r}(x)+P_{m+1,r}(x)Q_{l,m}(x)</script><script type="math/tex; mode=display">Q_{l,r}(x)=Q_{l,m}(x)Q_{m+1,r}(x)</script><p>注意到，$Q_{l,r}(x)$ 实际上和 $f_i$ 没有任何关系，我们可以把它们视作常量。然后把剩下的 $(n+1)^2$ 个 $P_{l,r}(x)$ 全部塞进一个向量里，那么上述分治过程就可以视作是一个针对该向量的线性算法。</p><p>我们可以写得再清晰一些，比如说像下面这样</p><script type="math/tex; mode=display">P_{l,r}(x)\leftarrow P_{l,r}(x)+P_{l,m}(x)\times Q_{m+1,r}(x)</script><script type="math/tex; mode=display">P_{l,r}(x)\leftarrow P_{l,r}(x)+P_{m+1,r}(x)\times Q_{l,m}(x)</script><p>以及最后一步的</p><script type="math/tex; mode=display">C(x)\leftarrow C(x)+P_{0,n}(x)\times Q_{0,n}^{-1}(x)</script><p>那么转置之后，第一步自然就是</p><script type="math/tex; mode=display">B_{0,n}(x)\leftarrow B_{0,n}(x)+F(x)\times^{\mathrm T}Q_{0,n}^{-1}(x)</script><p>想不明白为什么吗？我也想不明白。</p><p>在这之后，从上向下分治，对于内部节点 $[l,r]$，执行</p><script type="math/tex; mode=display">B_{l,m}(x)\leftarrow B_{l,m}(x)+B_{l,r}(x)\times^{\mathrm T}Q_{m+1,r}(x)</script><script type="math/tex; mode=display">B_{m+1,r}(x)\leftarrow B_{m+1,r}(x)+B_{l,r}(x)\times^{\mathrm T}Q_{l,m}(x)</script><p>最终对于叶子节点 $[i,i]$，$B_{i,i}(x)$ 必定会是一个 $0$ 次多项式，其仅有的一个常数项系数就是我们要求的 $b_i$ 了。</p><p>当然，如果多项式次数和点值数量不对等也很容易处理，用 $0$ 补齐即可。</p><p><a href="https://www.luogu.com.cn/problem/P5050">请问您要来点板子题吗 qwq？</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这个算法好在哪里：</p><ol><li>常数小：<code>std::vector</code> 也不必太过担心被卡常。</li><li>代码实现难度小：只要能够完全理解整个算法流程，便能够十分迅速且正确地写出代码。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;考虑一个经典的问题。给定 $n$ 次多项式&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
F(x)=\sum_{i=0}^nf_ix^i&lt;/script&gt;&lt;p&gt;和 $n+1$ 个点值 $a_0,a_1,\dots,a_n$。您需要对于每个 $k$，求出 $b_k=F(a_k)$，对 $998244353$ 取模。&lt;/p&gt;
&lt;p&gt;据说以前这种问题都是采用多项式取模的方法。但是现在我们有新科技了。&lt;/p&gt;
&lt;p&gt;本篇文章将会以我个人认为十分通俗易懂的方式来详细地讲解这种新科技。&lt;/p&gt;
&lt;p&gt;参考文献略。&lt;/p&gt;
    
    </summary>
    
      <category term="学术" scheme="https://github.com/Challestend/categories/%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="NTT" scheme="https://github.com/Challestend/tags/NTT/"/>
    
      <category term="多项式" scheme="https://github.com/Challestend/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
      <category term="矩阵" scheme="https://github.com/Challestend/tags/%E7%9F%A9%E9%98%B5/"/>
    
      <category term="多点求值" scheme="https://github.com/Challestend/tags/%E5%A4%9A%E7%82%B9%E6%B1%82%E5%80%BC/"/>
    
      <category term="线性代数" scheme="https://github.com/Challestend/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
      <category term="转置原理" scheme="https://github.com/Challestend/tags/%E8%BD%AC%E7%BD%AE%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>ICPC 2022 Regional 合肥站游记</title>
    <link href="https://github.com/Challestend/icpc-2022-regional-hefei-notes/"/>
    <id>https://github.com/Challestend/icpc-2022-regional-hefei-notes/</id>
    <published>2022-11-20T12:14:52.000Z</published>
    <updated>2024-01-08T14:54:20.739Z</updated>
    
    <content type="html"><![CDATA[<p>今天本来会有一场大物的考试。还好我因为打 ICPC 申请了免考不然就要在大物考场上丢人了。</p><p>前 3h 写出来 6 题。最后 2h 我在写一道数学题，SHX 在写一道数据结构题，结果都没有写出来。</p><p>本来以为写出来 7-8 题可以混一块金牌的。结果赛后一查排行榜，8 题 42 队，7 题 67 队，结果金牌只有 35 块。</p><p>也就是说无论如何都没有大金牌了 /kk</p><p>最后 rank 72 拿了一块银牌。</p><p>这么说来上周的 CCPC 其实是最有希望拿金牌的。如果我能够少浪费一时间的话。</p><p>害群之马竟是我自己 /kk</p><a id="more"></a><h1 id="我写出来的题"><a href="#我写出来的题" class="headerlink" title="我写出来的题"></a>我写出来的题</h1><h2 id="A-Welcome-to-USTC"><a href="#A-Welcome-to-USTC" class="headerlink" title="A. Welcome to USTC"></a>A. Welcome to USTC</h2><p>给定一个字符串 $S$。保证 $S$ 中恰好包含 $\mathtt{U},\mathtt{S},\mathtt{T},\mathtt{C}$ 四个大写英文字母各一个，其他字符均为小写英文字母，且 $\mathtt{USTC}$ 在 $S$ 中作为<strong>子序列</strong>出现。</p><p>每次操作可以交换 $S$ 中的两个相邻字符。现要让 $\mathtt{USTC}$ 在 $S$ 中作为<strong>子串</strong>出现，试求最小操作次数。</p><p>$4\leqslant |S|\leqslant 10^4$。</p><p>$\mathtt{1s/256MB}$。</p><p>设 $\mathtt{U},\mathtt{S},\mathtt{T},\mathtt{C}$ 的下标依次为 $a,b,c,d$，答案显然为</p><script type="math/tex; mode=display">(b-a-1)+2(c-b-1)+(d-c-1)</script><p>时间复杂度 $O(|S|)$，空间复杂度 $O(|S|)$。</p><h2 id="G-Game-Plan"><a href="#G-Game-Plan" class="headerlink" title="G. Game Plan"></a>G. Game Plan</h2><p>您有一个集合 $S$。初始时 $S=\{0\}$。现在您可以进行 $t$ 次操作。在第 $i$ 次操作中，您可以在如下两项中任选其一：</p><ol><li>$S\leftarrow S\cap\{a_i\}$</li><li>$S\leftarrow S\cap\{b_i\}$</li></ol><p>（原题中还有一个值域上界，不过现在看来这个不重要）</p><p>试求 $t$ 次操作后 $\operatorname{mex}(S)$ 的最大值。</p><p>$1\leqslant n\leqslant 10^9$，$1\leqslant t\leqslant 10^6$，$1\leqslant a_i,b_i\leqslant n$。其中 $n$ 为值域上界。</p><p>$\mathtt{1s/256MB}$。</p><p>考虑建图。$n+1$ 个，依次标号为 $1,2,\dots,n+1$。对于每一个 $i$，我们连一条边 $(a_i,b_i)$。</p><p>现在问题转化为，在这张图上，对于每条边标记其中一个端，问未被标记过的标号最小的的标号最大是多少。</p><p>考虑到，如果一个连通块是一棵树，那么我们不得不放弃其中的一个不标记。那么显然放弃标号最大的是最优策略。</p><p>但是在树的基础上，再随便增加一条边，我们都能够做到标记这个连通块中的所有。</p><p>以上。时间复杂度 $O(t\log t)$，空间复杂度 $O(t)$。</p><h2 id="H-Jackpot"><a href="#H-Jackpot" class="headerlink" title="H. Jackpot"></a>H. Jackpot</h2><p>黑板上写有 $n$ 个正整数 $k+1$。每次操作您可以选择一个大于 $1$ 的整数，令其为 $x$，然后它有 $\frac{1}{x-1}$ 的概率变为 $x-1$，$\frac{1}{x-1}$ 的概率变为 $x-2$……$\frac{1}{x-1}$ 的概率变为 $1$。</p><p>您的目的是让所有数都变为 $1$。试求期望操作次数。对 $10^9+7$ 取模。</p><p>多组数据。$1\leqslant n\leqslant 10^9$，$2\leqslant k\leqslant 10^3$。$T\leqslant 10^3$。</p><p>$\mathtt{1s/256MB}$。</p><p>容易发现这些数都是两两独立的。令 $E(i)$ 表示将一个数从 $i$ 变到 $1$ 的期望操作次数，可以直接得出答案等于 $n\cdot E(k+1)$。</p><p>$E(i)$ 也很容易计算。我们可以进行如下的预处理</p><script type="math/tex; mode=display">E(i)=1+\frac{1}{i-1}\sum_{1\leqslant j\lt i}E(j)</script><p>时间复杂度 $O(k^2+T)$，空间复杂度 $O(k)$。</p><h1 id="SHX-写出来的题"><a href="#SHX-写出来的题" class="headerlink" title="SHX 写出来的题"></a>SHX 写出来的题</h1><h2 id="B-Genshin-Impact"><a href="#B-Genshin-Impact" class="headerlink" title="B. Genshin Impact"></a>B. Genshin Impact</h2><p>您可以释放一种火魔法。这种火魔法每 $y$ 秒可以释放一次，每次释放有 $\frac{1}{p}$ 的成功率，如果成功，会使得敌人在接下来的 $x$ 秒内进入燃烧状态。如果敌人已经处于燃烧状态，状态的剩余时间会被重置为 $x$ 秒。</p><p>现在您会一直不停地对着同一个血量无限的敌人释放这种火魔法。试求当经过的时间趋向于正无穷大时，</p><script type="math/tex; mode=display">\frac{\text{ 敌人处于燃烧状态的时间 }}{\text{ 总时间 }}</script><p>的值（……大概收敛吧）。</p><p>多组数据。$1\leqslant x,y,p\leqslant 10^3$。$T\leqslant 10^3$。</p><p>Special Judge：相对误差不超过 $10^{-6}$。</p><p>$\mathtt{1s/256MB}$。</p><p>一看到题面很快啊，我就有了如下的一个看上去很真（大嘘）的想法</p><script type="math/tex; mode=display">\frac{1}{p}\frac{\min(x,y)}{y}</script><p>这个东西显然是不对的。因为如果 $x\gt y$，上一次成功了这一次没有成功那么燃烧状态会持续。</p><p>不过算了，反正 SHX 写出来了。</p><blockquote><p>无穷会把我们在有限的世界里积累起来的直觉打得粉碎。<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　——関原みや</p></blockquote><h2 id="J-Produce-the-Problems"><a href="#J-Produce-the-Problems" class="headerlink" title="J. Produce the Problems"></a>J. Produce the Problems</h2><p>给定 $n,a,b$ 和两个长度为 $n$ 的序列 $d,c$。您需要构造 $n$ 个字符串 $S_1,S_2,\dots,S_n$，其中 $S_i$ 需要恰好包含 $d_i$ 个 $\mathtt{D}$ 和 $c_i$ 个 $\mathtt{C}$。并且，如果令 $S=S_1S_2\cdots S_n$，$S$ 中不能出现超过 $a$ 个连续的 $\mathtt{D}$ 或超过 $b$ 个连续的 $\mathtt{C}$。问是否能够做到。</p><p>$1\leqslant n\leqslant 10^6$，$0\leqslant a,b,d_i,c_i\leqslant 10^6$。</p><p>$\mathtt{1s/256MB}$。</p><p>构造题，一生之敌。</p><p>不过算了，反正 SHX 写出来了。</p><blockquote><p>构造题是人类思维进步的阶梯。<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　——関原みや</p></blockquote><h2 id="M-Mahjong"><a href="#M-Mahjong" class="headerlink" title="M. Mahjong"></a>M. Mahjong</h2><p>得。这题我连题意都不知道。只听说是个大模拟。</p><p>不过算了，反正 SHX 写出来了。</p><blockquote><p>大模拟题就是 【ACM 粗口 】 题。<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　——関原みや</p></blockquote><h1 id="没过的题"><a href="#没过的题" class="headerlink" title="没过的题"></a>没过的题</h1><h2 id="E-My-friends’-friends-are-my-friends"><a href="#E-My-friends’-friends-are-my-friends" class="headerlink" title="E. My friends’ friends are my friends"></a>E. My friends’ friends are my friends</h2><p><strong>Warning：以下所用记号与原始题面存在出入。</strong></p><p><strong>Warning：以下文字已经经过了一定程度的转化，与原始题面想要表达的含义存在出入。</strong></p><p>给定一张 $n$ 个和 $m$ 条边的无向图和一个特殊节点 $r$。点有点权 $a,b$，边有边权 $w$。</p><p>现在每个点上都站着一个人。对于一个点 $i$，如果您能够支付给这个点上的人 $a_i\cdot\operatorname{dist}(r,i)$ 元，那么 TA 就会对您产生 $b_i$ 点贡献。其中 $\operatorname{dist}$ 表示两点间的最短路。</p><p>现在您需要集齐 $S$ 点贡献，但是您的预算只有 $T$ 元。问是否能够做到。</p><p>$1\leqslant n\leqslant 10^4$，$1\leqslant m\leqslant 10^6$，$0\leqslant S\leqslant 10^4$，$0\leqslant T\leqslant 10^{12}$。</p><p>$0\leqslant a_i,b_i\leqslant 10^4$，$1\leqslant w_i\leqslant 10^4$。</p><p>$\mathtt{1s/256MB}$。</p><p>令 $f(i)$ 表示恰好获得 $i$ 点贡献至少需要多少钱。不过 $f(S)$ 比较特殊，它表示至少获得 $S$ 点贡献（即包括了 $S+1$ 点和更多的情况）至少需要多少钱。</p><p>那么我们可以写一个 $O(nS)$ 的背包 DP。</p><p>结果 T 了（悲</p><h2 id="I-Counting-Lines"><a href="#I-Counting-Lines" class="headerlink" title="I. Counting Lines"></a>I. Counting Lines</h2><p>给定 $n$。称平面直角坐标系内横纵坐标均为 $[0,n)$ 上的整数的这 $n^2$ 个点为标记点。一条直线是好的，当且仅当它满足如下两个条件：</p><ol><li>经过至少两个标记点</li><li>与 $x$ 轴的夹角的绝对值小于等于 $\frac{\pi}{4}$</li></ol><p>试求好的直线的数量。</p><p>多组数据。$2\leqslant n\leqslant 10^6$。$T\leqslant 10^3$。</p><p>$\mathtt{1s/256MB}$。</p><p>推了半天结果发现不对（悲</p><p>以下是考场思路：</p><p>我们把夹角在 $[-\frac{\pi}{4},0)$ 的部分逆时针旋转 $\frac{\pi}{2}$ 到 $[\frac{\pi}{4},\frac{\pi}{2})$，然后再减去夹角为 $0$ 和 $\frac{\pi}{4}$ 的部分（加起来一共是 $3n-3$），发现剩下的部分实际上是</p><script type="math/tex; mode=display">\sum_{\Delta x=1}^{n-1}\sum_{\Delta y=1}^{n-1}[\Delta x\perp\Delta y]f(\Delta x,\Delta y)</script><p>其中 $f(\Delta x,\Delta y)$ 表示斜率为 $\frac{\Delta y}{\Delta x}$ 的好的直线的数量。</p><p>套路莫比乌斯反演</p><script type="math/tex; mode=display">\begin{aligned}&\sum_{\Delta x=1}^{n-1}\sum_{\Delta y=1}^{n-1}[\Delta x\perp\Delta y]f(\Delta x,\Delta y)\\=&\sum_{t=1}^{n-1}\mu(t)\sum_{u=1}^{\lfloor(n-1)/t\rfloor}\sum_{v=1}^{\lfloor(n-1)/t\rfloor}f(tu,tv)\\\end{aligned}</script><p>然后就是这里。仔细思考我们会发现，$f(\Delta x,\Delta y)$ 与 $(\Delta x,\Delta y)$ 有关，因此不能直接套二者互质时的式子。</p><p>然后……然后就不会了（悲</p><h2 id="K-Quarantine"><a href="#K-Quarantine" class="headerlink" title="K. Quarantine"></a>K. Quarantine</h2><p>现在有排成一条直线的 $n$ 个居民区，依次标号为 $1,2,\dots,n$。</p><p>有 $m$ 个时间，每次事件有如下 $4$ 中类型：</p><ol><li>给出 $l,r$。区间 $[\max(l-A,1),\min(r+A,n)]$ 内的所有居民区进入「被感染」状态。</li><li>给出 $l,r,k$。如果区间 $[\max(l-A,1),\min(r+A,n)]$ 内处于「被感染」状态的最长连续段长度至少为 $k$，那么区间内的所有居民区进入「隔离」状态；否则，什么也不发生。</li><li>给出 $l,r$。区间 $[\max(l-A,1),\min(r+A,n)]$ 内的所有居民区解除「被感染」状态和「隔离」状态。</li><li>给出 $l,r$。查询区间 $[\max(l-A,1),\min(r+A,n)]$ 内有多少个居民区处于「隔离」状态。</li></ol><p>其中 $A$ 表示上一次事件 $4$，即查询的答案，初始为 $0$。</p><p>$1\leqslant n\leqslant 10^9$，$1\leqslant m\leqslant 10^5$。</p><p>$\mathtt{1s/256MB}$。</p><p>抽象一下的话就是：</p><ol><li>区间覆盖</li><li>查询区间最长连续段长度</li><li>查询区间和</li></ol><p>第一反应是珂朵莉树，但是细想发现需要手写平衡树维护，因为 <code>std::set</code> 在这道题中已经不够用了。</p><p>但是想了想觉得太麻烦了于是放弃了。</p><p>SHX 的写法是动态开点线段树，但是没写出来。</p><h1 id="剩下的题"><a href="#剩下的题" class="headerlink" title="剩下的题"></a>剩下的题</h1><p>C 超级大模拟题（样例解释一页半）</p><p>D 看不懂</p><p>F 神仙计算几何题</p><p>L 神仙数学题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天本来会有一场大物的考试。还好我因为打 ICPC 申请了免考不然就要在大物考场上丢人了。&lt;/p&gt;
&lt;p&gt;前 3h 写出来 6 题。最后 2h 我在写一道数学题，SHX 在写一道数据结构题，结果都没有写出来。&lt;/p&gt;
&lt;p&gt;本来以为写出来 7-8 题可以混一块金牌的。结果赛后一查排行榜，8 题 42 队，7 题 67 队，结果金牌只有 35 块。&lt;/p&gt;
&lt;p&gt;也就是说无论如何都没有大金牌了 /kk&lt;/p&gt;
&lt;p&gt;最后 rank 72 拿了一块银牌。&lt;/p&gt;
&lt;p&gt;这么说来上周的 CCPC 其实是最有希望拿金牌的。如果我能够少浪费一时间的话。&lt;/p&gt;
&lt;p&gt;害群之马竟是我自己 /kk&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://github.com/Challestend/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="数论" scheme="https://github.com/Challestend/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="构造" scheme="https://github.com/Challestend/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="DP" scheme="https://github.com/Challestend/tags/DP/"/>
    
      <category term="图论" scheme="https://github.com/Challestend/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="数学期望" scheme="https://github.com/Challestend/tags/%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B/"/>
    
      <category term="莫比乌斯反演" scheme="https://github.com/Challestend/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
      <category term="ICPC" scheme="https://github.com/Challestend/tags/ICPC/"/>
    
      <category term="2022" scheme="https://github.com/Challestend/tags/2022/"/>
    
      <category term="概率论" scheme="https://github.com/Challestend/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
      <category term="Regional" scheme="https://github.com/Challestend/tags/Regional/"/>
    
      <category term="合肥" scheme="https://github.com/Challestend/tags/%E5%90%88%E8%82%A5/"/>
    
      <category term="难题" scheme="https://github.com/Challestend/tags/%E9%9A%BE%E9%A2%98/"/>
    
      <category term="模拟" scheme="https://github.com/Challestend/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="最短路" scheme="https://github.com/Challestend/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="背包" scheme="https://github.com/Challestend/tags/%E8%83%8C%E5%8C%85/"/>
    
      <category term="数据结构" scheme="https://github.com/Challestend/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Pb. 5</title>
    <link href="https://github.com/Challestend/random-solution-pb-5/"/>
    <id>https://github.com/Challestend/random-solution-pb-5/</id>
    <published>2022-10-18T05:48:02.000Z</published>
    <updated>2024-01-08T14:54:20.731Z</updated>
    
    <content type="html"><![CDATA[<p>2022 年 10 月 17 日 22：35 ~ 次日 00：35，AHU 2021 届不知名 ACM 选手<strong>関原みや</strong>（化名）报名参加 <a href="https://codeforces.com/contest/1743">Educational Codeforces Round 137 (Rated for Div. 2)</a>。期间因急了，C 题 WA 1 发，（某数据随机复杂度虚伪的）D 题 WA 4 发；但最后关头潜力爆发，做出 F 题并成功上分，跻身 Candidate Master 之列。距今已过……不知道多久，佳话永流传。</p><p>来源：<a href="https://codeforces.com/contest/1743/problem/F">CF1743 F Intersection and Union</a></p><a id="more"></a><p>给定 $n$ 个集合 $S_1,S_2,\dots,S_n$，其中 $S_i=[l_i,r_i]\cap\mathbb{Z}$。</p><p>现构造操作序列 $p_1,p_2,\dots,p_{n-1}$，其中 $p_i\in\{\cup,\cap,\oplus\}$，$\cup$ 表示集合的并，$\cap$ 表示集合的交，$\oplus$ 表示集合的对称差。</p><p>显然整个操作序列 $p$ 一共有 $3^{n-1}$ 中方案。试对于每种 $p$，计算</p><script type="math/tex; mode=display">\left|(((S_1\;p_1\;S_2)\;p_2\;S_3)\;p_3\;S_4)\;\cdots\;p_{n-1}\;S_n\right|</script><p>的和。对 $998244353$ 取模。</p><p>$2\leqslant n\leqslant 3\times 10^5$，$0\leqslant l_i\leqslant r_i\leqslant 3\times 10^5$。</p><p>$\mathtt{5s/512MB}$。</p><p>令 $T_k$ 表示下式的计算结果</p><script type="math/tex; mode=display">(((S_1\;p_1\;S_2)\;p_2\;S_3)\;p_3\;S_4)\;\cdots\;p_{k-1}\;S_k</script><p>可以大致看成是 $S_k$ 的前缀和。</p><p>考虑对于每个 $x$，计算有多少种方案使得 $x\in T_n$。</p><p>设当前考察到 $T_{k-1}$。并且有 $x\not\in S_k$，那么：</p><ol><li>如果 $x\not\in T_{k-1}$，无论 $p_k$ 如何取值，总有 $x\not\in T_k$。</li><li>如果 $x\in T_{k-1}$，$p_k=\cap$，那么 $x\not\in T_k$。</li><li>如果 $x\in T_{k-1}$，$p_k=\cup$ 或 $p_k=\oplus$，那么 $x\in T_k$。</li></ol><p>同理，如果 $x\in S_k$，那么：</p><ol><li>如果 $x\not\in T_{k-1}$，$p_k=\cap$，那么 $x\not\in T_k$。</li><li>如果 $x\not\in T_{k-1}$，$p_k=\cup$ 或 $p_k=\oplus$，那么 $x\in T_k$。</li><li>如果 $x\in T_{k-1}$，$p_k=\oplus$，那么 $x\not\in T_k$。</li><li>如果 $x\in T_{k-1}$，$p_k=\cup$ 或 $p_k=\cap$，那么 $x\in T_k$。</li></ol><p>设 $f(k,0/1,0/1)$：其中 $f(k,0,0)$ 表示在 $x\not\in T_{k-1}$ 的情况下，$x\not\in T_k$ 的方案数；剩余状态的含义可以以此类推。我们可以整理出：</p><script type="math/tex; mode=display">\begin{bmatrix}f(k,0,0)&f(k,0,1)\\f(k,1,0)&f(k,1,1)\end{bmatrix}=\begin{bmatrix}f(k-1,0,0)&f(k-1,0,1)\\f(k-1,1,0)&f(k-1,1,1)\end{bmatrix}\begin{bmatrix}3&0\\1&2\end{bmatrix}\quad(x\not\in S_k)</script><script type="math/tex; mode=display">\begin{bmatrix}f(k,0,0)&f(k,0,1)\\f(k,1,0)&f(k,1,1)\end{bmatrix}=\begin{bmatrix}f(k-1,0,0)&f(k-1,0,1)\\f(k-1,1,0)&f(k-1,1,1)\end{bmatrix}\begin{bmatrix}1&2\\1&2\end{bmatrix}\quad(x\in S_k)</script><p>这样我们只需从小到大扫一遍 $x$，用扫描线处理出每个 $S_k$ 是否包含当前 $x$，然后再用线段树维护单点修改和区间矩阵乘积即可。</p><p>当然还有一些细节，比如说 $S_1$ 这个位置有些特殊，所以实际上求解矩阵乘积的时候求解的是 $[2,n]$ 上的乘积，然后再根据是否有 $x\in S_1$ 单独计算 $S_1$ 产生的贡献。</p><p>还有就是，如果 $x\not\in\bigcup S_i$，那么这个 $x$ 不应该参与计算。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2022 年 10 月 17 日 22：35 ~ 次日 00：35，AHU 2021 届不知名 ACM 选手&lt;strong&gt;関原みや&lt;/strong&gt;（化名）报名参加 &lt;a href=&quot;https://codeforces.com/contest/1743&quot;&gt;Educational Codeforces Round 137 (Rated for Div. 2)&lt;/a&gt;。期间因急了，C 题 WA 1 发，（某数据随机复杂度虚伪的）D 题 WA 4 发；但最后关头潜力爆发，做出 F 题并成功上分，跻身 Candidate Master 之列。距今已过……不知道多久，佳话永流传。&lt;/p&gt;
&lt;p&gt;来源：&lt;a href=&quot;https://codeforces.com/contest/1743/problem/F&quot;&gt;CF1743 F Intersection and Union&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="线段树" scheme="https://github.com/Challestend/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="Codeforces" scheme="https://github.com/Challestend/tags/Codeforces/"/>
    
      <category term="矩阵" scheme="https://github.com/Challestend/tags/%E7%9F%A9%E9%98%B5/"/>
    
      <category term="DP" scheme="https://github.com/Challestend/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Pb. 4</title>
    <link href="https://github.com/Challestend/random-solution-pb-4/"/>
    <id>https://github.com/Challestend/random-solution-pb-4/</id>
    <published>2022-10-01T14:16:24.000Z</published>
    <updated>2024-01-08T14:54:20.727Z</updated>
    
    <content type="html"><![CDATA[<p>2022 年 10 月 1 日 20：00 ~ 21：40，AHU 2021 届不知名 ACM 选手<strong>関原みや</strong>（化名）报名参加 <a href="https://atcoder.jp/contests/abc271">AtCoder Beginner Contest 271</a>。期间因大脑短路，A/D/E 题各 WA 1 发，C 题 WA 4 发，G 题本应做出却未能做出（F 题就算了，真不会），最终以 1075th 的坏成绩遗憾<del>离世</del>离场，Rating 倒扣 17 分。距今已过 34 分 24 秒，警钟长鸣。</p><p>来源：<a href="https://atcoder.jp/contests/abc271/tasks/abc271_g">ABC271 G Access Counter</a></p><a id="more"></a><p>高桥君建立了一个网站，然后在上面放置了一个访问计数器。在这之后，高桥君和他的一个朋友青木君会频繁地访问这个网站。</p><p>给定一个长度为 $24$ 的字符串 $c_0c_1\cdots c_{23}$，且 $c_i\in\{\mathtt{T},\mathtt{A}\}$。在访问计数器被设置后的第 $n$ 个小时中（$n$ 从零开始计数），如果 $c_{n\bmod 24}=\mathtt{T}$，那么高桥君有 $X/100$ 的概率访问网站；如果 $c_{n\bmod 24}=\mathtt{A}$，那么青木君有 $Y/100$ 的概率访问网站。</p><p>如果访问计数器统计到的第 $N$ 次访问恰好是高桥君，高桥君会爆炸。因此试求第 $N$ 次访问恰好是青木君的概率。对 $998244353$ 取模。</p><p>$1\leqslant N\leqslant 10^{18}$，$1\leqslant X,Y\leqslant 99$，且 $X$ 和 $Y$ 都是整数。</p><p>$\mathtt{2s/1024MB}$。</p><p>这么一看相当直来直去的概率题。</p><p>令 $P(i,j)$ 表示第 $i$ 次访问的下一次是第 $j$ 次访问的概率。这里不考虑这次访问是谁。显然我们有</p><script type="math/tex; mode=display">P(i,j)=\sum_{n\geqslant 0}\prod_{k=i+1}^{j-1}(1-p_k)\cdot p_j\cdot\left(\prod_{k=1}^n(1-p_k)\right)^n=\frac{\prod_{k=i+1}^{j-1}(1-p_k)\cdot p_j}{1-\prod_{k=1}^n(1-p_k)}</script><p>$Q_t(i)$ 表示第 $t$ 访问对应 $c_i$ 的概率。显然我们有</p><script type="math/tex; mode=display">Q_1(i)=\prod_{k=1}^{i-1}(1-p_k)\cdot p_i</script><script type="math/tex; mode=display">Q_t(i)=\sum_{j=0}^{23}Q_{t-1}(j)P(j,i)</script><p>注意到，如果我们能够把 $P(i,j)$ 和 $Q_t(i)$ 写成如下的矩阵形式的话</p><script type="math/tex; mode=display">A_t=\begin{bmatrix}Q_t(0)\\Q_t(1)\\\vdots\\Q_t(23)\\\end{bmatrix}\quad F=\begin{bmatrix}P(0,0)&P(1,0)&\cdots&P(23,0)\\P(0,1)&P(1,1)&\cdots&P(23,1)\\\vdots&\vdots&\ddots&\vdots\\P(0,23)&P(1,23)&\cdots&P(23,23)\\\end{bmatrix}</script><p>上面那个关系式就可以简写成</p><script type="math/tex; mode=display">A_t=A_{t-1}F=A_1F^{t-1}</script><p>即</p><script type="math/tex; mode=display">A_N=A_1F^{N-1}</script><p>那么我们就可以在 $O(\log N)$ 的时间复杂度内计算出所有的 $Q_N(i)$。虽然严格上来讲这部分还会有一个高达 $24^3$ 的常数。</p><p>那么最终的答案就是</p><script type="math/tex; mode=display">\sum_{i=0}^{23}[c_i=\mathtt{A}]Q_N(i)</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2022 年 10 月 1 日 20：00 ~ 21：40，AHU 2021 届不知名 ACM 选手&lt;strong&gt;関原みや&lt;/strong&gt;（化名）报名参加 &lt;a href=&quot;https://atcoder.jp/contests/abc271&quot;&gt;AtCoder Beginner Contest 271&lt;/a&gt;。期间因大脑短路，A/D/E 题各 WA 1 发，C 题 WA 4 发，G 题本应做出却未能做出（F 题就算了，真不会），最终以 1075th 的坏成绩遗憾&lt;del&gt;离世&lt;/del&gt;离场，Rating 倒扣 17 分。距今已过 34 分 24 秒，警钟长鸣。&lt;/p&gt;
&lt;p&gt;来源：&lt;a href=&quot;https://atcoder.jp/contests/abc271/tasks/abc271_g&quot;&gt;ABC271 G Access Counter&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="AtCoder" scheme="https://github.com/Challestend/tags/AtCoder/"/>
    
      <category term="概率论" scheme="https://github.com/Challestend/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
      <category term="矩阵快速幂" scheme="https://github.com/Challestend/tags/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Ct. 4</title>
    <link href="https://github.com/Challestend/random-solution-ct-4/"/>
    <id>https://github.com/Challestend/random-solution-ct-4/</id>
    <published>2022-09-30T16:43:38.000Z</published>
    <updated>2024-01-08T14:54:20.724Z</updated>
    
    <content type="html"><![CDATA[<p>第一次试图在实验室过夜并打 Codeforces Global Round。</p><blockquote><p>d*m「听上去很容易下分的样子。」</p></blockquote><p>85 min 写出来四题我觉得已经可以开香槟了。这波上大分。</p><p>于是从考场偷偷溜出来写一写题解（</p><p>用户名 CLT，如果想要 AC 代码请去 CF 翻提交记录。（考场代码，不保证可读性）</p><a id="more"></a><h2 id="A-Glory-Addicts"><a href="#A-Glory-Addicts" class="headerlink" title="A. Glory Addicts"></a>A. Glory Addicts</h2><p>您有 $n$ 个技能。第 $i$ 个技能的类型为 $a_i$（只能为 $0$ 或 $1$，$0$ 表示火属性技能，$1$ 表示冰属性技能），威力为 $b_i$。</p><p>您需要将这 $n$ 个技能每个释放恰好一遍。</p><p>如果释放一个技能时，之前刚刚释放过一个不同类型的技能，那么当前这个技能威力翻倍。</p><p>试求所有技能实际威力之和的最大值。</p><p>多组数据。$1\leqslant n\leqslant 10^5$，$a_i\in\{0,1\}$，$1\leqslant b_i\leqslant 10^9$。$\sum n\leqslant 10^5$。</p><p>$\texttt{2s/512MB}$。</p><p>假设火属性技能的数量严格大于冰属性技能的数量，那么有一种思路是：</p><ol><li>释放威力最低的火属性技能</li><li>释放威力最高的冰属性技能</li><li>释放威力最高的火属性技能</li><li>释放威力第二高的冰属性技能</li><li>释放威力第二高的火属性技能</li><li>……（如此重复直到所有的冰属性技能均被释放过）</li><li>释放剩余的火属性技能</li></ol><p>这样一来，所有的冰属性技能和等数量的威力最高的火属性技能被以双倍威力释放。</p><p>反过来，如果释放的第一个技能是威力最低的冰属性技能，模拟一遍会发现，除了这个威力最低的冰属性技能的威力从双倍变成了单倍，其他方面没有任何变化。因此，火属性技能较多时，释放的第一个技能应当是火属性技能。</p><p>同理，冰属性技能较多时，释放的第一个技能应当是冰属性技能。</p><p>但是如果两种技能恰好数量相同，那么就不得不牺牲一个威力最低的技能了（它只能以单倍威力释放）。</p><h2 id="B-Prefix-Sum-Addicts"><a href="#B-Prefix-Sum-Addicts" class="headerlink" title="B. Prefix Sum Addicts"></a>B. Prefix Sum Addicts</h2><p>假设有一个长度为 $n$ 的单调不下降序列 $a$。定义其前缀和序列 $s$ 为</p><script type="math/tex; mode=display">s_i=\sum_{j=1}^ka_j</script><p>现在给定 $s_{n-k+1},s_{n-k+2},\dots,s_n$，试求是否存在一个符合条件的 $a$。</p><p>多组数据。$1\leqslant n\leqslant 10^5$，$1\leqslant k\leqslant n$，$|s_i|\leqslant 10^9$。$\sum n\leqslant 10^5$。</p><p>$\texttt{2s/512MB}$。</p><p>如果 $k=1$ 那么必定有解。以下考虑 $k\gt 1$。</p><p>首先肯定是检查一下它给的这部分 $s$ 是否满足差分单调不下降。</p><p>然后如果 $k=n$ 还需要有 $s_1\leqslant s_2-s_1$。</p><p>然后令 $x=s_{n-k+2}-s_{n-k+1}$，那么对于所有的 $1\leqslant i\leqslant n-k+1$，需要有 $a_i\leqslant x$。</p><p>那么显然只要 $(n-k+1)x\geqslant s_{n-k+1}$ 就必定会有解。至于这个解具体长什么样，这不重要。</p><h2 id="C-Even-Number-Addicts"><a href="#C-Even-Number-Addicts" class="headerlink" title="C. Even Number Addicts"></a>C. Even Number Addicts</h2><p>Alice 和 Bob 在一起玩游戏。</p><p>现在他们面前有 $n$ 个数 $a_1,a_2,\dots,a_n$。每次一个人可以选择其中的一个数，将其加入自己的得分，然后将其删去。Alice 先手。</p><p>等到所有数都被删去之后，如果 Alice 的得分是偶数，那么 Alice 获胜；否则，即若 Alice 的得分是奇数，那么 Bob 获胜。</p><p>Alice 和 Bob 都足够聪明。试判断谁会获胜。</p><p>多组数据。$1\leqslant n\leqslant 100$，$|a_i|\leqslant 10^9$。$1\leqslant T\leqslant 100$，这里 $T$ 表示数据组数。</p><p>$\texttt{2s/512MB}$。</p><p>令 $O(x,y)$ 表示当前剩余 $x$ 个奇数和 $y$ 个偶数，且 Alice 先手时，Alice 能否让自己的最终得分为奇数。</p><p>$E(x,y)$ 类似，不过是能否让自己的最终得分为偶数。</p><p>首先考虑边界条件。手玩一下可以发现</p><script type="math/tex; mode=display">O(4k+1,0)=\texttt{T}\quad O(4k+2,0)=\texttt{T}\quad(k\geqslant 0)</script><script type="math/tex; mode=display">O(4k+3,0)=\texttt{F}\quad O(4k+4,0)=\texttt{F}\quad(k\geqslant 0)</script><script type="math/tex; mode=display">O(0,k)=\texttt{F}\quad(k\gt 0)</script><script type="math/tex; mode=display">E(4k+1,0)=\texttt{F}\quad E(4k+2,0)=\texttt{F}\quad(k\geqslant 0)</script><script type="math/tex; mode=display">E(4k+3,0)=\texttt{T}\quad E(4k+4,0)=\texttt{T}\quad(k\geqslant 0)</script><script type="math/tex; mode=display">E(0,k)=\texttt{T}\quad(k\gt 0)</script><p>其中 $\texttt{T}$ 表示 <code>true</code>，$\texttt{F}$ 表示 <code>false</code>。</p><p>考虑 $x\geqslant 1$ 且 $y\geqslant 1$ 时。此时 Alice 有两种选择：删去一个奇数，或者删去一个偶数。</p><p>如果 Alice 希望她的得分是奇数，且她选择删去一个奇数，那么当前局面变为 $x-1$ 个奇数和 $y$ 个偶数，且 Alice 之后的得分需要是偶数。</p><p>此时 Bob 同样有两种选择：（$x\geqslant 2$ 时才可以）删去一个奇数，或者（任何情况都可以）删去一个偶数。</p><p>这两种情况分别对应了 $(x=1\vee E(x-2,y))$ 和 $E(x-1,y-1)$。显然只有这两种情况的结果均为 $\texttt{T}$ 时 Alice 才能获胜。</p><p>以此类推，还有如下三种情况：</p><ol><li>Alice 希望她的得分是奇数，且她选择删去一个偶数</li><li>Alice 希望她的得分是偶数，且她选择删去一个奇数</li><li>Alice 希望她的得分是偶数，且她选择删去一个偶数</li></ol><p>总而言之我们有</p><script type="math/tex; mode=display">O(x,y)=OO(x,y)\vee OE(x,y)</script><script type="math/tex; mode=display">E(x,y)=EO(x,y)\vee EE(x,y)</script><p>其中</p><script type="math/tex; mode=display">OO(x,y)=(x=1\vee E(x-2,y))\wedge E(x-1,y-1)</script><script type="math/tex; mode=display">OE(x,y)=(y=1\vee O(x,y-2))\wedge O(x-1,y-1)</script><script type="math/tex; mode=display">EO(x,y)=(x=1\vee O(x-2,y))\wedge O(x-1,y-1)</script><script type="math/tex; mode=display">EE(x,y)=(y=1\vee E(x,y-2))\wedge E(x-1,y-1)</script><p><del>读者可自行验证正确性。</del></p><h2 id="D-Permutation-Addicts"><a href="#D-Permutation-Addicts" class="headerlink" title="D. Permutation Addicts"></a>D. Permutation Addicts</h2><p>给定一个长度为 $n$ 的排列 $a_1,a_2,\dots,a_n$ 和 $0\leqslant k\leqslant n$。</p><p>现构造序列 $b$。对于每个 $1\leqslant i\leqslant n$：</p><ol><li>如果 $a_i\leqslant k$，令 $b_{a_i}$ 的值为所有满足 $1\leqslant j\lt i$ 且 $a_j\gt k$ 的 $j$ 中最大的 $j$ 对应的 $a_j$。如果不存在这样的 $j$，令 $b_{a_i}$ 的值为 $n+1$。</li><li>如果 $a_i\gt k$，令 $b_{a_i}$ 的值为所有满足 $1\leqslant j\lt i$ 且 $a_j\leqslant k$ 的 $j$ 中最大的 $j$ 对应的 $a_j$。如果不存在这样的 $j$，令 $b_{a_i}$ 的值为 $0$。</li></ol><p>现给定构造好的 $b$，要求还原出 $k$ 的值和整个的 $a$。多解则任意输出。</p><p>多组数据。$1\leqslant n\leqslant 10^5$，$0\leqslant b_i\leqslant n+1$。$\sum n\leqslant 10^5$。输入数据保证有解。</p><p>$\texttt{2s/512MB}$。</p><p>为了方便，以下称 $\leqslant k$ 的数为小数，$\gt k$ 的数为大数。</p><p>如果 $b_y=x$，一种简单的思路就是直接把 $y$ 摆在 $x$ 右侧一个位置。$x=0$ 和 $x=n+1$ 的情况则是摆在排列最左侧。</p><p>如果有多个两两不同的 $y_1,y_2,\dots,y_s$ 满足 $b_{y_i}=x$，那么这些 $y_i$ 都摆在 $x$ 右侧最靠近的位置即可，且它们之间的相对顺序无影响。</p><p>但是可能会存在一些 $z_1,z_2,\dots,z_t$ 满足 $b_{z_j}=y_{i_0}$，这样的话 $y_{i_0}$ 必须要在其他 $y_i$ 的右侧，然后再往右侧直接接 $z_j$。</p><p>考虑到，无论如何，$y_i$ 和 $z_j$ 不可能同时是小数或大数，必定是以下两种情况恰好之一：</p><ol><li>$y_i$ 都是小数，$z_j$ 都是大数。</li><li>$y_i$ 都是大数，$z_j$ 都是小数。</li></ol><p>如果存在超过两个 $y_{i_0}$，那么无论如何排列这些 $y_i$，都会出现要么有一些 $z_j$ 无法紧跟在对应的 $y_{i_0}$ 的右侧，要么两个相邻的 $y_j$ 之间插入了一些 $z_j$（这样 $b_{y_j}$ 的值会不对）。这不符合题目的「保证有解」的限制条件，即每次这样的 $y_{i_0}$ 至多存在一个。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次试图在实验室过夜并打 Codeforces Global Round。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;d*m「听上去很容易下分的样子。」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;85 min 写出来四题我觉得已经可以开香槟了。这波上大分。&lt;/p&gt;
&lt;p&gt;于是从考场偷偷溜出来写一写题解（&lt;/p&gt;
&lt;p&gt;用户名 CLT，如果想要 AC 代码请去 CF 翻提交记录。（考场代码，不保证可读性）&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="Codeforces" scheme="https://github.com/Challestend/tags/Codeforces/"/>
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="构造" scheme="https://github.com/Challestend/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="DP" scheme="https://github.com/Challestend/tags/DP/"/>
    
      <category term="简单题" scheme="https://github.com/Challestend/tags/%E7%AE%80%E5%8D%95%E9%A2%98/"/>
    
      <category term="博弈论" scheme="https://github.com/Challestend/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
      <category term="公平组合游戏" scheme="https://github.com/Challestend/tags/%E5%85%AC%E5%B9%B3%E7%BB%84%E5%90%88%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>ICPC 2022 网络赛 Round 2 部分题解</title>
    <link href="https://github.com/Challestend/icpc-2022-net-contest-round-2/"/>
    <id>https://github.com/Challestend/icpc-2022-net-contest-round-2/</id>
    <published>2022-09-25T13:34:30.000Z</published>
    <updated>2024-01-08T14:54:20.717Z</updated>
    
    <content type="html"><![CDATA[<p>还没有题面。等拿到题面了再补。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;还没有题面。等拿到题面了再补。&lt;/p&gt;

      
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="ICPC" scheme="https://github.com/Challestend/tags/ICPC/"/>
    
      <category term="2022" scheme="https://github.com/Challestend/tags/2022/"/>
    
      <category term="网络赛" scheme="https://github.com/Challestend/tags/%E7%BD%91%E7%BB%9C%E8%B5%9B/"/>
    
      <category term="施工中" scheme="https://github.com/Challestend/tags/%E6%96%BD%E5%B7%A5%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Ct. 3</title>
    <link href="https://github.com/Challestend/random-solution-ct-3/"/>
    <id>https://github.com/Challestend/random-solution-ct-3/</id>
    <published>2022-09-24T12:09:24.000Z</published>
    <updated>2024-01-08T14:54:20.717Z</updated>
    
    <content type="html"><![CDATA[<p>今天 ACM 实验室的一场原题大赛。</p><p>把其中一些觉得稍微有点意思的题跳了出来写一写题解。</p><p>今日题源 :</p><ul><li>A: 1426A (*800)</li><li>B1: 1560F1 (*1900)</li><li>B2: 1560F2 (*2100)</li><li>C: 1509B (*1100)</li><li>D: 1295E (*2200)</li><li>E: 1608B (*1200)</li><li>F: 1612D (*1600)</li><li>G: 1624D (*1400)</li><li>H: 1495C (*2300)</li><li>I: 771A (*1500)</li><li>J: 583A (*1000)</li></ul><p>差点就 AK 了。以及被三队暴打。</p><a id="more"></a><h2 id="C-TMT-Document"><a href="#C-TMT-Document" class="headerlink" title="C. TMT Document"></a>C. TMT Document</h2><p>给定一个长度为 $n$ 且只包含 $\texttt{T}$ 和 $\texttt{M}$ 两种字符的字符串 $S$。保证 $3\mid n$。现在需要把 $S$ 分割成若干个互不相交的子序列，且每个子序列都是 $\texttt{TMT}$（$\texttt{Towa Maji Tenshi}$）。试判断是否可能。</p><p>多组数据。$3\leqslant n\lt 10^5$。$\sum n\leqslant 10^5$。</p><p>$\texttt{1s/256MB}$。</p><p>其实……只要把前 $\frac{n}{3}$ 个 $\texttt{T}$ 和后 $\frac{n}{3}$ 个 $\texttt{T}$ 匹配，然后每对 $\texttt{T}$ 中间再塞一个 $\texttt{M}$ 就可以了。</p><p>但是考场被牛客还是哪里的一道 $\texttt{red}$ 题带偏了，写了好几发没过于是暂时搁置了。</p><p>最后回头重新看这道题的时候感觉当时的自己就是个**。</p><h2 id="D-Permutation-Separation"><a href="#D-Permutation-Separation" class="headerlink" title="D. Permutation Separation"></a>D. Permutation Separation</h2><p>给定一个长度为 $n$ 的 $1\sim n$ 的排列 $p$ 和另外一个长度为 $n$ 的序列 $a$。</p><p>首先选定 $1\leqslant k\lt n$，将 $p$ 分割成 $S_L=\{p_1,p_2,\dots,p_k\}$ 和 $S_R=\{p_{k+1},p_{k+2},\dots,p_n\}$ 两个集合。然后执行如下操作若干次（可以是 $0$ 次）：</p><p>选定 $1\leqslant i\leqslant n$，支付 $a_i$ 的代价将 $p_i$ 其移动到另外一个集合——即，如果 $p_i\in S_L$，将 $p_i$ 从 $S_L$ 中删去并加入 $S_R$；反之亦然。</p><p>目标是不存在 $x\in S_L$ 和 $y\in S_R$ 使得 $x\gt y$。试求达成目标需要支付的最小代价。</p><p>值得注意的是，如果操作后 $S_L=\varnothing$ 或 $S_R=\varnothing$，算作目标被达成。</p><p>$2\leqslant n\leqslant 2\times 10^5$，$1\leqslant p_i\leqslant n$，$1\leqslant a_i\leqslant 10^9$。</p><p>$\texttt{2s/256MB}$。</p><p>虽然这是不符合题目要求的，但是让我们首先考虑一下 $k=0$ 时的情况。</p><p>定义 $f(i)$ 表示，在当前的 $k$ 的取值下，通过若干次操作将 $S_L$ 变为 $\{1,2,\dots,i\}$ 的最小代价。特殊地，$f(0)$ 表示将 $S_L$ 变为 $\varnothing$ 的最小代价。</p><p>不难得出</p><script type="math/tex; mode=display">f(0)=0</script><script type="math/tex; mode=display">f(i)=\sum_{j=1}^ia_{q_i}</script><p>其中 $q$ 表示 $p$ 的逆排列。</p><p>如果现在将 $k$ 的值增加 $1$，考虑 $f(i)$ 会如何变化。</p><p>（以下的 $k$ 的值都是增加后的）</p><p>$f(p_k),f(p_k+1),\dots,f(n)$ 会减少 $a_k$，因为现在 $p_k$ 已经在 $S_L$ 中了。</p><p>相对地，$f(0),f(1),\dots,f(p_k-1)$ 会增加 $a_k$，因为现在 $p_k$ 已经不在 $S_R$ 中了。</p><p>那么对于当前 $k$ 的取值，答案显然是</p><script type="math/tex; mode=display">\min_{i=0}^nf(i)</script><p>最终答案就是 $k$ 的所有取值对应答案的 $\min$。这可以很容易地通过线段树维护区间加 + 区间 $\min$ 求解。</p><h2 id="F-X-Magic-Pair"><a href="#F-X-Magic-Pair" class="headerlink" title="F. X-Magic Pair"></a>F. X-Magic Pair</h2><p>给定 $(a,b)$ 和 $x$。执行如下两种操作之一若干次（可以是 $0$ 次）：</p><ol><li>将 $a$ 变为 $|a-b|$。</li><li>将 $b$ 变为 $|a-b|$。</li></ol><p>试求能否把 $a$ 或者 $b$ 变为 $x$。</p><p>多组数据。$1\leqslant a,b,x\leqslant 10^{18}$。</p><p>$\texttt{2s/512MB}$。</p><p>不失一般性，令 $a\leqslant b$。</p><p>令当前状态为 $(a_0,b_0)$。那么可以到达的状态有</p><ol><li>$(a_0,b_0)$</li><li>$(b_0-a_0,b_0)$</li><li>$(a_0,b_0-a_0)$</li><li>$(b_0-2a_0,b_0-a_0)$</li><li>$(a_0,b_0-2a_0)$</li><li>$(b_0-3a_0,b_0-2a_0)$</li></ol><p>脑补一下可以得出：如果令 $b_0=p\cdot a_0+q$，其中 $0\leqslant q\lt a_0$，那么 $a_0$ 和所有的 $p^\prime\cdot a_0+q$ 都会出现，其中 $0\leqslant p^\prime\leqslant p$。</p><p>但是如果持续操作到 $b\lt a$，那么事情会发生变化。</p><p>但是根据类欧几里得算法的相关结论，这个变化次数一定不会超过 $O(\log b)$。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天 ACM 实验室的一场原题大赛。&lt;/p&gt;
&lt;p&gt;把其中一些觉得稍微有点意思的题跳了出来写一写题解。&lt;/p&gt;
&lt;p&gt;今日题源 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A: 1426A (*800)&lt;/li&gt;
&lt;li&gt;B1: 1560F1 (*1900)&lt;/li&gt;
&lt;li&gt;B2: 1560F2 (*2100)&lt;/li&gt;
&lt;li&gt;C: 1509B (*1100)&lt;/li&gt;
&lt;li&gt;D: 1295E (*2200)&lt;/li&gt;
&lt;li&gt;E: 1608B (*1200)&lt;/li&gt;
&lt;li&gt;F: 1612D (*1600)&lt;/li&gt;
&lt;li&gt;G: 1624D (*1400)&lt;/li&gt;
&lt;li&gt;H: 1495C (*2300)&lt;/li&gt;
&lt;li&gt;I: 771A (*1500)&lt;/li&gt;
&lt;li&gt;J: 583A (*1000)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;差点就 AK 了。以及被三队暴打。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="线段树" scheme="https://github.com/Challestend/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="Codeforces" scheme="https://github.com/Challestend/tags/Codeforces/"/>
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="构造" scheme="https://github.com/Challestend/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="原题" scheme="https://github.com/Challestend/tags/%E5%8E%9F%E9%A2%98/"/>
    
  </entry>
  
</feed>
