<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>关原美夜的妙妙屋</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/Challestend/"/>
  <updated>2023-01-07T02:30:40.241Z</updated>
  <id>https://github.com/Challestend/</id>
  
  <author>
    <name>Miya Sekihara</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈基于转置原理的多项式多点求值算法</title>
    <link href="https://github.com/Challestend/polynomial-multipoint/"/>
    <id>https://github.com/Challestend/polynomial-multipoint/</id>
    <published>2022-12-10T04:36:05.000Z</published>
    <updated>2023-01-07T02:30:40.241Z</updated>
    
    <content type="html"><![CDATA[<p>考虑一个经典的问题。给定 $n$ 次多项式</p><script type="math/tex; mode=display">F(x)=\sum_{i=0}^nf_ix^i</script><p>和 $n+1$ 个点值 $a_0,a_1,\dots,a_n$。您需要对于每个 $k$，求出 $b_k=F(a_k)$，对 $998244353$ 取模。</p><p>据说以前这种问题都是采用多项式取模的方法。但是现在我们有新科技了。</p><p>本篇文章将会以我个人认为十分通俗易懂的方式来详细地讲解这种新科技。</p><p>参考文献略。</p><a id="more"></a><h2 id="线性算法"><a href="#线性算法" class="headerlink" title="线性算法"></a>线性算法</h2><p>若一个算法可以被看作是方阵 $A$，输入向量 $\mathbf v$，输出向量 $A\mathbf v$，则称该算法为线性算法。</p><p>比如说，FFT 就是一个线性算法，其对应的方阵为</p><script type="math/tex; mode=display">\begin{bmatrix}1&1&1&\cdots&1\\1&\omega_n^1&\omega_n^2&\cdots&\omega_n^n\\1&\omega_n^2&\omega_n^4&\cdots&\omega_n^{2n}\\\vdots&\vdots&\vdots&\ddots&\vdots\\1&\omega_n^n&\omega_n^{2n}&\cdots&\omega_n^{n^2}\\\end{bmatrix}</script><h2 id="转置原理"><a href="#转置原理" class="headerlink" title="转置原理"></a>转置原理</h2><p>对于一个线性算法，设其对应的方阵 $A$ 满足</p><script type="math/tex; mode=display">A=E_1E_2\cdots E_n</script><p>其中 $E_i$ 均为初等矩阵。则有</p><script type="math/tex; mode=display">A^{\mathrm T}=E_n^{\mathrm T}\cdots E_2^{\mathrm T}E_1^{\mathrm T}</script><p>这里稍微复习一下，初等矩阵指的是只进行一次初等变换的矩阵。这里的初等变换包括</p><ol><li>$v_i\leftarrow v_i\cdot k$</li><li>$v_i\leftarrow v_i+v_j\cdot k$</li></ol><p>如果 $E_i$ 对应第一种初等变换，它的转置就是自身；如果是第二种，转置后 $i$ 和 $j$ 互换，即对应的初等变换变为 $v_j\leftarrow v_j+v_i\cdot k$。</p><p>这里的关键点在于，如果 $A\mathbf v$ 比较好求，而 $A^{\mathrm T}\mathbf v$ 相对难求，我们可以将求 $A\mathbf v$ 的过程分析出来，把每一步转置然后倒序执行，就可以求出 $A^{\mathrm T}\mathbf v$ 了。</p><h2 id="多项式乘积的转置"><a href="#多项式乘积的转置" class="headerlink" title="多项式乘积的转置"></a>多项式乘积的转置</h2><p>考虑两个多项式</p><script type="math/tex; mode=display">F(x)=\sum_{i=0}^nf_ix^i</script><p>和</p><script type="math/tex; mode=display">G(x)=\sum_{i=0}^mg_ix^i</script><p>令它们的乘积为</p><script type="math/tex; mode=display">H(x)=\sum_{i=0}^{n+m}h_ix^i</script><p>考虑计算这一乘积的算法。为了便于理解，我们将 $G(x)$ 视作常量，$F(x)$ 和 $H(x)$ 视作变量，考虑一个作用在如下 $(n+1)+(n+m+1)=2n+m+2$ 维列向量上的线性算法</p><script type="math/tex; mode=display">\begin{bmatrix}f_0\\f_1\\f_2\\\vdots\\f_n\\h_0\\h_1\\\vdots\\h_{n+m}\end{bmatrix}</script><p>初始时 $f_i$ 已经有值，而 $h_i$ 为 $0$。算法流程如下：</p><ol><li>循环变量 $i\leftarrow 0\dots n+m$</li><li>循环变量 $j\leftarrow \max(0,i-m)\dots\min(n,i)$</li><li>执行 $h_i\leftarrow h_i+f_j\times g_{i-j}$</li></ol><p>考虑这一过程的转置，其流程如下：</p><ol><li>循环变量 $i\leftarrow n+m\dots 0$</li><li>循环变量 $j\leftarrow \min(n,i)\dots\max(0,i-m)$</li><li>执行 $f_j\leftarrow f_j+h_i\times g_{i-j}$</li></ol><p>相当于在已知 $H(x)$ 和 $G(x)$ 的情况下求解 $F(x)$。其中</p><script type="math/tex; mode=display">f_k=\sum_{i-j=k}h_ig_j=\sum_{i+(m-j)=m+k}h_ig^{\mathrm R}_{m-j}=\sum_{i+j=m+k}h_ig^{\mathrm R}_j</script><p>其中 $g^{\mathrm R}_i=g_{m-i}$，即 $G$ 的所有系数翻转过来。</p><p>于是我们可以如下定义多项式乘积的转置</p><script type="math/tex; mode=display">[x^k](H\times^{\mathrm T}G)=[x^{m+k}](H\times G^{\mathrm R})</script><p>不难发现，如果 $F(x)$ 是 $n$ 次多项式，$G(x)$ 是 $m$ 次多项式，那么 $(F\times^{\mathrm T}G)(x)$ 会是 $n-m$ 次多项式。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>令</p><script type="math/tex; mode=display">A=\begin{bmatrix}1&a_0^1&a_0^2&\cdots&a_0^n\\1&a_1^1&a_1^2&\cdots&a_1^n\\1&a_2^1&a_2^2&\cdots&a_2^n\\\vdots&\vdots&\vdots&\ddots&\vdots\\1&a_n^1&a_n^2&\cdots&a_n^n\\\end{bmatrix}\qquad\varphi=\begin{bmatrix}f_0\\f_1\\f_2\\\vdots\\f_n\end{bmatrix}\qquad\beta=\begin{bmatrix}b_0\\b_1\\b_2\\\vdots\\b_n\end{bmatrix}</script><p>我们有</p><script type="math/tex; mode=display">A\varphi=\beta</script><p>考虑</p><script type="math/tex; mode=display">\gamma=A^{\mathrm T}\varphi=\begin{bmatrix}1&1&1&\cdots&1\\a_0^1&a_1^1&a_2^1&\cdots&a_n^1\\a_0^2&a_1^2&a_2^2&\cdots&a_n^2\\\vdots&\vdots&\vdots&\ddots&\vdots\\a_0^n&a_1^n&a_2^n&\cdots&a_n^n\\\end{bmatrix}\begin{bmatrix}f_0\\f_1\\f_2\\\vdots\\f_n\end{bmatrix}=\begin{bmatrix}c_0\\c_1\\c_2\\\vdots\\c_n\end{bmatrix}</script><p>不难发现</p><script type="math/tex; mode=display">c_k=\sum_{i=0}^nf_ia_i^k</script><p>定义生成函数</p><script type="math/tex; mode=display">C(x)=\sum_{i=0}^n\frac{f_i}{1-a_ix}</script><p>则</p><script type="math/tex; mode=display">c_k=[x^k]C(x)</script><p>这里 $C(x)$ 可以通过经典的分治 NTT 求解。令</p><script type="math/tex; mode=display">C_{l,r}(x)=\frac{P_{l,r}(x)}{Q_{l,r}(x)}</script><p>对于叶子节点 $[i,i]$，执行</p><script type="math/tex; mode=display">P_{i,i}(x)=f_i</script><script type="math/tex; mode=display">Q_{i,i}(x)=1-a_ix</script><p>对于内部节点 $[l,r]$，执行</p><script type="math/tex; mode=display">P_{l,r}(x)=P_{l,m}(x)Q_{m+1,r}(x)+P_{m+1,r}(x)Q_{l,m}(x)</script><script type="math/tex; mode=display">Q_{l,r}(x)=Q_{l,m}(x)Q_{m+1,r}(x)</script><p>注意到，$Q_{l,r}(x)$ 实际上和 $f_i$ 没有任何关系，我们可以把它们视作常量。然后把剩下的 $(n+1)^2$ 个 $P_{l,r}(x)$ 全部塞进一个向量里，那么上述分治过程就可以视作是一个针对该向量的线性算法。</p><p>我们可以写得再清晰一些，比如说像下面这样</p><script type="math/tex; mode=display">P_{l,r}(x)\leftarrow P_{l,r}(x)+P_{l,m}(x)\times Q_{m+1,r}(x)</script><script type="math/tex; mode=display">P_{l,r}(x)\leftarrow P_{l,r}(x)+P_{m+1,r}(x)\times Q_{l,m}(x)</script><p>以及最后一步的</p><script type="math/tex; mode=display">C(x)\leftarrow C(x)+P_{0,n}(x)\times Q_{0,n}^{-1}(x)</script><p>那么转置之后，第一步自然就是</p><script type="math/tex; mode=display">B_{0,n}(x)\leftarrow B_{0,n}(x)+F(x)\times^{\mathrm T}Q_{0,n}^{-1}(x)</script><p>想不明白为什么吗？我也想不明白。</p><p>在这之后，从上向下分治，对于内部节点 $[l,r]$，执行</p><script type="math/tex; mode=display">B_{l,m}(x)\leftarrow B_{l,m}(x)+B_{l,r}(x)\times^{\mathrm T}Q_{m+1,r}(x)</script><script type="math/tex; mode=display">B_{m+1,r}(x)\leftarrow B_{m+1,r}(x)+B_{l,r}(x)\times^{\mathrm T}Q_{l,m}(x)</script><p>最终对于叶子节点 $[i,i]$，$B_{i,i}(x)$ 必定会是一个 $0$ 次多项式，其仅有的一个常数项系数就是我们要求的 $b_i$ 了。</p><p>当然，如果多项式次数和点值数量不对等也很容易处理，用 $0$ 补齐即可。</p><p><a href="https://www.luogu.com.cn/problem/P5050">请问您要来点板子题吗 qwq？</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这个算法好在哪里：</p><ol><li>常数小：<code>std::vector</code> 也不必太过担心被卡常。</li><li>代码实现难度小：只要能够完全理解整个算法流程，便能够十分迅速且正确地写出代码。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;考虑一个经典的问题。给定 $n$ 次多项式&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;F(x)=\sum_{i=0}^nf_ix^i&lt;/script&gt;&lt;p&gt;和 $n+1$ 个点值 $a_0,a_1,\dots,a_n$。您需要对于每个 $k$，求出 $b_k=F(a_k)$，对 $998244353$ 取模。&lt;/p&gt;
&lt;p&gt;据说以前这种问题都是采用多项式取模的方法。但是现在我们有新科技了。&lt;/p&gt;
&lt;p&gt;本篇文章将会以我个人认为十分通俗易懂的方式来详细地讲解这种新科技。&lt;/p&gt;
&lt;p&gt;参考文献略。&lt;/p&gt;
    
    </summary>
    
      <category term="学术" scheme="https://github.com/Challestend/categories/%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="NTT" scheme="https://github.com/Challestend/tags/NTT/"/>
    
      <category term="多项式" scheme="https://github.com/Challestend/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
      <category term="矩阵" scheme="https://github.com/Challestend/tags/%E7%9F%A9%E9%98%B5/"/>
    
      <category term="多点求值" scheme="https://github.com/Challestend/tags/%E5%A4%9A%E7%82%B9%E6%B1%82%E5%80%BC/"/>
    
      <category term="线性代数" scheme="https://github.com/Challestend/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
      <category term="转置原理" scheme="https://github.com/Challestend/tags/%E8%BD%AC%E7%BD%AE%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>ICPC 2022 Regional 合肥站游记</title>
    <link href="https://github.com/Challestend/icpc-2022-regional-hefei-notes/"/>
    <id>https://github.com/Challestend/icpc-2022-regional-hefei-notes/</id>
    <published>2022-11-20T12:14:52.000Z</published>
    <updated>2023-01-09T02:44:05.068Z</updated>
    
    <content type="html"><![CDATA[<p>今天本来会有一场大物的考试。还好我因为打 ICPC 申请了免考不然就要在大物考场上丢人了。</p><p>前 3h 写出来 6 题。最后 2h 我在写一道数学题，SHX 在写一道数据结构题，结果都没有写出来。</p><p>本来以为写出来 7-8 题可以混一块金牌的。结果赛后一查排行榜，8 题 42 队，7 题 67 队，结果金牌只有 35 块。</p><p>也就是说无论如何都没有大金牌了 /kk</p><p>最后 rank 72 拿了一块银牌。</p><p>这么说来上周的 CCPC 其实是最有希望拿金牌的。如果我能够少浪费一时间的话。</p><p>害群之马竟是我自己 /kk</p><a id="more"></a><h1 id="我写出来的题"><a href="#我写出来的题" class="headerlink" title="我写出来的题"></a>我写出来的题</h1><h2 id="A-Welcome-to-USTC"><a href="#A-Welcome-to-USTC" class="headerlink" title="A. Welcome to USTC"></a>A. Welcome to USTC</h2><p>给定一个字符串 $S$。保证 $S$ 中恰好包含 $\mathtt{U},\mathtt{S},\mathtt{T},\mathtt{C}$ 四个大写英文字母各一个，其他字符均为小写英文字母，且 $\mathtt{USTC}$ 在 $S$ 中作为<strong>子序列</strong>出现。</p><p>每次操作可以交换 $S$ 中的两个相邻字符。现要让 $\mathtt{USTC}$ 在 $S$ 中作为<strong>子串</strong>出现，试求最小操作次数。</p><p>$4\leqslant |S|\leqslant 10^4$。</p><p>$\mathtt{1s/256MB}$。</p><p>设 $\mathtt{U},\mathtt{S},\mathtt{T},\mathtt{C}$ 的下标依次为 $a,b,c,d$，答案显然为</p><script type="math/tex; mode=display">(b-a-1)+2(c-b-1)+(d-c-1)</script><p>时间复杂度 $O(|S|)$，空间复杂度 $O(|S|)$。</p><h2 id="G-Game-Plan"><a href="#G-Game-Plan" class="headerlink" title="G. Game Plan"></a>G. Game Plan</h2><p>您有一个集合 $S$。初始时 $S=\{0\}$。现在您可以进行 $t$ 次操作。在第 $i$ 次操作中，您可以在如下两项中任选其一：</p><ol><li>$S\leftarrow S\cap\{a_i\}$</li><li>$S\leftarrow S\cap\{b_i\}$</li></ol><p>（原题中还有一个值域上界，不过现在看来这个不重要）</p><p>试求 $t$ 次操作后 $\operatorname{mex}(S)$ 的最大值。</p><p>$1\leqslant n\leqslant 10^9$，$1\leqslant t\leqslant 10^6$，$1\leqslant a_i,b_i\leqslant n$。其中 $n$ 为值域上界。</p><p>$\mathtt{1s/256MB}$。</p><p>考虑建图。$n+1$ 个，依次标号为 $1,2,\dots,n+1$。对于每一个 $i$，我们连一条边 $(a_i,b_i)$。</p><p>现在问题转化为，在这张图上，对于每条边标记其中一个端，问未被标记过的标号最小的的标号最大是多少。</p><p>考虑到，如果一个连通块是一棵树，那么我们不得不放弃其中的一个不标记。那么显然放弃标号最大的是最优策略。</p><p>但是在树的基础上，再随便增加一条边，我们都能够做到标记这个连通块中的所有。</p><p>以上。时间复杂度 $O(t\log t)$，空间复杂度 $O(t)$。</p><h2 id="H-Jackpot"><a href="#H-Jackpot" class="headerlink" title="H. Jackpot"></a>H. Jackpot</h2><p>黑板上写有 $n$ 个正整数 $k+1$。每次操作您可以选择一个大于 $1$ 的整数，令其为 $x$，然后它有 $\frac{1}{x-1}$ 的概率变为 $x-1$，$\frac{1}{x-1}$ 的概率变为 $x-2$……$\frac{1}{x-1}$ 的概率变为 $1$。</p><p>您的目的是让所有数都变为 $1$。试求期望操作次数。对 $10^9+7$ 取模。</p><p>多组数据。$1\leqslant n\leqslant 10^9$，$2\leqslant k\leqslant 10^3$。$T\leqslant 10^3$。</p><p>$\mathtt{1s/256MB}$。</p><p>容易发现这些数都是两两独立的。令 $E(i)$ 表示将一个数从 $i$ 变到 $1$ 的期望操作次数，可以直接得出答案等于 $n\cdot E(k+1)$。</p><p>$E(i)$ 也很容易计算。我们可以进行如下的预处理</p><script type="math/tex; mode=display">E(i)=1+\frac{1}{i-1}\sum_{1\leqslant j\lt i}E(j)</script><p>时间复杂度 $O(k^2+T)$，空间复杂度 $O(k)$。</p><h1 id="SHX-写出来的题"><a href="#SHX-写出来的题" class="headerlink" title="SHX 写出来的题"></a>SHX 写出来的题</h1><h2 id="B-Genshin-Impact"><a href="#B-Genshin-Impact" class="headerlink" title="B. Genshin Impact"></a>B. Genshin Impact</h2><p>您可以释放一种火魔法。这种火魔法每 $y$ 秒可以释放一次，每次释放有 $\frac{1}{p}$ 的成功率，如果成功，会使得敌人在接下来的 $x$ 秒内进入燃烧状态。如果敌人已经处于燃烧状态，状态的剩余时间会被重置为 $x$ 秒。</p><p>现在您会一直不停地对着同一个血量无限的敌人释放这种火魔法。试求当经过的时间趋向于正无穷大时，</p><script type="math/tex; mode=display">\frac{\text{敌人处于燃烧状态的时间}}{\text{总时间}}</script><p>的值（……大概收敛吧）。</p><p>多组数据。$1\leqslant x,y,p\leqslant 10^3$。$T\leqslant 10^3$。</p><p>Special Judge：相对误差不超过 $10^{-6}$。</p><p>$\mathtt{1s/256MB}$。</p><p>一看到题面很快啊，我就有了如下的一个看上去很真（大嘘）的想法</p><script type="math/tex; mode=display">\frac{1}{p}\frac{\min(x,y)}{y}</script><p>这个东西显然是不对的。因为如果 $x\gt y$，上一次成功了这一次没有成功那么燃烧状态会持续。</p><p>不过算了，反正 SHX 写出来了。</p><blockquote><p>无穷会把我们在有限的世界里积累起来的直觉打得粉碎。<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　——関原みや</p></blockquote><h2 id="J-Produce-the-Problems"><a href="#J-Produce-the-Problems" class="headerlink" title="J. Produce the Problems"></a>J. Produce the Problems</h2><p>给定 $n,a,b$ 和两个长度为 $n$ 的序列 $d,c$。您需要构造 $n$ 个字符串 $S_1,S_2,\dots,S_n$，其中 $S_i$ 需要恰好包含 $d_i$ 个 $\mathtt{D}$ 和 $c_i$ 个 $\mathtt{C}$。并且，如果令 $S=S_1S_2\cdots S_n$，$S$ 中不能出现超过 $a$ 个连续的 $\mathtt{D}$ 或超过 $b$ 个连续的 $\mathtt{C}$。问是否能够做到。</p><p>$1\leqslant n\leqslant 10^6$，$0\leqslant a,b,d_i,c_i\leqslant 10^6$。</p><p>$\mathtt{1s/256MB}$。</p><p>构造题，一生之敌。</p><p>不过算了，反正 SHX 写出来了。</p><blockquote><p>构造题是人类思维进步的阶梯。<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　——関原みや</p></blockquote><h2 id="M-Mahjong"><a href="#M-Mahjong" class="headerlink" title="M. Mahjong"></a>M. Mahjong</h2><p>得。这题我连题意都不知道。只听说是个大模拟。</p><p>不过算了，反正 SHX 写出来了。</p><blockquote><p>大模拟题就是【ACM 粗口】题。<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　——関原みや</p></blockquote><h1 id="没过的题"><a href="#没过的题" class="headerlink" title="没过的题"></a>没过的题</h1><h2 id="E-My-friends’-friends-are-my-friends"><a href="#E-My-friends’-friends-are-my-friends" class="headerlink" title="E. My friends’ friends are my friends"></a>E. My friends’ friends are my friends</h2><p><strong>Warning：以下所用记号与原始题面存在出入。</strong></p><p><strong>Warning：以下文字已经经过了一定程度的转化，与原始题面想要表达的含义存在出入。</strong></p><p>给定一张 $n$ 个和 $m$ 条边的无向图和一个特殊节点 $r$。点有点权 $a,b$，边有边权 $w$。</p><p>现在每个点上都站着一个人。对于一个点 $i$，如果您能够支付给这个点上的人 $a_i\cdot\operatorname{dist}(r,i)$ 元，那么 TA 就会对您产生 $b_i$ 点贡献。其中 $\operatorname{dist}$ 表示两点间的最短路。</p><p>现在您需要集齐 $S$ 点贡献，但是您的预算只有 $T$ 元。问是否能够做到。</p><p>$1\leqslant n\leqslant 10^4$，$1\leqslant m\leqslant 10^6$，$0\leqslant S\leqslant 10^4$，$0\leqslant T\leqslant 10^{12}$。</p><p>$0\leqslant a_i,b_i\leqslant 10^4$，$1\leqslant w_i\leqslant 10^4$。</p><p>$\mathtt{1s/256MB}$。</p><p>令 $f(i)$ 表示恰好获得 $i$ 点贡献至少需要多少钱。不过 $f(S)$ 比较特殊，它表示至少获得 $S$ 点贡献（即包括了 $S+1$ 点和更多的情况）至少需要多少钱。</p><p>那么我们可以写一个 $O(nS)$ 的背包 DP。</p><p>结果 T 了（悲</p><h2 id="I-Counting-Lines"><a href="#I-Counting-Lines" class="headerlink" title="I. Counting Lines"></a>I. Counting Lines</h2><p>给定 $n$。称平面直角坐标系内横纵坐标均为 $[0,n)$ 上的整数的这 $n^2$ 个点为标记点。一条直线是好的，当且仅当它满足如下两个条件：</p><ol><li>经过至少两个标记点</li><li>与 $x$ 轴的夹角的绝对值小于等于 $\frac{\pi}{4}$</li></ol><p>试求好的直线的数量。</p><p>多组数据。$2\leqslant n\leqslant 10^6$。$T\leqslant 10^3$。</p><p>$\mathtt{1s/256MB}$。</p><p>推了半天结果发现不对（悲</p><p>以下是考场思路：</p><p>我们把夹角在 $[-\frac{\pi}{4},0)$ 的部分逆时针旋转 $\frac{\pi}{2}$ 到 $[\frac{\pi}{4},\frac{\pi}{2})$，然后再减去夹角为 $0$ 和 $\frac{\pi}{4}$ 的部分（加起来一共是 $3n-3$），发现剩下的部分实际上是</p><script type="math/tex; mode=display">\sum_{\Delta x=1}^{n-1}\sum_{\Delta y=1}^{n-1}[\Delta x\perp\Delta y]f(\Delta x,\Delta y)</script><p>其中 $f(\Delta x,\Delta y)$ 表示斜率为 $\frac{\Delta y}{\Delta x}$ 的好的直线的数量。</p><p>套路莫比乌斯反演</p><script type="math/tex; mode=display">\begin{aligned}&\sum_{\Delta x=1}^{n-1}\sum_{\Delta y=1}^{n-1}[\Delta x\perp\Delta y]f(\Delta x,\Delta y)\\=&\sum_{t=1}^{n-1}\mu(t)\sum_{u=1}^{\lfloor(n-1)/t\rfloor}\sum_{v=1}^{\lfloor(n-1)/t\rfloor}f(tu,tv)\\\end{aligned}</script><p>然后就是这里。仔细思考我们会发现，$f(\Delta x,\Delta y)$ 与 $(\Delta x,\Delta y)$ 有关，因此不能直接套二者互质时的式子。</p><p>然后……然后就不会了（悲</p><h2 id="K-Quarantine"><a href="#K-Quarantine" class="headerlink" title="K. Quarantine"></a>K. Quarantine</h2><p>现在有排成一条直线的 $n$ 个居民区，依次标号为 $1,2,\dots,n$。</p><p>有 $m$ 个时间，每次事件有如下 $4$ 中类型：</p><ol><li>给出 $l,r$。区间 $[\max(l-A,1),\min(r+A,n)]$ 内的所有居民区进入「被感染」状态。</li><li>给出 $l,r,k$。如果区间 $[\max(l-A,1),\min(r+A,n)]$ 内处于「被感染」状态的最长连续段长度至少为 $k$，那么区间内的所有居民区进入「隔离」状态；否则，什么也不发生。</li><li>给出 $l,r$。区间 $[\max(l-A,1),\min(r+A,n)]$ 内的所有居民区解除「被感染」状态和「隔离」状态。</li><li>给出 $l,r$。查询区间 $[\max(l-A,1),\min(r+A,n)]$ 内有多少个居民区处于「隔离」状态。</li></ol><p>其中 $A$ 表示上一次事件 $4$，即查询的答案，初始为 $0$。</p><p>$1\leqslant n\leqslant 10^9$，$1\leqslant m\leqslant 10^5$。</p><p>$\mathtt{1s/256MB}$。</p><p>抽象一下的话就是：</p><ol><li>区间覆盖</li><li>查询区间最长连续段长度</li><li>查询区间和</li></ol><p>第一反应是珂朵莉树，但是细想发现需要手写平衡树维护，因为 <code>std::set</code> 在这道题中已经不够用了。</p><p>但是想了想觉得太麻烦了于是放弃了。</p><p>SHX 的写法是动态开点线段树，但是没写出来。</p><h1 id="剩下的题"><a href="#剩下的题" class="headerlink" title="剩下的题"></a>剩下的题</h1><p>C 超级大模拟题（样例解释一页半）</p><p>D 看不懂</p><p>F 神仙计算几何题</p><p>L 神仙数学题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天本来会有一场大物的考试。还好我因为打 ICPC 申请了免考不然就要在大物考场上丢人了。&lt;/p&gt;
&lt;p&gt;前 3h 写出来 6 题。最后 2h 我在写一道数学题，SHX 在写一道数据结构题，结果都没有写出来。&lt;/p&gt;
&lt;p&gt;本来以为写出来 7-8 题可以混一块金牌的。结果赛后一查排行榜，8 题 42 队，7 题 67 队，结果金牌只有 35 块。&lt;/p&gt;
&lt;p&gt;也就是说无论如何都没有大金牌了 /kk&lt;/p&gt;
&lt;p&gt;最后 rank 72 拿了一块银牌。&lt;/p&gt;
&lt;p&gt;这么说来上周的 CCPC 其实是最有希望拿金牌的。如果我能够少浪费一时间的话。&lt;/p&gt;
&lt;p&gt;害群之马竟是我自己 /kk&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://github.com/Challestend/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="数论" scheme="https://github.com/Challestend/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="构造" scheme="https://github.com/Challestend/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="DP" scheme="https://github.com/Challestend/tags/DP/"/>
    
      <category term="图论" scheme="https://github.com/Challestend/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="数学期望" scheme="https://github.com/Challestend/tags/%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B/"/>
    
      <category term="莫比乌斯反演" scheme="https://github.com/Challestend/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
      <category term="ICPC" scheme="https://github.com/Challestend/tags/ICPC/"/>
    
      <category term="2022" scheme="https://github.com/Challestend/tags/2022/"/>
    
      <category term="概率论" scheme="https://github.com/Challestend/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
      <category term="Regional" scheme="https://github.com/Challestend/tags/Regional/"/>
    
      <category term="合肥" scheme="https://github.com/Challestend/tags/%E5%90%88%E8%82%A5/"/>
    
      <category term="难题" scheme="https://github.com/Challestend/tags/%E9%9A%BE%E9%A2%98/"/>
    
      <category term="模拟" scheme="https://github.com/Challestend/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="最短路" scheme="https://github.com/Challestend/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="背包" scheme="https://github.com/Challestend/tags/%E8%83%8C%E5%8C%85/"/>
    
      <category term="数据结构" scheme="https://github.com/Challestend/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Pb. 5</title>
    <link href="https://github.com/Challestend/random-solution-pb-5/"/>
    <id>https://github.com/Challestend/random-solution-pb-5/</id>
    <published>2022-10-18T05:48:02.000Z</published>
    <updated>2022-11-20T12:03:48.669Z</updated>
    
    <content type="html"><![CDATA[<p>2022 年 10 月 17 日 22：35 ~ 次日 00：35，AHU 2021 届不知名 ACM 选手<strong>関原みや</strong>（化名）报名参加 <a href="https://codeforces.com/contest/1743">Educational Codeforces Round 137 (Rated for Div. 2)</a>。期间因急了，C 题 WA 1 发，（某数据随机复杂度虚伪的）D 题 WA 4 发；但最后关头潜力爆发，做出 F 题并成功上分，跻身 Candidate Master 之列。距今已过……不知道多久，佳话永流传。</p><p>来源：<a href="https://codeforces.com/contest/1743/problem/F">CF1743 F Intersection and Union</a></p><a id="more"></a><p>给定 $n$ 个集合 $S_1,S_2,\dots,S_n$，其中 $S_i=[l_i,r_i]\cap\mathbb{Z}$。</p><p>现构造操作序列 $p_1,p_2,\dots,p_{n-1}$，其中 $p_i\in\{\cup,\cap,\oplus\}$，$\cup$ 表示集合的并，$\cap$ 表示集合的交，$\oplus$ 表示集合的对称差。</p><p>显然整个操作序列 $p$ 一共有 $3^{n-1}$ 中方案。试对于每种 $p$，计算</p><script type="math/tex; mode=display">\left|(((S_1\;p_1\;S_2)\;p_2\;S_3)\;p_3\;S_4)\;\cdots\;p_{n-1}\;S_n\right|</script><p>的和。对 $998244353$ 取模。</p><p>$2\leqslant n\leqslant 3\times 10^5$，$0\leqslant l_i\leqslant r_i\leqslant 3\times 10^5$。</p><p>$\mathtt{5s/512MB}$。</p><hr><p>令 $T_k$ 表示下式的计算结果</p><script type="math/tex; mode=display">(((S_1\;p_1\;S_2)\;p_2\;S_3)\;p_3\;S_4)\;\cdots\;p_{k-1}\;S_k</script><p>可以大致看成是 $S_k$ 的前缀和。</p><p>考虑对于每个 $x$，计算有多少种方案使得 $x\in T_n$。</p><p>设当前考察到 $T_{k-1}$。并且有 $x\not\in S_k$，那么：</p><ol><li>如果 $x\not\in T_{k-1}$，无论 $p_k$ 如何取值，总有 $x\not\in T_k$。</li><li>如果 $x\in T_{k-1}$，$p_k=\cap$，那么 $x\not\in T_k$。</li><li>如果 $x\in T_{k-1}$，$p_k=\cup$ 或 $p_k=\oplus$，那么 $x\in T_k$。</li></ol><p>同理，如果 $x\in S_k$，那么：</p><ol><li>如果 $x\not\in T_{k-1}$，$p_k=\cap$，那么 $x\not\in T_k$。</li><li>如果 $x\not\in T_{k-1}$，$p_k=\cup$ 或 $p_k=\oplus$，那么 $x\in T_k$。</li><li>如果 $x\in T_{k-1}$，$p_k=\oplus$，那么 $x\not\in T_k$。</li><li>如果 $x\in T_{k-1}$，$p_k=\cup$ 或 $p_k=\cap$，那么 $x\in T_k$。</li></ol><p>设 $f(k,0/1,0/1)$：其中 $f(k,0,0)$ 表示在 $x\not\in T_{k-1}$ 的情况下，$x\not\in T_k$ 的方案数；剩余状态的含义可以以此类推。我们可以整理出：</p><script type="math/tex; mode=display">\begin{bmatrix}f(k,0,0)&f(k,0,1)\\f(k,1,0)&f(k,1,1)\end{bmatrix}=\begin{bmatrix}f(k-1,0,0)&f(k-1,0,1)\\f(k-1,1,0)&f(k-1,1,1)\end{bmatrix}\begin{bmatrix}3&0\\1&2\end{bmatrix}\quad(x\not\in S_k)</script><script type="math/tex; mode=display">\begin{bmatrix}f(k,0,0)&f(k,0,1)\\f(k,1,0)&f(k,1,1)\end{bmatrix}=\begin{bmatrix}f(k-1,0,0)&f(k-1,0,1)\\f(k-1,1,0)&f(k-1,1,1)\end{bmatrix}\begin{bmatrix}1&2\\1&2\end{bmatrix}\quad(x\in S_k)</script><p>这样我们只需从小到大扫一遍 $x$，用扫描线处理出每个 $S_k$ 是否包含当前 $x$，然后再用线段树维护单点修改和区间矩阵乘积即可。</p><p>当然还有一些细节，比如说 $S_1$ 这个位置有些特殊，所以实际上求解矩阵乘积的时候求解的是 $[2,n]$ 上的乘积，然后再根据是否有 $x\in S_1$ 单独计算 $S_1$ 产生的贡献。</p><p>还有就是，如果 $x\not\in\bigcup S_i$，那么这个 $x$ 不应该参与计算。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2022 年 10 月 17 日 22：35 ~ 次日 00：35，AHU 2021 届不知名 ACM 选手&lt;strong&gt;関原みや&lt;/strong&gt;（化名）报名参加 &lt;a href=&quot;https://codeforces.com/contest/1743&quot;&gt;Educational Codeforces Round 137 (Rated for Div. 2)&lt;/a&gt;。期间因急了，C 题 WA 1 发，（某数据随机复杂度虚伪的）D 题 WA 4 发；但最后关头潜力爆发，做出 F 题并成功上分，跻身 Candidate Master 之列。距今已过……不知道多久，佳话永流传。&lt;/p&gt;
&lt;p&gt;来源：&lt;a href=&quot;https://codeforces.com/contest/1743/problem/F&quot;&gt;CF1743 F Intersection and Union&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="线段树" scheme="https://github.com/Challestend/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="Codeforces" scheme="https://github.com/Challestend/tags/Codeforces/"/>
    
      <category term="矩阵" scheme="https://github.com/Challestend/tags/%E7%9F%A9%E9%98%B5/"/>
    
      <category term="DP" scheme="https://github.com/Challestend/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Pb. 4</title>
    <link href="https://github.com/Challestend/random-solution-pb-4/"/>
    <id>https://github.com/Challestend/random-solution-pb-4/</id>
    <published>2022-10-01T14:16:24.000Z</published>
    <updated>2022-11-21T11:29:44.005Z</updated>
    
    <content type="html"><![CDATA[<p>2022 年 10 月 1 日 20：00 ~ 21：40，AHU 2021 届不知名 ACM 选手<strong>関原みや</strong>（化名）报名参加 <a href="https://atcoder.jp/contests/abc271">AtCoder Beginner Contest 271</a>。期间因大脑短路，A/D/E 题各 WA 1 发，C 题 WA 4 发，G 题本应做出却未能做出（F 题就算了，真不会），最终以 1075th 的坏成绩遗憾<del>离世</del>离场，Rating 倒扣 17 分。距今已过 34 分 24 秒，警钟长鸣。</p><p>来源：<a href="https://atcoder.jp/contests/abc271/tasks/abc271_g">ABC271 G Access Counter</a></p><a id="more"></a><p>高桥君建立了一个网站，然后在上面放置了一个访问计数器。在这之后，高桥君和他的一个朋友青木君会频繁地访问这个网站。</p><p>给定一个长度为 $24$ 的字符串 $c_0c_1\cdots c_{23}$，且 $c_i\in\{\mathtt{T},\mathtt{A}\}$。在访问计数器被设置后的第 $n$ 个小时中（$n$ 从零开始计数），如果 $c_{n\bmod 24}=\mathtt{T}$，那么高桥君有 $X/100$ 的概率访问网站；如果 $c_{n\bmod 24}=\mathtt{A}$，那么青木君有 $Y/100$ 的概率访问网站。</p><p>如果访问计数器统计到的第 $N$ 次访问恰好是高桥君，高桥君会爆炸。因此试求第 $N$ 次访问恰好是青木君的概率。对 $998244353$ 取模。</p><p>$1\leqslant N\leqslant 10^{18}$，$1\leqslant X,Y\leqslant 99$，且 $X$ 和 $Y$ 都是整数。</p><p>$\mathtt{2s/1024MB}$。</p><hr><p>这么一看相当直来直去的概率题。</p><p>令 $P(i,j)$ 表示第 $i$ 次访问的下一次是第 $j$ 次访问的概率。这里不考虑这次访问是谁。显然我们有</p><script type="math/tex; mode=display">P(i,j)=\sum_{n\geqslant 0}\prod_{k=i+1}^{j-1}(1-p_k)\cdot p_j\cdot\left(\prod_{k=1}^n(1-p_k)\right)^n=\frac{\prod_{k=i+1}^{j-1}(1-p_k)\cdot p_j}{1-\prod_{k=1}^n(1-p_k)}</script><p>$Q_t(i)$ 表示第 $t$ 访问对应 $c_i$ 的概率。显然我们有</p><script type="math/tex; mode=display">Q_1(i)=\prod_{k=1}^{i-1}(1-p_k)\cdot p_i</script><script type="math/tex; mode=display">Q_t(i)=\sum_{j=0}^{23}Q_{t-1}(j)P(j,i)</script><p>注意到，如果我们能够把 $P(i,j)$ 和 $Q_t(i)$ 写成如下的矩阵形式的话</p><script type="math/tex; mode=display">A_t=\begin{bmatrix}Q_t(0)\\Q_t(1)\\\vdots\\Q_t(23)\\\end{bmatrix}\quad F=\begin{bmatrix}P(0,0)&P(1,0)&\cdots&P(23,0)\\P(0,1)&P(1,1)&\cdots&P(23,1)\\\vdots&\vdots&\ddots&\vdots\\P(0,23)&P(1,23)&\cdots&P(23,23)\\\end{bmatrix}</script><p>上面那个关系式就可以简写成</p><script type="math/tex; mode=display">A_t=A_{t-1}F=A_1F^{t-1}</script><p>即</p><script type="math/tex; mode=display">A_N=A_1F^{N-1}</script><p>那么我们就可以在 $O(\log N)$ 的时间复杂度内计算出所有的 $Q_N(i)$。虽然严格上来讲这部分还会有一个高达 $24^3$ 的常数。</p><p>那么最终的答案就是</p><script type="math/tex; mode=display">\sum_{i=0}^{23}[c_i=\mathtt{A}]Q_N(i)</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2022 年 10 月 1 日 20：00 ~ 21：40，AHU 2021 届不知名 ACM 选手&lt;strong&gt;関原みや&lt;/strong&gt;（化名）报名参加 &lt;a href=&quot;https://atcoder.jp/contests/abc271&quot;&gt;AtCoder Beginner Contest 271&lt;/a&gt;。期间因大脑短路，A/D/E 题各 WA 1 发，C 题 WA 4 发，G 题本应做出却未能做出（F 题就算了，真不会），最终以 1075th 的坏成绩遗憾&lt;del&gt;离世&lt;/del&gt;离场，Rating 倒扣 17 分。距今已过 34 分 24 秒，警钟长鸣。&lt;/p&gt;
&lt;p&gt;来源：&lt;a href=&quot;https://atcoder.jp/contests/abc271/tasks/abc271_g&quot;&gt;ABC271 G Access Counter&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="AtCoder" scheme="https://github.com/Challestend/tags/AtCoder/"/>
    
      <category term="概率论" scheme="https://github.com/Challestend/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
      <category term="矩阵快速幂" scheme="https://github.com/Challestend/tags/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Ct. 4</title>
    <link href="https://github.com/Challestend/random-solution-ct-4/"/>
    <id>https://github.com/Challestend/random-solution-ct-4/</id>
    <published>2022-09-30T16:43:38.000Z</published>
    <updated>2022-10-01T07:02:54.208Z</updated>
    
    <content type="html"><![CDATA[<p>第一次试图在实验室过夜并打 Codeforces Global Round。</p><blockquote><p>d*m「听上去很容易下分的样子。」</p></blockquote><p>85 min 写出来四题我觉得已经可以开香槟了。这波上大分。</p><p>于是从考场偷偷溜出来写一写题解（</p><p>用户名 CLT，如果想要 AC 代码请去 CF 翻提交记录。（考场代码，不保证可读性）</p><a id="more"></a><h2 id="A-Glory-Addicts"><a href="#A-Glory-Addicts" class="headerlink" title="A. Glory Addicts"></a>A. Glory Addicts</h2><p>您有 $n$ 个技能。第 $i$ 个技能的类型为 $a_i$（只能为 $0$ 或 $1$，$0$ 表示火属性技能，$1$ 表示冰属性技能），威力为 $b_i$。</p><p>您需要将这 $n$ 个技能每个释放恰好一遍。</p><p>如果释放一个技能时，之前刚刚释放过一个不同类型的技能，那么当前这个技能威力翻倍。</p><p>试求所有技能实际威力之和的最大值。</p><p>多组数据。$1\leqslant n\leqslant 10^5$，$a_i\in\{0,1\}$，$1\leqslant b_i\leqslant 10^9$。$\sum n\leqslant 10^5$。</p><p>$\texttt{2s/512MB}$。</p><p>假设火属性技能的数量严格大于冰属性技能的数量，那么有一种思路是：</p><ol><li>释放威力最低的火属性技能</li><li>释放威力最高的冰属性技能</li><li>释放威力最高的火属性技能</li><li>释放威力第二高的冰属性技能</li><li>释放威力第二高的火属性技能</li><li>……（如此重复直到所有的冰属性技能均被释放过）</li><li>释放剩余的火属性技能</li></ol><p>这样一来，所有的冰属性技能和等数量的威力最高的火属性技能被以双倍威力释放。</p><p>反过来，如果释放的第一个技能是威力最低的冰属性技能，模拟一遍会发现，除了这个威力最低的冰属性技能的威力从双倍变成了单倍，其他方面没有任何变化。因此，火属性技能较多时，释放的第一个技能应当是火属性技能。</p><p>同理，冰属性技能较多时，释放的第一个技能应当是冰属性技能。</p><p>但是如果两种技能恰好数量相同，那么就不得不牺牲一个威力最低的技能了（它只能以单倍威力释放）。</p><h2 id="B-Prefix-Sum-Addicts"><a href="#B-Prefix-Sum-Addicts" class="headerlink" title="B. Prefix Sum Addicts"></a>B. Prefix Sum Addicts</h2><p>假设有一个长度为 $n$ 的单调不下降序列 $a$。定义其前缀和序列 $s$ 为</p><script type="math/tex; mode=display">s_i=\sum_{j=1}^ka_j</script><p>现在给定 $s_{n-k+1},s_{n-k+2},\dots,s_n$，试求是否存在一个符合条件的 $a$。</p><p>多组数据。$1\leqslant n\leqslant 10^5$，$1\leqslant k\leqslant n$，$|s_i|\leqslant 10^9$。$\sum n\leqslant 10^5$。</p><p>$\texttt{2s/512MB}$。</p><p>如果 $k=1$ 那么必定有解。以下考虑 $k\gt 1$。</p><p>首先肯定是检查一下它给的这部分 $s$ 是否满足差分单调不下降。</p><p>然后如果 $k=n$ 还需要有 $s_1\leqslant s_2-s_1$。</p><p>然后令 $x=s_{n-k+2}-s_{n-k+1}$，那么对于所有的 $1\leqslant i\leqslant n-k+1$，需要有 $a_i\leqslant x$。</p><p>那么显然只要 $(n-k+1)x\geqslant s_{n-k+1}$ 就必定会有解。至于这个解具体长什么样，这不重要。</p><h2 id="C-Even-Number-Addicts"><a href="#C-Even-Number-Addicts" class="headerlink" title="C. Even Number Addicts"></a>C. Even Number Addicts</h2><p>Alice 和 Bob 在一起玩游戏。</p><p>现在他们面前有 $n$ 个数 $a_1,a_2,\dots,a_n$。每次一个人可以选择其中的一个数，将其加入自己的得分，然后将其删去。Alice 先手。</p><p>等到所有数都被删去之后，如果 Alice 的得分是偶数，那么 Alice 获胜；否则，即若 Alice 的得分是奇数，那么 Bob 获胜。</p><p>Alice 和 Bob 都足够聪明。试判断谁会获胜。</p><p>多组数据。$1\leqslant n\leqslant 100$，$|a_i|\leqslant 10^9$。$1\leqslant T\leqslant 100$，这里 $T$ 表示数据组数。</p><p>$\texttt{2s/512MB}$。</p><p>令 $O(x,y)$ 表示当前剩余 $x$ 个奇数和 $y$ 个偶数，且 Alice 先手时，Alice 能否让自己的最终得分为奇数。</p><p>$E(x,y)$ 类似，不过是能否让自己的最终得分为偶数。</p><p>首先考虑边界条件。手玩一下可以发现</p><script type="math/tex; mode=display">O(4k+1,0)=\texttt{T}\quad O(4k+2,0)=\texttt{T}\quad(k\geqslant 0)</script><script type="math/tex; mode=display">O(4k+3,0)=\texttt{F}\quad O(4k+4,0)=\texttt{F}\quad(k\geqslant 0)</script><script type="math/tex; mode=display">O(0,k)=\texttt{F}\quad(k\gt 0)</script><script type="math/tex; mode=display">E(4k+1,0)=\texttt{F}\quad E(4k+2,0)=\texttt{F}\quad(k\geqslant 0)</script><script type="math/tex; mode=display">E(4k+3,0)=\texttt{T}\quad E(4k+4,0)=\texttt{T}\quad(k\geqslant 0)</script><script type="math/tex; mode=display">E(0,k)=\texttt{T}\quad(k\gt 0)</script><p>其中 $\texttt{T}$ 表示 <code>true</code>，$\texttt{F}$ 表示 <code>false</code>。</p><p>考虑 $x\geqslant 1$ 且 $y\geqslant 1$ 时。此时 Alice 有两种选择：删去一个奇数，或者删去一个偶数。</p><p>如果 Alice 希望她的得分是奇数，且她选择删去一个奇数，那么当前局面变为 $x-1$ 个奇数和 $y$ 个偶数，且 Alice 之后的得分需要是偶数。</p><p>此时 Bob 同样有两种选择：（$x\geqslant 2$ 时才可以）删去一个奇数，或者（任何情况都可以）删去一个偶数。</p><p>这两种情况分别对应了 $(x=1\vee E(x-2,y))$ 和 $E(x-1,y-1)$。显然只有这两种情况的结果均为 $\texttt{T}$ 时 Alice 才能获胜。</p><p>以此类推，还有如下三种情况：</p><ol><li>Alice 希望她的得分是奇数，且她选择删去一个偶数</li><li>Alice 希望她的得分是偶数，且她选择删去一个奇数</li><li>Alice 希望她的得分是偶数，且她选择删去一个偶数</li></ol><p>总而言之我们有</p><script type="math/tex; mode=display">O(x,y)=OO(x,y)\vee OE(x,y)</script><script type="math/tex; mode=display">E(x,y)=EO(x,y)\vee EE(x,y)</script><p>其中</p><script type="math/tex; mode=display">OO(x,y)=(x=1\vee E(x-2,y))\wedge E(x-1,y-1)</script><script type="math/tex; mode=display">OE(x,y)=(y=1\vee O(x,y-2))\wedge O(x-1,y-1)</script><script type="math/tex; mode=display">EO(x,y)=(x=1\vee O(x-2,y))\wedge O(x-1,y-1)</script><script type="math/tex; mode=display">EE(x,y)=(y=1\vee E(x,y-2))\wedge E(x-1,y-1)</script><p><del>读者可自行验证正确性。</del></p><h2 id="D-Permutation-Addicts"><a href="#D-Permutation-Addicts" class="headerlink" title="D. Permutation Addicts"></a>D. Permutation Addicts</h2><p>给定一个长度为 $n$ 的排列 $a_1,a_2,\dots,a_n$ 和 $0\leqslant k\leqslant n$。</p><p>现构造序列 $b$。对于每个 $1\leqslant i\leqslant n$：</p><ol><li>如果 $a_i\leqslant k$，令 $b_{a_i}$ 的值为所有满足 $1\leqslant j\lt i$ 且 $a_j\gt k$ 的 $j$ 中最大的 $j$ 对应的 $a_j$。如果不存在这样的 $j$，令 $b_{a_i}$ 的值为 $n+1$。</li><li>如果 $a_i\gt k$，令 $b_{a_i}$ 的值为所有满足 $1\leqslant j\lt i$ 且 $a_j\leqslant k$ 的 $j$ 中最大的 $j$ 对应的 $a_j$。如果不存在这样的 $j$，令 $b_{a_i}$ 的值为 $0$。</li></ol><p>现给定构造好的 $b$，要求还原出 $k$ 的值和整个的 $a$。多解则任意输出。</p><p>多组数据。$1\leqslant n\leqslant 10^5$，$0\leqslant b_i\leqslant n+1$。$\sum n\leqslant 10^5$。输入数据保证有解。</p><p>$\texttt{2s/512MB}$。</p><p>为了方便，以下称 $\leqslant k$ 的数为小数，$\gt k$ 的数为大数。</p><p>如果 $b_y=x$，一种简单的思路就是直接把 $y$ 摆在 $x$ 右侧一个位置。$x=0$ 和 $x=n+1$ 的情况则是摆在排列最左侧。</p><p>如果有多个两两不同的 $y_1,y_2,\dots,y_s$ 满足 $b_{y_i}=x$，那么这些 $y_i$ 都摆在 $x$ 右侧最靠近的位置即可，且它们之间的相对顺序无影响。</p><p>但是可能会存在一些 $z_1,z_2,\dots,z_t$ 满足 $b_{z_j}=y_{i_0}$，这样的话 $y_{i_0}$ 必须要在其他 $y_i$ 的右侧，然后再往右侧直接接 $z_j$。</p><p>考虑到，无论如何，$y_i$ 和 $z_j$ 不可能同时是小数或大数，必定是以下两种情况恰好之一：</p><ol><li>$y_i$ 都是小数，$z_j$ 都是大数。</li><li>$y_i$ 都是大数，$z_j$ 都是小数。</li></ol><p>如果存在超过两个 $y_{i_0}$，那么无论如何排列这些 $y_i$，都会出现要么有一些 $z_j$ 无法紧跟在对应的 $y_{i_0}$ 的右侧，要么两个相邻的 $y_j$ 之间插入了一些 $z_j$（这样 $b_{y_j}$ 的值会不对）。这不符合题目的「保证有解」的限制条件，即每次这样的 $y_{i_0}$ 至多存在一个。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次试图在实验室过夜并打 Codeforces Global Round。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;d*m「听上去很容易下分的样子。」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;85 min 写出来四题我觉得已经可以开香槟了。这波上大分。&lt;/p&gt;
&lt;p&gt;于是从考场偷偷溜出来写一写题解（&lt;/p&gt;
&lt;p&gt;用户名 CLT，如果想要 AC 代码请去 CF 翻提交记录。（考场代码，不保证可读性）&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="Codeforces" scheme="https://github.com/Challestend/tags/Codeforces/"/>
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="构造" scheme="https://github.com/Challestend/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="DP" scheme="https://github.com/Challestend/tags/DP/"/>
    
      <category term="简单题" scheme="https://github.com/Challestend/tags/%E7%AE%80%E5%8D%95%E9%A2%98/"/>
    
      <category term="博弈论" scheme="https://github.com/Challestend/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
      <category term="公平组合游戏" scheme="https://github.com/Challestend/tags/%E5%85%AC%E5%B9%B3%E7%BB%84%E5%90%88%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>ICPC 2022 网络赛 Round 2 部分题解</title>
    <link href="https://github.com/Challestend/icpc-2022-net-contest-round-2/"/>
    <id>https://github.com/Challestend/icpc-2022-net-contest-round-2/</id>
    <published>2022-09-25T13:34:30.000Z</published>
    <updated>2022-10-01T06:00:38.173Z</updated>
    
    <content type="html"><![CDATA[<p>还没有题面。等拿到题面了再补。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;还没有题面。等拿到题面了再补。&lt;/p&gt;

      
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="ICPC" scheme="https://github.com/Challestend/tags/ICPC/"/>
    
      <category term="2022" scheme="https://github.com/Challestend/tags/2022/"/>
    
      <category term="网络赛" scheme="https://github.com/Challestend/tags/%E7%BD%91%E7%BB%9C%E8%B5%9B/"/>
    
      <category term="施工中" scheme="https://github.com/Challestend/tags/%E6%96%BD%E5%B7%A5%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Ct. 3</title>
    <link href="https://github.com/Challestend/random-solution-ct-3/"/>
    <id>https://github.com/Challestend/random-solution-ct-3/</id>
    <published>2022-09-24T12:09:24.000Z</published>
    <updated>2022-09-30T16:43:09.529Z</updated>
    
    <content type="html"><![CDATA[<p>今天 ACM 实验室的一场原题大赛。</p><p>把其中一些觉得稍微有点意思的题跳了出来写一写题解。</p><p>今日题源:</p><ul><li>A: 1426A (*800)</li><li>B1: 1560F1 (*1900)</li><li>B2: 1560F2 (*2100)</li><li>C: 1509B (*1100)</li><li>D: 1295E (*2200)</li><li>E: 1608B (*1200)</li><li>F: 1612D (*1600)</li><li>G: 1624D (*1400)</li><li>H: 1495C (*2300)</li><li>I: 771A (*1500)</li><li>J: 583A (*1000)</li></ul><p>差点就 AK 了。以及被三队暴打。</p><a id="more"></a><h2 id="C-TMT-Document"><a href="#C-TMT-Document" class="headerlink" title="C. TMT Document"></a>C. TMT Document</h2><p>给定一个长度为 $n$ 且只包含 $\texttt{T}$ 和 $\texttt{M}$ 两种字符的字符串 $S$。保证 $3\mid n$。现在需要把 $S$ 分割成若干个互不相交的子序列，且每个子序列都是 $\texttt{TMT}$（$\texttt{Towa Maji Tenshi}$）。试判断是否可能。</p><p>多组数据。$3\leqslant n\lt 10^5$。$\sum n\leqslant 10^5$。</p><p>$\texttt{1s/256MB}$。</p><p>其实……只要把前 $\frac{n}{3}$ 个 $\texttt{T}$ 和后 $\frac{n}{3}$ 个 $\texttt{T}$ 匹配，然后每对 $\texttt{T}$ 中间再塞一个 $\texttt{M}$ 就可以了。</p><p>但是考场被牛客还是哪里的一道 $\texttt{red}$ 题带偏了，写了好几发没过于是暂时搁置了。</p><p>最后回头重新看这道题的时候感觉当时的自己就是个**。</p><h2 id="D-Permutation-Separation"><a href="#D-Permutation-Separation" class="headerlink" title="D. Permutation Separation"></a>D. Permutation Separation</h2><p>给定一个长度为 $n$ 的 $1\sim n$ 的排列 $p$ 和另外一个长度为 $n$ 的序列 $a$。</p><p>首先选定 $1\leqslant k\lt n$，将 $p$ 分割成 $S_L=\{p_1,p_2,\dots,p_k\}$ 和 $S_R=\{p_{k+1},p_{k+2},\dots,p_n\}$ 两个集合。然后执行如下操作若干次（可以是 $0$ 次）：</p><p>选定 $1\leqslant i\leqslant n$，支付 $a_i$ 的代价将 $p_i$ 其移动到另外一个集合——即，如果 $p_i\in S_L$，将 $p_i$ 从 $S_L$ 中删去并加入 $S_R$；反之亦然。</p><p>目标是不存在 $x\in S_L$ 和 $y\in S_R$ 使得 $x\gt y$。试求达成目标需要支付的最小代价。</p><p>值得注意的是，如果操作后 $S_L=\varnothing$ 或 $S_R=\varnothing$，算作目标被达成。</p><p>$2\leqslant n\leqslant 2\times 10^5$，$1\leqslant p_i\leqslant n$，$1\leqslant a_i\leqslant 10^9$。</p><p>$\texttt{2s/256MB}$。</p><p>虽然这是不符合题目要求的，但是让我们首先考虑一下 $k=0$ 时的情况。</p><p>定义 $f(i)$ 表示，在当前的 $k$ 的取值下，通过若干次操作将 $S_L$ 变为 $\{1,2,\dots,i\}$ 的最小代价。特殊地，$f(0)$ 表示将 $S_L$ 变为 $\varnothing$ 的最小代价。</p><p>不难得出</p><script type="math/tex; mode=display">f(0)=0</script><script type="math/tex; mode=display">f(i)=\sum_{j=1}^ia_{q_i}</script><p>其中 $q$ 表示 $p$ 的逆排列。</p><p>如果现在将 $k$ 的值增加 $1$，考虑 $f(i)$ 会如何变化。</p><p>（以下的 $k$ 的值都是增加后的）</p><p>$f(p_k),f(p_k+1),\dots,f(n)$ 会减少 $a_k$，因为现在 $p_k$ 已经在 $S_L$ 中了。</p><p>相对地，$f(0),f(1),\dots,f(p_k-1)$ 会增加 $a_k$，因为现在 $p_k$ 已经不在 $S_R$ 中了。</p><p>那么对于当前 $k$ 的取值，答案显然是</p><script type="math/tex; mode=display">\min_{i=0}^nf(i)</script><p>最终答案就是 $k$ 的所有取值对应答案的 $\min$。这可以很容易地通过线段树维护区间加 + 区间 $\min$ 求解。</p><h2 id="F-X-Magic-Pair"><a href="#F-X-Magic-Pair" class="headerlink" title="F. X-Magic Pair"></a>F. X-Magic Pair</h2><p>给定 $(a,b)$ 和 $x$。执行如下两种操作之一若干次（可以是 $0$ 次）：</p><ol><li>将 $a$ 变为 $|a-b|$。</li><li>将 $b$ 变为 $|a-b|$。</li></ol><p>试求能否把 $a$ 或者 $b$ 变为 $x$。</p><p>多组数据。$1\leqslant a,b,x\leqslant 10^{18}$。</p><p>$\texttt{2s/512MB}$。</p><p>不失一般性，令 $a\leqslant b$。</p><p>令当前状态为 $(a_0,b_0)$。那么可以到达的状态有</p><ol><li>$(a_0,b_0)$</li><li>$(b_0-a_0,b_0)$</li><li>$(a_0,b_0-a_0)$</li><li>$(b_0-2a_0,b_0-a_0)$</li><li>$(a_0,b_0-2a_0)$</li><li>$(b_0-3a_0,b_0-2a_0)$</li></ol><p>脑补一下可以得出：如果令 $b_0=p\cdot a_0+q$，其中 $0\leqslant q\lt a_0$，那么 $a_0$ 和所有的 $p^\prime\cdot a_0+q$ 都会出现，其中 $0\leqslant p^\prime\leqslant p$。</p><p>但是如果持续操作到 $b\lt a$，那么事情会发生变化。</p><p>但是根据类欧几里得算法的相关结论，这个变化次数一定不会超过 $O(\log b)$。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天 ACM 实验室的一场原题大赛。&lt;/p&gt;
&lt;p&gt;把其中一些觉得稍微有点意思的题跳了出来写一写题解。&lt;/p&gt;
&lt;p&gt;今日题源:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A: 1426A (*800)&lt;/li&gt;
&lt;li&gt;B1: 1560F1 (*1900)&lt;/li&gt;
&lt;li&gt;B2: 1560F2 (*2100)&lt;/li&gt;
&lt;li&gt;C: 1509B (*1100)&lt;/li&gt;
&lt;li&gt;D: 1295E (*2200)&lt;/li&gt;
&lt;li&gt;E: 1608B (*1200)&lt;/li&gt;
&lt;li&gt;F: 1612D (*1600)&lt;/li&gt;
&lt;li&gt;G: 1624D (*1400)&lt;/li&gt;
&lt;li&gt;H: 1495C (*2300)&lt;/li&gt;
&lt;li&gt;I: 771A (*1500)&lt;/li&gt;
&lt;li&gt;J: 583A (*1000)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;差点就 AK 了。以及被三队暴打。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="线段树" scheme="https://github.com/Challestend/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="Codeforces" scheme="https://github.com/Challestend/tags/Codeforces/"/>
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="构造" scheme="https://github.com/Challestend/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="原题" scheme="https://github.com/Challestend/tags/%E5%8E%9F%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Pb. 3</title>
    <link href="https://github.com/Challestend/random-solution-pb-3/"/>
    <id>https://github.com/Challestend/random-solution-pb-3/</id>
    <published>2022-09-10T13:43:56.000Z</published>
    <updated>2022-10-01T07:01:42.475Z</updated>
    
    <content type="html"><![CDATA[<p>来源：<a href="https://atcoder.jp/contests/abc268/tasks/abc268_f">ABC268 F Best Concatenation</a></p><a id="more"></a><p>给定 $N$ 个只包含 $\texttt 1$ 到 $\texttt 9$ 的数字和字符 $\texttt X$ 的非空字符串 $S_1,S_2,\dots,S_N$。您需要将这 $N$ 个字符串拼接成一个大串 $T$，即确定一个长度为 $N$ 的排列 $P$ 然后令</p><script type="math/tex; mode=display">T=S_{P_1}+S_{P_2}+\cdots+S_{P_N}</script><p>在这之后，对于每一个满足 $1\leqslant i\lt j\leqslant|T|$ 的 $(i,j)$，如果 $T_i=\texttt X$ 且 $T_j$ 是数字，那么您获得与 $T_j$ 的数值相等的分数。试求您能够获得的最终分数的最大值。</p><p>$2\leqslant N\leqslant 2\times 10^5$，$\sum|S_i|\leqslant 2\times 10^5$。</p><p>$\texttt{2s/1024MB}$。</p><hr><p>也不知道我这个题意说的清不清楚。</p><p>总之就是如果前面有一个 ‘X’ 后面有一个数字那么就获得那个数字那么多的分数。然后求最大分数。</p><p>对于每个 $S_i$，令 $A_i$ 表示其中 $\texttt X$ 的数量，$B_i$ 表示其中数字的值的总和。</p><p>考虑已经确定了排列 $P$。此时若交换 $P_i$ 和 $P_{i+1}$，不难发现分数变化量为</p><script type="math/tex; mode=display">A_{P_{i+1}}B_{P_i}-A_{P_i}B_{P_{i+1}}</script><p>如果 $P$ 是最优解，上面这个变化量需要 $\leqslant 0$。整理一下得到</p><script type="math/tex; mode=display">\frac{A_{P_i}}{B_{P_i}}\geqslant\frac{A_{P_{i+1}}}{B_{P_{i+1}}}</script><p>即 $\frac{A_{P_i}}{B_{P_i}}$ 单调不增。</p><p>那么把所有 $\frac{A_i}{B_i}$ 算出来排个序即可。注意特殊处理一下 $B_i=0$ 的情况。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源：&lt;a href=&quot;https://atcoder.jp/contests/abc268/tasks/abc268_f&quot;&gt;ABC268 F Best Concatenation&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="AtCoder" scheme="https://github.com/Challestend/tags/AtCoder/"/>
    
      <category term="排序" scheme="https://github.com/Challestend/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Ct. 2</title>
    <link href="https://github.com/Challestend/random-solution-ct-2/"/>
    <id>https://github.com/Challestend/random-solution-ct-2/</id>
    <published>2022-09-05T05:18:14.000Z</published>
    <updated>2022-09-10T13:54:21.058Z</updated>
    
    <content type="html"><![CDATA[<p>来源：<a href="https://codeforces.com/contest/1725">COMPFEST 14 - Preliminary Online Mirror (Unrated, ICPC Rules, Teams Preferred)</a></p><p>21：35 开始 5h，02：35 结束。</p><blockquote><p>群友「多打打，运气好直接少走 $70$ 年弯路。」</p></blockquote><p>当然我是 1：00 就去睡觉了，剩下一个 C 交给 chr 写了。</p><p>当然之前 20：00 的 ARC 我是不可能一不小心下了一波小分的。没有这种事。</p><a id="more"></a><h2 id="A-Accumulation-of-Dominoes"><a href="#A-Accumulation-of-Dominoes" class="headerlink" title="A. Accumulation of Dominoes"></a>A. Accumulation of Dominoes</h2><p>有一个 $N\times M$ 的网格写有数字，第一行从左到右依次是 $1,2,\dots,M$，第二行是 $M+1,M+2,\dots,2M$，以此类推。试求有多少对格子四联通且数字相差恰好 $1$。</p><p>$1\leqslant N,M\leqslant 10^9$。</p><p>$\texttt{1s/256MB}$。</p><p>签到题一号。</p><p>显然 $M\gt 1$ 时答案为 $N\times(M-1)$；$M=1$ 时答案为 $N-1$。</p><h2 id="B-Basketball-Together"><a href="#B-Basketball-Together" class="headerlink" title="B. Basketball Together"></a>B. Basketball Together</h2><p>有 $N$ 个人，第 $i$ 个人的力量是 $P_i$。可以把若干个人组成队伍，这样同一个队伍里的所有人的力量都会变为队伍中力量最大的人的力量。一个队伍是合法的当且仅当其中所有人的力量之和严格大于 $D$。试求至多能组成多少个合法的队伍。</p><p>$1\leqslant N\leqslant 10^5$，$1\leqslant D,P_i\leqslant 10^9$。</p><p>$\texttt{1s/256MB}$。</p><p>签到题二号。</p><p>显然最优策略是选定一个剩下的人里面力量最大的。设这个人的力量为 $A$，那么在从剩下的人里面抽出来力量最小的 $\left\lceil\frac{D+1}{A}\right\rceil-1$ 个人凑成一个队伍即可。</p><h2 id="G-Garage"><a href="#G-Garage" class="headerlink" title="G. Garage"></a>G. Garage</h2><p>如果一个正整数 $x$ 能够被表示成 $b^2-a^2$ 的形式，其中 $1\lt a\lt b$，那么称 $x$ 是好的。试求第 $N$ 小的好的正整数。</p><p>$1\leqslant N\leqslant 10^9$。</p><p>$\texttt{1s/128MB}$。</p><p>当然，OEIS 上是能够找到这个数列的。它是 <a href="http://oeis.org/A024352">A024352</a>。</p><p>我们可以看到，有 $a_n=4+\left\lfloor\frac{4n-3}{3}\right\rfloor\;(n\gt 1)$。特殊地，$a_1=3$。</p><h2 id="M-Moving-Both-Hands"><a href="#M-Moving-Both-Hands" class="headerlink" title="M. Moving Both Hands"></a>M. Moving Both Hands</h2><p>有一张 $N$ 个点 $M$ 条边的有向图，无重边，无自环，边有边权。现在 Challestend 想要玩一个游戏：首先将他的两只手分别放在两个不同的点上。每次他可以将其中一只手沿着一条边移动到一个相邻的点。这一过程需要花费的时间等于边的边权。如果某个时刻 Challestend 的两只手停留在了同一个点上，那么结束游戏。</p><p>试求，对于所有 $2\leqslant p\leqslant N$，如果 Challestend 的左手放在 $1$ 号点上，右手放在 $p$ 号点上，那么他是否能够在有限时间内结束游戏，以及如果答案为是，结束游戏的最短用时是多少。</p><p>$2\leqslant N\leqslant 10^5$，$0\leqslant M\leqslant 2\times 10^5$，边权 $1\leqslant W_i\leqslant 10^9$。</p><p>$\texttt{1s/256MB}$。</p><p>日常花式求最短路。相当于求 $1$ 到 $p$ 的最短路，但是要求路径的前半段正常走，后半段要按照边的反方向走。</p><p>总之就是正着求一遍最短路然后倒着再求一遍就可以了。</p><h2 id="H-Hot-Black-Hot-White"><a href="#H-Hot-Black-Hot-White" class="headerlink" title="H. Hot Black Hot White"></a>H. Hot Black Hot White</h2><p>令 $\operatorname{concat}(x,y)$ 表示将 $x$ 和 $y$ 在 $10$ 进制下拼接起来得到的数，如 $\operatorname{concat}(10,24)=1024$。</p><p>给定 $N$ 个数 $A_1,A_2,\dots,A_N$，保证 $N$ 是偶数。将这 $N$ 个数分成两类，每类 $\frac{N}{2}$ 个。如果存在一个数 $Z\in[0,3)$，使得对于任意一对被分到不同类的 $A_i$ 和 $A_j$，都有</p><script type="math/tex; mode=display">\operatorname{concat}(A_i,A_j)\times\operatorname{concat}(A_j,A_i)+A_i\times A_j\not\equiv Z\pmod 3</script><p>那么这种分类方案是好的。试给出一种好的分类方案并给出对应的 $Z$。</p><p>$2\leqslant N\leqslant 10^5$，$1\leqslant A_i\leqslant 10^9$。</p><p>$\texttt{1s/256MB}$。</p><p>众所周知，一个数模 $3$ 等于它的 $10$ 进制数位和模 $3$。根据这一条性质，我们能够很容易地得出</p><script type="math/tex; mode=display">\operatorname{concat}(x,y)\equiv x+y\pmod 3</script><p>于是限制条件可以整理为</p><script type="math/tex; mode=display">A_i^2+A_j^2\not\equiv Z\pmod 3</script><p>$0,1,2$ 平方之后分别变为 $0,1,1$。那么相当于将 $N$ 个 $0$ 或 $1$ 分成两类，并且找到一个数使得它不能通过从两类中分别选出一个数相加得到。不难发现，$0$ 比较多时可以取 $2$，$1$ 比较多时可以取 $0$。</p><h2 id="C-Circular-Mirror"><a href="#C-Circular-Mirror" class="headerlink" title="C. Circular Mirror"></a>C. Circular Mirror</h2><p>一个圆上排列着 $N$ 个标记点，顺时针标记为 $1,2,\dots,N$。对于 $1\leqslant i\lt N$，$i$ 号点到 $i+1$ 号点之间的弧长为 $D_i$；$N$ 号点到 $1$ 号点之间的弧长为 $D_N$。</p><p>现在需要用 $1\sim M$ 的 $M$ 种颜色给每个标记点上色，且不能出现构成直角三角形的三个标记点颜色均相同的情况。求方案数，对 $998244353$ 取模。</p><p>$1\leqslant N\leqslant 3\times 10^5$，$2\leqslant M\leqslant 3\times 10^5$。</p><p>$\texttt{1s/256MB}$。</p><p>以下仅考虑 $N\gt 2$。</p><p>考虑直径穿过的一对标记点，如果这两个标记点颜色相同，那么用于这两个标记点的颜色就不能用于其他标记点；如果这两个标记点颜色不同，那么并没有什么其他限制。</p><p>设一共有 $K$ 对标记点被直径穿过。考虑枚举有 $i$ 对标记点颜色相同，可以很容易地得到答案为</p><script type="math/tex; mode=display">\sum_{i=0}^K{K\choose i}{M\choose i}i!(M-i)^{K-i}(M-i-1)^{K-i}(M-i)^{N-2K}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源：&lt;a href=&quot;https://codeforces.com/contest/1725&quot;&gt;COMPFEST 14 - Preliminary Online Mirror (Unrated, ICPC Rules, Teams Preferred)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;21：35 开始 5h，02：35 结束。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;群友「多打打，运气好直接少走 $70$ 年弯路。」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然我是 1：00 就去睡觉了，剩下一个 C 交给 chr 写了。&lt;/p&gt;
&lt;p&gt;当然之前 20：00 的 ARC 我是不可能一不小心下了一波小分的。没有这种事。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="Codeforces" scheme="https://github.com/Challestend/tags/Codeforces/"/>
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="构造" scheme="https://github.com/Challestend/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="思维" scheme="https://github.com/Challestend/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="Dijkstra" scheme="https://github.com/Challestend/tags/Dijkstra/"/>
    
      <category term="简单题" scheme="https://github.com/Challestend/tags/%E7%AE%80%E5%8D%95%E9%A2%98/"/>
    
      <category term="贪心" scheme="https://github.com/Challestend/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="OEIS" scheme="https://github.com/Challestend/tags/OEIS/"/>
    
      <category term="计数" scheme="https://github.com/Challestend/tags/%E8%AE%A1%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>你解锁了『牺牲者污化以撒』</title>
    <link href="https://github.com/Challestend/epiphany-tr-isaac/"/>
    <id>https://github.com/Challestend/epiphany-tr-isaac/</id>
    <published>2022-08-29T12:56:07.000Z</published>
    <updated>2023-01-07T04:28:30.873Z</updated>
    
    <content type="html"><![CDATA[<p>英文原文是 “Sacrifice”，为了匹配堕化角色解锁成就的命名格式（比如<strong>堕化以撒</strong>解锁成就 “Broken” 被译为「神伤者」）而译为「牺牲者」。</p><p>解锁方式：使用<strong>堕化以撒</strong>击败精神错乱。</p><p>初始基础属性和<strong>以撒</strong>完全相同；自带一个炸弹；自带次要主动道具 <strong>Blighted Dice</strong>。</p><a id="more"></a><h2 id="被动能力"><a href="#被动能力" class="headerlink" title="被动能力"></a>被动能力</h2><p><strong>LESS OPTIONS</strong></p><p><strong>MORE CONTROL</strong></p><p><strong>污化以撒</strong>与<strong>堕化以撒</strong>类似，只能同时持有 $8$ 个被动道具，且剧情道具和<strong>长子名分</strong>不占据被动道具槽。但与<strong>堕化以撒</strong>不同的是，<strong>污化以撒</strong>没有所有道具二选一的能力。</p><p>关于 <strong>MORE CONTROL</strong>，见 <strong>Blighted Dice</strong>。</p><h2 id="Blighted-Dice"><a href="#Blighted-Dice" class="headerlink" title="Blighted Dice"></a>Blighted Dice</h2><p><strong>Reroll a part of you</strong></p><p>道具品质 $4$。</p><p>主动道具，$1$ 充能。</p><p>无标签。</p><p>存在于以下道具池：宝箱房，隐藏房，贪婪模式商店，贪婪模式隐藏房，腐烂乞丐。</p><p>使用时，将被动道具槽内当前被选中的道具摧毁，并生成两个随机底座道具，这两个道具均为来自相同道具池内的相同品质道具，且只能拾取一个。</p><p>使用后，该道具变为 <strong>Broken Dice</strong>。</p><h2 id="Broken-Dice"><a href="#Broken-Dice" class="headerlink" title="Broken Dice"></a>Broken Dice</h2><p><strong>Ruined destiny</strong></p><p>道具品质 $4$。</p><p>主动道具，$6$ 充能。</p><p>标签：非伊甸</p><p>不在任何道具池内且为隐藏道具。</p><p>该道具可以在任意充能时使用。使用时，不消耗充能并触发 <strong>Blighted Dice</strong> 的使用效果，但只生成一个底座道具，同时移除角色的一个心之容器或两颗魂心（可能致死）。</p><p>满充能时，该道具转化为同样满充能的 <strong>Blighted Dice</strong>。</p><p>持有未满充能的该道具时，若触碰底座道具，角色会将其摧毁，然后将该道具充能至满充能。如果角色处于这种状态下，被触碰后会被摧毁的底座道具会变得半透明。触碰由 <strong>Blighted Dice</strong> 的使用效果生成的底座道具或剧情道具不会触发这一条。</p><p><strong>游魂</strong>使用该道具会立即死亡。这一条同样适用于<strong>堕化游魂</strong>，虽然在通常的游戏流程中<strong>堕化游魂</strong>无法遇到该道具，因为其没有「攻击性」标签。</p><p><strong>堕化雅各之魂</strong>能够正常使用该道具。</p><h2 id="长子名分"><a href="#长子名分" class="headerlink" title="长子名分"></a>长子名分</h2><p><strong>Better options</strong></p><p><strong>更好的选择</strong></p><p>触发 <strong>Blighted Dice</strong> 的使用效果时，生成的底座道具有 $25\%$ 变为被摧毁的道具品质 $+1$ 的道具。</p><h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><ol><li>若持有未满充能的 <strong>Broken Dice</strong>，角色总是会摧毁遇到的第一个被动底座道具。<strong>千万不要在这种情况下触碰强力道具。剧情道具可以无视这一条，但必须注意的是长子名分在这种情况下会被摧毁，尽管它在某些方面拥有类似于剧情道具的性质。</strong></li><li>若未持有<strong>长子名分</strong>，使用 <strong>Blighted Dice</strong> 摧毁道具只会得到品质相同的道具，这意味着无论摧毁多少个低品质道具都无法使得角色获得较大的提升。</li><li>使用 <strong>Blighted Dice</strong> 摧毁道具时，生成的底座道具会从被摧毁的道具出现的所有道具池中抽取，而与角色实际在哪个道具池中遇到该道具无关。以<strong>五芒星</strong>为例，即使角色通过 BOSS 掉落的形式获取该道具，将其摧毁时仍然可能会生成恶魔房道具池甚至是究极隐藏房道具池的道具。</li><li>即使一个道具已经因为被角色拾取过而被移除出道具池，它仍然可能被 <strong>Blighted Dice</strong> 生成。</li><li>BOSS 房的 $1$ 级道具中有很多提供心之容器的道具，这类道具即使被放下不会收回已经获得的心之容器。使用 <strong>Blighted Dice</strong> 摧毁一个这类道具大概率会得到另外两个提供心之容器的道具。这相当于 $6$ 格充能换取至少一个心之容器的血量，而且如果当前层存在确定不需要的其他道具则还可以牺牲它们来换取充能。重复这样做，角色可以获得大量的心之容器用于获取恶魔交易等用途。</li><li>若未持有<strong>长子名分</strong>，使用 <strong>Blighted Dice</strong> 无法得到高品质的道具，这使得<strong>污化以撒</strong>在获取高品质道具方面不如<strong>堕化以撒</strong>。因为虽然前者能够通过 <strong>Blighted Dice</strong> 产生多次而不仅仅是一次二选一，这些二选一的品质始终是确定的；而后者则有可能在虽然仅有一次的二选一中获得高品质道具。</li><li><strong>逆位审判</strong>可以在当前房间生成补货机，可以将 <strong>Blighted Dice</strong> 生成的道具重置为当前房间道具池的道具。可以在天使房/恶魔房/隐藏房使用这一策略，因为这些房间道具池的道具平均质量较高。隐藏房有时会出现天然生成的补货机，也可以加以利用。</li><li>剩余部分基本上和<strong>堕化以撒</strong>类似，如<strong>糖果心</strong>，<strong>灵魂吊坠</strong>，<strong>店长的胯袋</strong>，<strong>谷底石</strong>等道具能够给角色带来极大的属性提升；<strong>虚空</strong>，<strong>无底坑</strong>等道具能够回收利用角色不得不放下的道具等。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;英文原文是 “Sacrifice”，为了匹配堕化角色解锁成就的命名格式（比如&lt;strong&gt;堕化以撒&lt;/strong&gt;解锁成就 “Broken” 被译为「神伤者」）而译为「牺牲者」。&lt;/p&gt;
&lt;p&gt;解锁方式：使用&lt;strong&gt;堕化以撒&lt;/strong&gt;击败精神错乱。&lt;/p&gt;
&lt;p&gt;初始基础属性和&lt;strong&gt;以撒&lt;/strong&gt;完全相同；自带一个炸弹；自带次要主动道具 &lt;strong&gt;Blighted Dice&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="颓废" scheme="https://github.com/Challestend/categories/%E9%A2%93%E5%BA%9F/"/>
    
    
      <category term="以撒的结合" scheme="https://github.com/Challestend/tags/%E4%BB%A5%E6%92%92%E7%9A%84%E7%BB%93%E5%90%88/"/>
    
      <category term="MOD" scheme="https://github.com/Challestend/tags/MOD/"/>
    
      <category term="Epiphany" scheme="https://github.com/Challestend/tags/Epiphany/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Ct. 1</title>
    <link href="https://github.com/Challestend/random-solution-ct-1/"/>
    <id>https://github.com/Challestend/random-solution-ct-1/</id>
    <published>2022-08-21T00:09:41.000Z</published>
    <updated>2022-08-28T02:46:39.679Z</updated>
    
    <content type="html"><![CDATA[<p>来源：<a href="https://codeforces.com/contest/1715">Codeforces Round #816 (Div. 2)</a></p><p>为什么是 Ct 呢因为这是一整场比赛的题解。</p><p>为什么 tag 这么多呢因为一道题对应两三个 tag。</p><a id="more"></a><h2 id="A-Crossmarket"><a href="#A-Crossmarket" class="headerlink" title="A. Crossmarket"></a>A. Crossmarket</h2><p>有一个 $n\times m$ 的网格。Stanley 要从 $(1,1)$ 移动到 $(n,m)$，Megan 要从 $(n,1)$ 移动到 $(1,m)$。两个人可以在 $1$ 个单位时间内移动到自己当前所在格子四联通的格子，而且可以任意决定自己的出发时间。除此之外，Megan 会在经过的每个格子上留下传送门，Stanley 可以在 $1$ 个单位时间内在任意两个传送门之间移动。求两人到达各自终点的合计用时最少是多少。</p><p>多组数据。$1\leqslant n,m\leqslant 10^5$。</p><p>$\texttt{1s/256MB}$。</p><p>样例解释已经很明显地告诉了我们答案是 $2(n+m-2)-\max\{n-1,m-1\}$。</p><p>时间复杂度 $O(1)$，空间复杂度 $O(1)$。</p><h2 id="B-Beautiful-Array"><a href="#B-Beautiful-Array" class="headerlink" title="B. Beautiful Array"></a>B. Beautiful Array</h2><p>构造一组 $a_1,a_2,\dots,a_n$ 使得</p><script type="math/tex; mode=display">\sum_{i=1}^n\left\lfloor\frac{a_i}{k}\right\rfloor=b</script><script type="math/tex; mode=display">\sum_{i=1}^na_i=s</script><p>或判断无解。</p><p>多组数据。$1\leqslant n\leqslant 10^5$，$1\leqslant k\leqslant 10^9$，$0\leqslant b\leqslant 10^9$，$0\leqslant s\leqslant 10^{18}$。$\sum n\leqslant 10^5$。</p><p>$\texttt{1s/256MB}$。</p><p>显然有解当且仅当</p><script type="math/tex; mode=display">bk\leqslant s\leqslant bk+n(k-1)</script><p>构造也很简单。</p><p>时间复杂度 $O(n)$，空间复杂度 $O(n)$。</p><h2 id="C-Monoblock"><a href="#C-Monoblock" class="headerlink" title="C. Monoblock"></a>C. Monoblock</h2><p>给定序列 $a_1,a_2,\dots,a_n$。$m$ 次单点修改，每次修改后求</p><script type="math/tex; mode=display">\sum_{1\leqslant l\leqslant r\leqslant n}g(l,r)</script><p>其中 $g(l,r)$ 表示 $a_l,a_{l+1},\dots,a_r$ 的极长连续段数量。</p><p>$1\leqslant n,m\leqslant 10^5$，$1\leqslant a_i\leqslant 10^9$。</p><p>$\texttt{1s/256MB}$。</p><p>可以将一次修改 $(x,v)$ 拆分为：删去包含位置 $x$ 的区间的贡献；将 $a_x$ 修改为 $v$；重新统计包含位置 $x$ 的区间的贡献。</p><p>甚至初始状态也可以拆分成 $n$ 次修改，第 $i$ 次为 $(i,a_i)$。</p><p>然后就……维护一下每个极长连续段的左右端点再写个线段树啥的数据结构查询一下就可以了。</p><p>懒得写了。</p><p>时间复杂度 $O(n\log n)$，空间复杂度 $O(n)$。</p><h2 id="D-2-doors"><a href="#D-2-doors" class="headerlink" title="D. 2+ doors"></a>D. 2+ doors</h2><p>设有一序列 $a_1,a_2,\dots,a_n$。有 $m$ 条限制，第 $i$ 条形如 $a_{u_i}\vee a_{v_i}=x_i$，其中 $\vee$ 表示按位或。</p><p>求一组字典序最大的解。输入数据保证至少存在一组解。</p><p>$1\leqslant n\leqslant 10^5$，$0\leqslant m\leqslant 2\times 10^5$，$1\leqslant u_i,v_i\leqslant n$，$0\leqslant x_i\lt 2^{30}$。</p><p>$\texttt{1.5s/256MB}$。</p><p>2-SAT。</p><p>时间复杂度 $O(n\log x_i)$，空间复杂度 $O(n+m)$。</p><h2 id="E-Long-Way-Home"><a href="#E-Long-Way-Home" class="headerlink" title="E. Long Way Home"></a>E. Long Way Home</h2><p>有一张 $n$ 个点 $m$ 条边的无向图，边有边权。每次可以沿着一条给定边移动，消耗的时间等于这条边的边权；也可以从点 $u$ 直接跳跃到点 $v$，消耗时间 $(u-v)^2$。</p><p>对于每个点 $i$，求在至多进行 $k$ 次跳跃的前提下，从点 $1$ 到点 $i$ 的最少用时。</p><p>$2\leqslant n\leqslant 10^5$，$1\leqslant m\leqslant 10^5$，$1\leqslant k\leqslant 20$，无重边，可能有自环，$1\leqslant$ 边权 $\leqslant 10^9$。</p><p>$\texttt{3s/256MB}$。</p><p>令 $f(u,i)$ 表示至多进行 $i$ 次跳跃，到达点 $u$ 的最少用时。那么显然 $f(u,0)$ 可以一遍 Dijkstra 求出。</p><p>设当前已经求出了 $f(u,i)$。令 $g(u,i)$ 表示表示至多进行 $i$ 次跳跃，且最有一次移动恰好是一次跳跃，到达点 $u$ 的最少用时。有</p><script type="math/tex; mode=display">g(u,i+1)=\min_{v=1}^n\left\{f(v,i)+(u-v)^2\right\}</script><p>这部分可以一遍斜率优化 DP 求出。</p><p>在这之后，建立一个超级源点 $0$，向其他每个点连一条边权为 $0$ 的边。令点 $u$ 此时的 <code>dist</code> 为 $g(u,i+1)$，用 Dijkstra 更新一遍从点 $0$ 出发的最短路，此时点 $u$ 最终求得的最短路长度就是 $f(u,i+1)$ 的值。</p><p>时间复杂度 $O(k(m\log n+n))$，空间复杂度 $O(n+m)$。</p><h2 id="F-Crop-Squares"><a href="#F-Crop-Squares" class="headerlink" title="F. Crop Squares"></a>F. Crop Squares</h2><p><strong>这是一道交互题。</strong></p><p>在平面直角坐标系中有一个矩形，四个顶点分别为 $(0,0)$，$(0,m)$，$(n,0)$ 和 $(n,m)$。其中有一个平行于坐标轴的 $1\times 1$ 的正方形被标记了。这个正方形被矩形完全包含。</p><p>每次询问，您可以给出一个面积严格为正的简单多边形，交互库会返回这个多边形与被标记正方形的并的面积。这个多边形不需要被矩形完全包含。</p><p>您需要在至多 $5$ 次询问内给出被标记正方形的左下角坐标。</p><p>$1\leqslant n,m\leqslant 100$。</p><p>$\texttt{1s/256MB}$。</p><p>神仙题。</p><p>只需要两次询问。</p><p>第一次询问给出一个下图中的蓝色多边形：</p><p><img src="https://espresso.codeforces.com/f8fbbde4a353dfda4f4d7b0dc70b75a7fda9d3ff.png" alt=""></p><p>其中红色区域是要求的被标记正方形，绿色区域是二者的并。</p><p>若被标记正方形左下角坐标为 $(x,y)$，绿色区域面积为 $S$，有</p><script type="math/tex; mode=display">1-S=\frac{1}{2}\left[\frac{m-y}{m}+\frac{m-y-1}{m}\right]=1-\frac{2y+1}{2m}</script><p>可以解得</p><script type="math/tex; mode=display">y=mS-\frac{1}{2}</script><p>第二次询问给出一个下图中的蓝色多边形：</p><p><img src="https://espresso.codeforces.com/8974338f17a7555e4d686e2d53d2732b0ef5d2e7.png" alt=""></p><p>令绿色区域面积为 $T$，同理有</p><script type="math/tex; mode=display">x=nT-\frac{1}{2}</script><p>时间复杂度 $O(n+m)$，空间复杂度 $O(1)$。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源：&lt;a href=&quot;https://codeforces.com/contest/1715&quot;&gt;Codeforces Round #816 (Div. 2)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么是 Ct 呢因为这是一整场比赛的题解。&lt;/p&gt;
&lt;p&gt;为什么 tag 这么多呢因为一道题对应两三个 tag。&lt;/p&gt;
    
    </summary>
    
      <category term="口胡" scheme="https://github.com/Challestend/categories/%E5%8F%A3%E8%83%A1/"/>
    
    
      <category term="树状数组" scheme="https://github.com/Challestend/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="Codeforces" scheme="https://github.com/Challestend/tags/Codeforces/"/>
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="构造" scheme="https://github.com/Challestend/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="思维" scheme="https://github.com/Challestend/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="观察性质" scheme="https://github.com/Challestend/tags/%E8%A7%82%E5%AF%9F%E6%80%A7%E8%B4%A8/"/>
    
      <category term="2-SAT" scheme="https://github.com/Challestend/tags/2-SAT/"/>
    
      <category term="Dijkstra" scheme="https://github.com/Challestend/tags/Dijkstra/"/>
    
      <category term="斜率优化" scheme="https://github.com/Challestend/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Pb. 2</title>
    <link href="https://github.com/Challestend/random-solution-pb-2/"/>
    <id>https://github.com/Challestend/random-solution-pb-2/</id>
    <published>2022-08-04T09:45:57.000Z</published>
    <updated>2022-08-06T22:50:10.138Z</updated>
    
    <content type="html"><![CDATA[<p>来源：2022 杭电杯 Day 6 1011 Find different。</p><a id="more"></a><p>设有一个长度为 $l$ 的序列 $x_0,x_1,\dots,x_{l-1}$，其中 $0\leqslant x_i\lt m$。两种操作：</p><ol><li>$x_i\leftarrow (x_i+1)\bmod m$</li><li>$x_i\leftarrow x_{(i+1)\bmod n}$</li></ol><p>每次操作时，所有 $x_i$ 同时发生变化。</p><p>两个序列 $x_0,x_1,\dots,x_{l-1}$ 和 $y_0,y_1,\dots,y_{l-1}$，如果 $x$ 能够通过若干次操作变为 $y$，那么称 $x$ 和 $y$ <strong>本质相同</strong>；否则称 $x$ 和 $y$ <strong>本质不同</strong>。</p><p>$(0,2,2)$ 和 $(0,1,0)$ 是本质相同的，因为：</p><ol><li>进行操作 $1$：$(0,2,2)\rightarrow(1,0,0)$</li><li>进行操作 $2$：$(1,0,0)\rightarrow(0,0,1)$</li><li>进行操作 $2$：$(0,0,1)\rightarrow(0,1,0)$</li></ol><p>对于所有 $1\leqslant l\leqslant n$，求出长度为 $l$ 的所有序列中有多少种本质不同的序列。模 $998244353$。</p><p>$n,m\leqslant 10^5$。</p><hr><p>令 $f(n)$ 为长度为 $n$ 且满足题目要求的序列的数量。</p><p>Burnside 引理：集合 $X$ 在群 $\langle G,\times\rangle$ 作用下的等价类数量等于 $G$ 中所有元素作用在集合 $X$ 上时的不动点数量的算术平均值。</p><p>令 $X$ 为全体长度为 $n$ 的序列构成的集合；$G=\{(x,y)\mid 0\leqslant x\lt n,0\leqslant y\lt m\}$，其中 $(x,y)\in G$ 表示进行 $x$ 次操作 $2$ 和 $y$ 次操作 $1$。显然两种操作的相对顺序不影响。</p><p>定义 $G$ 上的乘法 $\times$ 为</p><script type="math/tex; mode=display">(x_1,y_1)\times(x_2,y_2)=(x_1+x_2\bmod n,y_1+y_2\bmod m)</script><p>显然 $\langle G,\times\rangle$ 是一个群。</p><p>考虑在 $(x,y)$ 作用下 $X$ 中的不动点的数量。此时为了方便，把 $x=0$ 看作 $x=n$，$y=0$ 看作 $y=m$。进行 $x$ 次操作 $1$ 会把原序列划分为 $(n,x)$ 个环（简单回路），每个元素移动到对应环上下一个元素的位置上；进行 $y$ 次操作 $2$ 会把所有元素在模 $m$ 意义下加 $y$。如果进行完所有操作之后序列仍保持不变，必是每个元素移动到的位置上原本的数值恰好比自身大 $y$。按照这样推下去，环上的每个元素会比自身大</p><script type="math/tex; mode=display">k\cdot\frac{n}{(n,x)}y\quad(k\geqslant 1)</script><p>那么这就要求</p><script type="math/tex; mode=display">m\Bigm|\frac{n}{(n,x)}y</script><p>于是我们就可以写出答案的表达式</p><script type="math/tex; mode=display">\begin{aligned}&f(n)\\=&\sum_{x=1}^n\sum_{y=1}^m\left[m\Bigm|\frac{n}{(n,x)}y\right]m^{(n,x)}\\=&\sum_{x=1}^n\sum_{y\mid m}\left[\frac{m}{y}\Bigm|\frac{n}{(n,x)}\right]m^{(n,x)}\\=&\sum_{x=1}^n\sum_{y\mid m}\left[y\Bigm|\frac{n}{(n,x)}\right]m^{(n,x)}\\=&\sum_{x=1}^n\left(\frac{n}{(n,x)},m\right)m^{(n,x)}\\=&\sum_{d=1}^n\sum_{x=1}^n\left[(n,x)=d\right]\left(\frac{n}{d},m\right)m^d\\=&\sum_{d\mid n}\sum_{x=1}^{n/d}\left[\left(\frac{n}{d},x\right)=1\right]\left(\frac{n}{d},m\right)m^d\\=&\sum_{d\mid n}\varphi\left(\frac{n}{d}\right)\left(\frac{n}{d},m\right)m^d\\=&\sum_{ij=n}\varphi(i)(i,m)m^j\end{aligned}</script><p>时间复杂度 $O(n\log n)$。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源：2022 杭电杯 Day 6 1011 Find different。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="数论" scheme="https://github.com/Challestend/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="群论" scheme="https://github.com/Challestend/tags/%E7%BE%A4%E8%AE%BA/"/>
    
      <category term="Burnside 引理" scheme="https://github.com/Challestend/tags/Burnside-%E5%BC%95%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>OI Team Meating：2022-07-24</title>
    <link href="https://github.com/Challestend/oi-team-meating-220724/"/>
    <id>https://github.com/Challestend/oi-team-meating-220724/</id>
    <published>2022-07-24T15:08:32.000Z</published>
    <updated>2022-08-06T22:50:06.143Z</updated>
    
    <content type="html"><![CDATA[<p>感觉阿烜一天比一天蛤蟆了。</p><a id="more"></a><p>预定 11：00 到，结果因为一些预想外的事情耽误了 1.5h+，到的时候已经 11：40 了。</p><p>地点是主席家的会议室。</p><p>中午一起去吃了华莱士。于是阿潮下午的时候真的喷射出来了。</p><p>然后下午打了一个下午的红警，虽然因为我完全不会于是毫无游戏体验。</p><p>然后他们似乎开了一局三国杀，然而这个我也是一点都不会。</p><p>聚会体验极差（绝望</p><p>于是这个时候拥有专车接送的主席就回家了。剩下的我们分两路打车去万达吃晚饭。</p><p>然后不知道为什么又回到了去年那个绕了一圈结果去吃火锅的地方。结果真的去吃了火锅。</p><p>吃完晚饭离开万达之后，不知道为什么又回到了去年那个玩剧本杀的地方。</p><blockquote><p>（忘了是谁了）「完了，时间线轮回了。」</p></blockquote><p>于是这次我们不打算开剧本杀然后选了一款名为《鲜血盟约》的桌游。</p><p>结果打开说明书就被超级长的游戏规则震撼到了于是不打算玩了。</p><p>于是阿烜拿来一盘大富翁。</p><p>一开始我玩得顺风顺水，第一个命运格就抽到了「所有人给我 $600$ 元」这样一张牌。</p><p>反观旁边的阿陶，碰到的所有命运格要不就是交钱，要不就是直接进监狱。</p><p>然后是对面的阿烜，那个入狱格就像家一样踩了一遍又一遍。</p><blockquote><p>（忘了是谁了）「进狱系男孩了属于是。」</p></blockquote><p>游戏进行到中盘，R 和我积攒了大量的资本。这个时候阿陶在他的《天目路》上成功地建造了第二栋房子。</p><p>于是我就一不小心踩上去了。于是我就要给阿陶 $3000$ 元。</p><p>也就是这个时候我的局势开始急转直下，不知不觉间之前积攒的资本<strong>全 部 木 大</strong>。</p><p>然后阿陶甚至在他的《天目路》上建起了第三栋房子，踩一脚 $7500$ 元。</p><p>这个时候我的所有土地都已经抵押出去了，然后我手上也没有钱了，然后我现在就站在《天目路》前面一个格子。</p><blockquote><p>我「来个 $1$ 送我走吧。」</p></blockquote><p>一扔。出 $1$ 了。</p><p><strong>一 代 小 资 本 家 的 陨 落。</strong></p><p>后续的话就是，那个《天目路》存在某种引力一样，让其他所有人都情不自禁地往上踩了一脚（同时也几乎送走了其他所有人，除了曾经的大资本家 R 和苟延残喘了很长时间结果踩到一个扣除 $2000$ 元的格子暴毙的 zhuoer），让阿陶几乎一夜翻盘，最终以碾压的优势赢得了胜利。</p><p><strong>风 水 轮 流 转。</strong></p><p>好吧其实也不是，只不过觉得再这么耗下去肯定是阿陶赢于是就这样了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感觉阿烜一天比一天蛤蟆了。&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://github.com/Challestend/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="同学聚会" scheme="https://github.com/Challestend/tags/%E5%90%8C%E5%AD%A6%E8%81%9A%E4%BC%9A/"/>
    
      <category term="颓废" scheme="https://github.com/Challestend/tags/%E9%A2%93%E5%BA%9F/"/>
    
  </entry>
  
  <entry>
    <title>Logic Puzzle Pack</title>
    <link href="https://github.com/Challestend/logic-puzzle-pack/"/>
    <id>https://github.com/Challestend/logic-puzzle-pack/</id>
    <published>2022-07-11T02:15:27.000Z</published>
    <updated>2022-07-24T15:07:36.067Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://store.steampowered.com/bundle/3331/Logic_Puzzle_Pack/">Steam 页面</a></p><p>没错这次是一个系列一共五款游戏。</p><p>这篇文章多少会涉及到一些关于一些基本游戏机制的剧透……不过这种程度应该还好吧。</p><blockquote><p>块「这是扫雷？」</p></blockquote><a id="more"></a><p><img src="/img/20220711101627_1.jpg" alt="Hexcells 1-1"></p><p>如图所示，这的确是一款有些类似扫雷的游戏。</p><p><img src="/img/20220711101806_1.jpg" alt="Hexcells 3-2"></p><p><img src="/img/20220711101815_1.jpg" alt="Hexcells 3-4"></p><p>不过不只是扫雷。</p><p>如同很多类似的解谜游戏一样，这里面所有的谜题都是能够在不依靠瞎蒙乱猜的前提下完成的……大概罢。</p><p>一开始，尤其是第一作 Hexcells 的时候，这个游戏看起来还十分的小清新。但是到了第三作 Hexcells Infinite，事情就开始变得诡异起来了。</p><p><img src="/img/20220711101947_1.jpg" alt="Hexcells Infinite 6-3（这么点条件能做？）"></p><p><img src="/img/20220711101936_1.jpg" alt="Hexcells Infinite 6-5（地狱绘图）"></p><p>觉得必须有一点要指出来的是，这游戏的机制是，每次将一个小格染色的时候，颜色对不对会直接有反馈，并且如果要拿到满星评价的话，整个过程中不能失误一次（手抖也不行）（后期有些关卡会允许至多一次的失误）。</p><p>我个人认为这是不好的设计。很多时候一不小心手都一下可能满星评价就没了。然后如果还想拿到满星评价的话，就必须要从头再玩一遍，或者把最终的图案截图下来然后对着这个一个一个点过去。</p><p>我觉得可以借鉴一下隔壁 <a href="https://store.steampowered.com/app/642650/Peppers_Puzzles/">Pepper’s Puzzles</a> 的设计：染色的时候无法直接知道这个格子的颜色是否正确。只有把所有格子全部染色之后，才能知道是否所有格子的颜色都是正确的。如果有不正确的格子也不会有提示，需要回过头去修改直到所有格子颜色正确。</p><p>这样做虽然可能会出现一个失误导致满盘皆输的情况，不过总体而言肯定要比现在这样过分强调一遍全对的机制要好。</p><p>关于后两作 SquareCells 和 CrossCells……那就是完全不同的两个游戏了。读者可自行尝试。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://store.steampowered.com/bundle/3331/Logic_Puzzle_Pack/&quot;&gt;Steam 页面&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;没错这次是一个系列一共五款游戏。&lt;/p&gt;
&lt;p&gt;这篇文章多少会涉及到一些关于一些基本游戏机制的剧透……不过这种程度应该还好吧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;块「这是扫雷？」&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="颓废" scheme="https://github.com/Challestend/categories/%E9%A2%93%E5%BA%9F/"/>
    
    
      <category term="解谜" scheme="https://github.com/Challestend/tags/%E8%A7%A3%E8%B0%9C/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Pb. 1</title>
    <link href="https://github.com/Challestend/random-solution-pb-1/"/>
    <id>https://github.com/Challestend/random-solution-pb-1/</id>
    <published>2022-06-15T08:02:49.000Z</published>
    <updated>2022-09-10T13:48:00.624Z</updated>
    
    <content type="html"><![CDATA[<p>前几天《2022 年安徽省机器人大赛本科组》的 K 题，也就是最后一题。</p><p>虽然听说都是原题，不过我懒得去找了。</p><a id="more"></a><p>给定一张 $n$ 个节点 $2n-3$ 条边的无向图，保证这些边形成了一个正 $n$ 边形的三角剖分。求这张图的一个最小点覆盖。</p><p>$n\leqslant 10^5$。</p><p><img src="/img/202206151614.png" alt="样例"></p><p>对于上面这个样例来说，答案为 $\{1,3,5,7\}$。</p><hr><p>考虑多边形内部的某一个三角形，不难发现这三个节点中，至多有一个不在点覆盖内。</p><p>如果确定了某一个节点不在点覆盖内，那么与该节点相邻的所有三角形，它们的其它节点则必须在点覆盖内。</p><p>考虑对于每个三角形建立一个方点。</p><p><img src="/img/202206151615.png" alt="差不多像这样"></p><p>如果两个三角形公用一条边，就在两个对应的方点间连一条边。</p><p><img src="/img/202206151616.png" alt="差不多像这样"></p><p>考虑一下这张新图。如果其中出现环，说明多个三角形共用了一个节点，而且这个节点必须要严格在多边形内部才可以。因此新图不存在环。</p><p>同时显而易见地，新图是联通的。因此新图是一棵树。</p><p>那么下一步，考虑与某个节点相邻的所有三角形，这些三角形对应的方点一定形成了新图中的一条简单路径。</p><p>于是问题转化成，给定一棵树和若干条简单路径，选择尽可能多的路径（对应原图中选择尽可能多的点不在点覆盖内），使得这些被选择的路径互不相交（对应点覆盖的性质）。</p><p>这应该是一道树上 DP，但是我调不出来了 :(</p><p>读者可自行尝试（光速逃</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天《2022 年安徽省机器人大赛本科组》的 K 题，也就是最后一题。&lt;/p&gt;
&lt;p&gt;虽然听说都是原题，不过我懒得去找了。&lt;/p&gt;
    
    </summary>
    
      <category term="口胡" scheme="https://github.com/Challestend/categories/%E5%8F%A3%E8%83%A1/"/>
    
    
      <category term="图论" scheme="https://github.com/Challestend/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>ヤマふだ！　にごうめ</title>
    <link href="https://github.com/Challestend/yamafuda/"/>
    <id>https://github.com/Challestend/yamafuda/</id>
    <published>2022-04-05T13:32:57.000Z</published>
    <updated>2022-04-07T14:27:39.767Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://store.steampowered.com/app/1727520?snr=5000_5100___primarylinks">Steam 页面</a></p><p>听说最近杀戮尖塔更新了，而且是大更新。</p><p>把之前有一个 mod 角色加进来了，忘了名字不过记得是一个如果有一张牌正好在手牌正中央的话，打出去会有加成的角色。有一说一之前玩的时候就觉得这个角色综合质量极高，说成是官方角色都不奇怪。</p><p>而且似乎还吸收了 DownFall 的内容，不过没怎么玩过所以不评价。</p><p>扯得有点远，总之就是一个轻松愉快的爬山(?)游戏。</p><p>你这爬山怎么一边爬一边打牌啊（小声</p><p>想起来有句话：你这打架怎么掷骰子啊（</p><p>刚打完第三关，可能对游戏还理解不深（光速逃</p><a id="more"></a><p>以下说明以日语描述为准。</p><p>这游戏日语文本基本上没几个汉字全是平假名，子供向游戏确认。</p><p><img src="/img/20220405214444_1.jpg" alt="为什么没有光敏性癫痫（错乱"></p><p><img src="/img/20220405213329_1.jpg" alt="标题画面"></p><p><img src="/img/20220405214544_1.jpg" alt="战斗画面（截自第三关）"></p><p>「あと２２ｍ」是说这座山的当前区段还剩 22m。也可以理解成怪的血条还剩 22 点。</p><p>怪的左边有一个直角三角形和数字 6，表示当前区段的当前小区段的危险度是 6。可以理解成怪的下一次行动打出 6 点伤害。</p><p>画面最下端就是手牌，有些牌上面会带着「のぼる」「まもる」，分别代表这张牌向上攀登的距离和对自身的防护。也可以理解成打出多少伤害和获得多少格挡。</p><p>如果带着这两个关键字就说明这张牌是一张攀登牌，一回合只能打出一张攀登牌，且打出之后会直接与怪进行攻击判定，然后结束回合。</p><p>攻击判定时，因为怪不会防御，玩家角色侧的伤害是打满的。玩家角色的格挡自然就是减免伤害。</p><p>左上角的红心是血条。蓝色石头相当于分数，每打出一点伤害就获得一颗小石头，相当于一点分数。也可以消耗以换取被动道具。</p><p>当然游戏中还会有亿些其他的机制，读者可自行探索。</p><p><img src="/img/20220405211141_1.jpg" alt="牌库中的一张卡牌"></p><p>感觉这游戏有一点就是，保留字太多了。就比如说上面这张截图中就出现了「こうしん」「おちつき」「わくわく」「やまぶみ」「きらきら」「のびのび」「てつなぎ」「おもいだす」「いちごうぶん」这样九个保留字。</p><p>哦等等，「てつなぎ」的描述里引用了「もういっぽ」，这样一来就是十个了。</p><p>可能本意是为了让卡面上写出来的东西尽可能的少，毕竟这游戏的整体风格也不适合往卡面上塞一大堆文字性的描述。</p><p>不过缺点就是记不住这些保留字都是啥效果（</p><p>好吧可能玩多了就记住了（</p><p>不过还是总结了以下上述十个关键字的意思，不打算自己玩游戏或者想看看的话可以点开看看（</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">こうしん：每打出 1 次，所有同名卡牌获得 +1/+1（指伤害/格挡 +1）。使用非同名卡牌时清零。</span><br><span class="line">おちつき X：下一回合格挡加成 +X（X 表示层数）。</span><br><span class="line">わくわく X：整场战斗伤害加成 +X。</span><br><span class="line">やまぶみ：打出伤害时获得分数 ×2.</span><br><span class="line">きらきら X：斩杀（可参考杀戮尖塔的定义）时最大生命 +X。</span><br><span class="line">のびのび X：每 1 个回合不打出，获得 +X/+X，不影响同名卡牌。打出后复原。</span><br><span class="line">てつなぎ X：伤害加成以 X 倍计算。</span><br><span class="line">おもいだす：从弃牌堆中拿取一张牌放回手牌。</span><br><span class="line">いちごうぶん：每场战斗只能打出一次，打出后不会进入弃牌堆。</span><br><span class="line">もういっぽ X：当前回合伤害加成 +X。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://store.steampowered.com/app/1727520?snr=5000_5100___primarylinks&quot;&gt;Steam 页面&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;听说最近杀戮尖塔更新了，而且是大更新。&lt;/p&gt;
&lt;p&gt;把之前有一个 mod 角色加进来了，忘了名字不过记得是一个如果有一张牌正好在手牌正中央的话，打出去会有加成的角色。有一说一之前玩的时候就觉得这个角色综合质量极高，说成是官方角色都不奇怪。&lt;/p&gt;
&lt;p&gt;而且似乎还吸收了 DownFall 的内容，不过没怎么玩过所以不评价。&lt;/p&gt;
&lt;p&gt;扯得有点远，总之就是一个轻松愉快的爬山(?)游戏。&lt;/p&gt;
&lt;p&gt;你这爬山怎么一边爬一边打牌啊（小声&lt;/p&gt;
&lt;p&gt;想起来有句话：你这打架怎么掷骰子啊（&lt;/p&gt;
&lt;p&gt;刚打完第三关，可能对游戏还理解不深（光速逃&lt;/p&gt;
    
    </summary>
    
      <category term="颓废" scheme="https://github.com/Challestend/categories/%E9%A2%93%E5%BA%9F/"/>
    
    
      <category term="Rogue" scheme="https://github.com/Challestend/tags/Rogue/"/>
    
      <category term="卡牌游戏" scheme="https://github.com/Challestend/tags/%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F/"/>
    
      <category term="爬山" scheme="https://github.com/Challestend/tags/%E7%88%AC%E5%B1%B1/"/>
    
  </entry>
  
  <entry>
    <title>一道日常题的题解</title>
    <link href="https://github.com/Challestend/a-daily-problem/"/>
    <id>https://github.com/Challestend/a-daily-problem/</id>
    <published>2022-04-03T07:18:07.000Z</published>
    <updated>2022-04-05T14:00:46.517Z</updated>
    
    <content type="html"><![CDATA[<p>今天校内某比赛的一道题。</p><p>感觉挺有意思的于是来写一篇题解。</p><p>题面甚至是纯英文，怕不是防 AK 用的。</p><p>其实我是可以 AK 的，不过剩下三道题（其中还有一道大模拟懒得写了）。</p><p><del>顺便一提，其实我睡过去了一整个上午，打开比赛页面的时候已经是比赛开始五个小时了（</del></p><a id="more"></a><p>给定一棵 $n$ 个点的树，边有边权。从 $1$ 号节点开始，每次等概率随机选择一个相邻节点走过去，到了叶节点就停下来。这里叶节点定义为度数为 $1$ 的节点。保证根节点不满足这个定义。</p><p>走过一条边需要消耗的时间等于这条边的边权。求期望多长时间后能停下来。答案对 $10^9+7$ 取模。</p><p>$1\leqslant n\leqslant 10^5$。边权范围不重要（反正不爆 <code>int</code>）。</p><p>设 $E(u)$ 表示从 $u$ 号节点出发的期望停止时间。根据期望的线性性，我们可以得到</p><script type="math/tex; mode=display">E(u)=\frac{1}{\operatorname{deg}u}\sum_{(u,v)}(E(v)+w(u,v))</script><p>如果 $u$ 号节点已经是叶节点，那么 $E(u)=0$。</p><p>当然，这在形式上完全可以视作一个 $n-r$ 个变量和 $n-r$ 个方程构成的线性方程组，其中 $r$ 表示叶节点的数量。</p><p>但是考虑到本题的数据范围，这样做的时间复杂度太大了。我们需要换一个思路。</p><p>首先我们梳理一下思路（非形式化地）：</p><blockquote><p>考虑到，如果节点 $u$ 的所有子节点都是叶节点，那么 $E(u)$ 只会取决于 $E(f(u))$；而且一定是 $E(f(u))$ 的一次函数。</p><p>如果节点 $u$ 存在一个不是叶节点的节点 $v$，但是 $v$ 的所有子节点都是叶节点，那么 $E(v)$ 也是 $E(u)$ 的一次函数，我们就可以在 $E(u)$ 的式子中出现的 $E(v)$ 替换成 $E(u)$。这样整个式子中的待求量还是只会剩下 $E(u)$ 和 $E(f(u))$，也就是说 $E(u)$ 可以表示成 $E(f(u))$ 的一次函数。</p><p>如此递推到 $1$ 号节点，那么实际上我们需要求解的只有一个关于 $E(1)$ 的一次方程。</p></blockquote><p>形式化地：</p><p>如果一个节点 $u$ 满足</p><script type="math/tex; mode=display">E(u)=\alpha(u)E(f(u))+\beta(u)</script><p>其中 $f(u)$ 表示 $u$ 的父节点，且 $\alpha(u),\beta(u)$ 只与 $u$ 有关而与其他节点无关，那么我们称 $u$ 是可表示的。</p><p>显然叶节点都是可表示的。</p><p>如果一个节点 $u$ 的所有子节点均是可表示的，那么</p><script type="math/tex; mode=display">\begin{aligned}&E(u)\\=&\frac{1}{\operatorname{deg}u}\sum_{(u,v)}(E(v)+w(u,v))\\=&\frac{E(f(u))+w(u,f(u))}{\operatorname{deg}u}+\frac{1}{\operatorname{deg}u}\sum_{(u,v)\wedge v\neq f(u)}(E(v)+w(u,v))\\=&\frac{E(f(u))+w(u,f(u))}{\operatorname{deg}u}+\frac{1}{\operatorname{deg}u}\sum_{(u,v)\wedge v\neq f(u)}(\alpha(v)E(u)+\beta(v)+w(u,v))\end{aligned}</script><p>整理可得</p><script type="math/tex; mode=display">\left(1-\frac{1}{\operatorname{deg}u}\sum_{(u,v)\wedge v\neq f(u)}\alpha(v)\right)E(u)=\frac{E(f(u))+w(u,f(u))}{\operatorname{deg}u}+\frac{1}{\operatorname{deg}u}\sum_{(u,v)\wedge v\neq f(u)}(\beta(v)+w(u,v))</script><p>即 $u$ 是可表示的。</p><p>于是我们可以容易地注意到，所有节点均是可表示的，且 $\alpha,\beta$ 均是可求解的。</p><p>考虑 $1$ 号节点，有</p><script type="math/tex; mode=display">E(1)=\alpha(1)E(f(1))+\beta(1)</script><p>这里 $f(1)=0$，即 $E(f(1))=0$，我们就可以得到</p><script type="math/tex; mode=display">E(1)=\beta(1)</script><p>而 $E(1)$ 正是本题要求的答案。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天校内某比赛的一道题。&lt;/p&gt;
&lt;p&gt;感觉挺有意思的于是来写一篇题解。&lt;/p&gt;
&lt;p&gt;题面甚至是纯英文，怕不是防 AK 用的。&lt;/p&gt;
&lt;p&gt;其实我是可以 AK 的，不过剩下三道题（其中还有一道大模拟懒得写了）。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;顺便一提，其实我睡过去了一整个上午，打开比赛页面的时候已经是比赛开始五个小时了（&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="随机游走" scheme="https://github.com/Challestend/tags/%E9%9A%8F%E6%9C%BA%E6%B8%B8%E8%B5%B0/"/>
    
      <category term="图论" scheme="https://github.com/Challestend/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="数学期望" scheme="https://github.com/Challestend/tags/%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>退役选手 Challestend 的 CF 杂题题解 II</title>
    <link href="https://github.com/Challestend/random-solutions-2/"/>
    <id>https://github.com/Challestend/random-solutions-2/</id>
    <published>2022-03-05T01:37:29.000Z</published>
    <updated>2022-08-21T07:01:28.799Z</updated>
    
    <content type="html"><![CDATA[<p>直角。</p><p>因为觉得把所有东西都堆在一篇 Blog 太挤了，于是考虑每十题一篇（</p><a id="more"></a><h2 id="「CF1408F」Two-Different"><a href="#「CF1408F」Two-Different" class="headerlink" title="「CF1408F」Two Different"></a>「CF1408F」Two Different</h2><p><a href="https://codeforces.com/contest/1408/problem/F">传送门</a></p><p>想象有一个长度为 $n$ 的正整数序列 $a$ 和函数 $f:\mathbb{N_+}\times\mathbb{N_+}\rightarrow\mathbb{N_+}$。每次操作指定两个位置 $u,v$，然后将当前的 $a_u$ 和 $a_v$ 同时替换为 $f(a_u,a_v)$。您需要给出方案，使得对于任意的序列 $a$ 和函数 $f$，$q$ 次操作后整个序列最多只剩下两个不同的正整数。</p><p>比如说 $n=3$，一种可能的最终序列是</p><script type="math/tex; mode=display">\{f(a_1,a_2),f(a_1,a_2),a_3\}</script><p>$n=4$</p><script type="math/tex; mode=display">\{f(a_1,a_2),f(a_1,a_2),f(a_3,a_4),f(a_3,a_4)\}</script><p>$n=5$</p><script type="math/tex; mode=display">\{A,A,A,A,a_5\}</script><p>其中 $A=f(f(a_1,a_2),f(a_3,a_4))$。</p><p>$1\leqslant n\leqslant 15000$，$0\leqslant q\leqslant 5\times 10^5$。</p><p>注意到我们可以在 $2^k$ 次操作内将一个长度恰好为 $2^k$ 的子区间处理成一个数字。</p><p>然后我就卡在这里了。因为 $n$ 的二进制表示也许会有 $3$ 个或者更多的 $1$。于是我就在想怎么将 $4$ 个相同的数字和另外 $2$ 个相同的数字合并成六个相同的数字。</p><p>然后想不出来去看题解发现大可不必。直接取 $k=\lfloor\log n\rfloor$ 然后将序列的前 $2^k$ 和后 $2^k$ 个数字合并即可。显然这样处理之后整个序列最多只剩下两个不同的正整数。</p><p>于是代码实现就没有了。</p><h2 id="「CF543D」Road-Improvement"><a href="#「CF543D」Road-Improvement" class="headerlink" title="「CF543D」Road Improvement"></a>「CF543D」Road Improvement</h2><p><a href="https://codeforces.com/contest/543/problem/D">传送门</a></p><p>给定一棵 $n$ 个节点的无根树。对于每个节点 $u$，您需要求出，至少需要标记树上的多少条边，才能使得对于树上除 $u$ 以外任意节点 $v$，路径 $u\rightarrow v$ 上最多存在一条边未被标记。</p><p>$2\leqslant n\leqslant 2\times 10^5$。</p><p>我觉得大力树上 DP 就好了。</p><p>代码实现下辈子再说。</p><h2 id="「CF1139D」Steps-to-One"><a href="#「CF1139D」Steps-to-One" class="headerlink" title="「CF1139D」Steps to One"></a>「CF1139D」Steps to One</h2><p>/* 闲扯开始</p><p>本来是想按顺序刷的然而看到这道题于是光速跑过来开搞。</p><p>记得高中的时候我刚把位置搬到阿潮旁边的那个晚上大吊阿烜就在写这道题。</p><p>……欸不对？哦好像的确是不对。那个晚上阿烜写的是一道虚树题。</p><p>算了不管了。</p><p>闲扯结束 */</p><p><a href="https://codeforces.com/contest/1139/problem/D">传送门</a></p><p>有一个序列 $a$，初始为空。每次操作等概率随机选择一个 $[1,m]$ 上的整数并将其插入至 $a$ 的末尾。每次操作后计算 $a$ 中所有元素的 $\gcd$，若为 $1$ 则结束，否则再进行下一次操作。求最终 $a$ 的长度的数学期望值。模 $10^9+7$。</p><p>$1\leqslant m\leqslant 10^5$。</p><p>考虑令 $f(N,M)$ 表示 $a$ 的长度恰好为 $N$ 时其中所有元素的 $\gcd$ 恰好为 $M$ 的概率。那么显然</p><script type="math/tex; mode=display">\begin{aligned}&f(N,M)\\=&\frac{1}{m^N}\sum_{1\leqslant i_1,i_2,\cdots,i_N\leqslant m}[(i_1,i_2,\cdots,i_N)=M]\\=&\frac{1}{m^N}\sum_{1\leqslant i_1,i_2,\cdots,i_N\leqslant\lfloor\frac{m}{M}\rfloor}[(i_1,i_2,\cdots,i_N)=1]\\=&\frac{1}{m^N}\sum_{1\leqslant i_1,i_2,\cdots,i_N\leqslant\lfloor\frac{m}{M}\rfloor}\sum_{x|i_k}\mu(x)\\=&\frac{1}{m^N}\sum_{x=1}^{\lfloor\frac{m}{M}\rfloor}\mu(x)\left\lfloor\frac{m}{Mx}\right\rfloor^N\end{aligned}</script><p>考虑枚举 $a$ 的长度。设第 $N+1$ 次操作后 $a$ 中所有元素的 $\gcd$ 恰好为 $1$，那么发生这种情况的概率是</p><script type="math/tex; mode=display">\frac{1}{m}\sum_{M=2}^{m}f(N,M)\phi(M)</script><p>其中</p><script type="math/tex; mode=display">\begin{aligned}&\phi(M)\\=&\sum_{i=1}^{m}[i\perp M]\\=&\sum_{i=1}^{m}\sum_{x|i,x|M}\mu(x)\\=&\sum_{x|M}\mu(x)\left\lfloor\frac{m}{x}\right\rfloor\end{aligned}</script><p>值得注意的是需要特判一开始就随机到 $1$ 的情况。</p><p>然后对 $N$ 求和，我们得到答案为</p><script type="math/tex; mode=display">\begin{aligned}&\frac{1}{m}+\frac{1}{m}\sum_{N\geqslant 1}(N+1)\sum_{M=2}^{m}f(N,M)\phi(M)\\=&\frac{1}{m}+\frac{1}{m}\sum_{N\geqslant 1}(N+1)\sum_{M=2}^{m}\phi(M)\sum_{x=1}^{\lfloor\frac{m}{M}\rfloor}\mu(x)\left(\frac{\left\lfloor\frac{m}{Mx}\right\rfloor}{m}\right)^N\\=&\frac{1}{m}+\frac{1}{m}\sum_{M=2}^{m}\phi(M)\sum_{x=1}^{\lfloor\frac{m}{M}\rfloor}\mu(x)\sum_{N\geqslant 1}(N+1)\left(\frac{\left\lfloor\frac{m}{Mx}\right\rfloor}{m}\right)^N\end{aligned}</script><p>我们遇到这样一个子问题</p><script type="math/tex; mode=display">\sum_{n\geqslant 1}(n+1)\alpha^n</script><p>当然这里保证 $|\alpha|\lt 1$。</p><p>设其为 $S(\alpha)$，则</p><script type="math/tex; mode=display">\begin{aligned}&\alpha^{-1}S(\alpha)\\=&\sum_{n\geqslant 0}(n+2)\alpha^n\\=&\sum_{n\geqslant 0}(n+1)\alpha^n+\sum_{n\geqslant 0}\alpha^n\\=&1+S(\alpha)+\frac{1}{1-\alpha}\end{aligned}</script><p>可以解得</p><script type="math/tex; mode=display">S(\alpha)=\sum_{n\geqslant 1}(n+1)\alpha^n=\frac{\alpha(2-\alpha)}{(1-\alpha)^2}</script><p>那么答案就可以记作</p><script type="math/tex; mode=display">\frac{1}{m}+\frac{1}{m}\sum_{M=2}^{m}\phi(M)\sum_{x=1}^{\lfloor\frac{m}{M}\rfloor}\mu(x)S\left(\frac{\left\lfloor\frac{m}{Mx}\right\rfloor}{m}\right)</script><p>第一个 $\sum$ 可以 $O(\sqrt{m})$ 枚举，第二个 $\sum$ 直接 $O(m)$ 暴力算。这样时间复杂度 $O(m\sqrt{m})$ 十分健康可以通过。</p><p>其实感觉这个东西可以用 NTT 做到 $O(m\log\text{mod}+m\log m)$，但是反正根号可以过就不用专门动用多项式板子了。</p><p><del>好吧其实是因为我已经不会多项式了。</del></p><p><a href="https://codeforces.com/contest/1139/submission/139412953">评测记录</a></p><h2 id="「CF1167F」Scalar-Queries"><a href="#「CF1167F」Scalar-Queries" class="headerlink" title="「CF1167F」Scalar Queries"></a>「CF1167F」Scalar Queries</h2><p>// 口胡一时爽，实现火葬场（光速逃</p><p><a href="https://codeforces.com/contest/1167/problem/F">传送门</a></p><p>给定一个长度为 $n$ 的序列 $a$，保证 $a_i$ 两两不同。如下定义 $f(l,r)$：</p><p>将 $a_l,a_{l+1},\cdots,a_r$ 取出并从小到大排序。设结果为 $b_1,b_2,\cdots,b_{r-l+1}$。那么</p><script type="math/tex; mode=display">f(l,r)=\sum_{i=1}^{r-l+1}i\cdot b_i</script><p>求</p><script type="math/tex; mode=display">\sum_{1\leqslant l\leqslant r\leqslant n}f(l,r)</script><p>模 $10^9+7$。</p><p>$1\leqslant n\leqslant 5\times 10^5$，$1\leqslant a_i\leqslant 10^9$。</p><p>考虑将 $a_i$ 从小到大排序，然后分别计算每个 $a_x$ 的贡献。</p><p>设对于当前的 $a_x$，设其左侧有 $N$ 个位置的值小于它，从右到左分别为 $l_1,l_2,\cdots,l_N$；类似地，设其右侧有 $M$ 个位置的值小于它，从左到右分别为 $r_1,r_2,\cdots,r_M$。</p><p>考虑到，只要选定区间包括 $x$，答案中就会有一个 $a_x$。这部分的贡献为 $x(n-x+1)a_x$。</p><p>如果选定区间包括 $l_i$，答案中就会又有一个 $a_x$。注意这里是只考虑 $l_i$ 这一个位置。这部分的贡献为 $l_i(n-x+1)a_x$。</p><p>类似地，$r_i$ 对应部分的贡献为 $x(n-r_i+1)a_x$。</p><p>求和，我们得到</p><script type="math/tex; mode=display">\left[x(n-x+1)+(n-x+1)\sum_{i=1}^{N}l_i+x\sum_{i=1}^{M}(n-r_i+1)\right]a_x</script><p>使用线段树简单维护即可。总时间复杂度 $(n\log n)$。</p><p>代码实现下辈子再说。</p><h2 id="「CF1204E」Natasha-Sasha-and-the-Prefix-Sums"><a href="#「CF1204E」Natasha-Sasha-and-the-Prefix-Sums" class="headerlink" title="「CF1204E」Natasha, Sasha and the Prefix Sums"></a>「CF1204E」Natasha, Sasha and the Prefix Sums</h2><p><a href="https://codeforces.com/contest/1204/problem/E">传送门</a></p><p>构造一个长度为 $n+m$ 的恰好包含 $n$ 个 $1$ 和 $m$ 个 $-1$ 的序列 $a$，然后定义其价值为其 $n+m+1$ 个前缀和（包括空前缀）中的最大值。对所有可能的序列 $a$，计算价值和。对 $998244853$ 取模。</p><p>$0\leqslant n,m\leqslant 2000$。</p><p><strong>Warning：$998244{\color{red} 8}53$。</strong></p><p><strong>Warning：$998244{\color{red} 8}53$。</strong></p><p><strong>Warning：$998244{\color{red} 8}53$。</strong></p><p>可以类比一下卡特兰数的求法。</p><p>令 $F_k$ 表示最大前缀和 $\leqslant k$ 的方案数。那么考虑一个不符合该条件的序列 $a$，记其前缀和为 $s$。取最小的 $i$ 使得 $s_i\gt k$，那么此时有 $s_i=k+1$，即前 $i$ 个元素中 $1$ 比 $-1$ 多恰好 $k+1$ 个。将 $a_1,a_2,\cdots,a_i$ 取相反数我们就得到了一个恰好包含 $n-k-1$ 个 $1$ 和 $m+k+1$ 个 $-1$ 的新序列 $a^\prime$。</p><p>相反地，假设我们现在有一个恰好包含 $n-k-1$ 个 $1$ 和 $m+k+1$ 个 $-1$ 的序列 $a^\prime$，记其前缀和为 $s^\prime$。取最小的 $i$ 使得 $s^\prime_i=-k-1$。将 $a^\prime_1,a^\prime_2,\cdots,a^\prime_i$ 取相反数我们就还原出了 $a$。</p><p>也就是说上述的 $a$ 和 $a^\prime$ 之间存在一一映射。注意到 $a^\prime$ 一共有 ${n+m\choose n-k-1}$，我们就得到 $F_k={n+m\choose n}-{n+m\choose n-k-1}$。</p><p>特别地，$F_n={n+m\choose n}$。</p><p>然后令 $G_k=F_k-F_{k-1}$，计算</p><script type="math/tex; mode=display">\sum_{i=\max(n-m,0)}^{n}i\cdot G_i</script><p>即为答案。</p><p>$m=0$ 时需要特判直接输出 $n$。</p><p><del>结果我 WA 了三发。</del></p><p><del>第一发没特判第二发没注意求和下限第三发忘了删调试信息。</del></p><p><a href="https://codeforces.com/contest/1204/submission/139360069">评测记录</a></p><p>话说回来，这数据范围还是太小了啊。建议加大力度开到 $10^7$（光速逃</p><h2 id="「CF1594E2」Rubik’s-Cube-Coloring-hard-version"><a href="#「CF1594E2」Rubik’s-Cube-Coloring-hard-version" class="headerlink" title="「CF1594E2」Rubik’s Cube Coloring (hard version)"></a>「CF1594E2」Rubik’s Cube Coloring (hard version)</h2><p><a href="https://codeforces.com/contest/1594/problem/E2">传送门</a></p><p>给定一棵深度为 $k$，即包含 $2^k-1$ 个节点的完美二叉树。有六种颜色：白，黄，绿，蓝，红，橙。每个节点需要染一种颜色，而且：</p><ol><li>相邻节点不能同色。</li><li>相邻节点不能一白一黄。</li><li>相邻节点不能一绿一蓝。</li><li>相邻节点不能一红一橙。</li></ol><p>有 $n$ 个节点已经染好色了。问给剩下的节点染色的方案数。模 $10^9+7$。</p><p>$1\leqslant k\leqslant 60$，$1\leqslant n\leqslant 2000$。</p><p>首先考虑两个子问题。</p><p>子问题一：如果有一个深度为 $d$ 的子树，其根节点已经确定了颜色，除此之外没有已经确定颜色的节点。那么该子树的染色方案有多少种？</p><p>显然为 $4^{2^d-2}$。</p><p>子问题二：有一条从深度递增的链，两端点的深度分别为 $L,R$。且这条链上其他节点（不包括两端点）及其子树均没有已经确定颜色的节点。那么这条链的染色方案有多少种？不考虑两端点的子树。</p><p>显然这可以通过一个 $O(k^2)$ 的 DP 解决。</p><p>于是我们对给定的 $n$ 个节点建立虚树，然后在上面跑 DP 即可。</p><p>至于建立虚树时需要求 dfs 序，我们可以利用完美二叉树的性质在 $O(k)$ 的时间复杂度内求出任意节点的 dfs 序。具体方法读者可自行撕烤。</p><p>注意到上面的 DP 并没有考虑到两端点的子树。考虑到一个节点在虚树上当且仅当它是给定点或它是两个给定点的 LCA，只有第一种情况时，该节点可能存在未被考虑的子树，手动计算然后加上即可。</p><p>还有就是虚树中的叶子节点在原树中的子树也需要手动计算。</p><p>总时间复杂度 $O(nk+n\log n)$，后面那个 $\log$ 是排序的。</p><p>然而不怎么好写于是就不写了（</p><p>建议加大力度把 $n$ 开到 $10^6$（光速逃</p><h2 id="「CF1619H」Permutation-and-Queries"><a href="#「CF1619H」Permutation-and-Queries" class="headerlink" title="「CF1619H」Permutation and Queries"></a>「CF1619H」Permutation and Queries</h2><p><a href="http://codeforces.com/contest/1619/problem/H">传送门</a></p><p>给定一个长度为 $n$ 的排列 $p$。$m$ 次操作，每次要么交换 $p_x$ 和 $p_y$，要么给定给定 $x$ 求执行 $x\leftarrow p_x$ 连续 $k$ 次后 $x$ 的最终结果。</p><p>$1\leqslant n,m\leqslant 10^5$，$1\leqslant k\leqslant n$。</p><p><del>因为太菜不会做于是被迫去看题解。</del></p><p>好吧其实只是一个先猜出复杂度然后再根据复杂度想搞法的题。</p><p>一开始一直在想启发式合并启发式分裂，然后线段树分治搞成只有接环或者是只有断环。总而言之就是困在 poly-log 的怪圈里绕不出去了。然后这道题正解是大根号。</p><p>令 $B=\sqrt{n}$。处理出 $p$ 的逆排列 $r$，以及另外一个序列 $f$ 表示每个位置沿着 $p$ 指针跳 $B$ 次到达的位置。预处理需要 $O(\sqrt{n})$ 的时间复杂度。</p><p>每次修改的时候，假设 $p_x$ 被修改了，那么有且仅有 $x$ 沿着 $r$ 指针跳 $B$ 次以内经过的位置，也就是 $x$ 沿着 $p$ 指针反着跳 $B$ 次以内经过的位置，这些位置的 $f$ 需要修改。也就是说单次修改的时间复杂度这样就是 $O(B)$。</p><p>查询的话，显然可以设 $k=l\sqrt{n}+d$，然后跳 $l$ 次 $f$ 再跳 $d$ 次 $p$ 即可。单次查询时间复杂度 $O(\frac{n}{B}+B)$。</p><p>综上所述，总时间复杂度 $O(n\sqrt{n}+m\sqrt{n})$。</p><p><a href="http://codeforces.com/contest/1619/submission/140273166">评测记录</a></p><p>// 什么时候才能变得想杜爷一样强啊 /se</p><h2 id="「CF1626D」Martial-Arts-Tournament"><a href="#「CF1626D」Martial-Arts-Tournament" class="headerlink" title="「CF1626D」Martial Arts Tournament"></a>「CF1626D」Martial Arts Tournament</h2><p>// 火星艺术主题旅游（光速逃</p><p>// 好吧其实 <code>martial</code> 的意思是「军事的」然后 <code>tournament</code> 的意思是「锦标赛」</p><p><a href="http://codeforces.com/contest/1626/problem/D">传送门</a></p><p>给定 $n$ 个数 $a_1,a_2,\cdots,a_n$。您需要指定两个数 $x,y$，然后所有小于 $x$ 的数构成集合 $S_1$，所有大于等于 $x$ 且小于 $y$ 的数构成集合 $S_2$，所有大于等于 $y$ 的数构成集合 $S_3$。然后您需要在这三个集合中插入尽可能少的元素，使得三个集合的大小均变为 $2$ 的自然数幂。</p><p>您需要找到一组 $x,y$，使得最终需要插入的元素数最少。您只需给出这个插入元素数的最小值。</p><p>多组数据。$1\leqslant n\leqslant 2\times 10^5$，$1\leqslant a_i\leqslant n$。$\sum n\leqslant 2\times 10^5$。</p><p>记 $c_k$ 表示有多少个数恰好为 $k$。相当于是说把数组 $c$ 分成三个连续段，记这三个连续段的和分别为 $s_1,s_2,s_3$，那么答案就是 $f(s_1)+f(s_2)+f(s_3)$，其中 $f(N)$ 表示大于等于 $N$ 的最小的 $2$ 的自然数幂。</p><p>根据题意每个连续段均不能为空，不过因为不需要给出具体方案，所以这个条件可以无视，因为就算最终找到的方案某一段为空，也一定会存在某个三段均不为空的方案，使得这两种方案得出的答案相同。</p><p>证明不会。反正是对的。</p><p>考虑枚举最右侧连续段的长度，然后枚举最左侧连续段的贡献——也就是说枚举一个 $2$ 的自然数幂 $p$ 然后找到一个尽可能靠右的前缀使得这个前缀的贡献为 $p$，然后要求尽可能靠右是因为这样可以最小化中间连续段的贡献。</p><p>两个枚举的时间复杂度分别是 $O(n)$ 和 $O(\log n)$，再加上二分的一个 $\log$，总时间复杂度 $O(n\log^2n)$。</p><p>写到这里我突然意识到，如果直接分别枚举两侧连续段的贡献，那么实际上可以做到 $O(\log^4n)$，差不多相当于是线性的。</p><p>不过算了。</p><p><a href="http://codeforces.com/contest/1626/submission/143167048">评测记录</a></p><h2 id="「CF893F」Subtree-Minimum-Query"><a href="#「CF893F」Subtree-Minimum-Query" class="headerlink" title="「CF893F」Subtree Minimum Query"></a>「CF893F」Subtree Minimum Query</h2><p><a href="http://codeforces.com/contest/893/problem/F">传送门</a></p><p>给定一棵 $n$ 个节点的树，以 $r$ 为根，点有点权。$m$ 次操作，每次给定 $u,k$，查询在 $u$ 的子树内且到 $u$ 的距离不超过 $k$ 的所有点中点权的最小值。强制在线。</p><p>$1\leqslant n\leqslant 10^5$，$1\leqslant a_i\leqslant 10^9$，$1\leqslant m\leqslant 10^6$。</p><p>不知道这道题正解是什么，不过我感觉我的做法非常的奇怪。</p><p>首先定义 $f_{u,k}$ 表示在 $u$ 的子树内且到 $u$ 的距离严格小于 $2^k$ 的所有点中点权的最小值，然后将这个东西预处理出来——至于怎么预处理就发挥人类智慧吧只能说我的方法感觉已经乱了。</p><p>然后将询问给出的 $k$ 分解成若干个 $2$ 的正整数次幂，这里令</p><script type="math/tex; mode=display">k=\sum_{i=1}^{L}2^{x_i}</script><p>其中 $x_i$ 两两不同。那么我们首先对于在 $u$ 的子树内且到 $u$ 的距离恰好为 $1$ 的每一个点 $v$，计算 $f_{v,x_1}$ 的最小值；然后再对于距离恰好为 $1+2^{x_1}$ 的每一个点 $v$，计算 $f_{v,x_2}$ 的最小值；依此类推。然后将上述 $L$ 个值与 $u$ 自身的点权取最小值即为答案。</p><p>关于「距离恰好为某个数」这个限制条件，我们可以考虑对原树求一个类似于 BFS 序的东西，就是说，进行一次 BFS，然后对于每个点，定义其 BFS 为其是第几个入队的。</p><p>我们刚刚定义的这个 BFS 有一个十分容易注意到的性质：原树中深度相同的节点一定会组成一个连续段。而且能够想象得出来的是，如果我们在进行 BFS 和 DFS 时，对于每个点，访问它的出边的顺序相同，那么对于 BFS 序序列中的一个深度相同的连续段，这些点的 DFS 序一定也是递增的。</p><p>这就意味着我们能够通过二分查找来找到，在这样一个连续段上，哪个区间恰好属于某个点的子树。然后套用数据结构在 BFS 序上维护区间最小值即可。</p><p>单次查询的时间复杂度是 $O(\log^2n)$。至于总时间复杂度，虽然还会有一个预处理但是考虑到这道题 $m$ 相对于 $n$ 范围较大，因此总时间复杂度可以认为就是 $O(m\log^2n)$。</p><p>然而……调不出来了 :(</p><p><a href="http://codeforces.com/contest/893/submission/145316368">这条评测记录</a>是我的最后一次提交，它十分英勇地杀到了 test 42，然后在那里折戟而亡。让我们记住它的故事(???)。</p><h2 id="「CF1691F」K-Set-Tree"><a href="#「CF1691F」K-Set-Tree" class="headerlink" title="「CF1691F」K-Set Tree"></a>「CF1691F」K-Set Tree</h2><p><a href="https://codeforces.com/contest/1691/problem/F">传送门</a></p><p>给定一棵 $n$ 个节点的树和正整数 $k$。</p><p>定义 $f(r,S)$ 表示以 $r$ 为根时，包含 $S$ 中所有节点的 $T$ 的最小<strong>有根子树</strong>的大小。</p><p><strong>有根子树</strong>：若 $u$ 属于该有根子树，则 $u$ 的所有子节点也都属于该有根子树。</p><p>试求</p><script type="math/tex; mode=display">\sum_{r\in V}\sum_{S\subseteq V,|S|=k}f(r,S)</script><p>对 $10^9+7$ 取模。</p><p>$3\leqslant n\leqslant 2\times 10^5$，$1\leqslant k\leqslant n$。</p><p>令 $1$ 号节点为根节点。</p><p>首先考虑 $r=1$ 时的情况，此时这个最小有根子树的大小实际上就是 $\mathrm{size}(\mathrm{lca}(S))$。对于每个点 $u$，$\mathrm{size}(\mathrm{lca}(S))=u$ 的方案数为</p><script type="math/tex; mode=display">{\mathrm{size}(u)\choose k}-\sum_{v\in\mathrm{son}(u)}{\mathrm{size}(v)\choose k}</script><p>于是</p><script type="math/tex; mode=display">\sum_{S\subseteq V,|S|=k}f(1,S)=\sum_{u\in V}\left[{\mathrm{size}(u)\choose k}-\sum_{v\in\mathrm{son}(u)}{\mathrm{size}(v)\choose k}\right]\mathrm{size}(u)</script><p>考虑某种类似树上 DP 的换根。现在我们需要将根节点从 $f(r)$ 转移到 $r$，会有如下几种情况：</p><ol><li>$S$ 完全位于 $r$ 的子树内。</li><li>$S$ 完全位于 $r$ 的子树外。</li><li>不是上述两种情况。</li></ol><p>情况 1：转移后，$r$ 的子树大小从原来的 $\mathrm{size}(r)$ 变成了 $n$。另一方面，$\mathrm{lca}(S)=r$ 的方案数为</p><script type="math/tex; mode=display">{\mathrm{size}(r)\choose k}-\sum_{v\in\mathrm{son}(r)}{\mathrm{size}(v)\choose k}</script><p>从而这部分的贡献为</p><script type="math/tex; mode=display">\left[{\mathrm{size}(r)\choose k}-\sum_{v\in\mathrm{son}(r)}{\mathrm{size}(v)\choose k}\right](n-\mathrm{size}(r))</script><p>情况 2：转移后，$f(r)$ 的子树大小从原来的 $n$ 变成了 $n-\mathrm{size}(r)$。另一方面，$\mathrm{lca}(S)=f(r)$ 的方案数为</p><script type="math/tex; mode=display">{n-\mathrm{size}(r)\choose k}-{n-\mathrm{size}(f(r))\choose k}-\sum_{v\in\mathrm{son}(f(r)),v\neq r}{\mathrm{size}(v)\choose k}</script><p>从而这部分的贡献为</p><script type="math/tex; mode=display">\left[{n-\mathrm{size}(r)\choose k}-{n-\mathrm{size}(f(r))\choose k}-\sum_{v\in\mathrm{son}(f(r)),v\neq r}{\mathrm{size}(v)\choose k}\right](-\mathrm{size}(r))</script><p>情况 3：转移前，$\mathrm{lca}(S)=f(r)$，此时 $f(r)$ 的子树大小为 $n$；转移后，$\mathrm{lca}(S)=r$，此时 $r$ 的子树大小同样为 $n$。即这种情况实际上对答案没有贡献。</p><p>时间复杂度 $O(n)$。</p><p><a href="https://codeforces.com/contest/1691/submission/159252429">评测记录</a></p><p>// 好久没写题已经不会调代码力（悲</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;直角。&lt;/p&gt;
&lt;p&gt;因为觉得把所有东西都堆在一篇 Blog 太挤了，于是考虑每十题一篇（&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="数论" scheme="https://github.com/Challestend/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="线段树" scheme="https://github.com/Challestend/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="虚树" scheme="https://github.com/Challestend/tags/%E8%99%9A%E6%A0%91/"/>
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="构造" scheme="https://github.com/Challestend/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="CodeForces" scheme="https://github.com/Challestend/tags/CodeForces/"/>
    
      <category term="思维" scheme="https://github.com/Challestend/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="DP" scheme="https://github.com/Challestend/tags/DP/"/>
    
      <category term="二分答案" scheme="https://github.com/Challestend/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
      <category term="树形 DP" scheme="https://github.com/Challestend/tags/%E6%A0%91%E5%BD%A2-DP/"/>
    
      <category term="莫比乌斯反演" scheme="https://github.com/Challestend/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
      <category term="卡特兰数" scheme="https://github.com/Challestend/tags/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/"/>
    
      <category term="根号算法" scheme="https://github.com/Challestend/tags/%E6%A0%B9%E5%8F%B7%E7%AE%97%E6%B3%95/"/>
    
      <category term="DFS 序" scheme="https://github.com/Challestend/tags/DFS-%E5%BA%8F/"/>
    
      <category term="BFS 序" scheme="https://github.com/Challestend/tags/BFS-%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>そう死して尚も咲く人間劇場だ</title>
    <link href="https://github.com/Challestend/university-second/"/>
    <id>https://github.com/Challestend/university-second/</id>
    <published>2022-02-17T09:38:03.000Z</published>
    <updated>2022-08-27T06:10:31.648Z</updated>
    
    <content type="html"><![CDATA[<p><strong>已完结。</strong></p><p>新学期开始了（绝望</p><p><a href="https://www.bilibili.com/video/BV1K3411i7Gy">日常推歌时间</a></p><p><del>不定期推歌（指正</del></p><p>由于我之前给块块看上学期的日记的时候……</p><blockquote><p>阿块「游戏记录是不是有点多。」</p></blockquote><p>于是笔者再次郑重声明，本文章是我在大学阶段的游戏记录，并且会插入一些大学生活和 ACM 的记录（光速逃</p><a id="more"></a><h2 id="Day-（寒假期间）"><a href="#Day-（寒假期间）" class="headerlink" title="Day ???（寒假期间）"></a>Day ???（寒假期间）</h2><p>寒假那当然是愉快的颓废时间。</p><p>复习是不可能复习的，这辈子都不可能的。</p><p>好吧其实还是看了一点。</p><p>然后某一天突然发现同宿舍 dalao FYF 打开了脑叶公司（其实 Steam 也只加了他一个好友），于是会动不动跑去凑热闹看他打游戏。</p><p>虽然实际上观看体验完全没有因为画质糊的就像每天都是情报部核心抑制一样而且非常的卡。于是到后面就看不下去了。</p><p>这位 dalao 因为及时找到了交流群而不是像我一样闷着头玩于是避开了不少坑而且很快集齐了不少强力装备。</p><p>以下是一些交流片段。</p><blockquote><p>我「你觉得安保部部长是男是女。」</p><p>FYF「没注意。没怎么看剧情。」</p><p>（第二天，趁他刚结束前一天的管理正在看安保部剧情）</p><p>我「你觉得安保部部长是男是女。」</p><p>FYF「女的吧。」</p><p>我「他是男的。」</p><p>FYF「啊？？？」</p></blockquote><p>男美女（确信</p><blockquote><p>FYF「这些英文名我啥都记不住。」</p><p>我「没事多看就能记住了。」</p><p>FYF「我突然发现我分不清控制部部长和培训部部长了。」</p><p>我「可海星。我一开始玩废墟图书馆的时候也分不清。」</p><p>（我是通关了图书馆再去玩脑叶的）</p><p>FYF「拿本子的是哪一个？」</p><p>我「拿本子的是控制部部长 Malkuth。」</p><p>FYF「哦哦，毒贩子。」</p><p>我「啊这。毒贩子是培训部部长 Hod。」</p></blockquote><p>趁着打折买了以撒的结合，虽然只买了本体。</p><p>然后打完三次妈心才知道 DLC 也需要买，于是被迫原价（</p><p>只能说从重生到忏悔的这个难度差距实在是太大了。</p><p>修复了新手玩家也能在困难模式乱杀的 BUG（确信</p><p>不得不说这游戏不整个图鉴啥的是真的没法玩（</p><h2 id="Day-0「开幕」（2022-2-16）"><a href="#Day-0「开幕」（2022-2-16）" class="headerlink" title="Day 0「开幕」（2022-2-16）"></a>Day 0「开幕」（2022-2-16）</h2><p>今天返校。</p><p>反正总而言之就是平静的一天。</p><h2 id="Day-1「分裂」"><a href="#Day-1「分裂」" class="headerlink" title="Day 1「分裂」"></a>Day 1「分裂」</h2><p>感受到了窒息胎的难度。</p><p>只能说那波紫黑色的穿屏弹幕实在是一点看不懂（</p><p>然后第二次打死窒息胎之后受到了精神错乱的盛情邀请。</p><p>只能说这种扭来扭曲的开花弹是真的难处理（</p><p>而且还动不动变身，变个妈腿直接照着我头上就是一 jo。</p><p>好吧其实也可能是大部分血量都已经被窒息胎耗掉了。</p><p>下午辅导员来查寝，被告知除了我们寝室以外所有人都在努力复习。</p><p>于是为了避免导致挂科的结局我和寝室其他三位 dalao 开始试图复习高数。</p><p>虽然没看一会就放下了（光速逃</p><p>晚上尝试了以撒的困难难度。</p><p>只能说道具拿的好是真的能为所欲为。</p><ol><li>3 美元纸币（随机眼泪特效）</li><li>铅笔（每发射 15 颗眼泪向前抛射大量眼泪）</li><li>天使棱镜（环绕角色，使触碰到其的眼泪分裂成四颗）</li><li>光明之冠（未受伤时发射钻石眼泪）</li><li>圣饼（所有伤害降至半颗心）</li><li>柯吉猫的身体（眼泪命中时分裂成四颗较小的）</li><li>多维宝宝（模仿角色路径，使触碰到其的眼泪分裂成两颗）</li></ol><p>打完？？？之后一个虚空传送门恰到好处地生成在了金宝箱的下面。</p><p>于是我冲进去把精神错乱揍了一顿（</p><p>到最后按住射击我甚至啥也看不清（</p><h2 id="Day-2「潜力」"><a href="#Day-2「潜力」" class="headerlink" title="Day 2「潜力」"></a>Day 2「潜力」</h2><p>尝试用拉撒路通关困难模式以解锁伯大尼。</p><p>达到妈心的时候身上就带着五颗红心还挂着黑暗诅咒。</p><p>然后我突然不知道为什么走位能力大幅度上升只挨了两下就过了。</p><p>人在危急关头会爆发出潜力，这句话果然不假（</p><p>然后玩了两把伯大尼发现玩不懂。</p><p>然后试图使用莉莉丝击败窒息胎（这样就是第三次了）。</p><p>结果这次到窒息胎门口身上只堆了两个跟班而且其中一只还是开局自带的淫魔，而且并没有拿到 BFF。</p><p>结果我和上一把一样莫名其妙走位能力大幅度上升剩两颗红心过了。</p><p>然后下到阴间被乱杀。</p><p>似乎打过羔羊会解锁传送门和石头胖子，然而我现在连底片甚至都还没有解锁（</p><h2 id="Day-3「起承」"><a href="#Day-3「起承」" class="headerlink" title="Day 3「起承」"></a>Day 3「起承」</h2><p>上午迎来了上一学期拖欠的高数期末考试。</p><p>结果一道计算题喜提算的不知道是个什么东西，一道证明题喜提一点不会（</p><p>下午是 C 语言的期末考试。</p><p>结果喜提坐牢一个小时以上。</p><p>不过说实话在纸上写代码确实是有点离谱。</p><h2 id="Day-4「转」"><a href="#Day-4「转」" class="headerlink" title="Day 4「转」"></a>Day 4「转」</h2><p>上午是英语期末考试。</p><p>笑死，什么都不会。</p><p>听力啥也听不懂，阅读 xjb 蒙，词汇一个词不认识，翻译平均每句话 1-2 个词见都没见过，作文写得狗屁不通。</p><p>老师，菜菜，捞捞，呜呜.jpg</p><h2 id="Day-5「合」"><a href="#Day-5「合」" class="headerlink" title="Day 5「合」"></a>Day 5「合」</h2><p>上午是计算机的期末考试。</p><p>笑死，什么都……好吧其实会一点（</p><h2 id="Day-6「萍果与科学素养」（2022-2-22）"><a href="#Day-6「萍果与科学素养」（2022-2-22）" class="headerlink" title="Day 6「萍果与科学素养」（2022-2-22）"></a>Day 6「萍果与科学素养」（2022-2-22）</h2><p>上午喜提新学期第一节高数课。</p><p><del>喂，前面可是地狱啊（确信</del></p><p>下午喜提第一节离散数学。</p><blockquote><p>老师「假设你现在要去买一些 ping 果……等会 ping 果怎么写的。」</p></blockquote><p>然后老师转身在黑板上写下了「萍果」。</p><p>奇怪的苹果增加了.jpg</p><blockquote><p>老师「（为了讲述符号化的重要性）……假设 A 买了 2 个『萍果』 3 个橘子花了 15 元，然后 B 买了 3 个『萍果』 4 个橘子花了 20 元，那么『萍果』和橘子一个各多少钱……」</p></blockquote><p>不要钱的苹果增加了.jpg</p><p>说起水果我不禁想起我以前上高中学长给我们讲算法的时候。</p><blockquote><p>学长「……那么好吧假设我们现在这里有一些玉米树……啊什么你说玉米不长在树上？啊这线段都能长在树上了为啥玉米它就不能了呢？」</p></blockquote><p>下午三四节物理老师试图通过问我们一些十万个为什么来检测一下我们有没有科学素养。</p><blockquote><p>「1 皮秒是多少秒？」</p><p>「1 太赫兹是多少赫兹？」</p><p>「晴天的时候天空为什么是蓝色的？」</p></blockquote><p>我没有科学素养.jpg</p><h2 id="Day-7「想要乱杀的愿望」"><a href="#Day-7「想要乱杀的愿望」" class="headerlink" title="Day 7「想要乱杀的愿望」"></a>Day 7「想要乱杀的愿望」</h2><p>本来下学期的课都是排满的一整天十节课甚至八节课。</p><p>但是周三却神奇地一节课都没有，于是快乐颓废。</p><p>解锁了堕化莉莉丝。</p><p>第六层的时候本来拿到了一个回形针想扔到 BOSS 房的结果一不小心忘了。</p><p>于是在拿便条之前把它扔到了第七层的 BOSS 房。还好变钥匙碎片了（</p><p>听说堕化莉莉丝胎拳道乱杀，试了一下发现也就前几层可以（</p><p>到最后惨死以撒三阶段（</p><p><del>好吧也许是我攻击力没叠够。</del></p><h2 id="Day-8「脸接子弹」"><a href="#Day-8「脸接子弹」" class="headerlink" title="Day 8「脸接子弹」"></a>Day 8「脸接子弹」</h2><p>sto 胎拳道天上第一（</p><p>感受到了什么叫做乱杀。攻击力叠上去之后冲进人堆打一拳直接死一半，再打一拳死四分之三。</p><p>欸为什么不是全死了（</p><p>感觉这种东西玩多了我的耐心正在以肉眼可见的速度衰减。现在我已经玩不下去其他的角色了，然后看到怪也懒得走位直接冲上去脸接子弹。</p><p>于是疯狂掉血导致开不开天使房拿不到钥匙碎片（</p><p>好不容易凑齐一次两个钥匙碎片结果被超级撒旦一阶段（召唤的小怪）乱杀。</p><p>第二次凑齐钥匙碎片结果教堂玩具箱连续两层诅咒看不见血条。</p><p>不过还好过了。之后一个虚空传送门恰到好处地生成在了金宝箱的下面。</p><p>进去一看发现身上带着三颗红心。</p><p>然后被精神错乱丝血反杀（</p><p>然后我本来想再开一把打精神错乱然后突然转念一想去打回溯先吧。</p><p>然后就去打了。</p><p>拿到了某个受伤后当前房间内获得圣饼效果的星座道具，说实话要是没这个东西我说不定就要被四名天启骑士乱杀了。</p><p>究极瘟疫究极战争至今不会躲（</p><p>跟这几位一比祸兽菜的，也就血厚点外加压迫感强点。</p><p>（↑因为用堕化莉莉丝而移速不够于是被激光糊脸的人）</p><p>不过拖屏速度有点快的说实话。</p><h2 id="Day-9「？？？」"><a href="#Day-9「？？？」" class="headerlink" title="Day 9「？？？」"></a>Day 9「？？？」</h2><p>平静的一天。</p><h2 id="Day-10「？？？」"><a href="#Day-10「？？？」" class="headerlink" title="Day 10「？？？」"></a>Day 10「？？？」</h2><p>平静的一天。</p><p><del>其实是忘了写了。</del></p><h2 id="Day-11「下落无敌的狐狸」"><a href="#Day-11「下落无敌的狐狸」" class="headerlink" title="Day 11「下落无敌的狐狸」"></a>Day 11「下落无敌的狐狸」</h2><p>平静的一天。</p><h2 id="Day-12「颓废」（2022-2-28）"><a href="#Day-12「颓废」（2022-2-28）" class="headerlink" title="Day 12「颓废」（2022-2-28）"></a>Day 12「颓废」（2022-2-28）</h2><p>平静的一天。</p><h2 id="Day-13「觉醒-」"><a href="#Day-13「觉醒-」" class="headerlink" title="Day 13「觉醒(?)」"></a>Day 13「觉醒(?)」</h2><p>在连续颓废了几天之后，我再次认识到了再这样下去是不行的。</p><p>于是从明天（其实还是有点拖延）本日记将会再次变为稍微正常一点的大学生活记录并（尽量）减少游戏记录。</p><p>以上。</p><p>最近在跟着同寝室 dalao 安利的 Unity 教程试着做 Roguelike 游戏。</p><p>然后我现在已经能够生成随机地图了。</p><p>当然因为我最近一直在玩以撒，所以说搞出来的这个地图，或者说我正准备做的这款游戏也基本上可以说是和以撒一个模子刻出来的。</p><p>没有创意.jpg</p><p>以上。</p><h2 id="Day-14「假期」"><a href="#Day-14「假期」" class="headerlink" title="Day 14「假期」"></a>Day 14「假期」</h2><p>从某种意义上也是吧毕竟没课（</p><p>啊什么？做游戏？太难了不做了。</p><h2 id="Day-15「我靠我游戏闪退了」"><a href="#Day-15「我靠我游戏闪退了」" class="headerlink" title="Day 15「我靠我游戏闪退了」"></a>Day 15「我靠我游戏闪退了」</h2><p>晚上正准备去吃晚饭的时候看到同寝室 dalao FYF 正在玩脑叶于是跑上去凑热闹。</p><p>然后拖到 18：40 才去吃完饭。结果就是吃完已经 52 了。</p><p>晚上有一节 C 语言然后我们俩现在甚至还不知道教室在哪。</p><p>然后我们就问同寝室的另外两位大佬，他们说是在 T02 教室，然后 T02 教室在 T01 教室的里面。</p><p>结果我们在外面绕了一大圈却没有找到 T02 教室。</p><p>就是说，教室门前的编号非常神奇地从 T01 跳到了 T03。</p><p>灵异教室.jpg</p><p>于是我们当机立断地决定不上课了回宿舍打游戏。</p><p>那位 dalao 成功地突破了记录部核心抑制战并来到了 Day 46，虽然研发部核心抑制战还没打。</p><p>于是我就在旁边指点，帮助他一次就无伤突破了 Day 46。</p><p>然后到了 Day 47。</p><blockquote><p>我「Day 47，简单来讲就是，上层四核心同时抑制。」</p><p>FYF「卧槽这么 EX？」</p></blockquote><p>然后因为那位 dalao 地游戏设备不是很好然后快打完的时候突然来了一波闪退。</p><p>心肺停止.jpg</p><p>注 1(?)：到最后那两位成功地找到了教室的 dalao 回来告诉我们说去 T02 需要先进去 T01，然后 T01 最里面有一扇门是 T02 的。</p><p>注 2(?)：奇怪的教室分布增加了.jpg</p><p>注 3(?)：不过因为教室不够大人太多坐不下于是我们喜提被 T02 除名然后下节课要去 T01 了。</p><p>注 4(?)：心情简单.jpg</p><h2 id="Day-16「？？？」"><a href="#Day-16「？？？」" class="headerlink" title="Day 16「？？？」"></a>Day 16「？？？」</h2><p>管他的（</p><h2 id="Day-17「体测重测与睡大觉」"><a href="#Day-17「体测重测与睡大觉」" class="headerlink" title="Day 17「体测重测与睡大觉」"></a>Day 17「体测重测与睡大觉」</h2><p>早上 8：20 有体测的重测和补测。</p><p>笑死，再测一遍也过不了.jpg</p><p>晚上是这一学期的第二节 C 语言，虽然对于我和另外某一位 dalao 来说可能是第一节。</p><p>然后老师似乎是接着上节课讲单向链表，然后让我们用链表写一个学生成绩管理系统。</p><p>那位 dalao 成功地在下课的瞬间写完了 95% 以上的代码。</p><p>然后这个时候我写完了于是老师来看我的程序，然后看到了旁边那位 dalao。</p><blockquote><p>老师「还差多少啊。」</p><p>dalao「我就差这一行了。」</p><p>老师「你确定你写完这一行之后你的这个程序能跑起来吗？」</p><p>dalao「大概吧。」</p></blockquote><p>然后 dalao 写完一点运行，<code>20+ error(s), 20+ warning(s)</code>。</p><p>然后我就提前跑回寝室了。</p><p>结果最后是，那位 dalao 回到宿舍之后继续发奋图强并（在我的帮助之下）成功地当天完成了作业。</p><blockquote><p>dalao「我的作业……完成啦！哈哈哈哈哈！」</p></blockquote><h2 id="Day-18「古典音乐」"><a href="#Day-18「古典音乐」" class="headerlink" title="Day 18「古典音乐」"></a>Day 18「古典音乐」</h2><p>在同寝室 dalao 的安利之下（其实是看着他玩然后也想玩）开始玩《冰与火之舞》。</p><p>然后了解到了我的节奏感到底有多么的差 :(</p><p>Plum 是什么 dalao 啊写的曲子真好听（</p><p>在创意工坊找到了一个六星的 Terrasphere，再一次了解到了我的节奏感到底有多么的差 :(</p><p>搜了一下发现这个俗称大雪花的东西还有一个八星的版本，看了一眼只能说，我看不懂，但我大受震撼。</p><p>Turkish March 警告.jpg</p><h2 id="Day-19「游戏玩法变化了！」（2022-3-7）"><a href="#Day-19「游戏玩法变化了！」（2022-3-7）" class="headerlink" title="Day 19「游戏玩法变化了！」（2022-3-7）"></a>Day 19「游戏玩法变化了！」（2022-3-7）</h2><p>最近音乐打太多甚至我以撒都不会玩了（</p><p>找到一张谱子《Commando Steve》，然后打完我的感受总结一下就是：</p><p>游戏玩法变化了！（指唐突下落式音游）</p><p>深夜试图通关《僕たちの旅とエピローグ》，然而并没有成功。</p><p>只能说，我现在的想法就是，非常想顺着网线把谱师（们）揪过来问问他（们）这些个阴间变速都是跟谁学的。</p><p>感想的话，一句话，「这他妈是啥」。</p><h2 id="Day-20「假如给我三天光敏性癫痫」"><a href="#Day-20「假如给我三天光敏性癫痫」" class="headerlink" title="Day 20「假如给我三天光敏性癫痫」"></a>Day 20「假如给我三天光敏性癫痫」</h2><p>——那在这三天里我可能玩不了音游了。</p><p>在创意工坊里面翻到了一张又一张奇怪的阴间谱子。</p><p>点名批评某《RUSH E》，只能说，就算是像弹钢琴那样十指并用我觉得都不行。</p><blockquote><p>这他妈是啥？    ——某图书馆语言科学层指定司书</p></blockquote><h2 id="Day-21「假如给我三天会做物理题」"><a href="#Day-21「假如给我三天会做物理题」" class="headerlink" title="Day 21「假如给我三天会做物理题」"></a>Day 21「假如给我三天会做物理题」</h2><p>——那我也写不来物理作业。</p><p>总而言之就是，物理作业好难，算不出来，自闭了。</p><p>I closed myself.（小声</p><h2 id="Day-22「人是有惰性的」"><a href="#Day-22「人是有惰性的」" class="headerlink" title="Day 22「人是有惰性的」"></a>Day 22「人是有惰性的」</h2><p>今天喜提早八，于是同寝室的某位不方便透露姓名的 dalao 就不想起床了于是让我们拿上他的卡去教室帮他打卡。</p><blockquote><p>dalao「我电子电路的作业还没写完呢今天下午就要收了我得补作业啊。」</p></blockquote><p>然后我们当然都是拒绝了（</p><p>然后上完一整个上午的课一回到寝室发现那位 dalao 已经点了外卖开始吃午饭了。</p><p>一问作业补了吗说没补。</p><p>意料之外，情理之中.jpg</p><p>买了一块新的机械键盘，至少声音听起来比我之前那块好听不少。</p><p><del>虽然跟我去 CCPC 的时候摸到的大三学长的那块还稍微有点差距不过星吧。</del></p><p>总而言之就是现在我可以用机械键盘打音游了然后这样我就不会说按下去一个键还完全感觉不到我有没有按下去了虽然这可能并没有什么大用毕竟凭我乱七八糟的节奏感肯定按着按着拍子就乱了不过总而言之就是好耶！</p><p>下午喜提体测，然后要测 1500m。</p><p>但是我并跑不下来于是我就去问老师能不能不跑了然后老师让我跑不下来也要走完全程。</p><p>然后我走（确信）了 1200m 左右吧老师可能等不及了直接给我一个 7：30 写上去了。</p><p>我没有体质.jpg</p><p>下午三四节电子电路当然是一句话都不听。</p><p>然而讲的网孔电流法和节点电压法似乎十分重要而且有些难以理解（悲</p><p>要挂科力（绝望</p><p>晚上老师让我们用 C++ 的 EasyX 库编写游戏（大作业）。</p><p>然后我选择的题材是迷宫，坐在旁边的另一位 dalao 选择的是黑白棋（没玩过也没听说过）。</p><p>晚上回寝室才发现用新键盘打游戏还非常地不适应（悲</p><p><a href="https://www.bilibili.com/video/BV1o44y1H7wh">今天的推歌时间</a></p><p>哦我的上帝 Plum 是什么神仙啊纯音乐 vocal 都会写的。</p><p>记得之前——至少得是很久以前了是在我还在听术曲的那个时候——奶油糖曾经整过一首所谓的自创语言的术曲。不过虽然实际上那个只是用日语唱出来然后处理一下音频。</p><p>可能是为了表现出，歌词一个字都听不懂，只是单纯地被旋律吸引的那种感觉？</p><p>但是上面我推的这首是真的我一个字都听不懂。</p><p>因为不会韩语（理直气壮</p><h2 id="Day-23「黑白棋」"><a href="#Day-23「黑白棋」" class="headerlink" title="Day 23「黑白棋」"></a>Day 23「黑白棋」</h2><p>晚上上完离散数学一回来同寝室 dalao 就开始编写自己的黑白棋游戏。</p><p>然后他成功地用 350+ 行代码写出来了一个最基本的逻辑框架。</p><p>然后他邀请我们和他玩，然后我因为没有玩过然后被 dalao 吊锤（悲</p><h2 id="Day-24「？？？」"><a href="#Day-24「？？？」" class="headerlink" title="Day 24「？？？」"></a>Day 24「？？？」</h2><p>真的真的忘了写了 qaq</p><h2 id="Day-25「请你编程，消灭所有的圣斗士」"><a href="#Day-25「请你编程，消灭所有的圣斗士」" class="headerlink" title="Day 25「请你编程，消灭所有的圣斗士」"></a>Day 25「请你编程，消灭所有的圣斗士」</h2><p>上午三四节是两节职业生涯规划。</p><p>那当然是光明正大地划水写高数作业一个字都不听（</p><p>好吧其实还是听了一点的（</p><p>然后前几天似乎有人让我跑去体育馆签个字，8:30 到 10：30 的时候，因为乐跑没过还是啥的。</p><p>然后我当然是忘了（</p><p>下午在新校区有一场 ACM 比赛。</p><p>同寝室有一位 dalao 报了名但是觉得去了也是一道题不会于是就临阵脱逃了。</p><p>然后整个寝室只剩下我一个人去了。</p><blockquote><p>我「我一个人去的话没信心找到路啊」</p><p>FYF「群里不是有拼车的吗，你跟他们一起拼不就行了。」</p><p>我「都不认识啊。」</p></blockquote><p>当然最后我还是下定决心自己打车去了新校区。</p><p>新校区规模是真的大（梅开二度</p><p>然后我自己打车到了南门，然后找不到实验楼南楼，于是向 WWJ 学长求助，然后学长热心地给予了我帮助。</p><p>sto WWJ orz</p><p>到考场开题。ABEG 没有什么问题，加起来 1h 之内搞定了。</p><p>然后剩下 3h 基本都在坐牢。感觉好像有点思路但是就是不会做。</p><p>以及就是不得不批评一下题面，题意表述不清（指升序降序都不说），遣词造句随意，定义不严谨（指 C 题说如果矩阵大小不够需要在「周围」补 $0$ 但是「周围」没有严格定义）。</p><p>考场上有一位老哥甚至直接骂出声了，「不会出题就不要出题」。</p><p>总而言之就是，到最后 C 题打了不需要补 $0$ 的 $60$ 分暴力分，然后总分 $460$。</p><p>剩下的 CDFH 每道题甚至不超过四个人切掉（</p><p>只能说低估了题目难度了。本来是做着随手 AK 的打算去的结果当头一棒。</p><p>还有就是，居然不给发草稿纸。</p><p>不过嘛，毕竟都让自带纸质资料了草稿纸应该也可以被解释称一种广义的纸质资料吧也就是说是那种需要自带的。</p><p>虽然可能就算有了草稿纸我也拿不了更多的分了。</p><p>只能说自己太菜吧，DP 啥都不会的那种。把一个长度为 $n$ 的序列分成恰好 $m$ 段，并最小化每段的平方和。这个应该是一个经典题目了，考场上看出这个模型结果 D 不出来于是寄了。</p><h2 id="Day-26「无题」（2022-3-14）"><a href="#Day-26「无题」（2022-3-14）" class="headerlink" title="Day 26「无题」（2022-3-14）"></a>Day 26「无题」（2022-3-14）</h2><p>毕竟只是用来交作业的游戏，我就从以撒 wiki 上整了一只大可爱扔了进去。</p><p>然后……然后就没了。</p><p>补：今天好像是 $\pi$ 日？</p><h2 id="Day-27「天选之子」"><a href="#Day-27「天选之子」" class="headerlink" title="Day 27「天选之子」"></a>Day 27「天选之子」</h2><p>晚上是高数习题课。</p><p>于是一周五天就只有周三晚上（当然其实是一整天）没有课了（悲</p><p>然后课上助教告诉我们说上个学期高数挂科率达到了整整 $40\%$。</p><p>于是这个学期作业提交情况和习题课出勤率要算入平时分（大悲</p><p>结果这一天同寝室 FYF dalao 就没有去上习题课。</p><p>（↑其实他今天一整天都在寝室里打游戏）</p><p>然后老师可能是点名点到一半累了，于是名单后半段就随机抽取了几个名字象征性地点了一下。</p><p>然后没点到 FYF。</p><p>奇怪的运气增加了！</p><p>（↑虽然他作业还是没交（其实是没写）所以平时分还是要扣的）</p><h2 id="Day-28「？？？」"><a href="#Day-28「？？？」" class="headerlink" title="Day 28「？？？」"></a>Day 28「？？？」</h2><p>总而言之就是没有课的一天。</p><h2 id="Day-29「职业电竞选手」"><a href="#Day-29「职业电竞选手」" class="headerlink" title="Day 29「职业电竞选手」"></a>Day 29「职业电竞选手」</h2><p>今天下午就要交大雾实验（大雾，大物实验）作业了。</p><p>然而我们的 FYF dalao 依然是一个字没写却仍然在高枕无忧地打游戏。</p><p>（↑他已经三四天没去教室了）</p><blockquote><p>CTY「我们已经可以为他的职业电竞之路加油鼓劲了。」</p></blockquote><h2 id="Day-30「US，ES，EG-和-UG」"><a href="#Day-30「US，ES，EG-和-UG」" class="headerlink" title="Day 30「US，ES，EG 和 UG」"></a>Day 30「US，ES，EG 和 UG」</h2><p>今天上午有大雾实验。</p><p>然而因为我实验报告并没有写（其实是看着那么多字懒得写了）于是和 FYF 一起缩在寝室睡大觉（</p><p>晚上两节离散数学讲数理逻辑及确实是差点没听懂。</p><p><del>话说上面那位几天没去上课了啊。</del></p><h2 id="Day-31「？？？」"><a href="#Day-31「？？？」" class="headerlink" title="Day 31「？？？」"></a>Day 31「？？？」</h2><p>总而言之就是（几乎）没有课的一天。</p><p>突然想起来我英语作文还没写。</p><h2 id="Day-32「幸运一抽」"><a href="#Day-32「幸运一抽」" class="headerlink" title="Day 32「幸运一抽」"></a>Day 32「幸运一抽」</h2><p>上午三四节职业生业规划。</p><p>老师想抽几个同学回答问题结果上来一抽就抽到了 FYF。</p><p><strong>噔 噔 咚</strong>（心肺停止</p><p>下午晚上玩以撒的时候觉得是时候打一打挑战了，于是一口气打了十个（</p><p>甚至还录屏了（指高血压操作集锦</p><h2 id="Day-33「？？？」（2022-3-21）"><a href="#Day-33「？？？」（2022-3-21）" class="headerlink" title="Day 33「？？？」（2022-3-21）"></a>Day 33「？？？」（2022-3-21）</h2><p>平静的一天。</p><p>找红隐藏真有意思（</p><h2 id="Day-34「你太菜了，把手柄给我」"><a href="#Day-34「你太菜了，把手柄给我」" class="headerlink" title="Day 34「你太菜了，把手柄给我」"></a>Day 34「你太菜了，把手柄给我」</h2><p>/jk</p><p>挑战 22 着实折磨，但是幸运饼干给的魂心实在是太多了（</p><h2 id="Day-35「？？？」"><a href="#Day-35「？？？」" class="headerlink" title="Day 35「？？？」"></a>Day 35「？？？」</h2><p>本来今天上午是要去做核酸的然而整个寝室集体没起来于是只能明天了（</p><p>下午打了 1h+ 的挑战 29，只能说太难了 :(</p><p>于是又打了 1h+ 的挑战 31，然后勉强过了。</p><p>来让超级撒旦告诉你一个好开局有多么重要吧（</p><h2 id="Day-36「拉了」"><a href="#Day-36「拉了」" class="headerlink" title="Day 36「拉了」"></a>Day 36「拉了」</h2><p>拉了。</p><h2 id="Day-37「制裁」"><a href="#Day-37「制裁」" class="headerlink" title="Day 37「制裁」"></a>Day 37「制裁」</h2><p>总而言之就是同寝室的那位成天所在寝室不去上课的 dalao 被辅导员叫去谈话了（预计，似乎是下周一下午）。</p><p><strong>噔 噔 咚</strong>（绝望</p><p>晚上终于过了挑战 37「血腥玛丽」，只能说半颗红心实在是容错太低，稍微多动症一下就没了。</p><p>不过其实大部分是运气成分。一层献祭房出了圣餐，然后五层出圣心七层出圣饼。阴间拿了本死灵之书在撒旦面前连拍好几下直接送走。</p><p><strong>你不必担心，我已经听到了你那略带惊恐的祈祷（每层一开始拼了命找红心）。</strong></p><p><strong>如今，你还没有意识到，痛苦（被血誓吸干红心）这种事物再微小不过了吗？</strong></p><p><strong>你需要向我证明你的出人之处。</strong></p><p><strong>你应该信任我，将生命（红心）奉献（献祭）给我。然后，我自然会向你展示，什么叫做力量（圣心，圣饼）。</strong></p><h2 id="Day-38「咋办啊！」"><a href="#Day-38「咋办啊！」" class="headerlink" title="Day 38「咋办啊！」"></a>Day 38「咋办啊！」</h2><p>下午晚上打以撒，最新更新蓝宝宝加强了，正好我通关标记除了 BR，Hush 和究极贪婪以外还差一个母亲，于是就开始打。结果打了几把总是暴毙，于是果断地进行了一个游戏的退出。</p><p>晚上老师要验收 C 语言大作业，要问问题。然后班上有一位 dalao（因为和我写的是一个题目）就想和我一起上去然后让老师只看我的代码问问题都朝着我问。</p><p>结果老师问到一般突然点着他让他回答。然后他答不上来……</p><p>然后老师又指问了他几个语法问题，就像是，结构体里面定义了两个构造函数（当然名字是一样的，一个有参数一个没有所以可以重名），然后问它们为什么可以重名。然后他答不上来……</p><p><strong>噔 噔 咚</strong>（绝望</p><p><del>咋办啊！</del></p><h2 id="Day-39「咋办啊！！」"><a href="#Day-39「咋办啊！！」" class="headerlink" title="Day 39「咋办啊！！」"></a>Day 39「咋办啊！！」</h2><p>太久没玩隐藏章节已经不会玩力（悲</p><p>也许是因为最近玩得太多了腻了吧。</p><p>晚上寝室集体赶线代作业，然后发生了如下对话：</p><blockquote><p>FYF「是不是一个大数在一个小数前面就算做一个逆序数？$4123$ 是 $3$ 个还是 $1$ 个？」</p><p>CTY「你自己看书啊。」</p><p>FYF「我怎么知道书上哪个地方写了，我这第一次翻开书。」</p></blockquote><p><strong>噔 噔 咚</strong>（绝望</p><h2 id="Day-40「？？？」（2022-3-28）"><a href="#Day-40「？？？」（2022-3-28）" class="headerlink" title="Day 40「？？？」（2022-3-28）"></a>Day 40「？？？」（2022-3-28）</h2><p>平静的一天。</p><h2 id="Day-41「通向虚空的大门」"><a href="#Day-41「通向虚空的大门」" class="headerlink" title="Day 41「通向虚空的大门」"></a>Day 41「通向虚空的大门」</h2><p>晚上刷夏娃的通关标记。</p><p>一连打了三四局结果一次都没有成功见到虚空传送门（悲</p><p>最后一局天使房出了光明之冠于是立刻停下了手中的剃刀片（</p><p>本来这个时候还拿了一块钥匙碎片的，结果后面给忘了直接走恶魔房了（</p><p><del>不直接凑齐两块碎片是因为炸弹不够。</del></p><p>然后喜提硫磺火，然后不知怎么开了蓝子宫的门（可能是第八层打得太快了吧）（指 Boss 房刷的太近了），进去对着窒息胎喷了一通硫磺火（它的连续统还是不会躲）然后成功摸到了虚空的大门。</p><p>然后差点被精神错乱乱杀（指一红心 + 一永恒之心）（</p><p>前几天的更新似乎在虚空层的时候在画面四周新增了某种黑白噪点，更新前录下来的视频里还是没有的。</p><p>教义同款特效（</p><h2 id="Day-42「小概率事件」"><a href="#Day-42「小概率事件」" class="headerlink" title="Day 42「小概率事件」"></a>Day 42「小概率事件」</h2><p>晚上继续刷通关标记（这次是参孙）。</p><p>习题课，（）都不听。</p><p>只能说，概率是真的奇妙。</p><p>（↑三层天使房开启率被打到 $9\%$ 还能开甚至出了圣饼的人）</p><p>（↑当场把两个天使都给鲨了）（光头恶霸确信）</p><p>最后一局本来向走死母线结果快打死的时候玩血权玩到没血了结果同归于尽了（悲</p><p><a href="https://www.bilibili.com/video/BV1Yq4y1n7Gr">推歌？</a></p><p>BLASPHEMY AGAINST THE HOLY SPIRIT!!!</p><h2 id="Day-43「日记」"><a href="#Day-43「日记」" class="headerlink" title="Day 43「日记」"></a>Day 43「日记」</h2><p>我为什么要来写这么一个破玩意。</p><h2 id="Day-44「愚人节」"><a href="#Day-44「愚人节」" class="headerlink" title="Day 44「愚人节」"></a>Day 44「愚人节」</h2><p>今天似乎是愚人节的样子。</p><p>一打开 QQ 发现 SDOI 群的名字发生了奇怪的变化，吓得我反复确认这的确是 SDOI 群。</p><p>本来想看看今天 Steam 库里的游戏有没有愚人节彩蛋的结果全忘了（</p><h2 id="Day-45「日记？」"><a href="#Day-45「日记？」" class="headerlink" title="Day 45「日记？」"></a>Day 45「日记？」</h2><p>（）都不写。</p><h2 id="Day-46「无题」"><a href="#Day-46「无题」" class="headerlink" title="Day 46「无题」"></a>Day 46「无题」</h2><p>今天打了一场校赛。</p><p>只能说，题目太简单了（</p><p>不过有一道 C 还是挺有意思的（</p><h2 id="Day-47「摆烂，但是没完全摆烂」（2022-4-4）"><a href="#Day-47「摆烂，但是没完全摆烂」（2022-4-4）" class="headerlink" title="Day 47「摆烂，但是没完全摆烂」（2022-4-4）"></a>Day 47「摆烂，但是没完全摆烂」（2022-4-4）</h2><p>下午本来是昨天比赛的复赛，结果评测系统爆炸了于是取消了。</p><p>不过说实话就算系统不爆炸，就这个题目难度也是随手 AK（</p><p>刷拉撒路的通关标记。</p><p>拉撒路，指复活以后触发贫血，<strong>拉</strong>出来的血<strong>撒</strong>了一<strong>路</strong>（光速逃</p><p>第一局，吐根，结果自己摆烂给摆死了。</p><p>第二局，史诗胎儿博士 + 硫磺火，结果一不小心就导弹炸自己，最后给炸死了。</p><p>第三局，吐根 + 硫磺火（我也想知道为什么每局都有这么多强力道具），结果不知道是因为这两个道具的某种化学反应还是其他道具的效果，每次攻击都会有概率炸自己一下。</p><p>第七层发现了这个问题想确认一下结果直接给自己人炸没了。</p><h2 id="Day-48「咋办啊」"><a href="#Day-48「咋办啊」" class="headerlink" title="Day 48「咋办啊」"></a>Day 48「咋办啊」</h2><p>上午是昨天下午的比赛。</p><p>一上来切掉 AB 然后开始对着 C 犯傻。</p><p>交了几发发现过不了于是开 D，然后各种犯低级错误，包括但不限于求网格四联通有障碍最短路写成 DFS。</p><p>功力尽失（悲</p><p>身败名裂（绝望</p><p>到最后 D 勉强过了，E 看出来个大概思路不过没时间写了。</p><p>我没有水平.jpg</p><p>出考场试图与 WWJ 学长交流，然后得知他刚刚知道今天上午有比赛。</p><blockquote><p>学长「睡得可香了。」</p></blockquote><h2 id="Day-49「请各位光头不要在挑战-45-耍仙术」"><a href="#Day-49「请各位光头不要在挑战-45-耍仙术」" class="headerlink" title="Day 49「请各位光头不要在挑战 45 耍仙术」"></a>Day 49「请各位光头不要在挑战 45 耍仙术」</h2><p>解锁了堕化伊甸，于是成功解锁了传说中的挑战 45。</p><p>然后明白了什么叫做真正的仙术。</p><p>第一局遇到两个印象比较深刻的主动道具。其中一个好像是吸收掉当前房间内的所有底座道具，每吸收一个道具就生成一只怪物。</p><p>然后它生出来的第一只就是回溯线限定的那种堕化狙击苍蝇（好像是这个名字）。</p><p>吓得我夺门而逃（</p><p>第二个是一个没有充能条的主动道具，使用时在角色位置生成一只大胖。</p><p>大胖迫害协会狂喜（错乱</p><p>最后通关的那一局是，在第一层的道具房发现了一个没有充能条的主动道具，使用时原地生成一个随机卡牌/符文/魂石。</p><p><strong>混沌宝珠警告（噔噔咚</strong></p><p>妈腿？妈心？以撒？小蓝人？一张混沌卡下去全部木大（</p><p>还有一些，像是：</p><ol><li>角色清理完房间时，原地放置一颗大爆弹先生的炸弹。</li><li>角色杀死怪物时，几率在当前房间获得一只格罗。</li><li>角色拾取卡牌/符文/魂石时，几率将其重置，然后放屁，并原地生成另一个随机卡牌/符文/魂石。</li><li>角色清理完房间时，承受一颗心的伤害，优先扣除红心。</li><li>角色杀死怪物时，在当前层获得一只随机跟班。</li><li>角色拾取掉落物时，会听到撒旦的笑声，然后手上会被塞入一颗鲍勃的烂头（可以投掷）。</li></ol><h2 id="Day-50「科目变化了！」"><a href="#Day-50「科目变化了！」" class="headerlink" title="Day 50「科目变化了！」"></a>Day 50「科目变化了！」</h2><p>早上又要去做核酸（</p><p>在门口排了可能有一节课时间的队（</p><p>三四节是高数。讲重积分的几何应用和物理应用。不过都是后半段都是计算没啥意思就没听（</p><p>在课桌上看到了不知是哪位 dalao 写下的字：</p><blockquote><p>Be positive. Be patient.</p><p>成为阳性。成为病人。</p></blockquote><p>lmao</p><p>下午本来是气排球课，但是老师看体育馆基本上这个学期不能用了于是临时把项目改成了散打。</p><p>没错散打。虽然在我看来教别人散打就是教别人鲨人（光速逃</p><p>晚上试图打以撒，但是似乎状态不够好于是开摆。</p><h2 id="Day-51「你是一个一个一个接龙群啊！」"><a href="#Day-51「你是一个一个一个接龙群啊！」" class="headerlink" title="Day 51「你是一个一个一个接龙群啊！」"></a>Day 51「你是一个一个一个接龙群啊！」</h2><p>查了一下发现表双子解锁的道具是真的一个比一个香，长子权，谷底石，达摩剑，创世纪。于是考虑开始挑战表双子全红。</p><p>我严重怀疑以撒这游戏有一个隐藏设定：每当玩家开始认真地玩一个新角色的时候，那一局遇到的道具质量提升。</p><p>总之就是半个乱杀局（</p><p>晚上一二节离散数学，因为清明假期刚过去老师怕我们前面学的都还给他了于是带着我们进行了一个一节课半的复习。</p><p>然后懒得听于是水群。</p><p>SD NOIP 群已经沦为复读群力（悲</p><h2 id="Day-52「今天我死了」"><a href="#Day-52「今天我死了」" class="headerlink" title="Day 52「今天我死了」"></a>Day 52「今天我死了」</h2><p>把双子的标记刷得差不多了（指还剩下母亲和究极贪婪三个）（隐藏章节双拿天使房双拿带来的战斗力提升原来这么多吗），想开始开表罗的坑了。</p><p>结果第一局上来伊甸的祝福送我一个吐根。</p><p>因为表罗子弹幽灵眼泪也不用担心子弹撞到石头上或者是板边爆炸，相比于其他角色开局吐根会好打一些。虽然炸隐藏房就有点难。 </p><p>直接冲进 Boss Rush 房一通乱杀，吐根两下带走一个 Boss。</p><p>然后冲进蓝子宫正面刚死寂（话说回来官中的翻译改成「死寂」了？之前还是「窒息胎」的来着），结果靠太近一发吐根直接给我破盾了。</p><p>然后惨死在死寂的连续统攻击之下（</p><p>翻了翻之前的视频，发现好像，如果同时持有「硫磺火」「吐根酊」「多维宝宝」，角色发射的血激光在碰到多维宝宝时会爆炸，然后我有一局拉撒路就是这样被炸死的。</p><p>可能其他的能够让角色眼泪分裂的跟班，像是天使棱镜也会有类似地效果。不过懒得测试了。</p><h2 id="Day-53「咋办啊！！！！」"><a href="#Day-53「咋办啊！！！！」" class="headerlink" title="Day 53「咋办啊！！！！」"></a>Day 53「咋办啊！！！！」</h2><p>下午事校内的比赛。</p><p>自信慢慢地去实验室，切掉 ABC 然后开始自闭。</p><p>D 看了看感觉不会就跳过了。</p><p>E 也感觉不会。然后开 F。</p><p>想了 1.5h+ 的暴力递推，写分数类发现 <code>unsigned long long</code> 都存不下，写 <code>long double</code> 发现精度不够。</p><p>本来想直接转 Python 的结果发现电脑上没装解释器。</p><p>好吧其实就算用 Python 感觉复杂度也要出锅。</p><p>比赛开始 2h 过去了才想起来观察性质，结果观察了一下一发过。</p><p>G 的大意事给定一个凸包 $A$ 和另一个简单多边形 $B$，问 $B$ 是否严格在 $A$ 内部。</p><p>实际上由凸包的性质很快可以得到，如果 $B$ 的所有顶点都严格在 $A$ 内部，那么 $B$ 本身也一定严格在 $A$ 内部。</p><p>然后就是 $m$ 次查询某个给定点是否在凸包内。</p><p>然后，因为不会写计算几何，我直接把整个凸包拆成两个 $y$ 关于 $x$ 的分段线性函数当作上下界，然后判断每个点的坐标是否在对应 $x$ 坐标的上下界内。</p><p>然后返回去看 D 发现暴力背包可行，一写发现写不对。</p><p>学术垃圾竟是我自己.jpg</p><p>晚上想起来自己英语作文还没写。</p><p>向 WWJ 学长求助，结果……</p><blockquote><p>学长「上网搜英语作文，我的经历，然后抄一篇。」</p><p>我「直接抄网上搜到的真的不会被发现吗（」</p><p>学长「不会，老师根本没时间。」</p></blockquote><p>这就是学长吗（</p><p>然后上网搜了一篇，xjb 改了改交上去了。最后修改到 83 pts，海星吧。</p><h2 id="Day-54「啊我死了」（2022-4-11）"><a href="#Day-54「啊我死了」（2022-4-11）" class="headerlink" title="Day 54「啊我死了」（2022-4-11）"></a>Day 54「啊我死了」（2022-4-11）</h2><p>尝试刷游魂的母亲通关标记，然而因为隐藏章节没怎么打过疯狂暴毙（</p><p>最远的一次在尸宫 I BOSS 房，因为不熟悉那个甩鞭子的 BOSS 的攻击模式，连着两次被鞭子抽到脸上于是寄掉了（</p><p>啊我死了（物理</p><h2 id="Day-55「啊我死了（梅开二度」"><a href="#Day-55「啊我死了（梅开二度」" class="headerlink" title="Day 55「啊我死了（梅开二度」"></a>Day 55「啊我死了（梅开二度」</h2><p>晚上试图刷游魂的最后一个通关标记，也就是究极贪婪的标记。</p><p>然而因为贪婪模式太难了各种暴毙（悲</p><p>最远的一次见到究极贪婪结果，因为 BOSS 房旁边有一些上吊的店主，究极贪婪的炸弹硬币把这些炸出蜘蛛了，然后我没看见。</p><p>饿啊（指操作下饭</p><p>然后就再也没有出过第三章。</p><p>此时，一条咸鱼失去了梦想.jpg</p><h2 id="Day-56「别玩了！」"><a href="#Day-56「别玩了！」" class="headerlink" title="Day 56「别玩了！」"></a>Day 56「别玩了！」</h2><p>继续尝试刷游魂的究极贪婪标记。</p><p>然后日常暴毙（悲</p><p>最后一局成功地拿到了传说中「跳出三界外，不在五行中」的计数二十面骰，然后直接复杂性骨折，柯吉猫的身体，强力安眠药，科技零，剖腹产给整上把究极贪婪按在墙角锤（</p><p>强力安眠药 + 剖腹产的组合竟然还是发射拳头（拿了 A+），不过拳头似乎有追踪并且会发射小拳头。</p><p>你都生了些什么东西出来啊 kora（</p><p>莉莉丝在贪婪模式以外有亿点不好用，于是开始刷店主的标记（</p><h2 id="Day-57「？？？」"><a href="#Day-57「？？？」" class="headerlink" title="Day 57「？？？」"></a>Day 57「？？？」</h2><p>平静的一天。</p><h2 id="Day-58「发生肾么事了？？！！」"><a href="#Day-58「发生肾么事了？？！！」" class="headerlink" title="Day 58「发生肾么事了？？！！」"></a>Day 58「发生肾么事了？？！！」</h2><p>早上虽然有大物实验不过因为不想写实验报告于是日常翘掉。</p><p>结果突然辅导员就推门进来了。</p><p>然后那个时候我甚至还没起来。</p><p><strong>噔 噔 咚（绝望</strong></p><p>晚上继续刷店主的标记，只能说三格血上限可容易暴毙了。</p><p>有一局见到母亲结果被二阶段的那个白色蠕虫弹幕爆杀（</p><h2 id="Day-59「？？？」"><a href="#Day-59「？？？」" class="headerlink" title="Day 59「？？？」"></a>Day 59「？？？」</h2><p>平静的一天。</p><h2 id="Day-60「九条可怜（绝望」"><a href="#Day-60「九条可怜（绝望」" class="headerlink" title="Day 60「九条可怜（绝望」"></a>Day 60「九条可怜（绝望」</h2><p>下午是 CCCC 的热身赛。</p><p>虽然上午三四节似乎还有职业生涯规划的样子不过还是半个字不听（</p><p>开始比赛前确认到场需要扫一个验证用的二维码，结果 13：30 开始但是老师 12：20+ 才把二维码给出来。</p><p>抱歉，搞忘咯.jpg</p><p>进去一看发现巨大多水题。直到我看到最后一题。</p><p>题意就是一个序列，每次随机添数，所有数 $\gcd$ 到 $1$ 了就结束，问序列期望长度。</p><p>之前写过一篇 CF 上这个题的题解，不过那个时候数据范围只有 $10^5$ 所以我写了个根号的交上去了。不过这次数据范围被超级加倍到了 $10^{11}$。</p><p>不会。告辞。</p><h2 id="Day-61「？？？」（2022-4-18）"><a href="#Day-61「？？？」（2022-4-18）" class="headerlink" title="Day 61「？？？」（2022-4-18）"></a>Day 61「？？？」（2022-4-18）</h2><p>平静的一天。</p><h2 id="Day-62「？？？」"><a href="#Day-62「？？？」" class="headerlink" title="Day 62「？？？」"></a>Day 62「？？？」</h2><p>/kel</p><h2 id="Day-63「？？？」"><a href="#Day-63「？？？」" class="headerlink" title="Day 63「？？？」"></a>Day 63「？？？」</h2><p>/kel</p><h2 id="Day-64「？？？」"><a href="#Day-64「？？？」" class="headerlink" title="Day 64「？？？」"></a>Day 64「？？？」</h2><p>/kel</p><h2 id="Day-65「？？？」"><a href="#Day-65「？？？」" class="headerlink" title="Day 65「？？？」"></a>Day 65「？？？」</h2><p>虽然当初立志要写日记，但是真的不想写（</p><h2 id="Day-66「废物竟是我自己」"><a href="#Day-66「废物竟是我自己」" class="headerlink" title="Day 66「废物竟是我自己」"></a>Day 66「废物竟是我自己」</h2><p>之前有一天被 ZJ 私聊问要不要打 CCCC 团体天梯赛，然后那我肯定不好拒绝。</p><p>于是就是今天了。虽然我觉得以我的水平也就是去划个水。</p><p>要求似乎还挺多，让录一段考场周围环境的视频，甚至还要求这段视频里面周围两米范围内不能有其他人。</p><p>然后开题。L1，L2 的题都是巨大多水题，除了 L2 的最后两道。</p><p>L2-3 感觉是个树上的经典题目，结果不会。</p><p>L2-4 写了个 $O(n^2\log n)$ 的 Dij 结果 T 掉了。</p><p>L3-1 是个，算是模拟吧，总而言之是顺利地切掉了。</p><p>L3-2 感觉也是个树上的经典题目。大体题意是，给定一棵有根树，求这棵树所有节点按照所有可能的 DFS 序排序后形成的序列的逆序对数量的总和。</p><p>记得好像有一种保留重儿子的技巧，可以把时间复杂度从平方优化到一个 $\log$，不过没写出来。</p><p>题目给的第二个样例答案是 $516$，然后我的代码跑出来 $258$。感觉就差一点但是不知道错在哪里了。</p><p>L3-3，九条可怜，不会，滚。</p><p>感觉最近日渐颓废。想着做 CF 题，结果思维不够做不出来。想着做 OI 题，结果每次都是一读完题就开始写，写到一半才发现自己的思路太过暴力或者直接就是假的，正确的思路又需要使用一些数据结构，然后就懒得写了。</p><p>如此往复循环，现在是什么题都不会做了。</p><p>你他妈的！不可以这样的啊！不可以啊！.jpg</p><h2 id="Day-67「？？？」"><a href="#Day-67「？？？」" class="headerlink" title="Day 67「？？？」"></a>Day 67「？？？」</h2><p>/kel</p><h2 id="Day-68「？？？」（2022-4-25）"><a href="#Day-68「？？？」（2022-4-25）" class="headerlink" title="Day 68「？？？」（2022-4-25）"></a>Day 68「？？？」（2022-4-25）</h2><p>最近在刷堕化角色的通关标记。</p><p>堕化以撒强归强，对选择困难症太不友好了。</p><p>玩这个角色得有一半左右的时间在撕烤该拿哪个道具该换哪个道具。</p><p>堕化抹大拉好强啊直接横冲直撞都不用担心暴毙反正杀敌掉血然后副主动拍一下两颗红心。</p><p>然后开始玩堕化该隐。</p><p>有一说一，堕化该隐正常一局我能打 1h+。</p><h2 id="Day-69「黑暗中的犹大人（bushi」"><a href="#Day-69「黑暗中的犹大人（bushi」" class="headerlink" title="Day 69「黑暗中的犹大人（bushi」"></a>Day 69「黑暗中的犹大人（bushi」</h2><p>因为堕化该隐非常的没有意思，于是开始玩堕化犹大。</p><p>然后第一局就在第一层的宝箱房捡了一个小号。</p><p>emmm……无法接受，R 了（</p><p>以撒不就是个屎尿屁游戏（暴论</p><h2 id="Day-70「食雪汉（指里蓝人」"><a href="#Day-70「食雪汉（指里蓝人」" class="headerlink" title="Day 70「食雪汉（指里蓝人」"></a>Day 70「食雪汉（指里蓝人」</h2><p>堕化犹大非常强于是很快就全红了。</p><p>然后开始玩堕化蓝宝宝。</p><p>弟啊你这眼泪根本打不出伤害啊。</p><p>弟啊你自带这么多大便有什么用吗。</p><p>总而言之就是无解弱。埋了吧（无慈悲</p><p>于是跑去隔壁打挑战。</p><p>首先是成功地靠镰刀眼泪和削皮刀削出来的 3 级肉哥打过了挑战 29。</p><p>然后是只开了一层天使房里面还只有一个道具的挑战 40。</p><p>第八层 BOSS 战两个妈心直接打起来了甚至连眼睛都没召唤出来。</p><p>挑战 41 需要解锁弹珠袋，但是我才发现我还没有解锁。于是直接打开控制台进行了一个安慰剂 + Gulp 的刷。</p><p>剩下的挑战还有三个：32，愚人节；34，终极困难；42，烫手山芋。</p><p>充血怪/肿胀/双目硫磺火是什么 diaomao BOSS 啊（暴论</p><h2 id="Day-71「FUCK-BLOAT！！！（震声」"><a href="#Day-71「FUCK-BLOAT！！！（震声」" class="headerlink" title="Day 71「FUCK BLOAT！！！（震声」"></a>Day 71「FUCK BLOAT！！！（震声」</h2><p>下次版本更新把这个 diaomao BOSS 删了罢（无慈悲</p><p>尤其是绿色变种（</p><p>总而言之就是挑战 32 过了。</p><p>挑战 42 也在怀表和圣经的帮助下过了。</p><p>第六层一进商店就看到圣经是什么神仙运气啊。</p><p>然后尝试挑战 34。</p><p>因为比较难于是试图刷开局（指在一层图书馆刷出启示录）。</p><p>然而因为都是双重 BOSS 所以并不能被替换成天启骑士（悲</p><p>第八层，或者说因为是合并诅咒所以实际上是第四层，开了恶魔房，进去一看一个一血交易一个二血交易。</p><p>拿了那个二血的一看是亚巴顿。海星吧虽然不是硫磺火。</p><p>结果被超级撒旦乱杀（悲</p><h2 id="Day-72「参孙感觉很健康！」"><a href="#Day-72「参孙感觉很健康！」" class="headerlink" title="Day 72「参孙感觉很健康！」"></a>Day 72「参孙感觉很健康！」</h2><p>又来打挑战 34（</p><p>日常刷开局直到一层图书馆出启示录。</p><p>洞穴层开了天使房，一进去发现是个二选一，深思熟虑之后拿了左边的。</p><blockquote><p><strong>终末天启</strong></p><p>唤醒你的信仰</p></blockquote><p>于是这一局就过了（喜</p><p>感觉大傻蛋二阶段平均难度略低于一阶段。就拿这一局挑战 34 来说，我一阶段挨了三下，然后二阶段甚至无伤。</p><p>感觉二阶段就像期末考试，大傻蛋（试卷）要是只用（出）你会躲（做）的弹幕（题目）你就能无伤（过），要是只用（出）你不会躲（做）的弹幕（题目）你就会暴毙（挂）（光速逃</p><p>从某种意义上来说，挑战 34 稍微挽回了一些超级撒旦作为最终 BOSS 的威严。</p><p>然后开始刷里蓝人的通关标记……什么屑角色埋了罢（无慈悲</p><h2 id="Day-73「休伤吾儿！」"><a href="#Day-73「休伤吾儿！」" class="headerlink" title="Day 73「休伤吾儿！」"></a>Day 73「休伤吾儿！」</h2><p>堕化蓝宝宝实在是太难玩了（悲</p><p>于是开始考虑刷堕化夏娃的通关标记。</p><p>感觉堕化夏娃就是血团数量堆上来了就能横着走，但是尤其是打 BOSS 的时候，或者是遇到某些高速贴脸怪，很容易一下子死一大片。</p><p>有一局打精神错乱就是如此，然后那局被百变怪残血反杀（悲</p><p>有一说一，平衡符号天下第一。</p><p>晚上打开了近一个月没有碰过的百橙，顺便进行了一个 DLC 的安排。</p><p>两个新角色，希夫和星乃丽华，分别对应之前 NoName 和星破的普通人(?)世界线。</p><p>然后拿到新角色肯定是先把语音听一篇。听说相比于之前的星破，丽华的性格要温和一些……但是完全听不出来，感觉还是跟个疯子一样（光速逃</p><p>属性的话，希夫 8 滴血是什么神仙啊。上一个血这么厚的好像还是斩子，然而斩子不能回血，这个希夫却有着 +0/-2/+0 的面板。<del>这么一看好像也就平均值高了那么一点（</del></p><p>机制并没有完全玩懂（</p><p>另一边丽华则是 3 滴血，继彼特和奈奈子之后第三个全游戏血量最少的角色出现了，挺容易暴毙的。然后面板是 +2/+0/+0，兄啊说好的性格温和呢你这 +2 攻击真的不是用来鲨人的吗（半脑</p><p>被动倒是有一个和星破相反的只能选择星星目标，以及获得星星时数量 +1，然后 Hyper 是接下来三个回合从其他角色手上持续抢夺星星。</p><p>深夜突然想去玩一玩传说中的超级食肉男孩，于是就去买了个玩。</p><p>有一说一，操作手感真的就那样了（</p><p>不知道是不是因为食肉哥只是一块肉，他是真的会粘在墙上和地板上的，尤其是粘在墙上的时候，不按跳跃只按方向键甚至从墙上下不来。</p><h2 id="Day-74「山东盛产数学高手是吧」"><a href="#Day-74「山东盛产数学高手是吧」" class="headerlink" title="Day 74「山东盛产数学高手是吧」"></a>Day 74「山东盛产数学高手是吧」</h2><p>下午又有实验室的比赛。一共 4h，又是坐大牢的时间了（悲</p><p>上来 A 感觉很简单但是写了很久过不了一只 <code>WA on test 2</code>，于是去写 BC，结果 B 交了两发，C 交了三发才过。功力尽失（悲</p><p>读完 D 感觉不大会于是去改 A 的代码，终于在第五次提交的时候过了。</p><p>然后去写 E。</p><p>题目大意是，有一场 IOI 赛制的比赛，有一道题，有 $N$ 组测试数据，每组测试数据的答案都是 <code>yes</code> 或 <code>no</code>。但是您不会做，于是对于每一组测试数据，您随机回答 <code>yes</code> 或 <code>no</code>。为了防止被判作弊，您至多提交 $K$ 发，求最优策略下的期望成绩。</p><p>显然是，如果某一次提交的分数已经足够高了，那么就不要再提交了。</p><p>一开始我以为是只要分数严格高于 $\lfloor\frac{N}{2}\rfloor$ 就不要再提交了，然后发现假了。</p><p>于是我很快（1h 之后）注意到，每次提交之后，如果剩下的提交次数能够达到的期望分数大于等于这此次提交的分数，那么就要再交一发。形式化地，设 $k$ 次提交的期望分数为 $E_k$，有</p><script type="math/tex; mode=display">E_{k+1}=2^{-n}\sum_{i\gt E_k}{n\choose i}i+2^{-n}\sum_{i\leqslant E_k}{n\choose i}\cdot E_k=p(E_k)\cdot E_k+q(E_k)</script><p>其中 $p(E_k),q(E_k)$ 可以预处理出来。</p><p>这是一个变系数线性递推数列。但是注意到数据范围有 $K\leqslant 10^9$，一开始我是想不算到 $E_K$，算到 $E_{3\times 10^7}$ 左右就足够满足精度要求了，结果喜提 <code>WA on test 10</code>。</p><p>注意到，当 $\lfloor E_k\rfloor$ 不变的时候，$p(E_k),q(E_k)$ 也是不变的，我们可以用二分求得下一个使得 $\lfloor E_k\rfloor$ 发生变化的 $k$。</p><p>$p(E_k),q(E_k)$ 为常数 $p,q$ 时</p><script type="math/tex; mode=display">E_{k+1}=pE_k+q</script><p>设</p><script type="math/tex; mode=display">E_{k+1}+\lambda=p(E_k+\lambda)</script><p>可以解得</p><script type="math/tex; mode=display">\lambda=\frac{q}{p-1}</script><p>然后我们就可以用求等比数列的方法求 $E_{k+m}$ 了，然后就真的可以二分了。</p><h2 id="Day-75「？？？」（2022-5-2）"><a href="#Day-75「？？？」（2022-5-2）" class="headerlink" title="Day 75「？？？」（2022-5-2）"></a>Day 75「？？？」（2022-5-2）</h2><p>本来想写点什么的结果忘了。</p><p>堕化参孙强是强，只是进了狂暴接下来连着两三个房间一只怪不刷是真的血压 up。</p><h2 id="Day-76「？？？」"><a href="#Day-76「？？？」" class="headerlink" title="Day 76「？？？」"></a>Day 76「？？？」</h2><p>堕化 AZ 似乎也很强，只是如果不用标记的话自带的硫磺火蓄力时间有点长（</p><p>蓄力到一半以为可以了一松射击发现射不出来（悲</p><h2 id="Day-77「？？？」"><a href="#Day-77「？？？」" class="headerlink" title="Day 77「？？？」"></a>Day 77「？？？」</h2><p>平静的一天。</p><h2 id="Day-78「？？？」"><a href="#Day-78「？？？」" class="headerlink" title="Day 78「？？？」"></a>Day 78「？？？」</h2><p>平静的一天。</p><h2 id="Day-79「？？？」"><a href="#Day-79「？？？」" class="headerlink" title="Day 79「？？？」"></a>Day 79「？？？」</h2><p>平静的一天。</p><h2 id="Day-80「？？？」"><a href="#Day-80「？？？」" class="headerlink" title="Day 80「？？？」"></a>Day 80「？？？」</h2><p>今天下午是电路实验。</p><p>发现座位表上没有我的名字但是有一个座位是空着的于是我就坐在那里了。</p><p>同组的（本来应该是的）FYF 还在寝室里睡大觉于是只能我一个人做了。</p><p>做实验好难啊我用了 1.5h+ 才弄明白那些个仪器怎么使用。</p><h2 id="Day-81「？？？」"><a href="#Day-81「？？？」" class="headerlink" title="Day 81「？？？」"></a>Day 81「？？？」</h2><p>平静的一天。</p><p>晚上成功地举办了信息组第一次大型（指除了阿块以外基本上都来得差不多了）线上集会（</p><h2 id="Day-82「周三放假是吧」（2022-5-9）"><a href="#Day-82「周三放假是吧」（2022-5-9）" class="headerlink" title="Day 82「周三放假是吧」（2022-5-9）"></a>Day 82「周三放假是吧」（2022-5-9）</h2><p>下午一二节本来是电路课，但是 XP 群里面不知道为什么突然有一群蛤蟆开始语音聊天。</p><p>然后我还没下课不好开麦于是试图使用它那个文字交流功能，结果不知道为什么没有人理我。</p><p>然后快下课的时候……</p><blockquote><p>zhuoer「诶成爷似乎在这里孤独地发着文字。」</p></blockquote><p>心情简单.jpg</p><h2 id="Day-83「什么超级贪婪」"><a href="#Day-83「什么超级贪婪」" class="headerlink" title="Day 83「什么超级贪婪」"></a>Day 83「什么超级贪婪」</h2><p>本来正在刷堕化伊甸的通关标记，结果刷到自闭了。</p><p>堕化伊甸是什么 diaomao 角色啊不会真的有人在除了刷成就以外的时候玩吧。</p><p>堕化游魂那当然是跳过。<del>整个游戏暴毙率第一的超级 diaomao 角色（</del></p><p>试图刷堕化店长的通关标记，结果是两个血上限其实比起里罗的一碰就死并没有多出来多少容错，尤其是向死寂，精神错乱这种没有小怪补给的最终 BOSS，差不多也就相当于是身上带着一张神圣卡的里罗。</p><p>有一局在蓝子宫层的宝箱房找到了吸血鬼之魅，打死寂前半段血量直接巨大多溢出，结果后半段它就不刷小怪了（</p><p>喜提暴毙 :(</p><h2 id="Day-84「？？？」"><a href="#Day-84「？？？」" class="headerlink" title="Day 84「？？？」"></a>Day 84「？？？」</h2><p>职业生涯规划是什么 diaomao 作业啊（暴论</p><h2 id="Day-85「？？？」"><a href="#Day-85「？？？」" class="headerlink" title="Day 85「？？？」"></a>Day 85「？？？」</h2><p>平静（并不是）的一天。</p><h2 id="Day-86「？？？」"><a href="#Day-86「？？？」" class="headerlink" title="Day 86「？？？」"></a>Day 86「？？？」</h2><p>电子电路实验报告是什么 diaomao 作业啊（半脑</p><h2 id="Day-87「？？？」"><a href="#Day-87「？？？」" class="headerlink" title="Day 87「？？？」"></a>Day 87「？？？」</h2><p>军事理论论文是什么 diaomao 作业啊（全脑</p><p>话说回来今天似乎是恋恋之日的来着（</p><p>奇怪的节日增加了（光速逃</p><p>好吧可能也没那么奇怪（光速跑回来</p><h2 id="Day-88「什么人形自走-D4-D8」"><a href="#Day-88「什么人形自走-D4-D8」" class="headerlink" title="Day 88「什么人形自走 D4 + D8」"></a>Day 88「什么人形自走 D4 + D8」</h2><p>堕化伊甸是什么 shadiao 角色啊（震怒</p><p>本来想用那个人形自走 D100 的说法的，不过一想好像里伊甸能 roll 的也就只有自己身上的东西了，对应的骰子好像只有一个 D4 一个 D8。</p><p>如果真的挨一下就触发一次 D7（重新开始当前房间）那就真的是狗都不玩的角色了（</p><p>打百变怪打到残血一不小心挨了一下，直接<strong>全 部 木 大</strong>（绝望</p><p>或者当成里罗玩（小声</p><h2 id="Day-86「？？？」（2022-5-16）"><a href="#Day-86「？？？」（2022-5-16）" class="headerlink" title="Day 86「？？？」（2022-5-16）"></a>Day 86「？？？」（2022-5-16）</h2><p>堕化该隐，狗都不玩.jpg</p><h2 id="Day-87「？？？」-1"><a href="#Day-87「？？？」-1" class="headerlink" title="Day 87「？？？」"></a>Day 87「？？？」</h2><p>里罗好难（悲</p><h2 id="Day-88「？？？」"><a href="#Day-88「？？？」" class="headerlink" title="Day 88「？？？」"></a>Day 88「？？？」</h2><p>晚上把大逆转裁判又捡起来玩了玩。</p><h2 id="Day-89「？？？」"><a href="#Day-89「？？？」" class="headerlink" title="Day 89「？？？」"></a>Day 89「？？？」</h2><p>日常打里罗，这次走回溯线结果第一次打到这里太紧张于是暴毙了（绝望</p><p>论里罗的一百种死法.jpg</p><p>话说回来，大逆连续两次提示存档的时间间隔好长啊。逆转 123 都是每隔 30min 左右就待续一下，结果大逆直接一口气 2h+。</p><h2 id="Day-90「……我那狂野的钢铁脚后跟重重地敲在桌子上的无礼。」"><a href="#Day-90「……我那狂野的钢铁脚后跟重重地敲在桌子上的无礼。」" class="headerlink" title="Day 90「……我那狂野的钢铁脚后跟重重地敲在桌子上的无礼。」"></a>Day 90「……我那狂野的钢铁脚后跟重重地敲在桌子上的无礼。」</h2><p>还请原谅。</p><p>lmao.jpg</p><h2 id="Day-91「里双子，（）都……还是算了罢」"><a href="#Day-91「里双子，（）都……还是算了罢」" class="headerlink" title="Day 91「里双子，（）都……还是算了罢」"></a>Day 91「里双子，（）都……还是算了罢」</h2><p>距离全红还剩四个角色：</p><ol><li>堕化该隐，还差究极贪婪。</li><li>堕化游魂，比起上面还差精神错乱。</li><li>堕化伊甸，比起上面还差母亲和祸兽。</li><li>堕化雅各，比起上面还差撒旦，羔羊和超级撒旦。</li></ol><p>:(</p><p>大逆转裁判真好玩（光速逃</p><h2 id="Day-92「？？？」"><a href="#Day-92「？？？」" class="headerlink" title="Day 92「？？？」"></a>Day 92「？？？」</h2><p>还没写呢.jpg</p><p>算了不写了.jpg</p><h2 id="Day-93「今天没碰以撒」（2020-5-23）"><a href="#Day-93「今天没碰以撒」（2020-5-23）" class="headerlink" title="Day 93「今天没碰以撒」（2020-5-23）"></a>Day 93「今天没碰以撒」（2020-5-23）</h2><p>直角。</p><h2 id="Day-94「今天没碰以撒-×2」"><a href="#Day-94「今天没碰以撒-×2」" class="headerlink" title="Day 94「今天没碰以撒 ×2」"></a>Day 94「今天没碰以撒 ×2」</h2><p>直角。</p><p>试图用 Unity 写一个简单的 STG。</p><p>造轮子好难（光速放弃</p><h2 id="Day-95-98「这个人很懒」"><a href="#Day-95-98「这个人很懒」" class="headerlink" title="Day 95 - 98「这个人很懒」"></a>Day 95 - 98「这个人很懒」</h2><p>什么也没有写。</p><h2 id="Day-99「基础生疏-jpg」"><a href="#Day-99「基础生疏-jpg」" class="headerlink" title="Day 99「基础生疏.jpg」"></a>Day 99「基础生疏.jpg」</h2><p>今天下午去新校区打排位赛 R2。</p><p>首先 A 一眼秒了，结果乘法取模之后加法忘记取模了喜提一发 WA。</p><p>然后 B 不会于是去看 C。</p><p>C xjb 转化了一波自以为高到不知道哪里去了，结果疯狂 WA。</p><p>然后回过头去看 B，对着样例总结了一下规律，然后再稍微一分析，啊这这不是思博题吗。</p><p>然后 D 就是一个树上 DP，没有问题。</p><p>这个时候已经 2h 了。</p><p>然后返回去看 C，才发现是转化出锅了，直接一波暴力然后真就过了。</p><p>这个时候已经 3h 了。</p><p>E 一看就知道不会。</p><p>F 有一个弱化版 F1，切掉算 0.5 分。一开始我是写了个 <code>std::set&lt;std::string&gt;</code>，结果因为时间复杂度实际上大概有 $O(n^3\log n)$ 于是疯狂 TLE。</p><p>后来我突然意识到，不是有个东西叫字符串 hash 吗。</p><p>于是写了个双模 hash，模数用的 $998244353$ 和 $19^9+9$，然后过了。</p><p>虽然都是 4.5 题但是很明显有一位叫做 SHX 的同级 dalao 的罚时不知道比我小到哪里去了。</p><p>只可惜那位 dalao R1 比我少切一道题然后排名就比我低了（</p><blockquote><p>群内 dalao「AB 考察的都是取模。」</p><p>还是上面那位「没有很快通过的说明经验生疏了。」</p></blockquote><h2 id="Day-100「100-天辣！」（2022-5-30）"><a href="#Day-100「100-天辣！」（2022-5-30）" class="headerlink" title="Day 100「100 天辣！」（2022-5-30）"></a>Day 100「100 天辣！」（2022-5-30）</h2><p>去他妈的电路实验（震声</p><h2 id="Day-101「人为什么要活着」"><a href="#Day-101「人为什么要活着」" class="headerlink" title="Day 101「人为什么要活着」"></a>Day 101「人为什么要活着」</h2><p>为什么要连着补两节课直接从 7：00 一口气干到 12：00 啊，老师这是觉得 AHU 人均铁人是吗（</p><h2 id="Day-102「儿童节」（2022-6-1）"><a href="#Day-102「儿童节」（2022-6-1）" class="headerlink" title="Day 102「儿童节」（2022-6-1）"></a>Day 102「儿童节」（2022-6-1）</h2><p>儿童的眼神.jpg</p><h2 id="Day-103「新宇宙（迫真」"><a href="#Day-103「新宇宙（迫真」" class="headerlink" title="Day 103「新宇宙（迫真」"></a>Day 103「新宇宙（迫真」</h2><p>还挺上头的（这句话指《盗贼遗产 2》）（</p><p>简单感受了一下《冰与火之舞》的新 DLC Neo Cosmos，感觉要患上读谱障碍综合征了（</p><p>长条好别扭啊而且还是尾巴带判定的长条。<del>不过也可能只是单纯地因为我不会打（</del></p><p>这个 DLC 甚至还有剧情（</p><p>话说回来，存档读档算作弊吗（</p><p>如果算的话，那个存档点都是你给我摆好的为什么我就不能用了（</p><p>感觉一开始那个什么监管者的角色设计挺 ao 看的，有新宇宙的感觉。我是说他那一堆手。</p><p>亡蝶葬仪（无端迫害</p><h2 id="Day-104「盗贼遗产-2」"><a href="#Day-104「盗贼遗产-2」" class="headerlink" title="Day 104「盗贼遗产 2」"></a>Day 104「盗贼遗产 2」</h2><p>成功通过堆命打过了这游戏的一周目的两个最终 BOSS？算是吧。</p><p>虽然但是，稍微小小地剧透一下，最终 BOSS 是个缝合怪（</p><p>然后会解锁一个累赘系统，类比一下的话就是 Hades 的热度系统，就是会有一些增加难度的选项，然后打开这些选项再从头通关一遍就会有新内容。</p><p>一周目忍着没开房规，二周目试着关了碰撞伤害果然世界清静了许多。</p><p>感觉如果一个 BOSS 身上安上去太多风格不同的技能的话就会有缝合的感觉。</p><p>我觉得这是坏的，是个人都会谔谔的（</p><p>全盛拉麦好强（</p><p>话说回来，为什么 BOSS 房地形也被加强了啊（</p><p>简单找了一下隐藏要素，感觉任务表上给的提示就是那种，找不到的时候看不懂，找到了又觉得好像说的挺有道理的。</p><p>以撒说不定已经不会玩力（悲</p><h2 id="Day-105「逻辑与推理的实验剧场」"><a href="#Day-105「逻辑与推理的实验剧场」" class="headerlink" title="Day 105「逻辑与推理的实验剧场」"></a>Day 105「逻辑与推理的实验剧场」</h2><p>其实就是看福尔摩斯胡诌（</p><p>每天日常部分第一件事就是看福尔摩斯日常犯病（</p><h2 id="Day-106「-」"><a href="#Day-106「-」" class="headerlink" title="Day 106「:(」"></a>Day 106「:(」</h2><p>:(</p><h2 id="Day-107「-」（2022-6-6）"><a href="#Day-107「-」（2022-6-6）" class="headerlink" title="Day 107「:(:(」（2022-6-6）"></a>Day 107「:(:(」（2022-6-6）</h2><p>明天似乎是高考 Day 1？</p><p>希望无敌的阿块能够考个好成**。</p><h2 id="Day-108「？？？」"><a href="#Day-108「？？？」" class="headerlink" title="Day 108「？？？」"></a>Day 108「？？？」</h2><p>虽然端午节已经过去很久了不过……</p><p>什么是粽子？</p><p>要是被包起来的就行。</p><p>里面是不是饭也没关系了。</p><p>综上所述，结肠造口袋是粽子（暴论</p><h2 id="Day-109「？？？」"><a href="#Day-109「？？？」" class="headerlink" title="Day 109「？？？」"></a>Day 109「？？？」</h2><p>全盛拿玛是什么 diaomao 东西啊（半脑</p><h2 id="Day-110「？？？」"><a href="#Day-110「？？？」" class="headerlink" title="Day 110「？？？」"></a>Day 110「？？？」</h2><p>平静的一天。</p><h2 id="Day-111「？？？」"><a href="#Day-111「？？？」" class="headerlink" title="Day 111「？？？」"></a>Day 111「？？？」</h2><p>平静的一天。</p><h2 id="Day-112「？？？」"><a href="#Day-112「？？？」" class="headerlink" title="Day 112「？？？」"></a>Day 112「？？？」</h2><p>平静的一天。</p><h2 id="Day-113「进行一个分的骗」"><a href="#Day-113「进行一个分的骗」" class="headerlink" title="Day 113「进行一个分的骗」"></a>Day 113「进行一个分的骗」</h2><p>上午有 diaomao 军事理论考试。</p><p>虽然准备了答案但是还是有部分题目找不到（悲</p><p>下午去新校区打省赛。</p><p>三人一组共用一台电脑。IOI 赛制，因为没有罚时所以十分地不紧张刺激。</p><p>贡献了一道 A 和一道 E。本来想写一写 K 的结果到最后调不出来了。</p><p>其中 F 存在判断无解并输出 <code>No Solution</code> 的部分。</p><blockquote><p>同队 dalao「进行一个 <code>&quot;No Solution&quot;</code> 的 <code>puts()</code>。」</p></blockquote><h2 id="Day-114「推理（确信」（2022-6-13）"><a href="#Day-114「推理（确信」（2022-6-13）" class="headerlink" title="Day 114「推理（确信」（2022-6-13）"></a>Day 114「推理（确信」（2022-6-13）</h2><p>大逆转裁判 2-5，最后的《逻辑与推理的实验剧场》。</p><blockquote><p>福尔摩斯「船马上就开了，这次就不『玩』了。」</p></blockquote><p>燃起来力！燃起来力！（狂喜</p><p>所以说福尔摩斯以前推理的时候都是，5s 看到真相，然后 55s 撕烤怎么整活（</p><ul><li>那就是饿昏头的狮子吃了《地毯》！</li><li>就是成为这家当铺的店员，用铲子在这里挖地！</li><li>被害人的死因就是「吃太多」质量很差的肥皂所引发的中毒身亡！</li></ul><blockquote><p>龙之介写的人物档案「他的推理每次都让人惊掉下巴。」</p></blockquote><p><strong>Warning：以下折叠部分包含剧透内容。</strong></p><p><strong>Warning：以下折叠部分包含剧透内容。</strong></p><p><strong>Warning：以下折叠部分包含剧透内容。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">大逆二最终章一连放倒两个法官，打破了逆转史上「法官席无真凶」的定律……好像的确「法官就是真凶」这种展开还是天马行空了一点（</span><br><span class="line"></span><br><span class="line">好吧其实如果是《惯例的老爷爷》的话就不会有问题，但是问题是沃尔特克斯和慈狱都是《有名字的》。</span><br><span class="line"></span><br><span class="line">（↑这是什么奇妙的书名号用法）</span><br><span class="line"></span><br><span class="line">此玉正是狼（划掉</span><br><span class="line"></span><br><span class="line">烧起来力！烧起来力！（指法官豹变</span><br></pre></td></tr></table></figure><h2 id="Dat-115「？？？」"><a href="#Dat-115「？？？」" class="headerlink" title="Dat 115「？？？」"></a>Dat 115「？？？」</h2><p>平静的一天。</p><h2 id="Dat-116「？？？」"><a href="#Dat-116「？？？」" class="headerlink" title="Dat 116「？？？」"></a>Dat 116「？？？」</h2><p>平静的一天。</p><h2 id="Dat-117「？？？」"><a href="#Dat-117「？？？」" class="headerlink" title="Dat 117「？？？」"></a>Dat 117「？？？」</h2><p>平静的一天。</p><h2 id="Dat-118「？？？」"><a href="#Dat-118「？？？」" class="headerlink" title="Dat 118「？？？」"></a>Dat 118「？？？」</h2><p>平静的一天。</p><p>看了一遍大逆转裁判的附加内容里面的《成歩堂龍ノ介の罪深き七日間》。</p><p>虽然不知道为什么没有翻译。</p><p>而且甚至不能暂停。</p><p>好吧其实有暂停不过暂停的时候是看不到字的而且暂停之后一小段时间内不知道为什么听不到语音。</p><p>很多时候只能读懂一个大概意思。具体细节就分析不过来了（光速逃</p><p>有些时候甚至大概意思都不确定看得对不对（再次光速逃</p><p>尤其是第一夜和第四夜的判决篇，福尔摩斯那什么「言えない」「気がしない」一套组合拳打下来直接给我干蒙了（</p><p>还有，班吉克斯声音 ao 听 /se</p><blockquote><p>バンジークス「罪深き被告人、成歩堂龍ノ介。</p><p>貴公の罪は、『殺人』。」</p></blockquote><p>这里应该指的是 1-1 吧。后面还说审判就在明天（指游戏正式版发布）。</p><h2 id="Day-119「？？？」"><a href="#Day-119「？？？」" class="headerlink" title="Day 119「？？？」"></a>Day 119「？？？」</h2><p>平静（其实也不是啦）的一天。</p><h2 id="Day-120「期末考试-Day-1-3」"><a href="#Day-120「期末考试-Day-1-3」" class="headerlink" title="Day 120「期末考试 Day 1/3」"></a>Day 120「期末考试 Day 1/3」</h2><p>期末考试 Day 1，物理 + 英语。</p><p>感觉不良好.jpg</p><p>到了物理考场突然发现一个问题就是，没带计算器。</p><p><strong>噔 噔 咚</strong>（绝望</p><p>下午英语……只能说整整一年没学过英语了，上课全程划水半个字都不带听一下的（光速逃</p><p>选词填空平均一道题一个词不认识，选答案全凭感觉。</p><ul><li>欸这个词看起来好像带点贬义的样子。</li><li>欸这个词看起来像是刚学的的样子。</li></ul><p>能过应该是能过，不过大概也就仅此而已了（小声</p><p>下午有亚洲时间场的 CodeForces Div. 2（17：05 开始，2h），本来想在 xp 裙里问一下有没有人打不过还是算了吧，应该是没有的。</p><p>好久没打过 CF 了怕不是要下分。</p><p>话说回来 xp 裙改名了。</p><h2 id="Day-121「期末考试-Day-2-3」（2022-6-20）"><a href="#Day-121「期末考试-Day-2-3」（2022-6-20）" class="headerlink" title="Day 121「期末考试 Day 2/3」（2022-6-20）"></a>Day 121「期末考试 Day 2/3」（2022-6-20）</h2><p>期末考试 Day 2，高数 + 线代。</p><p>而且还是一个上午连着考两门。</p><p>拿到高数试卷一看，选择第一题要求计算两条直线的夹角。</p><p>结果算了半天 $\cos\theta$ 整出来了一个非常奇怪的数字，好像是 $\frac{11}{23}$ 还是多少。</p><p>当时我就方了，啊这为什么我选择第一题都算不对了。</p><p>然后大题第三题让算一个函数的极值，然后那个函数里面含 $y$ 的部分居然是 $y^3+12y$。</p><p>兄啊这不都无界了吗（半脑</p><p>当然最后说是题目出错了。</p><p>隐函数怎么搞啊不会啊。结果大题第二道 xjb 写了一通，估计一分都捞不着了。90+ 怕不是没希望了。</p><p>然后是线代。感觉就计算量来说的话，线代应该是最大的了。草稿纸整整两面被我几乎写完了。</p><p>大题倒数第二道要求二次型的标准型，然后就需要用到那个 $QAQ^{-1}$，就需要用到施密特正交化。</p><p>$QAQ^{-1}$（并不是颜文字</p><p>结果把 $(\alpha_1,\alpha_2,\alpha_3)$ 算出来之后我突然意识到一个问题，我忘了施密特正交化的式子了。</p><p><strong>噔 噔 咚</strong>（绝望</p><p>就在这个时候我随手算了一下 $\alpha_1\cdot\alpha_2$，发现……</p><p>欸这个东西居然等于 $0$！（感叹号，表达惊讶，不表示阶乘）</p><p>然后进一步验证之后我发现，$(\alpha_1,\alpha_2,\alpha_3)$ 已经两两正交了。</p><p>乐，都可以乐。</p><p>证明题感觉 xjb 写了一通也不知道对不对。这边 90+ 应该也希望不大了。</p><h2 id="Day-122「中场休息-Day-1-3」"><a href="#Day-122「中场休息-Day-1-3」" class="headerlink" title="Day 122「中场休息 Day 1/3」"></a>Day 122「中场休息 Day 1/3」</h2><p>平静的一天。</p><h2 id="Day-123「中场休息-Day-2-3」"><a href="#Day-123「中场休息-Day-2-3」" class="headerlink" title="Day 123「中场休息 Day 2/3」"></a>Day 123「中场休息 Day 2/3」</h2><p>虽然说是中场休息不过下午还有电路实验考试。</p><p>抽到了积分运算电路，xjb 连了一通结果老师过来一看「嗯……不是很理想（连的什么 jb 玩意）」，然后给了个 B。</p><h2 id="Day-124「中场休息-Day-3-3」"><a href="#Day-124「中场休息-Day-3-3」" class="headerlink" title="Day 124「中场休息 Day 3/3」"></a>Day 124「中场休息 Day 3/3」</h2><p>平静的一天。</p><h2 id="Day-125「期末考试-Day-3-3」"><a href="#Day-125「期末考试-Day-3-3」" class="headerlink" title="Day 125「期末考试 Day 3/3」"></a>Day 125「期末考试 Day 3/3」</h2><p>上午离散。</p><p>感觉比想象中难了那么一些，怪不得考试前三天老师一只在群里催我们复习。</p><p>两道逻辑演算题一道写到一半发现条件写假了，一道只证明出来一般的结论。</p><p>下午电路。</p><p>觉得电路可能会有一些复杂的计算于是带上了计算器。结果一次都没有用上。全是字母（</p><p>感觉题型有那么的一些出乎意料，不过这种程度没有问题的！（大嘘</p><p>收卷的时候看了一眼前桌同学的答案突然发现自己第一大题第三小题算平均有功功率的时候直接用的是最大值。</p><p><strong>噔 噔 咚</strong>（绝望</p><p>老师，菜菜，捞捞，呜呜.jpg</p><p><del>犯什么病啊你又不需要捞（</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;已完结。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新学期开始了（绝望&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1K3411i7Gy&quot;&gt;日常推歌时间&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;不定期推歌（指正&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;由于我之前给块块看上学期的日记的时候……&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;阿块「游戏记录是不是有点多。」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;于是笔者再次郑重声明，本文章是我在大学阶段的游戏记录，并且会插入一些大学生活和 ACM 的记录（光速逃&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://github.com/Challestend/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="大学" scheme="https://github.com/Challestend/tags/%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>退役选手 Challestend 的 CF 杂题题解</title>
    <link href="https://github.com/Challestend/random-solutions/"/>
    <id>https://github.com/Challestend/random-solutions/</id>
    <published>2021-12-02T15:59:51.000Z</published>
    <updated>2022-08-21T00:23:38.975Z</updated>
    
    <content type="html"><![CDATA[<p>直角。</p><p>值得注意的是，本题解使用的记号可能与原题不同。</p><p>有些看题解看出来的思维题就不写代码了。</p><a id="more"></a><h2 id="「CF558E」A-Simple-Task"><a href="#「CF558E」A-Simple-Task" class="headerlink" title="「CF558E」A Simple Task"></a>「CF558E」A Simple Task</h2><p><a href="http://codeforces.com/contest/558/problem/E">传送门</a></p><p>给定一个长度为 $n$ 的仅包括小写英文字母的字符串。$m$ 次操作，每次给出一个区间要求升序或降序排序。输出最终得到的字符串。</p><p>$1\leqslant n\leqslant 10^5$，$0\leqslant m\leqslant 50000$。</p><p>显然我们可以将排好序的区间缩成一个点，然后维护一下每个点内部每个字母的出现次数和它的排序方式。一开始的时候可以认为是 $n$ 个点，每个点只包含一个字母且升序排序。</p><p>每次操作就把区间两边的点拆开，然后把整个操作区间并成一个大点。</p><p>时间复杂度 $O((n+m)|\Sigma|\log n)$，这题 $|\Sigma|$ 是常数 $26$ 所以实际上就是 $O((n+m)\log n)$。</p><p>然而拆点写不动 :(</p><p>写了大半天突然发现没考虑操作区间已经被包含在一整个点内部的情况于是果断放弃了。于是就没有代码实现了。</p><h2 id="「CF451E」Devu-and-Flowers"><a href="#「CF451E」Devu-and-Flowers" class="headerlink" title="「CF451E」Devu and Flowers"></a>「CF451E」Devu and Flowers</h2><p><a href="http://codeforces.com/contest/451/problem/E">传送门</a></p><p>给出 $n$ 个集合，第 $i$ 个集合有 $a_i$ 个元素。相同集合元素不可区分，不同集合元素可区分。从这里面选出 $m$ 个元素，问方案数，模 $998244353$。</p><p>$1\leqslant n\leqslant 20$，$0\leqslant m\leqslant 10^{14}$，$0\leqslant a_i\leqslant 10^{12}$。</p><p>首先我们发现 $m$ 和 $a_i$ 的范围都非常非常的大，也就是说 NTT 行不通了。</p><p>于是考虑容斥。转化为求</p><script type="math/tex; mode=display">\begin{cases}&\forall 1\leqslant i\leqslant k,0\leqslant x_i\leqslant a_i\\&\sum_{i=1}^{n}x_i=m\end{cases}</script><p>的解 $(x_1,x_2,\cdots,x_n)$ 的数量。</p><p>令 $F_k$ 表示恰好有 $k$ 个 $x_i\gt a_i$ 的方案数；$G_k$ 表示钦定 $k$ 个 $x_i\gt a_i$ 其他随意的方案数。那么</p><script type="math/tex; mode=display">G_k=\sum_{1\leqslant i_1\lt i_2\lt\cdots\lt i_k\leqslant n}{m-\sum_{j=1}^{k}a_{i_j}+n-1\choose n-1}</script><script type="math/tex; mode=display">G_k=\sum_{i=k}^{n}{i\choose k}F_i</script><script type="math/tex; mode=display">F_k=\sum_{i=k}^{n}(-1)^{i-k}{i\choose k}G_i</script><p>求出 $F_0$ 即可。</p><p>关于 $G_k$，注意到右边那个组合数因为 $n$ 很小，算一次只需要 $O(n)$。那么 $O(2^n)$ 暴力枚举左边的子序列就好。总时间复杂度 $O(n2^n)$。</p><p>我是绝对不会说我算减法忘了 <code>+mod</code> 结果 WA 了一发的（</p><p>当然我更不会说我因为每次求组合数 $O(n\log\text{mod})$ 暴力算阶乘逆元结果 TLE 了一发的（</p><p><strong>功 力 尽 失</strong></p><p>不会吧为什么 $O(n2^n)$ 和 $O(n2^n\log\text{mod})$ 差得这么多啊。</p><p><a href="http://codeforces.com/contest/451/submission/137845078">评测记录</a></p><h2 id="「CF1188B」Count-Pairs"><a href="#「CF1188B」Count-Pairs" class="headerlink" title="「CF1188B」Count Pairs"></a>「CF1188B」Count Pairs</h2><p><a href="http://codeforces.com/contest/1188/problem/B">传送门</a></p><p>给定一个长度为 $n$ 的序列 $a$ 和常数 $p,k$。保证 $a_i$ 两两不同，且 $p$ 是质数。</p><p>求数对 $(u,v)$ 的数量，使得 $1\leqslant u\lt v\leqslant n$ 且 $(a_u+a_v)(a_u^2+a_v^2)\equiv k\pmod{p}$。</p><p>$2\leqslant n\leqslant 3\times 10^5$，$2\leqslant p\leqslant 10^9$，$0\leqslant k,a_i\lt p$。</p><p><del>太菜了没有思路于是被迫看题解。</del></p><p>考虑到 $a_i$ 两两不同，我们有</p><script type="math/tex; mode=display">\begin{aligned}(a_u+a_v)(a_u^2+a_v^2)&\equiv k\pmod{p}\\(a_u+a_v)(a_u-a_v)(a_u^2+a_v^2)&\equiv (a_u-a_v)k\pmod{p}\\a_u^4-a_v^4&\equiv (a_u-a_v)k\pmod{p}\\a_u^4-ka_u&\equiv a_v^4-ka_v\pmod{p}\\\end{aligned}</script><p><img src="/img/TIM图片20181023195537.jpg" alt=""></p><p>emmm 话说回来 $u,v$ 放在下标上是不是看不大清啊。</p><p>但是我觉得这种情况下 $u,v$ 两个字母算是最合适的了。所以说就这样吧（光速逃</p><p>没有代码实现。</p><h2 id="「CF383D」Antimatter"><a href="#「CF383D」Antimatter" class="headerlink" title="「CF383D」Antimatter"></a>「CF383D」Antimatter</h2><p><a href="http://codeforces.com/contest/383/problem/D">传送门</a></p><p>给定一个长度为 $n$ 的序列 $a$。每次操作可以选定一个区间 $[l,r]$，将区间内每个数染成红色或者黑色（不可以不染色），如果红数黑数分别求和后结果相等，那么这次操作是合法的。求合法操作数量，模 $10^9+7$。两次操作不同当且仅当选定区间不同或者区间内至少一个数颜色不同。</p><p>$1\leqslant n,a_i\leqslant 1000$，$\sum a_i\leqslant 10000$。</p><p><del>太菜了没有思路于是被迫看题解。</del></p><p>令 $w=\sum_{i=1}^{n}a_i$。</p><p>首先我们有一个简单粗暴的背包搞法。令 $f(i,j,S)$ 表示在 $[i,j]$ 内选出若干个数加起来等于 $S$ 的方案数，那么这个显然可以 $O(n^2w)$ 搞出来。那么答案就是</p><script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=i}^{n}f\left(i,j,\frac{1}{2}\sum_{k=i}^{j}a_k\right)</script><p>但是这不够，我们需要优化。</p><p>考虑分治。设当前分治到 $[L,R]$，令 $m=\left\lfloor\frac{L+R}{2}\right\rfloor$，我们需要处理出左端点在 $[L,m]$ 上且右端点在 $(m,R]$ 上的所有区间的贡献。这里一个区间的贡献指的是一次操作选定这个区间后染色的方案数。</p><p>考虑任意选取 $x_1\in[L,m],x_2\in(m,R]$，令 $T_1=\sum_{i=x_1}^{m}a_i,T_2=\sum_{i=m+1}^{x_2}a_i$。设有一种操作，$[x_1,m]$ 上黑色数字之和为 $S_1$，$(m,x_2]$ 上黑色数字之和为 $S_2$。那么这次操作合法当且仅当</p><script type="math/tex; mode=display">S_1+S_2=\frac{T_1+T_2}{2}</script><p>即</p><script type="math/tex; mode=display">(2S_1-T_1)+(2S_2-T_2)=0</script><p>则 $[L,R]$ 上跨中点区间的贡献之和为</p><script type="math/tex; mode=display">\sum_{x_1=L}^{m}\sum_{S_1=0}^{w}\sum_{x_2=m+1}^{R}\sum_{S_2=0}^{w}\left[\left(2S_1-\sum_{i=x_1}^{m}a_i\right)+\left(2S_2-\sum_{i=m+1}^{x_2}a_i\right)=0\right]f(x_1,m,S_1)f(m+1,x_2,S_2)</script><p>虽然这个式子像这样写出来很吓人，但实际上只要稍微发挥一下人类智慧我们就可以将其优化到 $O(w(R-L))$。具体方法读者可自行撕烤。</p><p>那么总时间复杂度 $O(nw\log n)$。</p><p>本来不想写的不过想了想还是写一下吧。</p><p><del>下了体育课就去写。</del></p><p><a href="http://codeforces.com/contest/383/submission/137870088">评测记录</a></p><h2 id="「CF1451E2」Bitwise-Queries-Hard-Version"><a href="#「CF1451E2」Bitwise-Queries-Hard-Version" class="headerlink" title="「CF1451E2」Bitwise Queries (Hard Version)"></a>「CF1451E2」Bitwise Queries (Hard Version)</h2><p><a href="http://codeforces.com/contest/1451/problem/E2">传送门</a></p><p>有一个长度为 $n$ 的序列 $a$，但是您不知道它长什么样。每次您可以指定 $1\leqslant u\lt v\leqslant n$，并得到 $a_u$ 和 $a_v$ 按位与|或|亦或的结果，这叫做一次查询。您最多只能进行 $n+1$ 次查询，然后您需要给出序列 $a$。</p><p>$4\leqslant n\leqslant 2^{16}$ 且 $n$ 是 $2$ 的幂，$0\leqslant a_i\lt n$。</p><p>以下，$\wedge$ 表示按位与，$\vee$ 表示按位或，$\oplus$ 表示按位异或。</p><p>首先我们需要对于 $i\gt 1$ 查询 $a_1\oplus a_i$，然后我们只需要知道 $a_1$ 的值即可还原出整个序列。</p><p>以下设 $t_i=a_1\oplus a_i$。显然 $t_1=0$。</p><p>若存在 $u\neq v$ 但是 $t_u=t_v$，这说明 $a_u=a_v$。那么我们查询 $a_u\wedge a_v$ 即可得到 $a_u$ 和 $a_v$，也就得到了 $a_1$。</p><p>否则，则 $t_i$ 两两不同，即 $a_i$ 两两不同。找到 $u$ 使得 $t_u=1$，查询 $a_1\wedge a_u$ 即可得到 $a_1$ 的二进制表示中除最低位以外的所有其他位。然后再找到 $v$ 使得 $t_v=2$，查询 $a_1\wedge a_v$ 即可得到 $a_1$ 的二进制表示的最低位。</p><p>注意到 $t_i\in[0,n)$ 且 $t_i\neq 0$，可以看出上述 $u,v$ 必定存在且唯一。</p><p><a href="http://codeforces.com/contest/1451/submission/137894201">评测记录</a></p><h2 id="「CF1613E」Team-Building"><a href="#「CF1613E」Team-Building" class="headerlink" title="「CF1613E」Team Building"></a>「CF1613E」Team Building</h2><p><a href="http://codeforces.com/contest/1316/problem/E">传送门</a></p><p>有 $n$ 个人，要从中选出恰好 $p$ 个人参加比赛以及恰好 $k$ 个人围观。第 $i$ 个人如果围观会产生 $a_i$ 的价值。参加比赛的话有 $p$ 个位置，第 $i$ 个人在第 $j$ 个位置上产生 $s_{i,j}$ 的价值。要求最大化价值和。</p><p>$2\leqslant n\leqslant 10^5$，$1\leqslant p\leqslant 7$，$1\leqslant k,p+k\leqslant n$，$1\leqslant a_i,s_{i,j}\leqslant 10^9$。</p><p>考虑到，如果我们已经确定好了要让哪些人参加比赛，那么剩下的人里面要去围观的一定是 $a_i$ 最大的那 $k$ 个人。</p><p>于是我们先将所有人按 $a_i$ 降序排序。令 $f_{i,S}$ 表示在前 $i$ 个人中选出一些人参加比赛并填满集合 $S$ 里的位置，然后其他人围观，这样能够得到的最大价值和。</p><p>同理，令 $g_{i,S}$ 表示在前 $i$ 个人中选出一些人参加比赛并填满集合 $S$ 里的位置，然后其他人闲着什么也不干，这样能够得到的最大价值和。</p><p>显然 $O(p2^pn)$ 可以处理出来。</p><p>然后答案就是 $\max_{i=|S|+k}(f_{i,S}+g_{n-i,U-S})$。其中 $U=\{1,2,\cdots,p\}$。</p><p>这题是我在学校的 ACM 实验室写出来的。一个下午一共写了两道题都和状压有关。下一题也是。</p><p><a href="http://codeforces.com/contest/1316/submission/137951214">评测记录</a></p><h2 id="「CF547C」Mike-and-Foam"><a href="#「CF547C」Mike-and-Foam" class="headerlink" title="「CF547C」Mike and Foam"></a>「CF547C」Mike and Foam</h2><p><a href="http://codeforces.com/contest/547/problem/C">传送门</a></p><p>给定一个长度为 $n$ 的序列 $a$。您需要维护一个集合 $S$，初始为空。$m$ 次操作，每次给出一个下标 $x$，如果 $x\notin S$ 就将 $x$ 插入 $S$；否则就从 $S$ 中删除 $x$。每次操作后您需要给出下式的值</p><script type="math/tex; mode=display">\sum_{u,v\in S,u\neq v}[a_u\perp a_v]</script><p>$1\leqslant n,m\leqslant 2\times 10^5$，$1\leqslant a_i\leqslant 5\times 10^5$。</p><p>以下令 $w=\max_{i=1}^{n}a_i$。</p><p>一开始我是这样想的：对于每个位置 $x$ 建立一个标号为 $x$ 的圆点；对于 $\leqslant w$ 的第 $i$ 个质数建立一个标号为 $i$ 的方点。每插入一个位置 $x$，如果第 $i$ 个质数能够整除 $a_x$，就在标号为 $x$ 的圆点和标号为 $i$ 的方点之间连一条边。</p><p>这样，$a_u\perp a_v$ 当且仅当标号为 $u$ 的圆点和标号为 $v$ 的圆点不连通。于是使用并查集维护。</p><p>但是这样的话不好删除，于是考虑线段树分治转化成只有插入没有删除。总时间复杂度 $O(m\log m\log(n+w))$。</p><p>但！是！……显然这种做法是假的。</p><p>考虑 $a=\{2,3,6\}$，我们发现按照上述建图方式我们会得到「这三个数两两不互质」这样的结论。但显然这是错的因为 $a_1\perp a_2$。</p><p>于是我们考虑容斥。令 $f_{x,v}$ 表示集合 $S$ 中有多少个下标 $y$ 满足 $(a_x,a_y)\geqslant v$。那么插入 $x$ 时产生的贡献就是</p><script type="math/tex; mode=display">\sum_{v|a_x,v\gt 1,|\mu(v)|=1}(-1)^{\gamma(v)-1}f_{x,v}</script><p>其中 $\mu(v)$ 表示莫比乌斯函数，要求 $|\mu(v)|=1$ 是因为我们只需要关注 $(a_x,a_y)$ 中有多少个不同的质因子，而并不需要知道这些质因子的次数分别是多少。</p><p>同时 $\gamma(v)$ 表示 $v$ 有多少个不同的质因子，$(-1)^{\gamma(v)-1}$ 就相当于是容斥系数。当然这个东西也可以用 $\mu(v)$ 来表示不过我觉得这样清晰一些。</p><p>然后值得注意的是上式计算的是有多少对 $(a_x,a_y)\gt 1$，最终答案实际上是 ${|S|\choose 2}$ 减去上式。</p><p>然后我们还需要维护一个 $c_v$ 表示集合 $S$ 中有多少个下标 $y$ 满足 $v|a_y$。</p><p>那么显然计算一次上式所需要的时间复杂度是 $O(2^{\gamma(a_x)})$。注意到</p><script type="math/tex; mode=display">2\times 3\times 5\times 7\times 11\times 13\times 17=510510\gt 5\times 10^5</script><p>这意味着 $\gamma(v)\leqslant 7$。因此总时间复杂度 $O(2^7m)$。</p><p>虽然最慢的点跑了 $1871\text{ms}$ 不过还好吧。</p><p><a href="http://codeforces.com/contest/547/submission/137964567">评测记录</a></p><h2 id="「CF1404C」Fixed-Point-Removal"><a href="#「CF1404C」Fixed-Point-Removal" class="headerlink" title="「CF1404C」Fixed Point Removal"></a>「CF1404C」Fixed Point Removal</h2><p><a href="https://codeforces.com/contest/1404/problem/C">传送门</a></p><p>给定一个长度为 $n$ 的序列 $a$。每次可以删除一个满足 $a_i=i$ 的元素 $a_i$，且删除会使得元素的下标发生改变。$m$ 次询问，每次给出 $x,y$，将序列的最左侧 $x$ 个数和最右侧 $y$ 个数修改成 $n+1$，然后问最多进行多少次删除。询问相互独立即，上一次询问时被删除或被修改的元素会在下一次询问前复原。</p><p>$1\leqslant n,m\leqslant 3\times 10^5$，$1\leqslant a_i\leqslant n$。</p><p><del>被最新的多项式黑科技重工业干烂了继续来刷我的小水题。</del></p><p>每次询问相当于给出区间 $[l,r]$，然后只能删除这个区间内的元素。</p><p>考虑到对于 $a_i$，删除左侧的元素会使得其下标 $-1$，删除右侧的元素不会改变其下标。也就是说如果 $a_i\gt i$，那么其一定无法被删除。</p><p>如果 $a_i\leqslant i$，且能够在 $a_i$ 左侧进行至少 $i-a_i$ 次删除，那么 $a_i$ 一定能够被删除。每次贪心地删除最靠右的能够被删除的元素即可。</p><p>对于一次询问，显然其左端点越靠左，能够被删除的元素就会越多，且数量至少不会减少。即对于每个位置 $i$，存在一个 $f_i$，使得当询问区间包括 $i$ 时，若询问区间左端点 $\leqslant f_i$，那么 $a_i$ 能够被删除；否则 $a_i$ 不能被删除。</p><p>考虑二分求解 $f_i$。注意到当询问区间包括 $i$ 且左端点恰好为 $L$ 时，$a_i$ 能够被删除当且仅当区间 $[L,i)$ 上存在至少 $i-a_i$ 个 $k$ 满足 $f_k\geqslant L$。这部分可以使用主席树维护。总时间复杂度 $O(n\log^2 n)$。</p><p><a href="https://codeforces.com/contest/1404/submission/138055322">评测记录</a></p><h2 id="「CF888G」Xor-MST"><a href="#「CF888G」Xor-MST" class="headerlink" title="「CF888G」Xor-MST"></a>「CF888G」Xor-MST</h2><p><a href="https://codeforces.com/contest/888/problem/G">传送门</a></p><p>给定一个长度为 $n$ 的序列 $a$。构造一张无向完全图，其中点 $u$ 和点 $v$ 之间连一条边权为 $a_u\oplus a_v$ 的边。求最小生成树边权和。</p><p>$1\leqslant n\leqslant 2\times 10^5$，$0\leqslant a_i\lt 2^{30}$。</p><p>经典 Boruvka 算法练习题。</p><p>简单介绍一下这种 B 开头的最小生成树算法：</p><p>每次迭代对于每个点 $u$，找出当前与其不连通的所有点 $v$ 中 $(u,v)$ 边权最小的 $v$，然后连边 $(u,v)$。</p><p>这里有一个细节是，每次迭代的时候选出来的 $n$ 条边要按照边权从小到大连，否则可能会出现连了大边结果小边连不上了的情况。</p><p>不难看出每次迭代每个点所在的连通块大小至少翻倍，于是总时间复杂度 $O(f(n)\log n)$，其中 $f(n)$ 表示单次迭代的时间复杂度。</p><p>对于这道题，每次迭代需要对于每个点找出与其不连通的所有点 $v$ 中 $a_u\oplus a_v$ 最小的 $v$。这可以通过动态开点字典树实现，读者可自行撕烤。</p><p>于是 $f(n)=n\log a_i$，总时间复杂度 $(n\log n\log a_i)$。</p><p>然后调不出来了就这样吧。</p><p><a href="https://codeforces.com/contest/888/submission/138078730">评测记录（虽然是 WA 掉的）</a></p><h2 id="「CF1528C」Trees-of-Tranquillity"><a href="#「CF1528C」Trees-of-Tranquillity" class="headerlink" title="「CF1528C」Trees of Tranquillity"></a>「CF1528C」Trees of Tranquillity</h2><p><a href="https://codeforces.com/contest/1528/problem/C">传送门</a></p><p>给定两棵 $n$ 个节点的树 $S,T$，均以 $1$ 为根。构造一张无向图 $G$，其中 $u,v$ 两个点之间有边当且仅当它们在 $S$ 中是祖先后代关系且在 $T$ 中不是祖先后代关系。求 $G$ 的最大团大小。</p><p>$2\leqslant n\leqslant 3\times 10^5$。多组数据，$\sum n\leqslant 3\times 10^5$。</p><p>首先我们把这个题意翻译一下，就是让我们找出一些点且这些点中任意一对点在 $S$ 中是祖先后代关系且在 $T$ 中不是祖先后代关系。</p><p>显然这些点在 $S$ 中是从一条深度递增的链上抠下来的，因此考虑对 $S$ 中每一条深度递增且从根到叶子的路径计算贡献。</p><p>对于点 $u$，设 $[l_u,r_u]$ 为 $T$ 中 $u$ 的子树的 DFS 序区间，问题转化成在一些区间中选出尽可能多的区间互不相交。</p><p>考虑设 $f_k$ 表示当前选出的所有区间右端点最大值恰好为 $k$ 时最多能选出多少个区间；同理，$g_k$ 表示当前选出的所有区间左端点最小值恰好为 $k$ 时最多能选出多少个区间。那么显然如果我们一定要选区间 $[l_u,r_u]$，此时的答案为</p><script type="math/tex; mode=display">1+\max_{i=1}^{l_u-1}f_i+\max_{j=r_u+1}^{n}g_j</script><p>使用线段树即可维护。总时间复杂度 $O(n\log n)$。</p><p><del>代码实现先等会爬会山先。</del></p><p><del>结果一连拖了好几天。</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;直角。&lt;/p&gt;
&lt;p&gt;值得注意的是，本题解使用的记号可能与原题不同。&lt;/p&gt;
&lt;p&gt;有些看题解看出来的思维题就不写代码了。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="数论" scheme="https://github.com/Challestend/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="树状数组" scheme="https://github.com/Challestend/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="平衡树" scheme="https://github.com/Challestend/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="容斥" scheme="https://github.com/Challestend/tags/%E5%AE%B9%E6%96%A5/"/>
    
      <category term="交互" scheme="https://github.com/Challestend/tags/%E4%BA%A4%E4%BA%92/"/>
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="CodeForces" scheme="https://github.com/Challestend/tags/CodeForces/"/>
    
      <category term="思维" scheme="https://github.com/Challestend/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="DP" scheme="https://github.com/Challestend/tags/DP/"/>
    
      <category term="状态压缩 DP" scheme="https://github.com/Challestend/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9-DP/"/>
    
      <category term="二分答案" scheme="https://github.com/Challestend/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
      <category term="最小生成树" scheme="https://github.com/Challestend/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="Boruvka" scheme="https://github.com/Challestend/tags/Boruvka/"/>
    
      <category term="树形 DP" scheme="https://github.com/Challestend/tags/%E6%A0%91%E5%BD%A2-DP/"/>
    
  </entry>
  
</feed>
