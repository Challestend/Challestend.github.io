<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>关原美夜的妙妙屋</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/Challestend/"/>
  <updated>2023-03-30T17:23:42.708Z</updated>
  <id>https://github.com/Challestend/</id>
  
  <author>
    <name>Miya Sekihara</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ホリゾントに辿り着かなかった者</title>
    <link href="https://github.com/Challestend/ec-final-2023-notes/"/>
    <id>https://github.com/Challestend/ec-final-2023-notes/</id>
    <published>2023-03-25T15:31:43.000Z</published>
    <updated>2023-03-30T17:23:42.708Z</updated>
    
    <content type="html"><![CDATA[<p>有幸参加 2023 年的 ICPC EC Final。</p><p>标题取自《东方眠世界 ~ Wonderful Waking World》的 Stage 6 标题。</p><p>文章内图片由同行 dalao SHX 提供。</p><a id="more"></a><h2 id="Day-1（2023-3-24）"><a href="#Day-1（2023-3-24）" class="headerlink" title="Day 1（2023-3-24）"></a>Day 1（2023-3-24）</h2><p>早上就像早八一样快 8：00 起来，然后和 CHR 打车到合肥南站，坐高铁去上海。</p><p>到了酒店放下东西正准备乘坐电梯下楼的时候，电梯一打开发现里面有一个半人高的机器人呆在里面。然后那个机器人让我们让开。</p><blockquote><p>「你看这个机器人它都没有手，它是怎么按到电梯按钮的呢？」</p><p>「它前面好像有一个盖子。它说不定就是从那个盖子里面伸出来一条触手去按按钮。」</p></blockquote><p>去 SHU 的路上看到了一个邮筒。正在我们感叹都什么年代了还有邮筒的时候，走近一看发现邮筒上贴着一个二维码。</p><p><img src="/img/QQ图片20230329165055.jpg" alt="可可爱爱二维码邮筒（只可远观不可近玩）"></p><p>下午 15：00 有热身赛，我们成功地在 15：30 之前赶到了考场。</p><p><img src="/img/QQ图片20230329165049.jpg" alt="SHU"></p><p><img src="/img/QQ图片20230329165050.jpg" alt="当时甚至正在下着雨"></p><p><img src="/img/QQ图片20230329165045.jpg" alt="热身赛赛场"></p><p><img src="/img/QQ图片20230329165052.jpg" alt="「三条可怜」的英文队名（虽然说原计划是 Karen Sanjou 的来着）"></p><p>看了一下。A 题不难，C 题经典猜数二分（虽然因为题意修改和交互题最后忘记输出换行 WA 了几发）。B 题看了看，不会。跑路了。</p><p>晚上和实验室老学长 HLS 共进晚餐。听到学长们在谈论一些求职相关地话题，感觉完全不懂，插不上话。</p><p>晚上在酒店和 SHX 回忆高中生活。向他展示了我高中时期写的《楠书》。</p><blockquote><p>「下次团建可以推广一下 100% 鲜橙汁。」</p></blockquote><p>晚上和 SHX 一起点了汉堡外卖。过了一会 SHX 接到电话说外卖已经送到门口了。然后我一打开门发现那个机器人就站在门口。它的显示屏提示我按下按钮打开。然后我一按，那个机器人瞬间就开膛破肚，里面放着我们俩的外卖。</p><p><img src="/img/QQ图片20230329165057.jpg" alt="可可爱爱送外卖机器人（拍摄时间本日下午）"></p><p><img src="/img/mmexport1680080464189.jpg" alt="和学长们的外滩合影（像素凑合一下吧）（似乎站得有些靠边上了）"></p><h2 id="Day-2（2023-3-25）"><a href="#Day-2（2023-3-25）" class="headerlink" title="Day 2（2023-3-25）"></a>Day 2（2023-3-25）</h2><p>虽然人在上海，但是还是需要 8：00 起床。</p><blockquote><p>「就像早八一样。」</p></blockquote><p>10：00 开始比赛。扫了一眼题目，M 好像可做但是队友已经在写了。看了看 B 和 J 感觉可以写。</p><p>队友用了半个小时写完了 M，然后我写 J。结果写到一半发现思路不完备，墨迹了一整个小时修正思路才 A 掉。</p><p>然后队友开始开 C 和 F 两题。结果直到比赛结束都没有搞出来。</p><p>到最后喜提两题，铁牌，Honourable。</p><p>吃完晚饭后和实验室群友一起去看《铃芽之旅》。在那之前顺便感受了一下 LC 带过来的没有玩过的桌游《爆炸猫咪》。玩了两个小时喜提一次胜利。</p><p>某些人不管看什么东西都能联想到卷绩点上，我不说是谁。</p><p>晚饭 SHX 吃了一碗盖饭和一碗拉面，然后看完电影回到酒店还跟我说想要吃夜宵。这食量不愧是肥鸭哥（</p><h2 id="Day-3（2023-3-26）"><a href="#Day-3（2023-3-26）" class="headerlink" title="Day 3（2023-3-26）"></a>Day 3（2023-3-26）</h2><p>SHX 去参加华为挑战赛了。自己一个人在酒店打游戏。</p><p>下午没去颁奖典礼。听群友说主持人在台上暴论「三条可怜真可怜啊」。</p><p>好家伙，我们队哪怕有一个人在现场，多少不得冲上去邦邦给 TA 两拳。</p><p>晚上去参加华为晚宴。因为一些原因只能在教练席通过投屏感受现场的氛围。</p><p>抽奖环节喜提一个三等奖。奖品是智能牙刷，蓝牙音箱和台灯三选一。觉得都没啥用于是选了一个蓝牙音箱。</p><p><img src="/img/IMG20230329170016.jpg" alt="可可爱爱蓝牙音箱（拍摄于 AHU 龙河实验室）"></p><p>从 SHU 回来乘坐的是公交车。但是司机师傅不知道为什么把我们带到了完全反方向的一个校门。然后我们必须要横穿整个 SHU 才能到达地铁站。</p><blockquote><p>低情商：把你们放在这里了。我走了。</p><p>高情商：给我们最后一次参观 SHU 校园的机会。</p></blockquote><p>因为不熟悉 SHU 校内构造，我们不得不求助导航。LC 负责看导航并告诉我们该往哪里走。</p><blockquote><p><em>（过了一会）</em></p><p>LXR「稍等一下，我们有人在看导航吗？我们现在是走在正确的道路上的吗？」</p><p>LC「让我看看……<em>（掏出导航）</em>哦不好意思走过了。<em>（带着我们折返）</em>」</p><p><em>（过了一会）</em></p><p>CHR「是不是又没有人在看导航了？」</p><p>LC「确实，让我看看……<em>（掏出导航）</em>哦我们又走错了。<em>（带着我们折返）</em>」</p><p><em>（过了一会）</em></p><p>SHX「这条路看着不对劲啊。我们是不是走错了。」</p><p>LC「让我看看……<em>（掏出导航）</em>哦确实走错了。<em>（带着我们折返）</em>」</p><p>CHR「你这交互系统做得不够好啊。你还得用户询问才能知道走错路了。」</p></blockquote><p>回来的路上最后一次路过了那个带着二维码的可爱小邮筒。</p><blockquote><p>CHR「拍张照片吧。明天就见不到了。」</p></blockquote><p>回来之后在酒店房间里没事干，听到隔壁 313（我们是 311，313 是 LC 和 LXR）。敲门进去一看发现在玩《爆炸猫咪》，于是加入了他们。</p><p>基础描述可以自行查询搜索引擎。</p><p>以下是精彩片段回放：</p><blockquote><p><em>（游戏开局）</em></p><p>我「我有点怂，让我打一张『<ruby>幻觉<rt>See the Future</rt></ruby>』看看情况……好的没问题。」</p><p>MS「这玩的也太怂了。开局肯定是要尽可能多的抽牌啊。怎么会有人开局就抽到『<ruby>爆炸猫<rt>Exploding Kitten</rt></ruby>』呢？你看……<em>（抽到『<ruby>爆炸猫<rt>Exploding Kitten</rt></ruby>』）</em>」</p><p>CHR「好看。」</p><p>MS「『<ruby>调情<rt>Favor</rt></ruby>』！<em>（对着我）</em>给我一张牌。」</p><p>我「我……我……我扔了<em>（打出『<ruby>鬼扯<rt>Nope</rt></ruby>』）</em>也不给你！」</p><p>LC「太棒了！就该这样！宁愿粉身碎骨也不要被剥削！」</p><p><em>（游戏终局：四人存活，抽牌堆里只剩下三张『<ruby>爆炸猫<rt>Exploding Kitten</rt></ruby>』）</em></p><p>CHR「现在再洗牌什么的其实已经没有意义了。你看吧，我就直接明牌了，这里面剩下三张全是炸弹。」</p><p>LC「选择一张你喜欢的炸弹，然后被它炸死吧。」</p><p><em>（巅峰对决：两人存活，抽牌堆里只剩下一张『<ruby>爆炸猫<rt>Exploding Kitten</rt></ruby>』）</em></p><p>我「我……我是不是已经死了。<em>（察觉）</em>欸你们看，这个『<ruby>捣乱<rt>Shuffle</rt></ruby>』的描述，它不是要求我至少要切洗一次抽牌堆吗？如果抽牌堆里只剩下一张牌了，我没有办法切洗我是不是就卡住永远停不下来了。」</p><p>MS「卡 bug 是吧。」</p><p><em>（游戏后期：抽牌堆从上面开始两张牌都是『<ruby>爆炸猫<rt>Exploding Kitten</rt></ruby>』）</em></p><p>CHR「『<ruby>高潮<rt>Attack</rt></ruby>』！」</p><p>我「完了我死了……我需不需要死两次？」</p><p>CHR「一次就够了。」</p><p>我「<em>（准备抽牌）（把手放到抽牌堆顶部）</em>至少……我没有把炸弹放在这个位置。<em>（抽到『<ruby>爆炸猫<rt>Exploding Kitten</rt></ruby>』）</em>」</p><p>LC「<em>（自己放进抽牌堆的『<ruby>爆炸猫<rt>Exploding Kitten</rt></ruby>』被狙击目标抽到了）</em>但是……我也没有害死你啊。我只是让你掉了一点血而已。你上一把可是直接把我斩杀了。」</p><p>我「不是……但是我就只有一滴血啊。<em>（进行我的回合）</em>哦不对，我应该是两滴血，初始自带的『<ruby>泻火<rt>Defuse</rt></ruby>』算是一滴血。」</p><p>LC「有没有人来『<ruby>调情<rt>Favor</rt></ruby>』我啊……有没有人来让我『<ruby>泻火<rt>Defuse</rt></ruby>』啊。」</p><p>CHR「？」</p></blockquote><p><img src="/img/IMG20230329165957.jpg" alt="以此谨记我的上海之旅（拍摄于 AHU 龙河实验室）"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有幸参加 2023 年的 ICPC EC Final。&lt;/p&gt;
&lt;p&gt;标题取自《东方眠世界 ~ Wonderful Waking World》的 Stage 6 标题。&lt;/p&gt;
&lt;p&gt;文章内图片由同行 dalao SHX 提供。&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://github.com/Challestend/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="难题" scheme="https://github.com/Challestend/tags/%E9%9A%BE%E9%A2%98/"/>
    
      <category term="EC Final" scheme="https://github.com/Challestend/tags/EC-Final/"/>
    
      <category term="2023" scheme="https://github.com/Challestend/tags/2023/"/>
    
      <category term="上海" scheme="https://github.com/Challestend/tags/%E4%B8%8A%E6%B5%B7/"/>
    
      <category term="SHU" scheme="https://github.com/Challestend/tags/SHU/"/>
    
      <category term="失败" scheme="https://github.com/Challestend/tags/%E5%A4%B1%E8%B4%A5/"/>
    
  </entry>
  
  <entry>
    <title>Crypt of the Necrodancer：命悬一线，诅咒与血的死之舞会</title>
    <link href="https://github.com/Challestend/crypt-of-the-necrodancer/"/>
    <id>https://github.com/Challestend/crypt-of-the-necrodancer/</id>
    <published>2023-02-07T03:42:07.000Z</published>
    <updated>2023-03-30T16:07:18.534Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://store.steampowered.com/app/247080/Crypt_of_the_NecroDancer/">Steam 页面</a></p><center><font color=##DD0000>MY PULSE IS BEATING LIKE A DRUM,</font></center><center><font color=##DD0000>我的脉管搏动，如同擂鼓，</font></center><center><font color=##DD0000>BUT MY BLOOD IS RUNNING COLD.</font></center><center><font color=##DD0000>但我的血液冰冷，毫无生气。</font></center><a id="more"></a><p><br>前几天在知乎上刷到一个问题「Steam 上最难达成全成就的游戏是哪一款？」然后看到了这个游戏。</p><p>顺便一提，那个问题下面还有人回答 Rabi-Ribi（</p><p>于是打算买来玩一玩，然后发现……</p><p><img src="/img/TIM图片20181221165111.jpg" alt=""></p><p>一进游戏就会有一段剧情，描述的大概是一名叫做凯登丝（Cadence$^\dagger$）的女性不顾家人反对去挑战一座地牢，失足掉了下去，但是没死，被什么人上了一个诅咒，然后挂着这个诅咒在地牢里探索<del>，并逐渐发现背后隐藏的真相</del>。</p><p>Cadence$^\dagger$：n.（说话时语调的）抑扬顿挫，起落；（乐段或乐句的）收束，静止。</p><p>整体玩法大概是肉鸽打怪，但是加上了一个条件：所有行动，包括但不限于移动，攻击（虽然大部分情况下往敌人身上创过去就是攻击），使用道具，都需要<strong>卡着音乐的节拍</strong>，<strong>且每一拍只能行动一步</strong>；玩家角色行动一步之后，所有敌人也都会同时行动一步。</p><p>（凯登丝的话）可以空拍，虽然根据套路不空拍会有更多收益。</p><p>整个游戏一共四大关，每一大关又细分为三个小关和一个 BOSS。</p><p>游戏中敌人死亡会掉落钱币，可以用来在商店购买道具。<del>甚至商店老板也能给杀了。</del></p><p>地图上可能会生成一些钻石，可以用来购买永久升级。</p><p>游戏中还有一个「全区域模式」，需要把四个大关连在一起打完，而且初始血上限固定三格。</p><p>然而截至今天（2023-2-7），「用凯登丝通关全区域模式」这个成就的获取率也仅仅只有 4.0%。</p><p>然后就是这样一个仅仅只是通关就已经十分困难的角色还要不断地更新各种新奇的阴间角色。</p><p>比如说虽然自带一瓶复活药，但是血量锁死半颗心受伤即死空拍即死并且只能使用初始自带的攻击范围一格伤害一颗心的小匕首的 Aria；拥有无穷多颗炸弹但是只能用炸弹输出的 Eli；虽然可以免费获取商店里的商品但是不能拾取钱币否则暴毙的 Monk；一次移动往前跳出去两格，想要只移动一格必须要消耗掉半颗心的血量的 Dorian；简单粗暴地把游戏调到两倍速的 Bolt；以及究极缝合怪 Coda = Aria + Monk + Bolt……</p><p>1-1 的 BPM 是 120，二倍速就是 240——这个数值已经超过了死亡金属的 175，其中后者是正常速率下 BPM 最高的 BOSS 战。这个速度相当于每秒需要按键 3.33 次。</p><p>至于二倍速下的死亡金属，BPM 已经达到了 350。这个速度相当于每秒按键 5.83 次。</p><p>我看懂了，且我大受震撼.jpg</p><p>建议都去玩一下，再进一步拉低成就获取率（</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://store.steampowered.com/app/247080/Crypt_of_the_NecroDancer/&quot;&gt;Steam 页面&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;font color=##DD0000&gt;MY PULSE IS BEATING LIKE A DRUM,&lt;/font&gt;&lt;/center&gt;

&lt;center&gt;&lt;font color=##DD0000&gt;我的脉管搏动，如同擂鼓，&lt;/font&gt;&lt;/center&gt;

&lt;center&gt;&lt;font color=##DD0000&gt;BUT MY BLOOD IS RUNNING COLD.&lt;/font&gt;&lt;/center&gt;

&lt;center&gt;&lt;font color=##DD0000&gt;但我的血液冰冷，毫无生气。&lt;/font&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="颓废" scheme="https://github.com/Challestend/categories/%E9%A2%93%E5%BA%9F/"/>
    
    
      <category term="肉鸽" scheme="https://github.com/Challestend/tags/%E8%82%89%E9%B8%BD/"/>
    
      <category term="（广义）音游" scheme="https://github.com/Challestend/tags/%EF%BC%88%E5%B9%BF%E4%B9%89%EF%BC%89%E9%9F%B3%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>当一名半东方玩家试图分析觉醒珠的 Masterpieces 符卡会发生什么</title>
    <link href="https://github.com/Challestend/thfmva-masterpieces/"/>
    <id>https://github.com/Challestend/thfmva-masterpieces/</id>
    <published>2023-01-17T02:45:54.000Z</published>
    <updated>2023-01-17T07:36:31.582Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/fan-made-virtual-autography">之前的文章</a></p><p><strong>内含大量图片！</strong></p><a id="more"></a><p>昨天（2022-1-17）觉醒珠突然更新了 Masterpieces，类比一下相当于是永夜抄的 Last Words。</p><p>虽然好像除了 2/3/5 BOSS 以外其他 BOSS 的 Masterpiece 符卡名都和之前版本拆包拆出来的不一样了……</p><p>懒得接说了，看图吧（bushi</p><h2 id="博丽灵梦"><a href="#博丽灵梦" class="headerlink" title="博丽灵梦"></a>博丽灵梦</h2><p>「夢想櫺子」/「梦想棂子」</p><p><a href="https://hanyu.baidu.com/zici/s?from=aladdin&amp;query=%E6%A3%82&amp;srcid=51368&amp;wd=%E6%A3%82">https://hanyu.baidu.com/zici/s?from=aladdin&amp;query=%E6%A3%82&amp;srcid=51368&amp;wd=%E6%A3%82</a></p><p>梦想窗户格子（bushi</p><p>之前版本的游戏内符卡名叫做「夢想朱印」/「梦想朱印」。</p><p><img src="/img/THFmVA/A1.jpg" alt=""></p><p><img src="/img/THFmVA/A2.jpg" alt=""></p><p><img src="/img/THFmVA/A3.jpg" alt=""></p><p><img src="/img/THFmVA/A4.jpg" alt=""></p><p><img src="/img/THFmVA/A5.jpg" alt=""></p><h2 id="雾雨魔理沙"><a href="#雾雨魔理沙" class="headerlink" title="雾雨魔理沙"></a>雾雨魔理沙</h2><p>「ブレイジングツアー・幻想郷」/「Blazing Tour（炫目之旅）・幻想乡」</p><p>之前版本的游戏内符卡名叫做「移り気なマスタースパーク」/「性情不定的 Master Spark（极限火花）」。</p><p><img src="/img/THFmVA/B1.jpg" alt=""></p><p><img src="/img/THFmVA/B2.jpg" alt=""></p><p><img src="/img/THFmVA/B3.jpg" alt=""></p><h2 id="宇佐见堇子"><a href="#宇佐见堇子" class="headerlink" title="宇佐见堇子"></a>宇佐见堇子</h2><p>「ドローンに引かれて善光寺参り」/「被无人机引到善光寺参拜」</p><p>好像官方专辑里面有一首歌叫做《被牛引到善光寺参拜》的来着。</p><p>之前版本的游戏内符卡名叫做「ギガ級ポケット Wi-Fi」/「GiB 级口袋 Wi-Fi」。</p><p><img src="/img/THFmVA/C1.jpg" alt=""></p><p><img src="/img/THFmVA/C2.jpg" alt=""></p><p><img src="/img/THFmVA/C3.jpg" alt=""></p><h2 id="藏人未见"><a href="#藏人未见" class="headerlink" title="藏人未见"></a>藏人未见</h2><p>「スペルカードアタック」/「Spellcard Attack」（符卡攻击）</p><p>这符卡名……确定就叫这个吗……</p><p>之前版本的游戏内符卡名叫做「ファイナルラブレター」/「Final Love Letter」（最后的情书）。</p><p><img src="/img/THFmVA/11.jpg" alt=""></p><p><img src="/img/THFmVA/12.jpg" alt=""></p><h2 id="平贺生然"><a href="#平贺生然" class="headerlink" title="平贺生然"></a>平贺生然</h2><p>「丑の日参り」/「丑日参拜」</p><p>之前版本的游戏内符卡名也是这个。</p><p><img src="/img/THFmVA/21.jpg" alt=""></p><p><img src="/img/THFmVA/22.jpg" alt=""></p><p><img src="/img/THFmVA/23.jpg" alt=""></p><p><img src="/img/THFmVA/24.jpg" alt=""></p><p><img src="/img/THFmVA/25.jpg" alt=""></p><p><img src="/img/THFmVA/26.jpg" alt=""></p><p><img src="/img/THFmVA/27.jpg" alt=""></p><h2 id="八云紫"><a href="#八云紫" class="headerlink" title="八云紫"></a>八云紫</h2><p>「ルドゥスとパイディアの決別」/「Ludus 和 Paidia 的诀别」</p><p>关于 Ludus 和 Paidia 这两个词，我在<a href="https://www.mighty-boards.com/blog/game-studies-101/ludus-and-paidia">这篇文章</a>中找到了一些解释。这篇文章是英文的，因此我会在下面提取一些关键信息：</p><blockquote><p>Back in the 1950s, <strong>the French sociologist Roger Caillois</strong> already had the same thought. He tried to make sense of play by breaking it$^\dagger$ down into <strong>a whole taxonomy of different concepts</strong> – <strong>different kinds</strong> of play, if you will. We don’t need to get into all the details of this taxonomy here, but let’s take a look at his idea that all forms of play exist between two opposing poles: <strong>paidia and ludus</strong>.</p><p>$^\dagger$指前文中的 play，即「玩」这一词汇。</p></blockquote><p>大意：法国社会学家 Roger Caillois 试图将「玩」这一词汇分割成更多更加精细的词汇——用来具体形容怎么玩的词汇。他的理论提到，「玩」可以被分为两类——Paidia 和 Ludus。</p><p>顺便一提，ludus 的源语言是拉丁语，包含 “play, game, sport, training” 等含义；paidia 的源语言是希腊语 παιδιά，包含 “childish play, amusement” 等含义。</p><blockquote><p>When children first begin to play, Caillois says, there is <strong>no structure to what they’re doing</strong>. Their play is a kind of joyful excess of energy – running around with <strong>no apparent purpose</strong>, throwing things, taking on, dropping and reshaping roles in games of make-believe. <strong>This is paidia.</strong> With enough repetition, though, this free, anarchic kind of play starts to take on structure and form. <strong>Rules are established</strong> to regulate it. It becomes a focused attempt at facing up to a challenge by strictly regulated means. <strong>This is ludus.</strong> </p></blockquote><p>大意：Paidia 表示毫无目的地瞎 jb 闹；Ludus 表示在遵循某种特定的，被公认的规则的前提下进行的游戏。</p><p>或许可以翻译成「守序和混乱的诀别」？（小声</p><p>盘古开天地（bushi</p><p>之前版本的游戏内符卡名也是这个。</p><p><img src="/img/THFmVA/31.jpg" alt=""></p><p><img src="/img/THFmVA/32.jpg" alt=""></p><p><img src="/img/THFmVA/33.jpg" alt=""></p><p><img src="/img/THFmVA/34.jpg" alt=""></p><p><img src="/img/THFmVA/35.jpg" alt=""></p><p><img src="/img/THFmVA/36.jpg" alt=""></p><p><img src="/img/THFmVA/37.jpg" alt=""></p><h2 id="刺田严姬"><a href="#刺田严姬" class="headerlink" title="刺田严姬"></a>刺田严姬</h2><p>「光鴉二重結界」/「光鸦二重结界」</p><p>之前版本的游戏内符卡名叫做「光烏陣」/「光乌阵」。</p><p><img src="/img/THFmVA/41.jpg" alt=""></p><p><img src="/img/THFmVA/42.jpg" alt=""></p><p><img src="/img/THFmVA/43.jpg" alt=""></p><p><img src="/img/THFmVA/44.jpg" alt=""></p><h2 id="仙觉寺鞠子"><a href="#仙觉寺鞠子" class="headerlink" title="仙觉寺鞠子"></a>仙觉寺鞠子</h2><p>「<ruby>閄<rt>ものかげからきゅうにとびだしてひとをおどろかせるときにはっするこえ</rt></ruby>」/「<ruby>閄<rt>人躲在暗处突然发出的使人惊骇的声音</rt></ruby>」</p><p>关于「閄」这个字，根据给出的解释，对应的汉语读音应该是 huò。</p><p>查到日语似乎可以读作「こく」或者是「わく」，但是输入法似乎打不出来。</p><p>年度最佳 diaomao 符卡名确信。虽然今年才不到二十天。</p><p>之前版本的游戏内符卡名也是这个。</p><p><img src="/img/THFmVA/51.jpg" alt=""></p><p><img src="/img/THFmVA/52.jpg" alt=""></p><p><img src="/img/THFmVA/53.jpg" alt=""></p><p><img src="/img/THFmVA/54.jpg" alt=""></p><p><img src="/img/THFmVA/55.jpg" alt=""></p><p><img src="/img/THFmVA/56.jpg" alt=""></p><h2 id="大伴家珠叶"><a href="#大伴家珠叶" class="headerlink" title="大伴家珠叶"></a>大伴家珠叶</h2><p>「アルスポエティカの祝砲」/「Ars Poetica（《诗艺》）的礼炮」</p><p>在 Wikipedia 上找到<a href="https://en.wikipedia.org/wiki/Ars_Poetica">这样一个词条</a>。</p><p>虽然没看，但是好像很厉害的样子。</p><p>之前版本的游戏内符卡名叫做「鎮守府に水漬く屍」/「镇守府的沉水尸骸」。</p><p><img src="/img/THFmVA/61.jpg" alt=""></p><p><img src="/img/THFmVA/62.jpg" alt=""></p><p><img src="/img/THFmVA/63.jpg" alt=""></p><p><img src="/img/THFmVA/64.jpg" alt=""></p><h2 id="轩端目目"><a href="#轩端目目" class="headerlink" title="轩端目目"></a>轩端目目</h2><p>「サイトマエステラ」/「Site Maestra」</p><p>查了一下，首先 Site Maestra 整个的格式 neta 自东方幻想乡的四面道中 BGM，那首歌的名字叫做 Alice Maestra。</p><p>这里的 maestra 是意大利语词汇 maestro 的阴性形式，似乎是可以笼统地翻译为 master。</p><p>那么 Site Maestra 是不是就是 Site Master，即「网站大师」呢？</p><p>润色能力有限，就这样吧。</p><p>之前版本的游戏内符卡名叫做「京都グランドオーダー」/「京都 Grand Order」。</p><p>搜 Grand Order 基本上只能搜到 FGO……</p><p><img src="/img/THFmVA/71.jpg" alt=""></p><p><img src="/img/THFmVA/72.jpg" alt=""></p><p><img src="/img/THFmVA/73.jpg" alt=""></p><p><img src="/img/THFmVA/74.jpg" alt=""></p><p><img src="/img/THFmVA/75.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/fan-made-virtual-autography&quot;&gt;之前的文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内含大量图片！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="颓废" scheme="https://github.com/Challestend/categories/%E9%A2%93%E5%BA%9F/"/>
    
    
      <category term="东方" scheme="https://github.com/Challestend/tags/%E4%B8%9C%E6%96%B9/"/>
    
      <category term="STG" scheme="https://github.com/Challestend/tags/STG/"/>
    
      <category term="RPG" scheme="https://github.com/Challestend/tags/RPG/"/>
    
  </entry>
  
  <entry>
    <title>浅谈基于转置原理的多项式多点求值算法</title>
    <link href="https://github.com/Challestend/polynomial-multipoint/"/>
    <id>https://github.com/Challestend/polynomial-multipoint/</id>
    <published>2022-12-10T04:36:05.000Z</published>
    <updated>2023-01-07T02:30:40.241Z</updated>
    
    <content type="html"><![CDATA[<p>考虑一个经典的问题。给定 $n$ 次多项式</p><script type="math/tex; mode=display">F(x)=\sum_{i=0}^nf_ix^i</script><p>和 $n+1$ 个点值 $a_0,a_1,\dots,a_n$。您需要对于每个 $k$，求出 $b_k=F(a_k)$，对 $998244353$ 取模。</p><p>据说以前这种问题都是采用多项式取模的方法。但是现在我们有新科技了。</p><p>本篇文章将会以我个人认为十分通俗易懂的方式来详细地讲解这种新科技。</p><p>参考文献略。</p><a id="more"></a><h2 id="线性算法"><a href="#线性算法" class="headerlink" title="线性算法"></a>线性算法</h2><p>若一个算法可以被看作是方阵 $A$，输入向量 $\mathbf v$，输出向量 $A\mathbf v$，则称该算法为线性算法。</p><p>比如说，FFT 就是一个线性算法，其对应的方阵为</p><script type="math/tex; mode=display">\begin{bmatrix}1&1&1&\cdots&1\\1&\omega_n^1&\omega_n^2&\cdots&\omega_n^n\\1&\omega_n^2&\omega_n^4&\cdots&\omega_n^{2n}\\\vdots&\vdots&\vdots&\ddots&\vdots\\1&\omega_n^n&\omega_n^{2n}&\cdots&\omega_n^{n^2}\\\end{bmatrix}</script><h2 id="转置原理"><a href="#转置原理" class="headerlink" title="转置原理"></a>转置原理</h2><p>对于一个线性算法，设其对应的方阵 $A$ 满足</p><script type="math/tex; mode=display">A=E_1E_2\cdots E_n</script><p>其中 $E_i$ 均为初等矩阵。则有</p><script type="math/tex; mode=display">A^{\mathrm T}=E_n^{\mathrm T}\cdots E_2^{\mathrm T}E_1^{\mathrm T}</script><p>这里稍微复习一下，初等矩阵指的是只进行一次初等变换的矩阵。这里的初等变换包括</p><ol><li>$v_i\leftarrow v_i\cdot k$</li><li>$v_i\leftarrow v_i+v_j\cdot k$</li></ol><p>如果 $E_i$ 对应第一种初等变换，它的转置就是自身；如果是第二种，转置后 $i$ 和 $j$ 互换，即对应的初等变换变为 $v_j\leftarrow v_j+v_i\cdot k$。</p><p>这里的关键点在于，如果 $A\mathbf v$ 比较好求，而 $A^{\mathrm T}\mathbf v$ 相对难求，我们可以将求 $A\mathbf v$ 的过程分析出来，把每一步转置然后倒序执行，就可以求出 $A^{\mathrm T}\mathbf v$ 了。</p><h2 id="多项式乘积的转置"><a href="#多项式乘积的转置" class="headerlink" title="多项式乘积的转置"></a>多项式乘积的转置</h2><p>考虑两个多项式</p><script type="math/tex; mode=display">F(x)=\sum_{i=0}^nf_ix^i</script><p>和</p><script type="math/tex; mode=display">G(x)=\sum_{i=0}^mg_ix^i</script><p>令它们的乘积为</p><script type="math/tex; mode=display">H(x)=\sum_{i=0}^{n+m}h_ix^i</script><p>考虑计算这一乘积的算法。为了便于理解，我们将 $G(x)$ 视作常量，$F(x)$ 和 $H(x)$ 视作变量，考虑一个作用在如下 $(n+1)+(n+m+1)=2n+m+2$ 维列向量上的线性算法</p><script type="math/tex; mode=display">\begin{bmatrix}f_0\\f_1\\f_2\\\vdots\\f_n\\h_0\\h_1\\\vdots\\h_{n+m}\end{bmatrix}</script><p>初始时 $f_i$ 已经有值，而 $h_i$ 为 $0$。算法流程如下：</p><ol><li>循环变量 $i\leftarrow 0\dots n+m$</li><li>循环变量 $j\leftarrow \max(0,i-m)\dots\min(n,i)$</li><li>执行 $h_i\leftarrow h_i+f_j\times g_{i-j}$</li></ol><p>考虑这一过程的转置，其流程如下：</p><ol><li>循环变量 $i\leftarrow n+m\dots 0$</li><li>循环变量 $j\leftarrow \min(n,i)\dots\max(0,i-m)$</li><li>执行 $f_j\leftarrow f_j+h_i\times g_{i-j}$</li></ol><p>相当于在已知 $H(x)$ 和 $G(x)$ 的情况下求解 $F(x)$。其中</p><script type="math/tex; mode=display">f_k=\sum_{i-j=k}h_ig_j=\sum_{i+(m-j)=m+k}h_ig^{\mathrm R}_{m-j}=\sum_{i+j=m+k}h_ig^{\mathrm R}_j</script><p>其中 $g^{\mathrm R}_i=g_{m-i}$，即 $G$ 的所有系数翻转过来。</p><p>于是我们可以如下定义多项式乘积的转置</p><script type="math/tex; mode=display">[x^k](H\times^{\mathrm T}G)=[x^{m+k}](H\times G^{\mathrm R})</script><p>不难发现，如果 $F(x)$ 是 $n$ 次多项式，$G(x)$ 是 $m$ 次多项式，那么 $(F\times^{\mathrm T}G)(x)$ 会是 $n-m$ 次多项式。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>令</p><script type="math/tex; mode=display">A=\begin{bmatrix}1&a_0^1&a_0^2&\cdots&a_0^n\\1&a_1^1&a_1^2&\cdots&a_1^n\\1&a_2^1&a_2^2&\cdots&a_2^n\\\vdots&\vdots&\vdots&\ddots&\vdots\\1&a_n^1&a_n^2&\cdots&a_n^n\\\end{bmatrix}\qquad\varphi=\begin{bmatrix}f_0\\f_1\\f_2\\\vdots\\f_n\end{bmatrix}\qquad\beta=\begin{bmatrix}b_0\\b_1\\b_2\\\vdots\\b_n\end{bmatrix}</script><p>我们有</p><script type="math/tex; mode=display">A\varphi=\beta</script><p>考虑</p><script type="math/tex; mode=display">\gamma=A^{\mathrm T}\varphi=\begin{bmatrix}1&1&1&\cdots&1\\a_0^1&a_1^1&a_2^1&\cdots&a_n^1\\a_0^2&a_1^2&a_2^2&\cdots&a_n^2\\\vdots&\vdots&\vdots&\ddots&\vdots\\a_0^n&a_1^n&a_2^n&\cdots&a_n^n\\\end{bmatrix}\begin{bmatrix}f_0\\f_1\\f_2\\\vdots\\f_n\end{bmatrix}=\begin{bmatrix}c_0\\c_1\\c_2\\\vdots\\c_n\end{bmatrix}</script><p>不难发现</p><script type="math/tex; mode=display">c_k=\sum_{i=0}^nf_ia_i^k</script><p>定义生成函数</p><script type="math/tex; mode=display">C(x)=\sum_{i=0}^n\frac{f_i}{1-a_ix}</script><p>则</p><script type="math/tex; mode=display">c_k=[x^k]C(x)</script><p>这里 $C(x)$ 可以通过经典的分治 NTT 求解。令</p><script type="math/tex; mode=display">C_{l,r}(x)=\frac{P_{l,r}(x)}{Q_{l,r}(x)}</script><p>对于叶子节点 $[i,i]$，执行</p><script type="math/tex; mode=display">P_{i,i}(x)=f_i</script><script type="math/tex; mode=display">Q_{i,i}(x)=1-a_ix</script><p>对于内部节点 $[l,r]$，执行</p><script type="math/tex; mode=display">P_{l,r}(x)=P_{l,m}(x)Q_{m+1,r}(x)+P_{m+1,r}(x)Q_{l,m}(x)</script><script type="math/tex; mode=display">Q_{l,r}(x)=Q_{l,m}(x)Q_{m+1,r}(x)</script><p>注意到，$Q_{l,r}(x)$ 实际上和 $f_i$ 没有任何关系，我们可以把它们视作常量。然后把剩下的 $(n+1)^2$ 个 $P_{l,r}(x)$ 全部塞进一个向量里，那么上述分治过程就可以视作是一个针对该向量的线性算法。</p><p>我们可以写得再清晰一些，比如说像下面这样</p><script type="math/tex; mode=display">P_{l,r}(x)\leftarrow P_{l,r}(x)+P_{l,m}(x)\times Q_{m+1,r}(x)</script><script type="math/tex; mode=display">P_{l,r}(x)\leftarrow P_{l,r}(x)+P_{m+1,r}(x)\times Q_{l,m}(x)</script><p>以及最后一步的</p><script type="math/tex; mode=display">C(x)\leftarrow C(x)+P_{0,n}(x)\times Q_{0,n}^{-1}(x)</script><p>那么转置之后，第一步自然就是</p><script type="math/tex; mode=display">B_{0,n}(x)\leftarrow B_{0,n}(x)+F(x)\times^{\mathrm T}Q_{0,n}^{-1}(x)</script><p>想不明白为什么吗？我也想不明白。</p><p>在这之后，从上向下分治，对于内部节点 $[l,r]$，执行</p><script type="math/tex; mode=display">B_{l,m}(x)\leftarrow B_{l,m}(x)+B_{l,r}(x)\times^{\mathrm T}Q_{m+1,r}(x)</script><script type="math/tex; mode=display">B_{m+1,r}(x)\leftarrow B_{m+1,r}(x)+B_{l,r}(x)\times^{\mathrm T}Q_{l,m}(x)</script><p>最终对于叶子节点 $[i,i]$，$B_{i,i}(x)$ 必定会是一个 $0$ 次多项式，其仅有的一个常数项系数就是我们要求的 $b_i$ 了。</p><p>当然，如果多项式次数和点值数量不对等也很容易处理，用 $0$ 补齐即可。</p><p><a href="https://www.luogu.com.cn/problem/P5050">请问您要来点板子题吗 qwq？</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这个算法好在哪里：</p><ol><li>常数小：<code>std::vector</code> 也不必太过担心被卡常。</li><li>代码实现难度小：只要能够完全理解整个算法流程，便能够十分迅速且正确地写出代码。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;考虑一个经典的问题。给定 $n$ 次多项式&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;F(x)=\sum_{i=0}^nf_ix^i&lt;/script&gt;&lt;p&gt;和 $n+1$ 个点值 $a_0,a_1,\dots,a_n$。您需要对于每个 $k$，求出 $b_k=F(a_k)$，对 $998244353$ 取模。&lt;/p&gt;
&lt;p&gt;据说以前这种问题都是采用多项式取模的方法。但是现在我们有新科技了。&lt;/p&gt;
&lt;p&gt;本篇文章将会以我个人认为十分通俗易懂的方式来详细地讲解这种新科技。&lt;/p&gt;
&lt;p&gt;参考文献略。&lt;/p&gt;
    
    </summary>
    
      <category term="学术" scheme="https://github.com/Challestend/categories/%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="NTT" scheme="https://github.com/Challestend/tags/NTT/"/>
    
      <category term="多项式" scheme="https://github.com/Challestend/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
      <category term="矩阵" scheme="https://github.com/Challestend/tags/%E7%9F%A9%E9%98%B5/"/>
    
      <category term="多点求值" scheme="https://github.com/Challestend/tags/%E5%A4%9A%E7%82%B9%E6%B1%82%E5%80%BC/"/>
    
      <category term="线性代数" scheme="https://github.com/Challestend/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
      <category term="转置原理" scheme="https://github.com/Challestend/tags/%E8%BD%AC%E7%BD%AE%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>ICPC 2022 Regional 合肥站游记</title>
    <link href="https://github.com/Challestend/icpc-2022-regional-hefei-notes/"/>
    <id>https://github.com/Challestend/icpc-2022-regional-hefei-notes/</id>
    <published>2022-11-20T12:14:52.000Z</published>
    <updated>2023-01-09T02:44:05.068Z</updated>
    
    <content type="html"><![CDATA[<p>今天本来会有一场大物的考试。还好我因为打 ICPC 申请了免考不然就要在大物考场上丢人了。</p><p>前 3h 写出来 6 题。最后 2h 我在写一道数学题，SHX 在写一道数据结构题，结果都没有写出来。</p><p>本来以为写出来 7-8 题可以混一块金牌的。结果赛后一查排行榜，8 题 42 队，7 题 67 队，结果金牌只有 35 块。</p><p>也就是说无论如何都没有大金牌了 /kk</p><p>最后 rank 72 拿了一块银牌。</p><p>这么说来上周的 CCPC 其实是最有希望拿金牌的。如果我能够少浪费一时间的话。</p><p>害群之马竟是我自己 /kk</p><a id="more"></a><h1 id="我写出来的题"><a href="#我写出来的题" class="headerlink" title="我写出来的题"></a>我写出来的题</h1><h2 id="A-Welcome-to-USTC"><a href="#A-Welcome-to-USTC" class="headerlink" title="A. Welcome to USTC"></a>A. Welcome to USTC</h2><p>给定一个字符串 $S$。保证 $S$ 中恰好包含 $\mathtt{U},\mathtt{S},\mathtt{T},\mathtt{C}$ 四个大写英文字母各一个，其他字符均为小写英文字母，且 $\mathtt{USTC}$ 在 $S$ 中作为<strong>子序列</strong>出现。</p><p>每次操作可以交换 $S$ 中的两个相邻字符。现要让 $\mathtt{USTC}$ 在 $S$ 中作为<strong>子串</strong>出现，试求最小操作次数。</p><p>$4\leqslant |S|\leqslant 10^4$。</p><p>$\mathtt{1s/256MB}$。</p><p>设 $\mathtt{U},\mathtt{S},\mathtt{T},\mathtt{C}$ 的下标依次为 $a,b,c,d$，答案显然为</p><script type="math/tex; mode=display">(b-a-1)+2(c-b-1)+(d-c-1)</script><p>时间复杂度 $O(|S|)$，空间复杂度 $O(|S|)$。</p><h2 id="G-Game-Plan"><a href="#G-Game-Plan" class="headerlink" title="G. Game Plan"></a>G. Game Plan</h2><p>您有一个集合 $S$。初始时 $S=\{0\}$。现在您可以进行 $t$ 次操作。在第 $i$ 次操作中，您可以在如下两项中任选其一：</p><ol><li>$S\leftarrow S\cap\{a_i\}$</li><li>$S\leftarrow S\cap\{b_i\}$</li></ol><p>（原题中还有一个值域上界，不过现在看来这个不重要）</p><p>试求 $t$ 次操作后 $\operatorname{mex}(S)$ 的最大值。</p><p>$1\leqslant n\leqslant 10^9$，$1\leqslant t\leqslant 10^6$，$1\leqslant a_i,b_i\leqslant n$。其中 $n$ 为值域上界。</p><p>$\mathtt{1s/256MB}$。</p><p>考虑建图。$n+1$ 个，依次标号为 $1,2,\dots,n+1$。对于每一个 $i$，我们连一条边 $(a_i,b_i)$。</p><p>现在问题转化为，在这张图上，对于每条边标记其中一个端，问未被标记过的标号最小的的标号最大是多少。</p><p>考虑到，如果一个连通块是一棵树，那么我们不得不放弃其中的一个不标记。那么显然放弃标号最大的是最优策略。</p><p>但是在树的基础上，再随便增加一条边，我们都能够做到标记这个连通块中的所有。</p><p>以上。时间复杂度 $O(t\log t)$，空间复杂度 $O(t)$。</p><h2 id="H-Jackpot"><a href="#H-Jackpot" class="headerlink" title="H. Jackpot"></a>H. Jackpot</h2><p>黑板上写有 $n$ 个正整数 $k+1$。每次操作您可以选择一个大于 $1$ 的整数，令其为 $x$，然后它有 $\frac{1}{x-1}$ 的概率变为 $x-1$，$\frac{1}{x-1}$ 的概率变为 $x-2$……$\frac{1}{x-1}$ 的概率变为 $1$。</p><p>您的目的是让所有数都变为 $1$。试求期望操作次数。对 $10^9+7$ 取模。</p><p>多组数据。$1\leqslant n\leqslant 10^9$，$2\leqslant k\leqslant 10^3$。$T\leqslant 10^3$。</p><p>$\mathtt{1s/256MB}$。</p><p>容易发现这些数都是两两独立的。令 $E(i)$ 表示将一个数从 $i$ 变到 $1$ 的期望操作次数，可以直接得出答案等于 $n\cdot E(k+1)$。</p><p>$E(i)$ 也很容易计算。我们可以进行如下的预处理</p><script type="math/tex; mode=display">E(i)=1+\frac{1}{i-1}\sum_{1\leqslant j\lt i}E(j)</script><p>时间复杂度 $O(k^2+T)$，空间复杂度 $O(k)$。</p><h1 id="SHX-写出来的题"><a href="#SHX-写出来的题" class="headerlink" title="SHX 写出来的题"></a>SHX 写出来的题</h1><h2 id="B-Genshin-Impact"><a href="#B-Genshin-Impact" class="headerlink" title="B. Genshin Impact"></a>B. Genshin Impact</h2><p>您可以释放一种火魔法。这种火魔法每 $y$ 秒可以释放一次，每次释放有 $\frac{1}{p}$ 的成功率，如果成功，会使得敌人在接下来的 $x$ 秒内进入燃烧状态。如果敌人已经处于燃烧状态，状态的剩余时间会被重置为 $x$ 秒。</p><p>现在您会一直不停地对着同一个血量无限的敌人释放这种火魔法。试求当经过的时间趋向于正无穷大时，</p><script type="math/tex; mode=display">\frac{\text{敌人处于燃烧状态的时间}}{\text{总时间}}</script><p>的值（……大概收敛吧）。</p><p>多组数据。$1\leqslant x,y,p\leqslant 10^3$。$T\leqslant 10^3$。</p><p>Special Judge：相对误差不超过 $10^{-6}$。</p><p>$\mathtt{1s/256MB}$。</p><p>一看到题面很快啊，我就有了如下的一个看上去很真（大嘘）的想法</p><script type="math/tex; mode=display">\frac{1}{p}\frac{\min(x,y)}{y}</script><p>这个东西显然是不对的。因为如果 $x\gt y$，上一次成功了这一次没有成功那么燃烧状态会持续。</p><p>不过算了，反正 SHX 写出来了。</p><blockquote><p>无穷会把我们在有限的世界里积累起来的直觉打得粉碎。<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　——関原みや</p></blockquote><h2 id="J-Produce-the-Problems"><a href="#J-Produce-the-Problems" class="headerlink" title="J. Produce the Problems"></a>J. Produce the Problems</h2><p>给定 $n,a,b$ 和两个长度为 $n$ 的序列 $d,c$。您需要构造 $n$ 个字符串 $S_1,S_2,\dots,S_n$，其中 $S_i$ 需要恰好包含 $d_i$ 个 $\mathtt{D}$ 和 $c_i$ 个 $\mathtt{C}$。并且，如果令 $S=S_1S_2\cdots S_n$，$S$ 中不能出现超过 $a$ 个连续的 $\mathtt{D}$ 或超过 $b$ 个连续的 $\mathtt{C}$。问是否能够做到。</p><p>$1\leqslant n\leqslant 10^6$，$0\leqslant a,b,d_i,c_i\leqslant 10^6$。</p><p>$\mathtt{1s/256MB}$。</p><p>构造题，一生之敌。</p><p>不过算了，反正 SHX 写出来了。</p><blockquote><p>构造题是人类思维进步的阶梯。<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　——関原みや</p></blockquote><h2 id="M-Mahjong"><a href="#M-Mahjong" class="headerlink" title="M. Mahjong"></a>M. Mahjong</h2><p>得。这题我连题意都不知道。只听说是个大模拟。</p><p>不过算了，反正 SHX 写出来了。</p><blockquote><p>大模拟题就是【ACM 粗口】题。<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　——関原みや</p></blockquote><h1 id="没过的题"><a href="#没过的题" class="headerlink" title="没过的题"></a>没过的题</h1><h2 id="E-My-friends’-friends-are-my-friends"><a href="#E-My-friends’-friends-are-my-friends" class="headerlink" title="E. My friends’ friends are my friends"></a>E. My friends’ friends are my friends</h2><p><strong>Warning：以下所用记号与原始题面存在出入。</strong></p><p><strong>Warning：以下文字已经经过了一定程度的转化，与原始题面想要表达的含义存在出入。</strong></p><p>给定一张 $n$ 个和 $m$ 条边的无向图和一个特殊节点 $r$。点有点权 $a,b$，边有边权 $w$。</p><p>现在每个点上都站着一个人。对于一个点 $i$，如果您能够支付给这个点上的人 $a_i\cdot\operatorname{dist}(r,i)$ 元，那么 TA 就会对您产生 $b_i$ 点贡献。其中 $\operatorname{dist}$ 表示两点间的最短路。</p><p>现在您需要集齐 $S$ 点贡献，但是您的预算只有 $T$ 元。问是否能够做到。</p><p>$1\leqslant n\leqslant 10^4$，$1\leqslant m\leqslant 10^6$，$0\leqslant S\leqslant 10^4$，$0\leqslant T\leqslant 10^{12}$。</p><p>$0\leqslant a_i,b_i\leqslant 10^4$，$1\leqslant w_i\leqslant 10^4$。</p><p>$\mathtt{1s/256MB}$。</p><p>令 $f(i)$ 表示恰好获得 $i$ 点贡献至少需要多少钱。不过 $f(S)$ 比较特殊，它表示至少获得 $S$ 点贡献（即包括了 $S+1$ 点和更多的情况）至少需要多少钱。</p><p>那么我们可以写一个 $O(nS)$ 的背包 DP。</p><p>结果 T 了（悲</p><h2 id="I-Counting-Lines"><a href="#I-Counting-Lines" class="headerlink" title="I. Counting Lines"></a>I. Counting Lines</h2><p>给定 $n$。称平面直角坐标系内横纵坐标均为 $[0,n)$ 上的整数的这 $n^2$ 个点为标记点。一条直线是好的，当且仅当它满足如下两个条件：</p><ol><li>经过至少两个标记点</li><li>与 $x$ 轴的夹角的绝对值小于等于 $\frac{\pi}{4}$</li></ol><p>试求好的直线的数量。</p><p>多组数据。$2\leqslant n\leqslant 10^6$。$T\leqslant 10^3$。</p><p>$\mathtt{1s/256MB}$。</p><p>推了半天结果发现不对（悲</p><p>以下是考场思路：</p><p>我们把夹角在 $[-\frac{\pi}{4},0)$ 的部分逆时针旋转 $\frac{\pi}{2}$ 到 $[\frac{\pi}{4},\frac{\pi}{2})$，然后再减去夹角为 $0$ 和 $\frac{\pi}{4}$ 的部分（加起来一共是 $3n-3$），发现剩下的部分实际上是</p><script type="math/tex; mode=display">\sum_{\Delta x=1}^{n-1}\sum_{\Delta y=1}^{n-1}[\Delta x\perp\Delta y]f(\Delta x,\Delta y)</script><p>其中 $f(\Delta x,\Delta y)$ 表示斜率为 $\frac{\Delta y}{\Delta x}$ 的好的直线的数量。</p><p>套路莫比乌斯反演</p><script type="math/tex; mode=display">\begin{aligned}&\sum_{\Delta x=1}^{n-1}\sum_{\Delta y=1}^{n-1}[\Delta x\perp\Delta y]f(\Delta x,\Delta y)\\=&\sum_{t=1}^{n-1}\mu(t)\sum_{u=1}^{\lfloor(n-1)/t\rfloor}\sum_{v=1}^{\lfloor(n-1)/t\rfloor}f(tu,tv)\\\end{aligned}</script><p>然后就是这里。仔细思考我们会发现，$f(\Delta x,\Delta y)$ 与 $(\Delta x,\Delta y)$ 有关，因此不能直接套二者互质时的式子。</p><p>然后……然后就不会了（悲</p><h2 id="K-Quarantine"><a href="#K-Quarantine" class="headerlink" title="K. Quarantine"></a>K. Quarantine</h2><p>现在有排成一条直线的 $n$ 个居民区，依次标号为 $1,2,\dots,n$。</p><p>有 $m$ 个时间，每次事件有如下 $4$ 中类型：</p><ol><li>给出 $l,r$。区间 $[\max(l-A,1),\min(r+A,n)]$ 内的所有居民区进入「被感染」状态。</li><li>给出 $l,r,k$。如果区间 $[\max(l-A,1),\min(r+A,n)]$ 内处于「被感染」状态的最长连续段长度至少为 $k$，那么区间内的所有居民区进入「隔离」状态；否则，什么也不发生。</li><li>给出 $l,r$。区间 $[\max(l-A,1),\min(r+A,n)]$ 内的所有居民区解除「被感染」状态和「隔离」状态。</li><li>给出 $l,r$。查询区间 $[\max(l-A,1),\min(r+A,n)]$ 内有多少个居民区处于「隔离」状态。</li></ol><p>其中 $A$ 表示上一次事件 $4$，即查询的答案，初始为 $0$。</p><p>$1\leqslant n\leqslant 10^9$，$1\leqslant m\leqslant 10^5$。</p><p>$\mathtt{1s/256MB}$。</p><p>抽象一下的话就是：</p><ol><li>区间覆盖</li><li>查询区间最长连续段长度</li><li>查询区间和</li></ol><p>第一反应是珂朵莉树，但是细想发现需要手写平衡树维护，因为 <code>std::set</code> 在这道题中已经不够用了。</p><p>但是想了想觉得太麻烦了于是放弃了。</p><p>SHX 的写法是动态开点线段树，但是没写出来。</p><h1 id="剩下的题"><a href="#剩下的题" class="headerlink" title="剩下的题"></a>剩下的题</h1><p>C 超级大模拟题（样例解释一页半）</p><p>D 看不懂</p><p>F 神仙计算几何题</p><p>L 神仙数学题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天本来会有一场大物的考试。还好我因为打 ICPC 申请了免考不然就要在大物考场上丢人了。&lt;/p&gt;
&lt;p&gt;前 3h 写出来 6 题。最后 2h 我在写一道数学题，SHX 在写一道数据结构题，结果都没有写出来。&lt;/p&gt;
&lt;p&gt;本来以为写出来 7-8 题可以混一块金牌的。结果赛后一查排行榜，8 题 42 队，7 题 67 队，结果金牌只有 35 块。&lt;/p&gt;
&lt;p&gt;也就是说无论如何都没有大金牌了 /kk&lt;/p&gt;
&lt;p&gt;最后 rank 72 拿了一块银牌。&lt;/p&gt;
&lt;p&gt;这么说来上周的 CCPC 其实是最有希望拿金牌的。如果我能够少浪费一时间的话。&lt;/p&gt;
&lt;p&gt;害群之马竟是我自己 /kk&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://github.com/Challestend/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="数论" scheme="https://github.com/Challestend/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="构造" scheme="https://github.com/Challestend/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="DP" scheme="https://github.com/Challestend/tags/DP/"/>
    
      <category term="图论" scheme="https://github.com/Challestend/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="数学期望" scheme="https://github.com/Challestend/tags/%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B/"/>
    
      <category term="莫比乌斯反演" scheme="https://github.com/Challestend/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
      <category term="ICPC" scheme="https://github.com/Challestend/tags/ICPC/"/>
    
      <category term="2022" scheme="https://github.com/Challestend/tags/2022/"/>
    
      <category term="概率论" scheme="https://github.com/Challestend/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
      <category term="Regional" scheme="https://github.com/Challestend/tags/Regional/"/>
    
      <category term="合肥" scheme="https://github.com/Challestend/tags/%E5%90%88%E8%82%A5/"/>
    
      <category term="难题" scheme="https://github.com/Challestend/tags/%E9%9A%BE%E9%A2%98/"/>
    
      <category term="模拟" scheme="https://github.com/Challestend/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="最短路" scheme="https://github.com/Challestend/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="背包" scheme="https://github.com/Challestend/tags/%E8%83%8C%E5%8C%85/"/>
    
      <category term="数据结构" scheme="https://github.com/Challestend/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Pb. 5</title>
    <link href="https://github.com/Challestend/random-solution-pb-5/"/>
    <id>https://github.com/Challestend/random-solution-pb-5/</id>
    <published>2022-10-18T05:48:02.000Z</published>
    <updated>2022-11-20T12:03:48.669Z</updated>
    
    <content type="html"><![CDATA[<p>2022 年 10 月 17 日 22：35 ~ 次日 00：35，AHU 2021 届不知名 ACM 选手<strong>関原みや</strong>（化名）报名参加 <a href="https://codeforces.com/contest/1743">Educational Codeforces Round 137 (Rated for Div. 2)</a>。期间因急了，C 题 WA 1 发，（某数据随机复杂度虚伪的）D 题 WA 4 发；但最后关头潜力爆发，做出 F 题并成功上分，跻身 Candidate Master 之列。距今已过……不知道多久，佳话永流传。</p><p>来源：<a href="https://codeforces.com/contest/1743/problem/F">CF1743 F Intersection and Union</a></p><a id="more"></a><p>给定 $n$ 个集合 $S_1,S_2,\dots,S_n$，其中 $S_i=[l_i,r_i]\cap\mathbb{Z}$。</p><p>现构造操作序列 $p_1,p_2,\dots,p_{n-1}$，其中 $p_i\in\{\cup,\cap,\oplus\}$，$\cup$ 表示集合的并，$\cap$ 表示集合的交，$\oplus$ 表示集合的对称差。</p><p>显然整个操作序列 $p$ 一共有 $3^{n-1}$ 中方案。试对于每种 $p$，计算</p><script type="math/tex; mode=display">\left|(((S_1\;p_1\;S_2)\;p_2\;S_3)\;p_3\;S_4)\;\cdots\;p_{n-1}\;S_n\right|</script><p>的和。对 $998244353$ 取模。</p><p>$2\leqslant n\leqslant 3\times 10^5$，$0\leqslant l_i\leqslant r_i\leqslant 3\times 10^5$。</p><p>$\mathtt{5s/512MB}$。</p><hr><p>令 $T_k$ 表示下式的计算结果</p><script type="math/tex; mode=display">(((S_1\;p_1\;S_2)\;p_2\;S_3)\;p_3\;S_4)\;\cdots\;p_{k-1}\;S_k</script><p>可以大致看成是 $S_k$ 的前缀和。</p><p>考虑对于每个 $x$，计算有多少种方案使得 $x\in T_n$。</p><p>设当前考察到 $T_{k-1}$。并且有 $x\not\in S_k$，那么：</p><ol><li>如果 $x\not\in T_{k-1}$，无论 $p_k$ 如何取值，总有 $x\not\in T_k$。</li><li>如果 $x\in T_{k-1}$，$p_k=\cap$，那么 $x\not\in T_k$。</li><li>如果 $x\in T_{k-1}$，$p_k=\cup$ 或 $p_k=\oplus$，那么 $x\in T_k$。</li></ol><p>同理，如果 $x\in S_k$，那么：</p><ol><li>如果 $x\not\in T_{k-1}$，$p_k=\cap$，那么 $x\not\in T_k$。</li><li>如果 $x\not\in T_{k-1}$，$p_k=\cup$ 或 $p_k=\oplus$，那么 $x\in T_k$。</li><li>如果 $x\in T_{k-1}$，$p_k=\oplus$，那么 $x\not\in T_k$。</li><li>如果 $x\in T_{k-1}$，$p_k=\cup$ 或 $p_k=\cap$，那么 $x\in T_k$。</li></ol><p>设 $f(k,0/1,0/1)$：其中 $f(k,0,0)$ 表示在 $x\not\in T_{k-1}$ 的情况下，$x\not\in T_k$ 的方案数；剩余状态的含义可以以此类推。我们可以整理出：</p><script type="math/tex; mode=display">\begin{bmatrix}f(k,0,0)&f(k,0,1)\\f(k,1,0)&f(k,1,1)\end{bmatrix}=\begin{bmatrix}f(k-1,0,0)&f(k-1,0,1)\\f(k-1,1,0)&f(k-1,1,1)\end{bmatrix}\begin{bmatrix}3&0\\1&2\end{bmatrix}\quad(x\not\in S_k)</script><script type="math/tex; mode=display">\begin{bmatrix}f(k,0,0)&f(k,0,1)\\f(k,1,0)&f(k,1,1)\end{bmatrix}=\begin{bmatrix}f(k-1,0,0)&f(k-1,0,1)\\f(k-1,1,0)&f(k-1,1,1)\end{bmatrix}\begin{bmatrix}1&2\\1&2\end{bmatrix}\quad(x\in S_k)</script><p>这样我们只需从小到大扫一遍 $x$，用扫描线处理出每个 $S_k$ 是否包含当前 $x$，然后再用线段树维护单点修改和区间矩阵乘积即可。</p><p>当然还有一些细节，比如说 $S_1$ 这个位置有些特殊，所以实际上求解矩阵乘积的时候求解的是 $[2,n]$ 上的乘积，然后再根据是否有 $x\in S_1$ 单独计算 $S_1$ 产生的贡献。</p><p>还有就是，如果 $x\not\in\bigcup S_i$，那么这个 $x$ 不应该参与计算。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2022 年 10 月 17 日 22：35 ~ 次日 00：35，AHU 2021 届不知名 ACM 选手&lt;strong&gt;関原みや&lt;/strong&gt;（化名）报名参加 &lt;a href=&quot;https://codeforces.com/contest/1743&quot;&gt;Educational Codeforces Round 137 (Rated for Div. 2)&lt;/a&gt;。期间因急了，C 题 WA 1 发，（某数据随机复杂度虚伪的）D 题 WA 4 发；但最后关头潜力爆发，做出 F 题并成功上分，跻身 Candidate Master 之列。距今已过……不知道多久，佳话永流传。&lt;/p&gt;
&lt;p&gt;来源：&lt;a href=&quot;https://codeforces.com/contest/1743/problem/F&quot;&gt;CF1743 F Intersection and Union&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="线段树" scheme="https://github.com/Challestend/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="Codeforces" scheme="https://github.com/Challestend/tags/Codeforces/"/>
    
      <category term="矩阵" scheme="https://github.com/Challestend/tags/%E7%9F%A9%E9%98%B5/"/>
    
      <category term="DP" scheme="https://github.com/Challestend/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Pb. 4</title>
    <link href="https://github.com/Challestend/random-solution-pb-4/"/>
    <id>https://github.com/Challestend/random-solution-pb-4/</id>
    <published>2022-10-01T14:16:24.000Z</published>
    <updated>2022-11-21T11:29:44.005Z</updated>
    
    <content type="html"><![CDATA[<p>2022 年 10 月 1 日 20：00 ~ 21：40，AHU 2021 届不知名 ACM 选手<strong>関原みや</strong>（化名）报名参加 <a href="https://atcoder.jp/contests/abc271">AtCoder Beginner Contest 271</a>。期间因大脑短路，A/D/E 题各 WA 1 发，C 题 WA 4 发，G 题本应做出却未能做出（F 题就算了，真不会），最终以 1075th 的坏成绩遗憾<del>离世</del>离场，Rating 倒扣 17 分。距今已过 34 分 24 秒，警钟长鸣。</p><p>来源：<a href="https://atcoder.jp/contests/abc271/tasks/abc271_g">ABC271 G Access Counter</a></p><a id="more"></a><p>高桥君建立了一个网站，然后在上面放置了一个访问计数器。在这之后，高桥君和他的一个朋友青木君会频繁地访问这个网站。</p><p>给定一个长度为 $24$ 的字符串 $c_0c_1\cdots c_{23}$，且 $c_i\in\{\mathtt{T},\mathtt{A}\}$。在访问计数器被设置后的第 $n$ 个小时中（$n$ 从零开始计数），如果 $c_{n\bmod 24}=\mathtt{T}$，那么高桥君有 $X/100$ 的概率访问网站；如果 $c_{n\bmod 24}=\mathtt{A}$，那么青木君有 $Y/100$ 的概率访问网站。</p><p>如果访问计数器统计到的第 $N$ 次访问恰好是高桥君，高桥君会爆炸。因此试求第 $N$ 次访问恰好是青木君的概率。对 $998244353$ 取模。</p><p>$1\leqslant N\leqslant 10^{18}$，$1\leqslant X,Y\leqslant 99$，且 $X$ 和 $Y$ 都是整数。</p><p>$\mathtt{2s/1024MB}$。</p><hr><p>这么一看相当直来直去的概率题。</p><p>令 $P(i,j)$ 表示第 $i$ 次访问的下一次是第 $j$ 次访问的概率。这里不考虑这次访问是谁。显然我们有</p><script type="math/tex; mode=display">P(i,j)=\sum_{n\geqslant 0}\prod_{k=i+1}^{j-1}(1-p_k)\cdot p_j\cdot\left(\prod_{k=1}^n(1-p_k)\right)^n=\frac{\prod_{k=i+1}^{j-1}(1-p_k)\cdot p_j}{1-\prod_{k=1}^n(1-p_k)}</script><p>$Q_t(i)$ 表示第 $t$ 访问对应 $c_i$ 的概率。显然我们有</p><script type="math/tex; mode=display">Q_1(i)=\prod_{k=1}^{i-1}(1-p_k)\cdot p_i</script><script type="math/tex; mode=display">Q_t(i)=\sum_{j=0}^{23}Q_{t-1}(j)P(j,i)</script><p>注意到，如果我们能够把 $P(i,j)$ 和 $Q_t(i)$ 写成如下的矩阵形式的话</p><script type="math/tex; mode=display">A_t=\begin{bmatrix}Q_t(0)\\Q_t(1)\\\vdots\\Q_t(23)\\\end{bmatrix}\quad F=\begin{bmatrix}P(0,0)&P(1,0)&\cdots&P(23,0)\\P(0,1)&P(1,1)&\cdots&P(23,1)\\\vdots&\vdots&\ddots&\vdots\\P(0,23)&P(1,23)&\cdots&P(23,23)\\\end{bmatrix}</script><p>上面那个关系式就可以简写成</p><script type="math/tex; mode=display">A_t=A_{t-1}F=A_1F^{t-1}</script><p>即</p><script type="math/tex; mode=display">A_N=A_1F^{N-1}</script><p>那么我们就可以在 $O(\log N)$ 的时间复杂度内计算出所有的 $Q_N(i)$。虽然严格上来讲这部分还会有一个高达 $24^3$ 的常数。</p><p>那么最终的答案就是</p><script type="math/tex; mode=display">\sum_{i=0}^{23}[c_i=\mathtt{A}]Q_N(i)</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2022 年 10 月 1 日 20：00 ~ 21：40，AHU 2021 届不知名 ACM 选手&lt;strong&gt;関原みや&lt;/strong&gt;（化名）报名参加 &lt;a href=&quot;https://atcoder.jp/contests/abc271&quot;&gt;AtCoder Beginner Contest 271&lt;/a&gt;。期间因大脑短路，A/D/E 题各 WA 1 发，C 题 WA 4 发，G 题本应做出却未能做出（F 题就算了，真不会），最终以 1075th 的坏成绩遗憾&lt;del&gt;离世&lt;/del&gt;离场，Rating 倒扣 17 分。距今已过 34 分 24 秒，警钟长鸣。&lt;/p&gt;
&lt;p&gt;来源：&lt;a href=&quot;https://atcoder.jp/contests/abc271/tasks/abc271_g&quot;&gt;ABC271 G Access Counter&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="AtCoder" scheme="https://github.com/Challestend/tags/AtCoder/"/>
    
      <category term="概率论" scheme="https://github.com/Challestend/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
      <category term="矩阵快速幂" scheme="https://github.com/Challestend/tags/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Ct. 4</title>
    <link href="https://github.com/Challestend/random-solution-ct-4/"/>
    <id>https://github.com/Challestend/random-solution-ct-4/</id>
    <published>2022-09-30T16:43:38.000Z</published>
    <updated>2022-10-01T07:02:54.208Z</updated>
    
    <content type="html"><![CDATA[<p>第一次试图在实验室过夜并打 Codeforces Global Round。</p><blockquote><p>d*m「听上去很容易下分的样子。」</p></blockquote><p>85 min 写出来四题我觉得已经可以开香槟了。这波上大分。</p><p>于是从考场偷偷溜出来写一写题解（</p><p>用户名 CLT，如果想要 AC 代码请去 CF 翻提交记录。（考场代码，不保证可读性）</p><a id="more"></a><h2 id="A-Glory-Addicts"><a href="#A-Glory-Addicts" class="headerlink" title="A. Glory Addicts"></a>A. Glory Addicts</h2><p>您有 $n$ 个技能。第 $i$ 个技能的类型为 $a_i$（只能为 $0$ 或 $1$，$0$ 表示火属性技能，$1$ 表示冰属性技能），威力为 $b_i$。</p><p>您需要将这 $n$ 个技能每个释放恰好一遍。</p><p>如果释放一个技能时，之前刚刚释放过一个不同类型的技能，那么当前这个技能威力翻倍。</p><p>试求所有技能实际威力之和的最大值。</p><p>多组数据。$1\leqslant n\leqslant 10^5$，$a_i\in\{0,1\}$，$1\leqslant b_i\leqslant 10^9$。$\sum n\leqslant 10^5$。</p><p>$\texttt{2s/512MB}$。</p><p>假设火属性技能的数量严格大于冰属性技能的数量，那么有一种思路是：</p><ol><li>释放威力最低的火属性技能</li><li>释放威力最高的冰属性技能</li><li>释放威力最高的火属性技能</li><li>释放威力第二高的冰属性技能</li><li>释放威力第二高的火属性技能</li><li>……（如此重复直到所有的冰属性技能均被释放过）</li><li>释放剩余的火属性技能</li></ol><p>这样一来，所有的冰属性技能和等数量的威力最高的火属性技能被以双倍威力释放。</p><p>反过来，如果释放的第一个技能是威力最低的冰属性技能，模拟一遍会发现，除了这个威力最低的冰属性技能的威力从双倍变成了单倍，其他方面没有任何变化。因此，火属性技能较多时，释放的第一个技能应当是火属性技能。</p><p>同理，冰属性技能较多时，释放的第一个技能应当是冰属性技能。</p><p>但是如果两种技能恰好数量相同，那么就不得不牺牲一个威力最低的技能了（它只能以单倍威力释放）。</p><h2 id="B-Prefix-Sum-Addicts"><a href="#B-Prefix-Sum-Addicts" class="headerlink" title="B. Prefix Sum Addicts"></a>B. Prefix Sum Addicts</h2><p>假设有一个长度为 $n$ 的单调不下降序列 $a$。定义其前缀和序列 $s$ 为</p><script type="math/tex; mode=display">s_i=\sum_{j=1}^ka_j</script><p>现在给定 $s_{n-k+1},s_{n-k+2},\dots,s_n$，试求是否存在一个符合条件的 $a$。</p><p>多组数据。$1\leqslant n\leqslant 10^5$，$1\leqslant k\leqslant n$，$|s_i|\leqslant 10^9$。$\sum n\leqslant 10^5$。</p><p>$\texttt{2s/512MB}$。</p><p>如果 $k=1$ 那么必定有解。以下考虑 $k\gt 1$。</p><p>首先肯定是检查一下它给的这部分 $s$ 是否满足差分单调不下降。</p><p>然后如果 $k=n$ 还需要有 $s_1\leqslant s_2-s_1$。</p><p>然后令 $x=s_{n-k+2}-s_{n-k+1}$，那么对于所有的 $1\leqslant i\leqslant n-k+1$，需要有 $a_i\leqslant x$。</p><p>那么显然只要 $(n-k+1)x\geqslant s_{n-k+1}$ 就必定会有解。至于这个解具体长什么样，这不重要。</p><h2 id="C-Even-Number-Addicts"><a href="#C-Even-Number-Addicts" class="headerlink" title="C. Even Number Addicts"></a>C. Even Number Addicts</h2><p>Alice 和 Bob 在一起玩游戏。</p><p>现在他们面前有 $n$ 个数 $a_1,a_2,\dots,a_n$。每次一个人可以选择其中的一个数，将其加入自己的得分，然后将其删去。Alice 先手。</p><p>等到所有数都被删去之后，如果 Alice 的得分是偶数，那么 Alice 获胜；否则，即若 Alice 的得分是奇数，那么 Bob 获胜。</p><p>Alice 和 Bob 都足够聪明。试判断谁会获胜。</p><p>多组数据。$1\leqslant n\leqslant 100$，$|a_i|\leqslant 10^9$。$1\leqslant T\leqslant 100$，这里 $T$ 表示数据组数。</p><p>$\texttt{2s/512MB}$。</p><p>令 $O(x,y)$ 表示当前剩余 $x$ 个奇数和 $y$ 个偶数，且 Alice 先手时，Alice 能否让自己的最终得分为奇数。</p><p>$E(x,y)$ 类似，不过是能否让自己的最终得分为偶数。</p><p>首先考虑边界条件。手玩一下可以发现</p><script type="math/tex; mode=display">O(4k+1,0)=\texttt{T}\quad O(4k+2,0)=\texttt{T}\quad(k\geqslant 0)</script><script type="math/tex; mode=display">O(4k+3,0)=\texttt{F}\quad O(4k+4,0)=\texttt{F}\quad(k\geqslant 0)</script><script type="math/tex; mode=display">O(0,k)=\texttt{F}\quad(k\gt 0)</script><script type="math/tex; mode=display">E(4k+1,0)=\texttt{F}\quad E(4k+2,0)=\texttt{F}\quad(k\geqslant 0)</script><script type="math/tex; mode=display">E(4k+3,0)=\texttt{T}\quad E(4k+4,0)=\texttt{T}\quad(k\geqslant 0)</script><script type="math/tex; mode=display">E(0,k)=\texttt{T}\quad(k\gt 0)</script><p>其中 $\texttt{T}$ 表示 <code>true</code>，$\texttt{F}$ 表示 <code>false</code>。</p><p>考虑 $x\geqslant 1$ 且 $y\geqslant 1$ 时。此时 Alice 有两种选择：删去一个奇数，或者删去一个偶数。</p><p>如果 Alice 希望她的得分是奇数，且她选择删去一个奇数，那么当前局面变为 $x-1$ 个奇数和 $y$ 个偶数，且 Alice 之后的得分需要是偶数。</p><p>此时 Bob 同样有两种选择：（$x\geqslant 2$ 时才可以）删去一个奇数，或者（任何情况都可以）删去一个偶数。</p><p>这两种情况分别对应了 $(x=1\vee E(x-2,y))$ 和 $E(x-1,y-1)$。显然只有这两种情况的结果均为 $\texttt{T}$ 时 Alice 才能获胜。</p><p>以此类推，还有如下三种情况：</p><ol><li>Alice 希望她的得分是奇数，且她选择删去一个偶数</li><li>Alice 希望她的得分是偶数，且她选择删去一个奇数</li><li>Alice 希望她的得分是偶数，且她选择删去一个偶数</li></ol><p>总而言之我们有</p><script type="math/tex; mode=display">O(x,y)=OO(x,y)\vee OE(x,y)</script><script type="math/tex; mode=display">E(x,y)=EO(x,y)\vee EE(x,y)</script><p>其中</p><script type="math/tex; mode=display">OO(x,y)=(x=1\vee E(x-2,y))\wedge E(x-1,y-1)</script><script type="math/tex; mode=display">OE(x,y)=(y=1\vee O(x,y-2))\wedge O(x-1,y-1)</script><script type="math/tex; mode=display">EO(x,y)=(x=1\vee O(x-2,y))\wedge O(x-1,y-1)</script><script type="math/tex; mode=display">EE(x,y)=(y=1\vee E(x,y-2))\wedge E(x-1,y-1)</script><p><del>读者可自行验证正确性。</del></p><h2 id="D-Permutation-Addicts"><a href="#D-Permutation-Addicts" class="headerlink" title="D. Permutation Addicts"></a>D. Permutation Addicts</h2><p>给定一个长度为 $n$ 的排列 $a_1,a_2,\dots,a_n$ 和 $0\leqslant k\leqslant n$。</p><p>现构造序列 $b$。对于每个 $1\leqslant i\leqslant n$：</p><ol><li>如果 $a_i\leqslant k$，令 $b_{a_i}$ 的值为所有满足 $1\leqslant j\lt i$ 且 $a_j\gt k$ 的 $j$ 中最大的 $j$ 对应的 $a_j$。如果不存在这样的 $j$，令 $b_{a_i}$ 的值为 $n+1$。</li><li>如果 $a_i\gt k$，令 $b_{a_i}$ 的值为所有满足 $1\leqslant j\lt i$ 且 $a_j\leqslant k$ 的 $j$ 中最大的 $j$ 对应的 $a_j$。如果不存在这样的 $j$，令 $b_{a_i}$ 的值为 $0$。</li></ol><p>现给定构造好的 $b$，要求还原出 $k$ 的值和整个的 $a$。多解则任意输出。</p><p>多组数据。$1\leqslant n\leqslant 10^5$，$0\leqslant b_i\leqslant n+1$。$\sum n\leqslant 10^5$。输入数据保证有解。</p><p>$\texttt{2s/512MB}$。</p><p>为了方便，以下称 $\leqslant k$ 的数为小数，$\gt k$ 的数为大数。</p><p>如果 $b_y=x$，一种简单的思路就是直接把 $y$ 摆在 $x$ 右侧一个位置。$x=0$ 和 $x=n+1$ 的情况则是摆在排列最左侧。</p><p>如果有多个两两不同的 $y_1,y_2,\dots,y_s$ 满足 $b_{y_i}=x$，那么这些 $y_i$ 都摆在 $x$ 右侧最靠近的位置即可，且它们之间的相对顺序无影响。</p><p>但是可能会存在一些 $z_1,z_2,\dots,z_t$ 满足 $b_{z_j}=y_{i_0}$，这样的话 $y_{i_0}$ 必须要在其他 $y_i$ 的右侧，然后再往右侧直接接 $z_j$。</p><p>考虑到，无论如何，$y_i$ 和 $z_j$ 不可能同时是小数或大数，必定是以下两种情况恰好之一：</p><ol><li>$y_i$ 都是小数，$z_j$ 都是大数。</li><li>$y_i$ 都是大数，$z_j$ 都是小数。</li></ol><p>如果存在超过两个 $y_{i_0}$，那么无论如何排列这些 $y_i$，都会出现要么有一些 $z_j$ 无法紧跟在对应的 $y_{i_0}$ 的右侧，要么两个相邻的 $y_j$ 之间插入了一些 $z_j$（这样 $b_{y_j}$ 的值会不对）。这不符合题目的「保证有解」的限制条件，即每次这样的 $y_{i_0}$ 至多存在一个。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次试图在实验室过夜并打 Codeforces Global Round。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;d*m「听上去很容易下分的样子。」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;85 min 写出来四题我觉得已经可以开香槟了。这波上大分。&lt;/p&gt;
&lt;p&gt;于是从考场偷偷溜出来写一写题解（&lt;/p&gt;
&lt;p&gt;用户名 CLT，如果想要 AC 代码请去 CF 翻提交记录。（考场代码，不保证可读性）&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="Codeforces" scheme="https://github.com/Challestend/tags/Codeforces/"/>
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="构造" scheme="https://github.com/Challestend/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="DP" scheme="https://github.com/Challestend/tags/DP/"/>
    
      <category term="简单题" scheme="https://github.com/Challestend/tags/%E7%AE%80%E5%8D%95%E9%A2%98/"/>
    
      <category term="博弈论" scheme="https://github.com/Challestend/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
      <category term="公平组合游戏" scheme="https://github.com/Challestend/tags/%E5%85%AC%E5%B9%B3%E7%BB%84%E5%90%88%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>ICPC 2022 网络赛 Round 2 部分题解</title>
    <link href="https://github.com/Challestend/icpc-2022-net-contest-round-2/"/>
    <id>https://github.com/Challestend/icpc-2022-net-contest-round-2/</id>
    <published>2022-09-25T13:34:30.000Z</published>
    <updated>2022-10-01T06:00:38.173Z</updated>
    
    <content type="html"><![CDATA[<p>还没有题面。等拿到题面了再补。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;还没有题面。等拿到题面了再补。&lt;/p&gt;

      
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="ICPC" scheme="https://github.com/Challestend/tags/ICPC/"/>
    
      <category term="2022" scheme="https://github.com/Challestend/tags/2022/"/>
    
      <category term="网络赛" scheme="https://github.com/Challestend/tags/%E7%BD%91%E7%BB%9C%E8%B5%9B/"/>
    
      <category term="施工中" scheme="https://github.com/Challestend/tags/%E6%96%BD%E5%B7%A5%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Ct. 3</title>
    <link href="https://github.com/Challestend/random-solution-ct-3/"/>
    <id>https://github.com/Challestend/random-solution-ct-3/</id>
    <published>2022-09-24T12:09:24.000Z</published>
    <updated>2022-09-30T16:43:09.529Z</updated>
    
    <content type="html"><![CDATA[<p>今天 ACM 实验室的一场原题大赛。</p><p>把其中一些觉得稍微有点意思的题跳了出来写一写题解。</p><p>今日题源:</p><ul><li>A: 1426A (*800)</li><li>B1: 1560F1 (*1900)</li><li>B2: 1560F2 (*2100)</li><li>C: 1509B (*1100)</li><li>D: 1295E (*2200)</li><li>E: 1608B (*1200)</li><li>F: 1612D (*1600)</li><li>G: 1624D (*1400)</li><li>H: 1495C (*2300)</li><li>I: 771A (*1500)</li><li>J: 583A (*1000)</li></ul><p>差点就 AK 了。以及被三队暴打。</p><a id="more"></a><h2 id="C-TMT-Document"><a href="#C-TMT-Document" class="headerlink" title="C. TMT Document"></a>C. TMT Document</h2><p>给定一个长度为 $n$ 且只包含 $\texttt{T}$ 和 $\texttt{M}$ 两种字符的字符串 $S$。保证 $3\mid n$。现在需要把 $S$ 分割成若干个互不相交的子序列，且每个子序列都是 $\texttt{TMT}$（$\texttt{Towa Maji Tenshi}$）。试判断是否可能。</p><p>多组数据。$3\leqslant n\lt 10^5$。$\sum n\leqslant 10^5$。</p><p>$\texttt{1s/256MB}$。</p><p>其实……只要把前 $\frac{n}{3}$ 个 $\texttt{T}$ 和后 $\frac{n}{3}$ 个 $\texttt{T}$ 匹配，然后每对 $\texttt{T}$ 中间再塞一个 $\texttt{M}$ 就可以了。</p><p>但是考场被牛客还是哪里的一道 $\texttt{red}$ 题带偏了，写了好几发没过于是暂时搁置了。</p><p>最后回头重新看这道题的时候感觉当时的自己就是个**。</p><h2 id="D-Permutation-Separation"><a href="#D-Permutation-Separation" class="headerlink" title="D. Permutation Separation"></a>D. Permutation Separation</h2><p>给定一个长度为 $n$ 的 $1\sim n$ 的排列 $p$ 和另外一个长度为 $n$ 的序列 $a$。</p><p>首先选定 $1\leqslant k\lt n$，将 $p$ 分割成 $S_L=\{p_1,p_2,\dots,p_k\}$ 和 $S_R=\{p_{k+1},p_{k+2},\dots,p_n\}$ 两个集合。然后执行如下操作若干次（可以是 $0$ 次）：</p><p>选定 $1\leqslant i\leqslant n$，支付 $a_i$ 的代价将 $p_i$ 其移动到另外一个集合——即，如果 $p_i\in S_L$，将 $p_i$ 从 $S_L$ 中删去并加入 $S_R$；反之亦然。</p><p>目标是不存在 $x\in S_L$ 和 $y\in S_R$ 使得 $x\gt y$。试求达成目标需要支付的最小代价。</p><p>值得注意的是，如果操作后 $S_L=\varnothing$ 或 $S_R=\varnothing$，算作目标被达成。</p><p>$2\leqslant n\leqslant 2\times 10^5$，$1\leqslant p_i\leqslant n$，$1\leqslant a_i\leqslant 10^9$。</p><p>$\texttt{2s/256MB}$。</p><p>虽然这是不符合题目要求的，但是让我们首先考虑一下 $k=0$ 时的情况。</p><p>定义 $f(i)$ 表示，在当前的 $k$ 的取值下，通过若干次操作将 $S_L$ 变为 $\{1,2,\dots,i\}$ 的最小代价。特殊地，$f(0)$ 表示将 $S_L$ 变为 $\varnothing$ 的最小代价。</p><p>不难得出</p><script type="math/tex; mode=display">f(0)=0</script><script type="math/tex; mode=display">f(i)=\sum_{j=1}^ia_{q_i}</script><p>其中 $q$ 表示 $p$ 的逆排列。</p><p>如果现在将 $k$ 的值增加 $1$，考虑 $f(i)$ 会如何变化。</p><p>（以下的 $k$ 的值都是增加后的）</p><p>$f(p_k),f(p_k+1),\dots,f(n)$ 会减少 $a_k$，因为现在 $p_k$ 已经在 $S_L$ 中了。</p><p>相对地，$f(0),f(1),\dots,f(p_k-1)$ 会增加 $a_k$，因为现在 $p_k$ 已经不在 $S_R$ 中了。</p><p>那么对于当前 $k$ 的取值，答案显然是</p><script type="math/tex; mode=display">\min_{i=0}^nf(i)</script><p>最终答案就是 $k$ 的所有取值对应答案的 $\min$。这可以很容易地通过线段树维护区间加 + 区间 $\min$ 求解。</p><h2 id="F-X-Magic-Pair"><a href="#F-X-Magic-Pair" class="headerlink" title="F. X-Magic Pair"></a>F. X-Magic Pair</h2><p>给定 $(a,b)$ 和 $x$。执行如下两种操作之一若干次（可以是 $0$ 次）：</p><ol><li>将 $a$ 变为 $|a-b|$。</li><li>将 $b$ 变为 $|a-b|$。</li></ol><p>试求能否把 $a$ 或者 $b$ 变为 $x$。</p><p>多组数据。$1\leqslant a,b,x\leqslant 10^{18}$。</p><p>$\texttt{2s/512MB}$。</p><p>不失一般性，令 $a\leqslant b$。</p><p>令当前状态为 $(a_0,b_0)$。那么可以到达的状态有</p><ol><li>$(a_0,b_0)$</li><li>$(b_0-a_0,b_0)$</li><li>$(a_0,b_0-a_0)$</li><li>$(b_0-2a_0,b_0-a_0)$</li><li>$(a_0,b_0-2a_0)$</li><li>$(b_0-3a_0,b_0-2a_0)$</li></ol><p>脑补一下可以得出：如果令 $b_0=p\cdot a_0+q$，其中 $0\leqslant q\lt a_0$，那么 $a_0$ 和所有的 $p^\prime\cdot a_0+q$ 都会出现，其中 $0\leqslant p^\prime\leqslant p$。</p><p>但是如果持续操作到 $b\lt a$，那么事情会发生变化。</p><p>但是根据类欧几里得算法的相关结论，这个变化次数一定不会超过 $O(\log b)$。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天 ACM 实验室的一场原题大赛。&lt;/p&gt;
&lt;p&gt;把其中一些觉得稍微有点意思的题跳了出来写一写题解。&lt;/p&gt;
&lt;p&gt;今日题源:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A: 1426A (*800)&lt;/li&gt;
&lt;li&gt;B1: 1560F1 (*1900)&lt;/li&gt;
&lt;li&gt;B2: 1560F2 (*2100)&lt;/li&gt;
&lt;li&gt;C: 1509B (*1100)&lt;/li&gt;
&lt;li&gt;D: 1295E (*2200)&lt;/li&gt;
&lt;li&gt;E: 1608B (*1200)&lt;/li&gt;
&lt;li&gt;F: 1612D (*1600)&lt;/li&gt;
&lt;li&gt;G: 1624D (*1400)&lt;/li&gt;
&lt;li&gt;H: 1495C (*2300)&lt;/li&gt;
&lt;li&gt;I: 771A (*1500)&lt;/li&gt;
&lt;li&gt;J: 583A (*1000)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;差点就 AK 了。以及被三队暴打。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="线段树" scheme="https://github.com/Challestend/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="Codeforces" scheme="https://github.com/Challestend/tags/Codeforces/"/>
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="构造" scheme="https://github.com/Challestend/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="原题" scheme="https://github.com/Challestend/tags/%E5%8E%9F%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Pb. 3</title>
    <link href="https://github.com/Challestend/random-solution-pb-3/"/>
    <id>https://github.com/Challestend/random-solution-pb-3/</id>
    <published>2022-09-10T13:43:56.000Z</published>
    <updated>2022-10-01T07:01:42.475Z</updated>
    
    <content type="html"><![CDATA[<p>来源：<a href="https://atcoder.jp/contests/abc268/tasks/abc268_f">ABC268 F Best Concatenation</a></p><a id="more"></a><p>给定 $N$ 个只包含 $\texttt 1$ 到 $\texttt 9$ 的数字和字符 $\texttt X$ 的非空字符串 $S_1,S_2,\dots,S_N$。您需要将这 $N$ 个字符串拼接成一个大串 $T$，即确定一个长度为 $N$ 的排列 $P$ 然后令</p><script type="math/tex; mode=display">T=S_{P_1}+S_{P_2}+\cdots+S_{P_N}</script><p>在这之后，对于每一个满足 $1\leqslant i\lt j\leqslant|T|$ 的 $(i,j)$，如果 $T_i=\texttt X$ 且 $T_j$ 是数字，那么您获得与 $T_j$ 的数值相等的分数。试求您能够获得的最终分数的最大值。</p><p>$2\leqslant N\leqslant 2\times 10^5$，$\sum|S_i|\leqslant 2\times 10^5$。</p><p>$\texttt{2s/1024MB}$。</p><hr><p>也不知道我这个题意说的清不清楚。</p><p>总之就是如果前面有一个 ‘X’ 后面有一个数字那么就获得那个数字那么多的分数。然后求最大分数。</p><p>对于每个 $S_i$，令 $A_i$ 表示其中 $\texttt X$ 的数量，$B_i$ 表示其中数字的值的总和。</p><p>考虑已经确定了排列 $P$。此时若交换 $P_i$ 和 $P_{i+1}$，不难发现分数变化量为</p><script type="math/tex; mode=display">A_{P_{i+1}}B_{P_i}-A_{P_i}B_{P_{i+1}}</script><p>如果 $P$ 是最优解，上面这个变化量需要 $\leqslant 0$。整理一下得到</p><script type="math/tex; mode=display">\frac{A_{P_i}}{B_{P_i}}\geqslant\frac{A_{P_{i+1}}}{B_{P_{i+1}}}</script><p>即 $\frac{A_{P_i}}{B_{P_i}}$ 单调不增。</p><p>那么把所有 $\frac{A_i}{B_i}$ 算出来排个序即可。注意特殊处理一下 $B_i=0$ 的情况。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源：&lt;a href=&quot;https://atcoder.jp/contests/abc268/tasks/abc268_f&quot;&gt;ABC268 F Best Concatenation&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="AtCoder" scheme="https://github.com/Challestend/tags/AtCoder/"/>
    
      <category term="排序" scheme="https://github.com/Challestend/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Ct. 2</title>
    <link href="https://github.com/Challestend/random-solution-ct-2/"/>
    <id>https://github.com/Challestend/random-solution-ct-2/</id>
    <published>2022-09-05T05:18:14.000Z</published>
    <updated>2022-09-10T13:54:21.058Z</updated>
    
    <content type="html"><![CDATA[<p>来源：<a href="https://codeforces.com/contest/1725">COMPFEST 14 - Preliminary Online Mirror (Unrated, ICPC Rules, Teams Preferred)</a></p><p>21：35 开始 5h，02：35 结束。</p><blockquote><p>群友「多打打，运气好直接少走 $70$ 年弯路。」</p></blockquote><p>当然我是 1：00 就去睡觉了，剩下一个 C 交给 chr 写了。</p><p>当然之前 20：00 的 ARC 我是不可能一不小心下了一波小分的。没有这种事。</p><a id="more"></a><h2 id="A-Accumulation-of-Dominoes"><a href="#A-Accumulation-of-Dominoes" class="headerlink" title="A. Accumulation of Dominoes"></a>A. Accumulation of Dominoes</h2><p>有一个 $N\times M$ 的网格写有数字，第一行从左到右依次是 $1,2,\dots,M$，第二行是 $M+1,M+2,\dots,2M$，以此类推。试求有多少对格子四联通且数字相差恰好 $1$。</p><p>$1\leqslant N,M\leqslant 10^9$。</p><p>$\texttt{1s/256MB}$。</p><p>签到题一号。</p><p>显然 $M\gt 1$ 时答案为 $N\times(M-1)$；$M=1$ 时答案为 $N-1$。</p><h2 id="B-Basketball-Together"><a href="#B-Basketball-Together" class="headerlink" title="B. Basketball Together"></a>B. Basketball Together</h2><p>有 $N$ 个人，第 $i$ 个人的力量是 $P_i$。可以把若干个人组成队伍，这样同一个队伍里的所有人的力量都会变为队伍中力量最大的人的力量。一个队伍是合法的当且仅当其中所有人的力量之和严格大于 $D$。试求至多能组成多少个合法的队伍。</p><p>$1\leqslant N\leqslant 10^5$，$1\leqslant D,P_i\leqslant 10^9$。</p><p>$\texttt{1s/256MB}$。</p><p>签到题二号。</p><p>显然最优策略是选定一个剩下的人里面力量最大的。设这个人的力量为 $A$，那么在从剩下的人里面抽出来力量最小的 $\left\lceil\frac{D+1}{A}\right\rceil-1$ 个人凑成一个队伍即可。</p><h2 id="G-Garage"><a href="#G-Garage" class="headerlink" title="G. Garage"></a>G. Garage</h2><p>如果一个正整数 $x$ 能够被表示成 $b^2-a^2$ 的形式，其中 $1\lt a\lt b$，那么称 $x$ 是好的。试求第 $N$ 小的好的正整数。</p><p>$1\leqslant N\leqslant 10^9$。</p><p>$\texttt{1s/128MB}$。</p><p>当然，OEIS 上是能够找到这个数列的。它是 <a href="http://oeis.org/A024352">A024352</a>。</p><p>我们可以看到，有 $a_n=4+\left\lfloor\frac{4n-3}{3}\right\rfloor\;(n\gt 1)$。特殊地，$a_1=3$。</p><h2 id="M-Moving-Both-Hands"><a href="#M-Moving-Both-Hands" class="headerlink" title="M. Moving Both Hands"></a>M. Moving Both Hands</h2><p>有一张 $N$ 个点 $M$ 条边的有向图，无重边，无自环，边有边权。现在 Challestend 想要玩一个游戏：首先将他的两只手分别放在两个不同的点上。每次他可以将其中一只手沿着一条边移动到一个相邻的点。这一过程需要花费的时间等于边的边权。如果某个时刻 Challestend 的两只手停留在了同一个点上，那么结束游戏。</p><p>试求，对于所有 $2\leqslant p\leqslant N$，如果 Challestend 的左手放在 $1$ 号点上，右手放在 $p$ 号点上，那么他是否能够在有限时间内结束游戏，以及如果答案为是，结束游戏的最短用时是多少。</p><p>$2\leqslant N\leqslant 10^5$，$0\leqslant M\leqslant 2\times 10^5$，边权 $1\leqslant W_i\leqslant 10^9$。</p><p>$\texttt{1s/256MB}$。</p><p>日常花式求最短路。相当于求 $1$ 到 $p$ 的最短路，但是要求路径的前半段正常走，后半段要按照边的反方向走。</p><p>总之就是正着求一遍最短路然后倒着再求一遍就可以了。</p><h2 id="H-Hot-Black-Hot-White"><a href="#H-Hot-Black-Hot-White" class="headerlink" title="H. Hot Black Hot White"></a>H. Hot Black Hot White</h2><p>令 $\operatorname{concat}(x,y)$ 表示将 $x$ 和 $y$ 在 $10$ 进制下拼接起来得到的数，如 $\operatorname{concat}(10,24)=1024$。</p><p>给定 $N$ 个数 $A_1,A_2,\dots,A_N$，保证 $N$ 是偶数。将这 $N$ 个数分成两类，每类 $\frac{N}{2}$ 个。如果存在一个数 $Z\in[0,3)$，使得对于任意一对被分到不同类的 $A_i$ 和 $A_j$，都有</p><script type="math/tex; mode=display">\operatorname{concat}(A_i,A_j)\times\operatorname{concat}(A_j,A_i)+A_i\times A_j\not\equiv Z\pmod 3</script><p>那么这种分类方案是好的。试给出一种好的分类方案并给出对应的 $Z$。</p><p>$2\leqslant N\leqslant 10^5$，$1\leqslant A_i\leqslant 10^9$。</p><p>$\texttt{1s/256MB}$。</p><p>众所周知，一个数模 $3$ 等于它的 $10$ 进制数位和模 $3$。根据这一条性质，我们能够很容易地得出</p><script type="math/tex; mode=display">\operatorname{concat}(x,y)\equiv x+y\pmod 3</script><p>于是限制条件可以整理为</p><script type="math/tex; mode=display">A_i^2+A_j^2\not\equiv Z\pmod 3</script><p>$0,1,2$ 平方之后分别变为 $0,1,1$。那么相当于将 $N$ 个 $0$ 或 $1$ 分成两类，并且找到一个数使得它不能通过从两类中分别选出一个数相加得到。不难发现，$0$ 比较多时可以取 $2$，$1$ 比较多时可以取 $0$。</p><h2 id="C-Circular-Mirror"><a href="#C-Circular-Mirror" class="headerlink" title="C. Circular Mirror"></a>C. Circular Mirror</h2><p>一个圆上排列着 $N$ 个标记点，顺时针标记为 $1,2,\dots,N$。对于 $1\leqslant i\lt N$，$i$ 号点到 $i+1$ 号点之间的弧长为 $D_i$；$N$ 号点到 $1$ 号点之间的弧长为 $D_N$。</p><p>现在需要用 $1\sim M$ 的 $M$ 种颜色给每个标记点上色，且不能出现构成直角三角形的三个标记点颜色均相同的情况。求方案数，对 $998244353$ 取模。</p><p>$1\leqslant N\leqslant 3\times 10^5$，$2\leqslant M\leqslant 3\times 10^5$。</p><p>$\texttt{1s/256MB}$。</p><p>以下仅考虑 $N\gt 2$。</p><p>考虑直径穿过的一对标记点，如果这两个标记点颜色相同，那么用于这两个标记点的颜色就不能用于其他标记点；如果这两个标记点颜色不同，那么并没有什么其他限制。</p><p>设一共有 $K$ 对标记点被直径穿过。考虑枚举有 $i$ 对标记点颜色相同，可以很容易地得到答案为</p><script type="math/tex; mode=display">\sum_{i=0}^K{K\choose i}{M\choose i}i!(M-i)^{K-i}(M-i-1)^{K-i}(M-i)^{N-2K}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源：&lt;a href=&quot;https://codeforces.com/contest/1725&quot;&gt;COMPFEST 14 - Preliminary Online Mirror (Unrated, ICPC Rules, Teams Preferred)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;21：35 开始 5h，02：35 结束。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;群友「多打打，运气好直接少走 $70$ 年弯路。」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然我是 1：00 就去睡觉了，剩下一个 C 交给 chr 写了。&lt;/p&gt;
&lt;p&gt;当然之前 20：00 的 ARC 我是不可能一不小心下了一波小分的。没有这种事。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="Codeforces" scheme="https://github.com/Challestend/tags/Codeforces/"/>
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="构造" scheme="https://github.com/Challestend/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="思维" scheme="https://github.com/Challestend/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="Dijkstra" scheme="https://github.com/Challestend/tags/Dijkstra/"/>
    
      <category term="简单题" scheme="https://github.com/Challestend/tags/%E7%AE%80%E5%8D%95%E9%A2%98/"/>
    
      <category term="贪心" scheme="https://github.com/Challestend/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="OEIS" scheme="https://github.com/Challestend/tags/OEIS/"/>
    
      <category term="计数" scheme="https://github.com/Challestend/tags/%E8%AE%A1%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>你解锁了『牺牲者污化以撒』</title>
    <link href="https://github.com/Challestend/epiphany-tr-isaac/"/>
    <id>https://github.com/Challestend/epiphany-tr-isaac/</id>
    <published>2022-08-29T12:56:07.000Z</published>
    <updated>2023-01-07T04:28:30.873Z</updated>
    
    <content type="html"><![CDATA[<p>英文原文是 “Sacrifice”，为了匹配堕化角色解锁成就的命名格式（比如<strong>堕化以撒</strong>解锁成就 “Broken” 被译为「神伤者」）而译为「牺牲者」。</p><p>解锁方式：使用<strong>堕化以撒</strong>击败精神错乱。</p><p>初始基础属性和<strong>以撒</strong>完全相同；自带一个炸弹；自带次要主动道具 <strong>Blighted Dice</strong>。</p><a id="more"></a><h2 id="被动能力"><a href="#被动能力" class="headerlink" title="被动能力"></a>被动能力</h2><p><strong>LESS OPTIONS</strong></p><p><strong>MORE CONTROL</strong></p><p><strong>污化以撒</strong>与<strong>堕化以撒</strong>类似，只能同时持有 $8$ 个被动道具，且剧情道具和<strong>长子名分</strong>不占据被动道具槽。但与<strong>堕化以撒</strong>不同的是，<strong>污化以撒</strong>没有所有道具二选一的能力。</p><p>关于 <strong>MORE CONTROL</strong>，见 <strong>Blighted Dice</strong>。</p><h2 id="Blighted-Dice"><a href="#Blighted-Dice" class="headerlink" title="Blighted Dice"></a>Blighted Dice</h2><p><strong>Reroll a part of you</strong></p><p>道具品质 $4$。</p><p>主动道具，$1$ 充能。</p><p>无标签。</p><p>存在于以下道具池：宝箱房，隐藏房，贪婪模式商店，贪婪模式隐藏房，腐烂乞丐。</p><p>使用时，将被动道具槽内当前被选中的道具摧毁，并生成两个随机底座道具，这两个道具均为来自相同道具池内的相同品质道具，且只能拾取一个。</p><p>使用后，该道具变为 <strong>Broken Dice</strong>。</p><h2 id="Broken-Dice"><a href="#Broken-Dice" class="headerlink" title="Broken Dice"></a>Broken Dice</h2><p><strong>Ruined destiny</strong></p><p>道具品质 $4$。</p><p>主动道具，$6$ 充能。</p><p>标签：非伊甸</p><p>不在任何道具池内且为隐藏道具。</p><p>该道具可以在任意充能时使用。使用时，不消耗充能并触发 <strong>Blighted Dice</strong> 的使用效果，但只生成一个底座道具，同时移除角色的一个心之容器或两颗魂心（可能致死）。</p><p>满充能时，该道具转化为同样满充能的 <strong>Blighted Dice</strong>。</p><p>持有未满充能的该道具时，若触碰底座道具，角色会将其摧毁，然后将该道具充能至满充能。如果角色处于这种状态下，被触碰后会被摧毁的底座道具会变得半透明。触碰由 <strong>Blighted Dice</strong> 的使用效果生成的底座道具或剧情道具不会触发这一条。</p><p><strong>游魂</strong>使用该道具会立即死亡。这一条同样适用于<strong>堕化游魂</strong>，虽然在通常的游戏流程中<strong>堕化游魂</strong>无法遇到该道具，因为其没有「攻击性」标签。</p><p><strong>堕化雅各之魂</strong>能够正常使用该道具。</p><h2 id="长子名分"><a href="#长子名分" class="headerlink" title="长子名分"></a>长子名分</h2><p><strong>Better options</strong></p><p><strong>更好的选择</strong></p><p>触发 <strong>Blighted Dice</strong> 的使用效果时，生成的底座道具有 $25\%$ 变为被摧毁的道具品质 $+1$ 的道具。</p><h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><ol><li>若持有未满充能的 <strong>Broken Dice</strong>，角色总是会摧毁遇到的第一个被动底座道具。<strong>千万不要在这种情况下触碰强力道具。剧情道具可以无视这一条，但必须注意的是长子名分在这种情况下会被摧毁，尽管它在某些方面拥有类似于剧情道具的性质。</strong></li><li>若未持有<strong>长子名分</strong>，使用 <strong>Blighted Dice</strong> 摧毁道具只会得到品质相同的道具，这意味着无论摧毁多少个低品质道具都无法使得角色获得较大的提升。</li><li>使用 <strong>Blighted Dice</strong> 摧毁道具时，生成的底座道具会从被摧毁的道具出现的所有道具池中抽取，而与角色实际在哪个道具池中遇到该道具无关。以<strong>五芒星</strong>为例，即使角色通过 BOSS 掉落的形式获取该道具，将其摧毁时仍然可能会生成恶魔房道具池甚至是究极隐藏房道具池的道具。</li><li>即使一个道具已经因为被角色拾取过而被移除出道具池，它仍然可能被 <strong>Blighted Dice</strong> 生成。</li><li>BOSS 房的 $1$ 级道具中有很多提供心之容器的道具，这类道具即使被放下不会收回已经获得的心之容器。使用 <strong>Blighted Dice</strong> 摧毁一个这类道具大概率会得到另外两个提供心之容器的道具。这相当于 $6$ 格充能换取至少一个心之容器的血量，而且如果当前层存在确定不需要的其他道具则还可以牺牲它们来换取充能。重复这样做，角色可以获得大量的心之容器用于获取恶魔交易等用途。</li><li>若未持有<strong>长子名分</strong>，使用 <strong>Blighted Dice</strong> 无法得到高品质的道具，这使得<strong>污化以撒</strong>在获取高品质道具方面不如<strong>堕化以撒</strong>。因为虽然前者能够通过 <strong>Blighted Dice</strong> 产生多次而不仅仅是一次二选一，这些二选一的品质始终是确定的；而后者则有可能在虽然仅有一次的二选一中获得高品质道具。</li><li><strong>逆位审判</strong>可以在当前房间生成补货机，可以将 <strong>Blighted Dice</strong> 生成的道具重置为当前房间道具池的道具。可以在天使房/恶魔房/隐藏房使用这一策略，因为这些房间道具池的道具平均质量较高。隐藏房有时会出现天然生成的补货机，也可以加以利用。</li><li>剩余部分基本上和<strong>堕化以撒</strong>类似，如<strong>糖果心</strong>，<strong>灵魂吊坠</strong>，<strong>店长的胯袋</strong>，<strong>谷底石</strong>等道具能够给角色带来极大的属性提升；<strong>虚空</strong>，<strong>无底坑</strong>等道具能够回收利用角色不得不放下的道具等。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;英文原文是 “Sacrifice”，为了匹配堕化角色解锁成就的命名格式（比如&lt;strong&gt;堕化以撒&lt;/strong&gt;解锁成就 “Broken” 被译为「神伤者」）而译为「牺牲者」。&lt;/p&gt;
&lt;p&gt;解锁方式：使用&lt;strong&gt;堕化以撒&lt;/strong&gt;击败精神错乱。&lt;/p&gt;
&lt;p&gt;初始基础属性和&lt;strong&gt;以撒&lt;/strong&gt;完全相同；自带一个炸弹；自带次要主动道具 &lt;strong&gt;Blighted Dice&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="颓废" scheme="https://github.com/Challestend/categories/%E9%A2%93%E5%BA%9F/"/>
    
    
      <category term="以撒的结合" scheme="https://github.com/Challestend/tags/%E4%BB%A5%E6%92%92%E7%9A%84%E7%BB%93%E5%90%88/"/>
    
      <category term="MOD" scheme="https://github.com/Challestend/tags/MOD/"/>
    
      <category term="Epiphany" scheme="https://github.com/Challestend/tags/Epiphany/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Ct. 1</title>
    <link href="https://github.com/Challestend/random-solution-ct-1/"/>
    <id>https://github.com/Challestend/random-solution-ct-1/</id>
    <published>2022-08-21T00:09:41.000Z</published>
    <updated>2022-08-28T02:46:39.679Z</updated>
    
    <content type="html"><![CDATA[<p>来源：<a href="https://codeforces.com/contest/1715">Codeforces Round #816 (Div. 2)</a></p><p>为什么是 Ct 呢因为这是一整场比赛的题解。</p><p>为什么 tag 这么多呢因为一道题对应两三个 tag。</p><a id="more"></a><h2 id="A-Crossmarket"><a href="#A-Crossmarket" class="headerlink" title="A. Crossmarket"></a>A. Crossmarket</h2><p>有一个 $n\times m$ 的网格。Stanley 要从 $(1,1)$ 移动到 $(n,m)$，Megan 要从 $(n,1)$ 移动到 $(1,m)$。两个人可以在 $1$ 个单位时间内移动到自己当前所在格子四联通的格子，而且可以任意决定自己的出发时间。除此之外，Megan 会在经过的每个格子上留下传送门，Stanley 可以在 $1$ 个单位时间内在任意两个传送门之间移动。求两人到达各自终点的合计用时最少是多少。</p><p>多组数据。$1\leqslant n,m\leqslant 10^5$。</p><p>$\texttt{1s/256MB}$。</p><p>样例解释已经很明显地告诉了我们答案是 $2(n+m-2)-\max\{n-1,m-1\}$。</p><p>时间复杂度 $O(1)$，空间复杂度 $O(1)$。</p><h2 id="B-Beautiful-Array"><a href="#B-Beautiful-Array" class="headerlink" title="B. Beautiful Array"></a>B. Beautiful Array</h2><p>构造一组 $a_1,a_2,\dots,a_n$ 使得</p><script type="math/tex; mode=display">\sum_{i=1}^n\left\lfloor\frac{a_i}{k}\right\rfloor=b</script><script type="math/tex; mode=display">\sum_{i=1}^na_i=s</script><p>或判断无解。</p><p>多组数据。$1\leqslant n\leqslant 10^5$，$1\leqslant k\leqslant 10^9$，$0\leqslant b\leqslant 10^9$，$0\leqslant s\leqslant 10^{18}$。$\sum n\leqslant 10^5$。</p><p>$\texttt{1s/256MB}$。</p><p>显然有解当且仅当</p><script type="math/tex; mode=display">bk\leqslant s\leqslant bk+n(k-1)</script><p>构造也很简单。</p><p>时间复杂度 $O(n)$，空间复杂度 $O(n)$。</p><h2 id="C-Monoblock"><a href="#C-Monoblock" class="headerlink" title="C. Monoblock"></a>C. Monoblock</h2><p>给定序列 $a_1,a_2,\dots,a_n$。$m$ 次单点修改，每次修改后求</p><script type="math/tex; mode=display">\sum_{1\leqslant l\leqslant r\leqslant n}g(l,r)</script><p>其中 $g(l,r)$ 表示 $a_l,a_{l+1},\dots,a_r$ 的极长连续段数量。</p><p>$1\leqslant n,m\leqslant 10^5$，$1\leqslant a_i\leqslant 10^9$。</p><p>$\texttt{1s/256MB}$。</p><p>可以将一次修改 $(x,v)$ 拆分为：删去包含位置 $x$ 的区间的贡献；将 $a_x$ 修改为 $v$；重新统计包含位置 $x$ 的区间的贡献。</p><p>甚至初始状态也可以拆分成 $n$ 次修改，第 $i$ 次为 $(i,a_i)$。</p><p>然后就……维护一下每个极长连续段的左右端点再写个线段树啥的数据结构查询一下就可以了。</p><p>懒得写了。</p><p>时间复杂度 $O(n\log n)$，空间复杂度 $O(n)$。</p><h2 id="D-2-doors"><a href="#D-2-doors" class="headerlink" title="D. 2+ doors"></a>D. 2+ doors</h2><p>设有一序列 $a_1,a_2,\dots,a_n$。有 $m$ 条限制，第 $i$ 条形如 $a_{u_i}\vee a_{v_i}=x_i$，其中 $\vee$ 表示按位或。</p><p>求一组字典序最大的解。输入数据保证至少存在一组解。</p><p>$1\leqslant n\leqslant 10^5$，$0\leqslant m\leqslant 2\times 10^5$，$1\leqslant u_i,v_i\leqslant n$，$0\leqslant x_i\lt 2^{30}$。</p><p>$\texttt{1.5s/256MB}$。</p><p>2-SAT。</p><p>时间复杂度 $O(n\log x_i)$，空间复杂度 $O(n+m)$。</p><h2 id="E-Long-Way-Home"><a href="#E-Long-Way-Home" class="headerlink" title="E. Long Way Home"></a>E. Long Way Home</h2><p>有一张 $n$ 个点 $m$ 条边的无向图，边有边权。每次可以沿着一条给定边移动，消耗的时间等于这条边的边权；也可以从点 $u$ 直接跳跃到点 $v$，消耗时间 $(u-v)^2$。</p><p>对于每个点 $i$，求在至多进行 $k$ 次跳跃的前提下，从点 $1$ 到点 $i$ 的最少用时。</p><p>$2\leqslant n\leqslant 10^5$，$1\leqslant m\leqslant 10^5$，$1\leqslant k\leqslant 20$，无重边，可能有自环，$1\leqslant$ 边权 $\leqslant 10^9$。</p><p>$\texttt{3s/256MB}$。</p><p>令 $f(u,i)$ 表示至多进行 $i$ 次跳跃，到达点 $u$ 的最少用时。那么显然 $f(u,0)$ 可以一遍 Dijkstra 求出。</p><p>设当前已经求出了 $f(u,i)$。令 $g(u,i)$ 表示表示至多进行 $i$ 次跳跃，且最有一次移动恰好是一次跳跃，到达点 $u$ 的最少用时。有</p><script type="math/tex; mode=display">g(u,i+1)=\min_{v=1}^n\left\{f(v,i)+(u-v)^2\right\}</script><p>这部分可以一遍斜率优化 DP 求出。</p><p>在这之后，建立一个超级源点 $0$，向其他每个点连一条边权为 $0$ 的边。令点 $u$ 此时的 <code>dist</code> 为 $g(u,i+1)$，用 Dijkstra 更新一遍从点 $0$ 出发的最短路，此时点 $u$ 最终求得的最短路长度就是 $f(u,i+1)$ 的值。</p><p>时间复杂度 $O(k(m\log n+n))$，空间复杂度 $O(n+m)$。</p><h2 id="F-Crop-Squares"><a href="#F-Crop-Squares" class="headerlink" title="F. Crop Squares"></a>F. Crop Squares</h2><p><strong>这是一道交互题。</strong></p><p>在平面直角坐标系中有一个矩形，四个顶点分别为 $(0,0)$，$(0,m)$，$(n,0)$ 和 $(n,m)$。其中有一个平行于坐标轴的 $1\times 1$ 的正方形被标记了。这个正方形被矩形完全包含。</p><p>每次询问，您可以给出一个面积严格为正的简单多边形，交互库会返回这个多边形与被标记正方形的并的面积。这个多边形不需要被矩形完全包含。</p><p>您需要在至多 $5$ 次询问内给出被标记正方形的左下角坐标。</p><p>$1\leqslant n,m\leqslant 100$。</p><p>$\texttt{1s/256MB}$。</p><p>神仙题。</p><p>只需要两次询问。</p><p>第一次询问给出一个下图中的蓝色多边形：</p><p><img src="https://espresso.codeforces.com/f8fbbde4a353dfda4f4d7b0dc70b75a7fda9d3ff.png" alt=""></p><p>其中红色区域是要求的被标记正方形，绿色区域是二者的并。</p><p>若被标记正方形左下角坐标为 $(x,y)$，绿色区域面积为 $S$，有</p><script type="math/tex; mode=display">1-S=\frac{1}{2}\left[\frac{m-y}{m}+\frac{m-y-1}{m}\right]=1-\frac{2y+1}{2m}</script><p>可以解得</p><script type="math/tex; mode=display">y=mS-\frac{1}{2}</script><p>第二次询问给出一个下图中的蓝色多边形：</p><p><img src="https://espresso.codeforces.com/8974338f17a7555e4d686e2d53d2732b0ef5d2e7.png" alt=""></p><p>令绿色区域面积为 $T$，同理有</p><script type="math/tex; mode=display">x=nT-\frac{1}{2}</script><p>时间复杂度 $O(n+m)$，空间复杂度 $O(1)$。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源：&lt;a href=&quot;https://codeforces.com/contest/1715&quot;&gt;Codeforces Round #816 (Div. 2)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么是 Ct 呢因为这是一整场比赛的题解。&lt;/p&gt;
&lt;p&gt;为什么 tag 这么多呢因为一道题对应两三个 tag。&lt;/p&gt;
    
    </summary>
    
      <category term="口胡" scheme="https://github.com/Challestend/categories/%E5%8F%A3%E8%83%A1/"/>
    
    
      <category term="树状数组" scheme="https://github.com/Challestend/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="Codeforces" scheme="https://github.com/Challestend/tags/Codeforces/"/>
    
      <category term="杂题" scheme="https://github.com/Challestend/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="构造" scheme="https://github.com/Challestend/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="思维" scheme="https://github.com/Challestend/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="观察性质" scheme="https://github.com/Challestend/tags/%E8%A7%82%E5%AF%9F%E6%80%A7%E8%B4%A8/"/>
    
      <category term="2-SAT" scheme="https://github.com/Challestend/tags/2-SAT/"/>
    
      <category term="Dijkstra" scheme="https://github.com/Challestend/tags/Dijkstra/"/>
    
      <category term="斜率优化" scheme="https://github.com/Challestend/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Pb. 2</title>
    <link href="https://github.com/Challestend/random-solution-pb-2/"/>
    <id>https://github.com/Challestend/random-solution-pb-2/</id>
    <published>2022-08-04T09:45:57.000Z</published>
    <updated>2022-08-06T22:50:10.138Z</updated>
    
    <content type="html"><![CDATA[<p>来源：2022 杭电杯 Day 6 1011 Find different。</p><a id="more"></a><p>设有一个长度为 $l$ 的序列 $x_0,x_1,\dots,x_{l-1}$，其中 $0\leqslant x_i\lt m$。两种操作：</p><ol><li>$x_i\leftarrow (x_i+1)\bmod m$</li><li>$x_i\leftarrow x_{(i+1)\bmod n}$</li></ol><p>每次操作时，所有 $x_i$ 同时发生变化。</p><p>两个序列 $x_0,x_1,\dots,x_{l-1}$ 和 $y_0,y_1,\dots,y_{l-1}$，如果 $x$ 能够通过若干次操作变为 $y$，那么称 $x$ 和 $y$ <strong>本质相同</strong>；否则称 $x$ 和 $y$ <strong>本质不同</strong>。</p><p>$(0,2,2)$ 和 $(0,1,0)$ 是本质相同的，因为：</p><ol><li>进行操作 $1$：$(0,2,2)\rightarrow(1,0,0)$</li><li>进行操作 $2$：$(1,0,0)\rightarrow(0,0,1)$</li><li>进行操作 $2$：$(0,0,1)\rightarrow(0,1,0)$</li></ol><p>对于所有 $1\leqslant l\leqslant n$，求出长度为 $l$ 的所有序列中有多少种本质不同的序列。模 $998244353$。</p><p>$n,m\leqslant 10^5$。</p><hr><p>令 $f(n)$ 为长度为 $n$ 且满足题目要求的序列的数量。</p><p>Burnside 引理：集合 $X$ 在群 $\langle G,\times\rangle$ 作用下的等价类数量等于 $G$ 中所有元素作用在集合 $X$ 上时的不动点数量的算术平均值。</p><p>令 $X$ 为全体长度为 $n$ 的序列构成的集合；$G=\{(x,y)\mid 0\leqslant x\lt n,0\leqslant y\lt m\}$，其中 $(x,y)\in G$ 表示进行 $x$ 次操作 $2$ 和 $y$ 次操作 $1$。显然两种操作的相对顺序不影响。</p><p>定义 $G$ 上的乘法 $\times$ 为</p><script type="math/tex; mode=display">(x_1,y_1)\times(x_2,y_2)=(x_1+x_2\bmod n,y_1+y_2\bmod m)</script><p>显然 $\langle G,\times\rangle$ 是一个群。</p><p>考虑在 $(x,y)$ 作用下 $X$ 中的不动点的数量。此时为了方便，把 $x=0$ 看作 $x=n$，$y=0$ 看作 $y=m$。进行 $x$ 次操作 $1$ 会把原序列划分为 $(n,x)$ 个环（简单回路），每个元素移动到对应环上下一个元素的位置上；进行 $y$ 次操作 $2$ 会把所有元素在模 $m$ 意义下加 $y$。如果进行完所有操作之后序列仍保持不变，必是每个元素移动到的位置上原本的数值恰好比自身大 $y$。按照这样推下去，环上的每个元素会比自身大</p><script type="math/tex; mode=display">k\cdot\frac{n}{(n,x)}y\quad(k\geqslant 1)</script><p>那么这就要求</p><script type="math/tex; mode=display">m\Bigm|\frac{n}{(n,x)}y</script><p>于是我们就可以写出答案的表达式</p><script type="math/tex; mode=display">\begin{aligned}&f(n)\\=&\sum_{x=1}^n\sum_{y=1}^m\left[m\Bigm|\frac{n}{(n,x)}y\right]m^{(n,x)}\\=&\sum_{x=1}^n\sum_{y\mid m}\left[\frac{m}{y}\Bigm|\frac{n}{(n,x)}\right]m^{(n,x)}\\=&\sum_{x=1}^n\sum_{y\mid m}\left[y\Bigm|\frac{n}{(n,x)}\right]m^{(n,x)}\\=&\sum_{x=1}^n\left(\frac{n}{(n,x)},m\right)m^{(n,x)}\\=&\sum_{d=1}^n\sum_{x=1}^n\left[(n,x)=d\right]\left(\frac{n}{d},m\right)m^d\\=&\sum_{d\mid n}\sum_{x=1}^{n/d}\left[\left(\frac{n}{d},x\right)=1\right]\left(\frac{n}{d},m\right)m^d\\=&\sum_{d\mid n}\varphi\left(\frac{n}{d}\right)\left(\frac{n}{d},m\right)m^d\\=&\sum_{ij=n}\varphi(i)(i,m)m^j\end{aligned}</script><p>时间复杂度 $O(n\log n)$。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源：2022 杭电杯 Day 6 1011 Find different。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="数论" scheme="https://github.com/Challestend/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="群论" scheme="https://github.com/Challestend/tags/%E7%BE%A4%E8%AE%BA/"/>
    
      <category term="Burnside 引理" scheme="https://github.com/Challestend/tags/Burnside-%E5%BC%95%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>OI Team Meating：2022-07-24</title>
    <link href="https://github.com/Challestend/oi-team-meating-220724/"/>
    <id>https://github.com/Challestend/oi-team-meating-220724/</id>
    <published>2022-07-24T15:08:32.000Z</published>
    <updated>2022-08-06T22:50:06.143Z</updated>
    
    <content type="html"><![CDATA[<p>感觉阿烜一天比一天蛤蟆了。</p><a id="more"></a><p>预定 11：00 到，结果因为一些预想外的事情耽误了 1.5h+，到的时候已经 11：40 了。</p><p>地点是主席家的会议室。</p><p>中午一起去吃了华莱士。于是阿潮下午的时候真的喷射出来了。</p><p>然后下午打了一个下午的红警，虽然因为我完全不会于是毫无游戏体验。</p><p>然后他们似乎开了一局三国杀，然而这个我也是一点都不会。</p><p>聚会体验极差（绝望</p><p>于是这个时候拥有专车接送的主席就回家了。剩下的我们分两路打车去万达吃晚饭。</p><p>然后不知道为什么又回到了去年那个绕了一圈结果去吃火锅的地方。结果真的去吃了火锅。</p><p>吃完晚饭离开万达之后，不知道为什么又回到了去年那个玩剧本杀的地方。</p><blockquote><p>（忘了是谁了）「完了，时间线轮回了。」</p></blockquote><p>于是这次我们不打算开剧本杀然后选了一款名为《鲜血盟约》的桌游。</p><p>结果打开说明书就被超级长的游戏规则震撼到了于是不打算玩了。</p><p>于是阿烜拿来一盘大富翁。</p><p>一开始我玩得顺风顺水，第一个命运格就抽到了「所有人给我 $600$ 元」这样一张牌。</p><p>反观旁边的阿陶，碰到的所有命运格要不就是交钱，要不就是直接进监狱。</p><p>然后是对面的阿烜，那个入狱格就像家一样踩了一遍又一遍。</p><blockquote><p>（忘了是谁了）「进狱系男孩了属于是。」</p></blockquote><p>游戏进行到中盘，R 和我积攒了大量的资本。这个时候阿陶在他的《天目路》上成功地建造了第二栋房子。</p><p>于是我就一不小心踩上去了。于是我就要给阿陶 $3000$ 元。</p><p>也就是这个时候我的局势开始急转直下，不知不觉间之前积攒的资本<strong>全 部 木 大</strong>。</p><p>然后阿陶甚至在他的《天目路》上建起了第三栋房子，踩一脚 $7500$ 元。</p><p>这个时候我的所有土地都已经抵押出去了，然后我手上也没有钱了，然后我现在就站在《天目路》前面一个格子。</p><blockquote><p>我「来个 $1$ 送我走吧。」</p></blockquote><p>一扔。出 $1$ 了。</p><p><strong>一 代 小 资 本 家 的 陨 落。</strong></p><p>后续的话就是，那个《天目路》存在某种引力一样，让其他所有人都情不自禁地往上踩了一脚（同时也几乎送走了其他所有人，除了曾经的大资本家 R 和苟延残喘了很长时间结果踩到一个扣除 $2000$ 元的格子暴毙的 zhuoer），让阿陶几乎一夜翻盘，最终以碾压的优势赢得了胜利。</p><p><strong>风 水 轮 流 转。</strong></p><p>好吧其实也不是，只不过觉得再这么耗下去肯定是阿陶赢于是就这样了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感觉阿烜一天比一天蛤蟆了。&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://github.com/Challestend/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="同学聚会" scheme="https://github.com/Challestend/tags/%E5%90%8C%E5%AD%A6%E8%81%9A%E4%BC%9A/"/>
    
      <category term="颓废" scheme="https://github.com/Challestend/tags/%E9%A2%93%E5%BA%9F/"/>
    
  </entry>
  
  <entry>
    <title>Logic Puzzle Pack</title>
    <link href="https://github.com/Challestend/logic-puzzle-pack/"/>
    <id>https://github.com/Challestend/logic-puzzle-pack/</id>
    <published>2022-07-11T02:15:27.000Z</published>
    <updated>2022-07-24T15:07:36.067Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://store.steampowered.com/bundle/3331/Logic_Puzzle_Pack/">Steam 页面</a></p><p>没错这次是一个系列一共五款游戏。</p><p>这篇文章多少会涉及到一些关于一些基本游戏机制的剧透……不过这种程度应该还好吧。</p><blockquote><p>块「这是扫雷？」</p></blockquote><a id="more"></a><p><img src="/img/20220711101627_1.jpg" alt="Hexcells 1-1"></p><p>如图所示，这的确是一款有些类似扫雷的游戏。</p><p><img src="/img/20220711101806_1.jpg" alt="Hexcells 3-2"></p><p><img src="/img/20220711101815_1.jpg" alt="Hexcells 3-4"></p><p>不过不只是扫雷。</p><p>如同很多类似的解谜游戏一样，这里面所有的谜题都是能够在不依靠瞎蒙乱猜的前提下完成的……大概罢。</p><p>一开始，尤其是第一作 Hexcells 的时候，这个游戏看起来还十分的小清新。但是到了第三作 Hexcells Infinite，事情就开始变得诡异起来了。</p><p><img src="/img/20220711101947_1.jpg" alt="Hexcells Infinite 6-3（这么点条件能做？）"></p><p><img src="/img/20220711101936_1.jpg" alt="Hexcells Infinite 6-5（地狱绘图）"></p><p>觉得必须有一点要指出来的是，这游戏的机制是，每次将一个小格染色的时候，颜色对不对会直接有反馈，并且如果要拿到满星评价的话，整个过程中不能失误一次（手抖也不行）（后期有些关卡会允许至多一次的失误）。</p><p>我个人认为这是不好的设计。很多时候一不小心手都一下可能满星评价就没了。然后如果还想拿到满星评价的话，就必须要从头再玩一遍，或者把最终的图案截图下来然后对着这个一个一个点过去。</p><p>我觉得可以借鉴一下隔壁 <a href="https://store.steampowered.com/app/642650/Peppers_Puzzles/">Pepper’s Puzzles</a> 的设计：染色的时候无法直接知道这个格子的颜色是否正确。只有把所有格子全部染色之后，才能知道是否所有格子的颜色都是正确的。如果有不正确的格子也不会有提示，需要回过头去修改直到所有格子颜色正确。</p><p>这样做虽然可能会出现一个失误导致满盘皆输的情况，不过总体而言肯定要比现在这样过分强调一遍全对的机制要好。</p><p>关于后两作 SquareCells 和 CrossCells……那就是完全不同的两个游戏了。读者可自行尝试。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://store.steampowered.com/bundle/3331/Logic_Puzzle_Pack/&quot;&gt;Steam 页面&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;没错这次是一个系列一共五款游戏。&lt;/p&gt;
&lt;p&gt;这篇文章多少会涉及到一些关于一些基本游戏机制的剧透……不过这种程度应该还好吧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;块「这是扫雷？」&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="颓废" scheme="https://github.com/Challestend/categories/%E9%A2%93%E5%BA%9F/"/>
    
    
      <category term="解谜" scheme="https://github.com/Challestend/tags/%E8%A7%A3%E8%B0%9C/"/>
    
  </entry>
  
  <entry>
    <title>随笔题解 Pb. 1</title>
    <link href="https://github.com/Challestend/random-solution-pb-1/"/>
    <id>https://github.com/Challestend/random-solution-pb-1/</id>
    <published>2022-06-15T08:02:49.000Z</published>
    <updated>2022-09-10T13:48:00.624Z</updated>
    
    <content type="html"><![CDATA[<p>前几天《2022 年安徽省机器人大赛本科组》的 K 题，也就是最后一题。</p><p>虽然听说都是原题，不过我懒得去找了。</p><a id="more"></a><p>给定一张 $n$ 个节点 $2n-3$ 条边的无向图，保证这些边形成了一个正 $n$ 边形的三角剖分。求这张图的一个最小点覆盖。</p><p>$n\leqslant 10^5$。</p><p><img src="/img/202206151614.png" alt="样例"></p><p>对于上面这个样例来说，答案为 $\{1,3,5,7\}$。</p><hr><p>考虑多边形内部的某一个三角形，不难发现这三个节点中，至多有一个不在点覆盖内。</p><p>如果确定了某一个节点不在点覆盖内，那么与该节点相邻的所有三角形，它们的其它节点则必须在点覆盖内。</p><p>考虑对于每个三角形建立一个方点。</p><p><img src="/img/202206151615.png" alt="差不多像这样"></p><p>如果两个三角形公用一条边，就在两个对应的方点间连一条边。</p><p><img src="/img/202206151616.png" alt="差不多像这样"></p><p>考虑一下这张新图。如果其中出现环，说明多个三角形共用了一个节点，而且这个节点必须要严格在多边形内部才可以。因此新图不存在环。</p><p>同时显而易见地，新图是联通的。因此新图是一棵树。</p><p>那么下一步，考虑与某个节点相邻的所有三角形，这些三角形对应的方点一定形成了新图中的一条简单路径。</p><p>于是问题转化成，给定一棵树和若干条简单路径，选择尽可能多的路径（对应原图中选择尽可能多的点不在点覆盖内），使得这些被选择的路径互不相交（对应点覆盖的性质）。</p><p>这应该是一道树上 DP，但是我调不出来了 :(</p><p>读者可自行尝试（光速逃</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天《2022 年安徽省机器人大赛本科组》的 K 题，也就是最后一题。&lt;/p&gt;
&lt;p&gt;虽然听说都是原题，不过我懒得去找了。&lt;/p&gt;
    
    </summary>
    
      <category term="口胡" scheme="https://github.com/Challestend/categories/%E5%8F%A3%E8%83%A1/"/>
    
    
      <category term="图论" scheme="https://github.com/Challestend/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>ヤマふだ！　にごうめ</title>
    <link href="https://github.com/Challestend/yamafuda/"/>
    <id>https://github.com/Challestend/yamafuda/</id>
    <published>2022-04-05T13:32:57.000Z</published>
    <updated>2022-04-07T14:27:39.767Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://store.steampowered.com/app/1727520?snr=5000_5100___primarylinks">Steam 页面</a></p><p>听说最近杀戮尖塔更新了，而且是大更新。</p><p>把之前有一个 mod 角色加进来了，忘了名字不过记得是一个如果有一张牌正好在手牌正中央的话，打出去会有加成的角色。有一说一之前玩的时候就觉得这个角色综合质量极高，说成是官方角色都不奇怪。</p><p>而且似乎还吸收了 DownFall 的内容，不过没怎么玩过所以不评价。</p><p>扯得有点远，总之就是一个轻松愉快的爬山(?)游戏。</p><p>你这爬山怎么一边爬一边打牌啊（小声</p><p>想起来有句话：你这打架怎么掷骰子啊（</p><p>刚打完第三关，可能对游戏还理解不深（光速逃</p><a id="more"></a><p>以下说明以日语描述为准。</p><p>这游戏日语文本基本上没几个汉字全是平假名，子供向游戏确认。</p><p><img src="/img/20220405214444_1.jpg" alt="为什么没有光敏性癫痫（错乱"></p><p><img src="/img/20220405213329_1.jpg" alt="标题画面"></p><p><img src="/img/20220405214544_1.jpg" alt="战斗画面（截自第三关）"></p><p>「あと２２ｍ」是说这座山的当前区段还剩 22m。也可以理解成怪的血条还剩 22 点。</p><p>怪的左边有一个直角三角形和数字 6，表示当前区段的当前小区段的危险度是 6。可以理解成怪的下一次行动打出 6 点伤害。</p><p>画面最下端就是手牌，有些牌上面会带着「のぼる」「まもる」，分别代表这张牌向上攀登的距离和对自身的防护。也可以理解成打出多少伤害和获得多少格挡。</p><p>如果带着这两个关键字就说明这张牌是一张攀登牌，一回合只能打出一张攀登牌，且打出之后会直接与怪进行攻击判定，然后结束回合。</p><p>攻击判定时，因为怪不会防御，玩家角色侧的伤害是打满的。玩家角色的格挡自然就是减免伤害。</p><p>左上角的红心是血条。蓝色石头相当于分数，每打出一点伤害就获得一颗小石头，相当于一点分数。也可以消耗以换取被动道具。</p><p>当然游戏中还会有亿些其他的机制，读者可自行探索。</p><p><img src="/img/20220405211141_1.jpg" alt="牌库中的一张卡牌"></p><p>感觉这游戏有一点就是，保留字太多了。就比如说上面这张截图中就出现了「こうしん」「おちつき」「わくわく」「やまぶみ」「きらきら」「のびのび」「てつなぎ」「おもいだす」「いちごうぶん」这样九个保留字。</p><p>哦等等，「てつなぎ」的描述里引用了「もういっぽ」，这样一来就是十个了。</p><p>可能本意是为了让卡面上写出来的东西尽可能的少，毕竟这游戏的整体风格也不适合往卡面上塞一大堆文字性的描述。</p><p>不过缺点就是记不住这些保留字都是啥效果（</p><p>好吧可能玩多了就记住了（</p><p>不过还是总结了以下上述十个关键字的意思，不打算自己玩游戏或者想看看的话可以点开看看（</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">こうしん：每打出 1 次，所有同名卡牌获得 +1/+1（指伤害/格挡 +1）。使用非同名卡牌时清零。</span><br><span class="line">おちつき X：下一回合格挡加成 +X（X 表示层数）。</span><br><span class="line">わくわく X：整场战斗伤害加成 +X。</span><br><span class="line">やまぶみ：打出伤害时获得分数 ×2.</span><br><span class="line">きらきら X：斩杀（可参考杀戮尖塔的定义）时最大生命 +X。</span><br><span class="line">のびのび X：每 1 个回合不打出，获得 +X/+X，不影响同名卡牌。打出后复原。</span><br><span class="line">てつなぎ X：伤害加成以 X 倍计算。</span><br><span class="line">おもいだす：从弃牌堆中拿取一张牌放回手牌。</span><br><span class="line">いちごうぶん：每场战斗只能打出一次，打出后不会进入弃牌堆。</span><br><span class="line">もういっぽ X：当前回合伤害加成 +X。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://store.steampowered.com/app/1727520?snr=5000_5100___primarylinks&quot;&gt;Steam 页面&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;听说最近杀戮尖塔更新了，而且是大更新。&lt;/p&gt;
&lt;p&gt;把之前有一个 mod 角色加进来了，忘了名字不过记得是一个如果有一张牌正好在手牌正中央的话，打出去会有加成的角色。有一说一之前玩的时候就觉得这个角色综合质量极高，说成是官方角色都不奇怪。&lt;/p&gt;
&lt;p&gt;而且似乎还吸收了 DownFall 的内容，不过没怎么玩过所以不评价。&lt;/p&gt;
&lt;p&gt;扯得有点远，总之就是一个轻松愉快的爬山(?)游戏。&lt;/p&gt;
&lt;p&gt;你这爬山怎么一边爬一边打牌啊（小声&lt;/p&gt;
&lt;p&gt;想起来有句话：你这打架怎么掷骰子啊（&lt;/p&gt;
&lt;p&gt;刚打完第三关，可能对游戏还理解不深（光速逃&lt;/p&gt;
    
    </summary>
    
      <category term="颓废" scheme="https://github.com/Challestend/categories/%E9%A2%93%E5%BA%9F/"/>
    
    
      <category term="Rogue" scheme="https://github.com/Challestend/tags/Rogue/"/>
    
      <category term="卡牌游戏" scheme="https://github.com/Challestend/tags/%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F/"/>
    
      <category term="爬山" scheme="https://github.com/Challestend/tags/%E7%88%AC%E5%B1%B1/"/>
    
  </entry>
  
  <entry>
    <title>一道日常题的题解</title>
    <link href="https://github.com/Challestend/a-daily-problem/"/>
    <id>https://github.com/Challestend/a-daily-problem/</id>
    <published>2022-04-03T07:18:07.000Z</published>
    <updated>2022-04-05T14:00:46.517Z</updated>
    
    <content type="html"><![CDATA[<p>今天校内某比赛的一道题。</p><p>感觉挺有意思的于是来写一篇题解。</p><p>题面甚至是纯英文，怕不是防 AK 用的。</p><p>其实我是可以 AK 的，不过剩下三道题（其中还有一道大模拟懒得写了）。</p><p><del>顺便一提，其实我睡过去了一整个上午，打开比赛页面的时候已经是比赛开始五个小时了（</del></p><a id="more"></a><p>给定一棵 $n$ 个点的树，边有边权。从 $1$ 号节点开始，每次等概率随机选择一个相邻节点走过去，到了叶节点就停下来。这里叶节点定义为度数为 $1$ 的节点。保证根节点不满足这个定义。</p><p>走过一条边需要消耗的时间等于这条边的边权。求期望多长时间后能停下来。答案对 $10^9+7$ 取模。</p><p>$1\leqslant n\leqslant 10^5$。边权范围不重要（反正不爆 <code>int</code>）。</p><p>设 $E(u)$ 表示从 $u$ 号节点出发的期望停止时间。根据期望的线性性，我们可以得到</p><script type="math/tex; mode=display">E(u)=\frac{1}{\operatorname{deg}u}\sum_{(u,v)}(E(v)+w(u,v))</script><p>如果 $u$ 号节点已经是叶节点，那么 $E(u)=0$。</p><p>当然，这在形式上完全可以视作一个 $n-r$ 个变量和 $n-r$ 个方程构成的线性方程组，其中 $r$ 表示叶节点的数量。</p><p>但是考虑到本题的数据范围，这样做的时间复杂度太大了。我们需要换一个思路。</p><p>首先我们梳理一下思路（非形式化地）：</p><blockquote><p>考虑到，如果节点 $u$ 的所有子节点都是叶节点，那么 $E(u)$ 只会取决于 $E(f(u))$；而且一定是 $E(f(u))$ 的一次函数。</p><p>如果节点 $u$ 存在一个不是叶节点的节点 $v$，但是 $v$ 的所有子节点都是叶节点，那么 $E(v)$ 也是 $E(u)$ 的一次函数，我们就可以在 $E(u)$ 的式子中出现的 $E(v)$ 替换成 $E(u)$。这样整个式子中的待求量还是只会剩下 $E(u)$ 和 $E(f(u))$，也就是说 $E(u)$ 可以表示成 $E(f(u))$ 的一次函数。</p><p>如此递推到 $1$ 号节点，那么实际上我们需要求解的只有一个关于 $E(1)$ 的一次方程。</p></blockquote><p>形式化地：</p><p>如果一个节点 $u$ 满足</p><script type="math/tex; mode=display">E(u)=\alpha(u)E(f(u))+\beta(u)</script><p>其中 $f(u)$ 表示 $u$ 的父节点，且 $\alpha(u),\beta(u)$ 只与 $u$ 有关而与其他节点无关，那么我们称 $u$ 是可表示的。</p><p>显然叶节点都是可表示的。</p><p>如果一个节点 $u$ 的所有子节点均是可表示的，那么</p><script type="math/tex; mode=display">\begin{aligned}&E(u)\\=&\frac{1}{\operatorname{deg}u}\sum_{(u,v)}(E(v)+w(u,v))\\=&\frac{E(f(u))+w(u,f(u))}{\operatorname{deg}u}+\frac{1}{\operatorname{deg}u}\sum_{(u,v)\wedge v\neq f(u)}(E(v)+w(u,v))\\=&\frac{E(f(u))+w(u,f(u))}{\operatorname{deg}u}+\frac{1}{\operatorname{deg}u}\sum_{(u,v)\wedge v\neq f(u)}(\alpha(v)E(u)+\beta(v)+w(u,v))\end{aligned}</script><p>整理可得</p><script type="math/tex; mode=display">\left(1-\frac{1}{\operatorname{deg}u}\sum_{(u,v)\wedge v\neq f(u)}\alpha(v)\right)E(u)=\frac{E(f(u))+w(u,f(u))}{\operatorname{deg}u}+\frac{1}{\operatorname{deg}u}\sum_{(u,v)\wedge v\neq f(u)}(\beta(v)+w(u,v))</script><p>即 $u$ 是可表示的。</p><p>于是我们可以容易地注意到，所有节点均是可表示的，且 $\alpha,\beta$ 均是可求解的。</p><p>考虑 $1$ 号节点，有</p><script type="math/tex; mode=display">E(1)=\alpha(1)E(f(1))+\beta(1)</script><p>这里 $f(1)=0$，即 $E(f(1))=0$，我们就可以得到</p><script type="math/tex; mode=display">E(1)=\beta(1)</script><p>而 $E(1)$ 正是本题要求的答案。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天校内某比赛的一道题。&lt;/p&gt;
&lt;p&gt;感觉挺有意思的于是来写一篇题解。&lt;/p&gt;
&lt;p&gt;题面甚至是纯英文，怕不是防 AK 用的。&lt;/p&gt;
&lt;p&gt;其实我是可以 AK 的，不过剩下三道题（其中还有一道大模拟懒得写了）。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;顺便一提，其实我睡过去了一整个上午，打开比赛页面的时候已经是比赛开始五个小时了（&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="随机游走" scheme="https://github.com/Challestend/tags/%E9%9A%8F%E6%9C%BA%E6%B8%B8%E8%B5%B0/"/>
    
      <category term="图论" scheme="https://github.com/Challestend/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="数学期望" scheme="https://github.com/Challestend/tags/%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
</feed>
