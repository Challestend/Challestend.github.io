{"pages":[{"title":"","text":"您可能访问了错误的网址 回到博客主页","link":"/404.html"},{"title":"关于","text":"您好的呢 qwq 这里是就读 AHU 的 SD ACMer 关原美夜（化名）的呢 qwq 写成日语的话是関原みや的呢 qwq 当然您也可以叫我 Challestend 或者 CLT 的呢 qwq 左边的头像是 AI 生成的呢 qwq 您还可以在以下网站中找到我的呢 qwq： Luogu LibreOJ UniversalOJ NowCoder HDOJ HydroOJ Codeforces AtCoder GitHub BiliBili Zhihu","link":"/about/index.html"},{"title":"分类","text":"","link":"/categories/index.html"},{"title":"更新日志","text":"直角，这是这篇 blog 的更新日志。 不过我不是一个考虑周全的人，之前 9 月份搭起博客时，我并没有考虑到这些。因而，之前的很多更新的具体时间已经无从知晓。 2018-09-27 建站。 （略） 2018-12-13 令 theme-next-pace 的加载进度条的颜色温和了一点。 将 hexo-symbols-count-time 的字数和时间统计替换成了精确数值。 减少了侧边栏和网易云外链的宽度。 2018-12-14 修复了在 404 页面点击「回到博客主页」会打开新标签页的问题。 2018-12-19 将字体改为了 Arima Madurai。 2018-12-28 新增了访客计数。 2019-01-07 不知道什么时候字体炸了，然后 xjb 捣鼓了一波终于修好了。 2019-01-08 然后一大早发现它又炸了。告辞。不修了。然后传上去发现又好了。 2019-01-16 新增了代码折叠。 新增了 SnoWY 的 blog。 更新了 asuldb 的 blog 地址。 字体又炸了。 2019-03-06 新增了 ctz 的 blog。 点击鼠标时加入了一些奇怪的特效。 2019-03-16 把之前那些奇怪的特效删了，然后加入了一些更奇怪的。 换了个歌单。 2019-03-17 把歌单扔了。 blog 的名字改成了 Chromium。 开始更新潮语。 2019-03-18 因为 Valine 评论的用户名可以随便改，甚至可以用别人的名字评论，迫于机房惨案势力，换成了 Gitalk 评论。 虽然忘了说，不过代码折叠没了。 2019-03-29 真的不更潮语了。 2019-05-25 新增了一些颓废娱乐项目。双击鼠标左键开始/暂停/继续，方向键移动。您可以在这里获得更好的体验。 2019-08-02 删除了颓废娱乐项目。 2019-08-20 新 blog 搭好了，本站停止更新。 2020-05-17 最后发现还是 Github+Hexo 天下第一，本站复活。 话说我现在养成了中文与英文之间打空格的习惯，不过以前的文章还是不改了吧。 删除了 /theme/next/docs 文件夹。反正肯定是一堆派不上用场的文档。 将主题更换为了 icarus。可能会出锅。 2020-05-21 更新了第一篇颓废相关的文章。终于就连这个 blog 也要沦为颓废向 blog 了吗。 2020-05-29 本站正式开展副业：《花花的奇妙冒险》民间 Wiki。具体请查看顶端「LightNovel」标签。 2021-07-01 更新了关于页面，加入了一些乱七八糟不知所云的电波诗句和头像更替史。 2021-08-23 可能是因为换了电脑疏于配置，blog 出现了一些非常令人去世的问题。就是那种整个 repository 的内容被替换成了另外一个的玄学问题。 到最后也不知道为什么就修好了。应该吧。 2022-02-06 加入了 Table of Contents。一开始还以为需要安装些什么插件然后再配置些什么文件，结果搜索引擎找了大半天发现我这个主题自带一个 toc。好家伙舍本逐末了属于是。 不过对于某些 toc 较长的文章来说可能其实这个 toc 并没有真正起到方便跳转的作用，于是就没有了。 当然因为我比较懒，比较靠前的文章就没有 toc 了。 2023-01-07 本站正式更名为「关原美夜的妙妙屋」。 To Be Continued","link":"/log/index.html"},{"title":"花花的奇妙冒险","text":"简介《花花的奇妙冒险》是 SLYZ 2018 级著名作家 Tommy_clas（为了方便，同时与替身「主席」区别开来，我们称其为「浩楠哥」）撰写的长篇小说。创作初期曾被命名为《阿潮的奇妙冒险》。 是《JOJO 的奇妙冒险》第三部的同人创作，世界观亦继承该作品的世界观。 目前正在绝赞连载中。最新话为 第六章：东京的星期日（其二）。 关于名称的日语翻译，我的个人见解是《かりんの奇妙な冒険》。 登场人物浩楠哥曾经写过一个设定文档。 需要注意的是，本 Wiki 只会收录已登场人物。 人物名 初登场 状态 花京院 兰 第一章（其一） 有更新 汤米·克拉斯 第一章（其一） 没有更新 阿苏兰·德布尔 第一章（其一） 没有更新 卓尔·吉尼尔斯 第二章（其一） 没有更新 茶畑 势之 第四章（其一） 没有更新 世佳 阳爱 第四章（其一） 有更新 世佳太太 第四章（其一） 没有该页面 小鸟游 秀美 第四章（其一） 没有更新 强奸犯胖子 第四章（其二） 没有更新 世佳 大川 第四章（其三） 没有该页面 飞车党大叔 第五章（其二） 没有更新 简·皮埃尔·波鲁那雷夫 第六章（其二） 新页面 杂项 「女士们，先生们，欢迎登上中国石岚市飞往美国纽约市的 A114514 航班，祝你们有一个愉快的旅途。」 恶 臭 航 班。 这么臭的航班还是直接坠毁了算了罢（无慈悲 第二章的卓尔被主角团打败之后报了名字，于是加入了主角团。 第五章的飞车党大叔被主角团打败之后没有报名字，于是被抓起来了。 这个故事告诉我们，自我介绍要报名字，尤其是面对主角团的时候。 只见花花俯下上半身，双臂在胸前交叉，手指自由地张开着，而汤米则在她的身旁双手叉腰，抬头挺胸，立在花花的另一侧。 出现了！JOJO 立！ QQ 群内： 陶「所以日本人说的是什么语言啊。」 浩楠哥「语言冲突在这里可以忽略。」 浩楠哥「JOJO 里面就忽略了。」 zhuoer「全宇宙不是都说日语吗？」","link":"/karin-no-kimyou-na-bouken/index.html"},{"title":"标签","text":"","link":"/tags/index.html"},{"title":"阿苏兰·德布尔","text":"设定文档内容替身名：物理火星（Physic Mars） 力量：C 速度：A 射程：C 持续力：B 精度：C 成长性：B 替身能力：随意改变触碰到的物体的沸点。 描述：物理火星属于人形替身，替身主体颜色为橙红色，体型偏瘦小，头部戴有金属口罩和实验室护目镜，手臂为机械臂。拥有一般的力量和极快的速度，能够随意改变触碰到的物体的沸点，使其固体、液体「气化」或气体「固化」。 注 1：物理火星对物体沸点的改变几乎是瞬时的，但是物体各个部位沸点的变化是一个扩散的过程，当物体的大小比本体小时，沸点的改变几乎是瞬时的，但当物体的大小比本体大时，物体则会以触碰点为中心慢慢气化。例如让替身完全气化一块橡皮仅需不到一秒的时间，完全气化一栋小屋则需要较长的时间。 注 2：「气化」和「固化」不同于物理学上定义的「气化」、「液化」、「凝华」，是指某个物体整体的「气化」，例如人体气化后得到的是「人体气」，而不是各种有机物的混合气体，但如果操作对象是纯净物，则会按照物理学的定义变化。 注 3：「气化」是永久影响被触碰物体的，除非本体解除该物体的沸点变化。 出身根据姓名结构推断应该是外国人，但是你为什么要闲着没事跑到中国来教中学啊。 阅读过史比特瓦根财团的内部资料，应该不简单。 外貌梳着奇怪的鞭条式发型，皮肤黝黑。 性格特点身为物理老师还挺有威严的。 不准逛街，逛街的都给我失败！ 人际关系学生：花京院 兰，汤米·克拉斯。 世界和平在某个奇怪的世界线中，阿苏兰用他的替身能力把所有人都扬了（指气化掉）。 当然现在这段已经被删掉了。 鳖「好，很好，非常好。」 在第二章（其二）中把 DIO 的肉芽气化之后赶进了灯泡通上电给烧死了。可见其替身能力多么【不是「强大」的某个词汇】（或者说恐怖）。","link":"/karin-no-kimyou-na-bouken/asulan-debuer/index.html"},{"title":"飞车党大叔","text":"设定文档内容替身名：旅游手册（Travel Brochure） 力量：E 速度：E 射程：C 持续力：A 精度：E 成长性：E 替身能力：潜入到任意一个可采集（听到或看到）的信息里，使采集信息后的人被强行植入虚假记忆，使本人认为虚假的记忆真的发生过。 出身第五章（其二）中的自我介绍： 「我原本是美国东海岸的一个飞车党队员……几天前，一个叫做 Lee 的人给了我这种牛掰的能力，他还给了我一大笔钱，想让我刺杀照片里的这几个人。」 照片是卓尔提供的。 外貌留着络腮胡，手臂上纹着骷髅头的啤酒肚大叔。 性格特点没啥好分析的（狗头 人际关系试图刺杀：汤米·克拉斯，阿苏兰·德布尔。 被洗脑：Lee 大人。 可采集的信息 「我已经把字都气化了，既然没有可以阅读的对象，那么你的能力就一无是处了！」阿苏兰说道。 「糟糕！」旅游手册急忙钻出，想要躲回天花板里。","link":"/karin-no-kimyou-na-bouken/feichedangdashu/index.html"},{"title":"花京院 兰（华兰）","text":"设定文档内容替身名：牵牛花（Morning Glory） 力量：D 速度：C 射程：A 持续力：A 精度：B 成长性：B 替身能力：生成长有牵牛花的绿色藤蔓，捆绑目标或在不同的牵牛花之间传递声音。 描述：牵牛花属于远距离操作型替身，初始无人型，成长后拥有人型，外形为藤蔓和牵牛花包裹的女性形象，替身的头上长有一朵金色的牵牛花，只有金色的牵牛花受损才会导致本体受伤。射程极长，藤蔓最远能够延伸到距离本体 100m 处，但是力量较弱，因此适合用来进行情报收集或其它辅助功能。 注 1：藤蔓被破坏后依然能够再生，且对本体没有伤害，但短时间内破坏过多藤蔓会大幅度削弱牵牛花藤蔓的延伸能力，本体也会进入疲惫状态。 注 2：拥有人形后的牵牛花可以使藤蔓缠绕形成分身，分身拥有和替身一样的功能，但是不能延长射程，且分身的头顶的牵牛花不是金色的。 注 3：藤蔓比绳索坚韧，比钢缆脆弱。 出身根据姓氏推断应该是日本人，但是你为什么要闲着没事跑到中国来读中学啊。 根据浩楠哥独家机密情报，兰的真名是「华兰」，是中国人。 外貌总结一下就是黑长直，碧绿色眼珠。 性格特点第一章（其一）中提到： 兰的父母从兰的小时候开始就一直在外地工作，她从小就是在亲戚的照顾中长大的，因为教育的问题，兰一直都有着孤僻的性格，并且不喜欢与人交流，面对别人的搭讪常常以冷眼相对，再加上她清秀的面庞和飘逸的长发，在以前的学校里，她向来以「冷艳美人」而著称。 第一章（其二）中有过如下发言： 「说实话，比起终将死亡的『宿命』，我认为超越死亡的『孤独』才是最可怕的。」 我也总结不出啥来了，您细品吧。 人际关系同学：汤米·克拉斯。 老师：阿苏兰·德布尔。 与「箭」第一章（其一）中提到兰觉醒替身能力是在手被划伤之后。第三章中本人认为这与「箭」有关。 但是连帽衫超棒的好吗第三章中有如下描写： ……和身穿绿色短裙与白色连帽衫的兰站在候机厅的门口等待着，…… 虽然不知道为什么但是超想看。 一定超美的吧？对吧对吧？ 花京院兰乔瑟夫·乔斯达说众所周知，花京院兰的身世一直是一个谜。近年来，学者们进行了 $\\alpha^{\\alpha}!$ 中猜测，最后发现…… 她实际上就是乔瑟夫·乔斯达！ 文字论证： 兰是女性；乔瑟夫（指龙舌兰姑娘）也是女性。 兰是绿瞳；乔瑟夫在动画里也是绿瞳。 兰能够操纵藤蔓；乔瑟夫也能够操纵藤蔓。 兰的替身的力量，速度，持续力分别是 D，C，A；乔瑟夫也是如此。 兰决定踏上旅程之后的第一场战斗在飞机上；乔瑟夫决定踏上旅程之后的第一场战斗（指灰塔战）也在飞机上。 兰是主角；乔瑟夫在 JOJO 第二部里也是主角。 数字论证： 花京院兰一共 $29$ 画。 乔瑟夫·乔斯达一共 $48$ 画。 其中： 48\\sim 2\\times 2\\times 2\\times 2\\times 3\\sim 2(2+2+2+3)\\sim 29Q.E.D 杂项现在被叫做「花花」。 从第六章（其一）开始，替身拥有了人形。","link":"/karin-no-kimyou-na-bouken/huajingyuan-lan/index.html"},{"title":"茶畑 势之","text":"设定文档内容替身名：闪电天鹅（Lightning Swan） 力量：A 速度：B 射程：A 持续力：B 精度：B 成长性：A 替身能力：自身产生任意大小的电场或给予物体任意强度的电场。 描述：闪电天鹅属于人形替身，其主体颜色为深蓝与纯白相间，体表刻有闪电花纹，面部被两个反向伸展的天鹅羽翼遮住，只露出嘴部与颔部。闪电天鹅既能够自己产生任意大小的电压，也能够使触摸到的物体变成任意电压的带电体（不论该物体是否导电）。 注 1：闪电天鹅能够改良接触物体的导电性，令其变成电压大小任意的电源，但并不能改良电流所经过的物体的导电性。 注 2：只要拥有导电性足够良好的导体，闪电天鹅就可以在导体上发电，使电流传到导体所到的任何地方（射程 A）。 注 3：被触碰后的物体会一直保持给定电压，并且电压无论怎么损耗都不会降低，除非本体死亡或解除给定的变化。 注 4：当闪电天鹅触碰到的物体过于庞大时，他只能让该物体的一部分变成电源， 出身似乎是一位能力优秀的日本码农。 从市中心的繁华程度和走廊的复杂程度来看，他所在的公司规模似乎不小。 外貌有着一头深栗色的短发，短短的刘海分散在额头两边，冷静的目光和没有任何表情的脸庞仿佛是在宣示他有着一个平凡的性格。 性格特点虚假的绅士（指吉良吉影）。 真正的绅士（指茶畑势之）。 因为人物形象塑造得过于正面，且相关情节细节描写极其丰富，浩楠哥收到了来自黑恶势力的要挟： 「下一集再不改就抢电脑了（」 人际关系邻居：世佳太太，世佳 大川。 照顾：世佳 阳爱。 应该不只是认识吧：小鸟游 秀美。 确定不是吉良吉影！在第四章（其一）中，对于茶畑势之的描写给人一种极其强烈的吉良吉影的既视感。他似乎过着像吉良吉影一样的机械生活。 浩楠哥曾在 QQ 群中钦定其为炼铜带师。 关于「小学女生失踪案件」，陶表示「js 是不是太铜了，我更喜欢 jc」。 结果后面一口气出现两个 jc，然后「小学女生失踪案件」还是没变。 陶清白为民除害（指强奸犯胖子）说。 我的名字叫（ry 「我的名字叫茶畑势之，今年 25 岁，住在东京市的公寓一带，未婚。我在附近的写字楼上班，每天下午 4:30 准时到附近的中学接隔壁世佳夫妇的女儿世佳阳爱回家，世佳夫妇每天工作到很晚才回来，晚饭和照顾一般都由我代理，我不抽烟，酒仅止于浅尝。每天辅导世佳写完作业后会陪她玩到晚上八点，直到世佳夫妇把她接回去，我每天都睡够八个小时，睡前，我一定喝一杯超市买到的新鲜牛奶，然后做二十分钟的力量运动，最后冲一个热水澡，上了床，马上熟睡，一觉到天亮，决不把疲劳和压力留到第二天，然后再步行送小世佳上学。认识我的人都说我善良又可靠。」 「我只是要说，我这个人别无奢求，只希望能够『和小世佳平静地』活下去。『金钱』、『名誉』，是我最不喜欢和人计较的。因为，那只会为小世佳带来『麻烦』和『敌人』……小世佳是我的天使，如果有人敢对我的天使动手的话，不论是谁我都不会原谅。也就是说，如果小世佳出现了『麻烦』和『敌人』，在对方下手前……就会碰到这个！」 「（召唤出替身）这是我的替身，闪电天鹅Lightning Swan，它将和我一起守护我的天使……（被打断）」","link":"/karin-no-kimyou-na-bouken/chatian-shizhi/index.html"},{"title":"简·皮埃尔·波鲁那雷夫","text":"原作设定请参考萌娘百科相关条目，而且要注意是第三部结束而第五部还未开始时的状态。","link":"/karin-no-kimyou-na-bouken/j-p-polnareff/index.html"},{"title":"强奸犯胖子","text":"设定文档内容替身名：饿狼（The Wolf） 力量：B 速度：B 射程：A 持续力：B 精度：C 成长性：D 替身能力：可以在本体周围大范围内进行侦查游走，并随时可以让本体在原位置和替身所在位置之间来回传送。 出身不重要。 外貌身穿深绿色大衣，戴着厚厚的眼镜，头发肮脏地蜷曲成一团。 性格特点死肥宅获得了替身能力于是逍遥法外。","link":"/karin-no-kimyou-na-bouken/qiangjianfanpangzi/index.html"},{"title":"世佳 阳爱","text":"出身似乎是一位普通的日本中学生。 外貌身穿红黑色校服，背着棕色书包，留着乌黑色长发，长发上系着一条深黄色发带。 性格特点似乎比较腼腆，比较谦逊。 人际关系母亲：世佳太太。 父亲：世佳 大川。 同学：小鸟游 秀美。 被照顾：茶畑 势之。 「这家餐厅的天花板什么时候装饰了这么多牵牛花？」在第六章（其二）中疑似看到了兰的替身。 也许阳爱实际上刚刚觉醒替身。 或者说这个阳爱实际上是黄色节制。","link":"/karin-no-kimyou-na-bouken/shijia-yangai/index.html"},{"title":"汤米·克拉斯","text":"设定文档内容替身名：主席（Chairman） 力量：B 速度：B 射程：C 持续力：D 精度：B 成长性：C 替身能力：真理认定，在替身射程内改变或创造一个真理，但仅作用于射程范围内，一次只能改变或创造一个真理。 描述：主席是人形替身，射程范围是以本体为半径 10m 内，体表为灰黑色，花纹类似于西装，且胸前系有红色的领带，眼部由白色反光镜面组成，具有不错的力量和速度。 注 1：真理认定可以违反实际存在的某条真理，例如说「金刚石的硬度很低」之后，射程范围内的所有金刚石都会变得和果冻一样软。 注 2：真理认定所作用的事物如果在射程之外就不会受到影响，比如「太阳是颗行星」就不会生效，因为太阳在射程之外。 注 3：真理认定技能可以随时取消，再发动新的真理认定时，之前定下的真理就会失效。 注 4：真理认定对未知成分的物质无效，对大部分替身也无效，但对本体有效，例如「白金之星的力量非常弱」无法生效。 出身第三章中有过如下发言： 「没想到我竟然会因为这种事情返回美国。」 因此应该是美国人。 外貌金发碧眼的壮汉。 性格特点十分开朗热情，甚至到了现充的地步。 人际关系同学：花京院 兰。 老师：阿苏兰·德布尔。 主席 TQL！（破音）浩楠哥在 QQ 群内给出过如下案例： 现在有一个盒子，里面放着 3 个红球。显然摸出黄球的概率是 0%。主席！真理认定！摸出黄球的概率是 100%！然后就能从盒子里摸出一个黄球。 总而言之就是不知道强到哪里去了。 浩楠哥还曾在 QQ 群中说过： 主席的能力对具体事物（像是物理常数）有效，对抽象概念（像是数学定理）无效。通过修改物理常数可以达到改变距离定义的效果，但是必须要距离两端的物体都在射程范围内。 第二章（其一）中定下了「人的大脑在后背部」的真理，从而在被爆头后幸免于死。然而有一说一把大脑移动到后背也太猎奇了吧。","link":"/karin-no-kimyou-na-bouken/tangmi-kelasi/index.html"},{"title":"小鸟游 秀美","text":"出身似乎是一位普通的日本中学生。 外貌身穿红黑色校服，背着棕色书包，留着紫色短发。 性格特点十分自来熟，而且似乎有些任性。 人际关系同学：世佳 阳爱。 应该不只是认识吧：茶畑 势之。","link":"/karin-no-kimyou-na-bouken/xiaoniaoyou-xiumei/index.html"},{"title":"卓尔·吉尼尔斯","text":"设定文档内容替身名：精确射手（DM Shooter） 力量：C 速度：B 射程：A 持续力：C 精度：A 成长性：C 替身能力：使用来复枪进行精准射击，并且射出的子弹可以选择性地「穿过」目标并实现精准打击。 描述：精确射手属于人形替身，替身的主体颜色为黄绿色与灰色相间，头戴鸭舌帽与射击用护耳，眼部佩戴橙黄色墨镜，使用的是外形类似于 M14-DMR 的精准射手步枪，发射出去的子弹可以根据需要进行隐形来穿过障碍物，从而起到打击目标的作用。此外，替身也可以将步枪交给本体使用。 注 1：虽然子弹可以选择性地穿过障碍物，但是替身是无法看见障碍物的后方的。 注 2：精确射手发射的子弹只有能够选择性穿透物体的特点，既不能产生爆炸，也不能中途改变弹道。 注 3：精确射手拥有接近人类极限的极长射程（2km），并且精度极高。 出身第二章（其二）中卓尔的自我介绍： 「我的名字是卓尔·吉尼尔斯，年龄 23 岁，是一个来自德国的前射击运动员，三年前，我因为比赛失利而放弃了射击运动员的职业，周游世界来缓解心情，当我来到美国的纽约时，有一天，我走在一个人很少的小巷里，背部突然被『箭』贯穿，然后我就昏迷了，等我醒来以后，我就已经被洗脑了，只不过我还拥有那一段时间的记忆。」 外貌只提到身着蓝色冲锋衣。 性格特点从第二章中不打探一下主角团的替身能力就贸然进攻似乎可以看出十分武断。 人际关系曾试图刺杀：汤米·克拉斯，阿苏兰·德布尔。 被洗脑：Lee 大人。 热成像仪因为不能透视为了隔墙打人买了个热成像仪。 Lee 大人第二章（其二）中有过如下心理活动： 「让你也成为伟大的 Lee 大人的梦想的牺牲品吧！」 其中的 Lee 大人可能指的是某李姓金牌教练黑幕。 第三章中阿苏兰提到「一百年后，也就是距今三十年前，DIO 他复活了」「DIO 在与六位勇敢的替身使者的战斗中被打败，但是他的追随者依然存在」。 那么 Lee 大人很有可能就是 DIO 追随者的首领。","link":"/karin-no-kimyou-na-bouken/zhuoer-jiniersi/index.html"}],"posts":[{"title":"浅谈基于转置原理的多项式多点求值算法","text":"考虑一个经典的问题。给定 $n$ 次多项式 F(x)=\\sum_{i=0}^nf_ix^i和 $n+1$ 个点值 $a_0,a_1,\\dots,a_n$。您需要对于每个 $k$，求出 $b_k=F(a_k)$，对 $998244353$ 取模。 据说以前这种问题都是采用多项式取模的方法。但是现在我们有新科技了。 本篇文章将会以我个人认为十分通俗易懂的方式来详细地讲解这种新科技。 参考文献略。 线性算法若一个算法可以被看作是方阵 $A$，输入向量 $\\mathbf v$，输出向量 $A\\mathbf v$，则称该算法为线性算法。 比如说，FFT 就是一个线性算法，其对应的方阵为 \\begin{bmatrix} 1&1&1&\\cdots&1\\\\ 1&\\omega_n^1&\\omega_n^2&\\cdots&\\omega_n^n\\\\ 1&\\omega_n^2&\\omega_n^4&\\cdots&\\omega_n^{2n}\\\\ \\vdots&\\vdots&\\vdots&\\ddots&\\vdots\\\\ 1&\\omega_n^n&\\omega_n^{2n}&\\cdots&\\omega_n^{n^2}\\\\ \\end{bmatrix}转置原理对于一个线性算法，设其对应的方阵 $A$ 满足 A=E_1E_2\\cdots E_n其中 $E_i$ 均为初等矩阵。则有 A^{\\mathrm T}=E_n^{\\mathrm T}\\cdots E_2^{\\mathrm T}E_1^{\\mathrm T}这里稍微复习一下，初等矩阵指的是只进行一次初等变换的矩阵。这里的初等变换包括 $v_i\\leftarrow v_i\\cdot k$ $v_i\\leftarrow v_i+v_j\\cdot k$ 如果 $E_i$ 对应第一种初等变换，它的转置就是自身；如果是第二种，转置后 $i$ 和 $j$ 互换，即对应的初等变换变为 $v_j\\leftarrow v_j+v_i\\cdot k$。 这里的关键点在于，如果 $A\\mathbf v$ 比较好求，而 $A^{\\mathrm T}\\mathbf v$ 相对难求，我们可以将求 $A\\mathbf v$ 的过程分析出来，把每一步转置然后倒序执行，就可以求出 $A^{\\mathrm T}\\mathbf v$ 了。 多项式乘积的转置考虑两个多项式 F(x)=\\sum_{i=0}^nf_ix^i和 G(x)=\\sum_{i=0}^mg_ix^i令它们的乘积为 H(x)=\\sum_{i=0}^{n+m}h_ix^i考虑计算这一乘积的算法。为了便于理解，我们将 $G(x)$ 视作常量，$F(x)$ 和 $H(x)$ 视作变量，考虑一个作用在如下 $(n+1)+(n+m+1)=2n+m+2$ 维列向量上的线性算法 \\begin{bmatrix} f_0\\\\ f_1\\\\ f_2\\\\ \\vdots\\\\ f_n\\\\ h_0\\\\ h_1\\\\ \\vdots\\\\ h_{n+m} \\end{bmatrix}初始时 $f_i$ 已经有值，而 $h_i$ 为 $0$。算法流程如下： 循环变量 $i\\leftarrow 0\\dots n+m$ 循环变量 $j\\leftarrow \\max(0,i-m)\\dots\\min(n,i)$ 执行 $h_i\\leftarrow h_i+f_j\\times g_{i-j}$ 考虑这一过程的转置，其流程如下： 循环变量 $i\\leftarrow n+m\\dots 0$ 循环变量 $j\\leftarrow \\min(n,i)\\dots\\max(0,i-m)$ 执行 $f_j\\leftarrow f_j+h_i\\times g_{i-j}$ 相当于在已知 $H(x)$ 和 $G(x)$ 的情况下求解 $F(x)$。其中 f_k=\\sum_{i-j=k}h_ig_j=\\sum_{i+(m-j)=m+k}h_ig^{\\mathrm R}_{m-j}=\\sum_{i+j=m+k}h_ig^{\\mathrm R}_j其中 $g^{\\mathrm R}_i=g_{m-i}$，即 $G$ 的所有系数翻转过来。 于是我们可以如下定义多项式乘积的转置 [x^k](H\\times^{\\mathrm T}G)=[x^{m+k}](H\\times G^{\\mathrm R})不难发现，如果 $F(x)$ 是 $n$ 次多项式，$G(x)$ 是 $m$ 次多项式，那么 $(F\\times^{\\mathrm T}G)(x)$ 会是 $n-m$ 次多项式。 正文令 A=\\begin{bmatrix} 1&a_0^1&a_0^2&\\cdots&a_0^n\\\\ 1&a_1^1&a_1^2&\\cdots&a_1^n\\\\ 1&a_2^1&a_2^2&\\cdots&a_2^n\\\\ \\vdots&\\vdots&\\vdots&\\ddots&\\vdots\\\\ 1&a_n^1&a_n^2&\\cdots&a_n^n\\\\ \\end{bmatrix} \\qquad\\varphi=\\begin{bmatrix} f_0\\\\ f_1\\\\ f_2\\\\ \\vdots\\\\ f_n \\end{bmatrix} \\qquad\\beta=\\begin{bmatrix} b_0\\\\ b_1\\\\ b_2\\\\ \\vdots\\\\ b_n \\end{bmatrix}我们有 A\\varphi=\\beta考虑 \\gamma=A^{\\mathrm T}\\varphi=\\begin{bmatrix} 1&1&1&\\cdots&1\\\\ a_0^1&a_1^1&a_2^1&\\cdots&a_n^1\\\\ a_0^2&a_1^2&a_2^2&\\cdots&a_n^2\\\\ \\vdots&\\vdots&\\vdots&\\ddots&\\vdots\\\\ a_0^n&a_1^n&a_2^n&\\cdots&a_n^n\\\\ \\end{bmatrix} \\begin{bmatrix} f_0\\\\ f_1\\\\ f_2\\\\ \\vdots\\\\ f_n \\end{bmatrix} =\\begin{bmatrix} c_0\\\\ c_1\\\\ c_2\\\\ \\vdots\\\\ c_n \\end{bmatrix}不难发现 c_k=\\sum_{i=0}^nf_ia_i^k定义生成函数 C(x)=\\sum_{i=0}^n\\frac{f_i}{1-a_ix}则 c_k=[x^k]C(x)这里 $C(x)$ 可以通过经典的分治 NTT 求解。令 C_{l,r}(x)=\\frac{P_{l,r}(x)}{Q_{l,r}(x)}对于叶子节点 $[i,i]$，执行 P_{i,i}(x)=f_iQ_{i,i}(x)=1-a_ix对于内部节点 $[l,r]$，执行 P_{l,r}(x)=P_{l,m}(x)Q_{m+1,r}(x)+P_{m+1,r}(x)Q_{l,m}(x)Q_{l,r}(x)=Q_{l,m}(x)Q_{m+1,r}(x)注意到，$Q_{l,r}(x)$ 实际上和 $f_i$ 没有任何关系，我们可以把它们视作常量。然后把剩下的 $(n+1)^2$ 个 $P_{l,r}(x)$ 全部塞进一个向量里，那么上述分治过程就可以视作是一个针对该向量的线性算法。 我们可以写得再清晰一些，比如说像下面这样 P_{l,r}(x)\\leftarrow P_{l,r}(x)+P_{l,m}(x)\\times Q_{m+1,r}(x)P_{l,r}(x)\\leftarrow P_{l,r}(x)+P_{m+1,r}(x)\\times Q_{l,m}(x)以及最后一步的 C(x)\\leftarrow C(x)+P_{0,n}(x)\\times Q_{0,n}^{-1}(x)那么转置之后，第一步自然就是 B_{0,n}(x)\\leftarrow B_{0,n}(x)+F(x)\\times^{\\mathrm T}Q_{0,n}^{-1}(x)想不明白为什么吗？我也想不明白。 在这之后，从上向下分治，对于内部节点 $[l,r]$，执行 B_{l,m}(x)\\leftarrow B_{l,m}(x)+B_{l,r}(x)\\times^{\\mathrm T}Q_{m+1,r}(x)B_{m+1,r}(x)\\leftarrow B_{m+1,r}(x)+B_{l,r}(x)\\times^{\\mathrm T}Q_{l,m}(x)最终对于叶子节点 $[i,i]$，$B_{i,i}(x)$ 必定会是一个 $0$ 次多项式，其仅有的一个常数项系数就是我们要求的 $b_i$ 了。 当然，如果多项式次数和点值数量不对等也很容易处理，用 $0$ 补齐即可。 请问您要来点板子题吗 qwq？ 结语这个算法好在哪里： 常数小：std::vector 也不必太过担心被卡常。 代码实现难度小：只要能够完全理解整个算法流程，便能够十分迅速且正确地写出代码。","link":"/polynomial-multipoint/"},{"title":"ICPC 2022 Regional 合肥站游记","text":"今天本来会有一场大物的考试。还好我因为打 ICPC 申请了免考不然就要在大物考场上丢人了。 前 3h 写出来 6 题。最后 2h 我在写一道数学题，SHX 在写一道数据结构题，结果都没有写出来。 本来以为写出来 7-8 题可以混一块金牌的。结果赛后一查排行榜，8 题 42 队，7 题 67 队，结果金牌只有 35 块。 也就是说无论如何都没有大金牌了 /kk 最后 rank 72 拿了一块银牌。 这么说来上周的 CCPC 其实是最有希望拿金牌的。如果我能够少浪费一时间的话。 害群之马竟是我自己 /kk 我写出来的题A. Welcome to USTC给定一个字符串 $S$。保证 $S$ 中恰好包含 $\\mathtt{U},\\mathtt{S},\\mathtt{T},\\mathtt{C}$ 四个大写英文字母各一个，其他字符均为小写英文字母，且 $\\mathtt{USTC}$ 在 $S$ 中作为子序列出现。 每次操作可以交换 $S$ 中的两个相邻字符。现要让 $\\mathtt{USTC}$ 在 $S$ 中作为子串出现，试求最小操作次数。 $4\\leqslant |S|\\leqslant 10^4$。 $\\mathtt{1s/256MB}$。 设 $\\mathtt{U},\\mathtt{S},\\mathtt{T},\\mathtt{C}$ 的下标依次为 $a,b,c,d$，答案显然为 (b-a-1)+2(c-b-1)+(d-c-1)时间复杂度 $O(|S|)$，空间复杂度 $O(|S|)$。 G. Game Plan您有一个集合 $S$。初始时 $S=\\{0\\}$。现在您可以进行 $t$ 次操作。在第 $i$ 次操作中，您可以在如下两项中任选其一： $S\\leftarrow S\\cap\\{a_i\\}$ $S\\leftarrow S\\cap\\{b_i\\}$ （原题中还有一个值域上界，不过现在看来这个不重要） 试求 $t$ 次操作后 $\\operatorname{mex}(S)$ 的最大值。 $1\\leqslant n\\leqslant 10^9$，$1\\leqslant t\\leqslant 10^6$，$1\\leqslant a_i,b_i\\leqslant n$。其中 $n$ 为值域上界。 $\\mathtt{1s/256MB}$。 考虑建图。$n+1$ 个，依次标号为 $1,2,\\dots,n+1$。对于每一个 $i$，我们连一条边 $(a_i,b_i)$。 现在问题转化为，在这张图上，对于每条边标记其中一个端，问未被标记过的标号最小的的标号最大是多少。 考虑到，如果一个连通块是一棵树，那么我们不得不放弃其中的一个不标记。那么显然放弃标号最大的是最优策略。 但是在树的基础上，再随便增加一条边，我们都能够做到标记这个连通块中的所有。 以上。时间复杂度 $O(t\\log t)$，空间复杂度 $O(t)$。 H. Jackpot黑板上写有 $n$ 个正整数 $k+1$。每次操作您可以选择一个大于 $1$ 的整数，令其为 $x$，然后它有 $\\frac{1}{x-1}$ 的概率变为 $x-1$，$\\frac{1}{x-1}$ 的概率变为 $x-2$……$\\frac{1}{x-1}$ 的概率变为 $1$。 您的目的是让所有数都变为 $1$。试求期望操作次数。对 $10^9+7$ 取模。 多组数据。$1\\leqslant n\\leqslant 10^9$，$2\\leqslant k\\leqslant 10^3$。$T\\leqslant 10^3$。 $\\mathtt{1s/256MB}$。 容易发现这些数都是两两独立的。令 $E(i)$ 表示将一个数从 $i$ 变到 $1$ 的期望操作次数，可以直接得出答案等于 $n\\cdot E(k+1)$。 $E(i)$ 也很容易计算。我们可以进行如下的预处理 E(i)=1+\\frac{1}{i-1}\\sum_{1\\leqslant j\\lt i}E(j)时间复杂度 $O(k^2+T)$，空间复杂度 $O(k)$。 SHX 写出来的题B. Genshin Impact您可以释放一种火魔法。这种火魔法每 $y$ 秒可以释放一次，每次释放有 $\\frac{1}{p}$ 的成功率，如果成功，会使得敌人在接下来的 $x$ 秒内进入燃烧状态。如果敌人已经处于燃烧状态，状态的剩余时间会被重置为 $x$ 秒。 现在您会一直不停地对着同一个血量无限的敌人释放这种火魔法。试求当经过的时间趋向于正无穷大时， \\frac{\\text{敌人处于燃烧状态的时间}}{\\text{总时间}}的值（……大概收敛吧）。 多组数据。$1\\leqslant x,y,p\\leqslant 10^3$。$T\\leqslant 10^3$。 Special Judge：相对误差不超过 $10^{-6}$。 $\\mathtt{1s/256MB}$。 一看到题面很快啊，我就有了如下的一个看上去很真（大嘘）的想法 \\frac{1}{p}\\frac{\\min(x,y)}{y}这个东西显然是不对的。因为如果 $x\\gt y$，上一次成功了这一次没有成功那么燃烧状态会持续。 不过算了，反正 SHX 写出来了。 无穷会把我们在有限的世界里积累起来的直觉打得粉碎。 ——関原みや J. Produce the Problems给定 $n,a,b$ 和两个长度为 $n$ 的序列 $d,c$。您需要构造 $n$ 个字符串 $S_1,S_2,\\dots,S_n$，其中 $S_i$ 需要恰好包含 $d_i$ 个 $\\mathtt{D}$ 和 $c_i$ 个 $\\mathtt{C}$。并且，如果令 $S=S_1S_2\\cdots S_n$，$S$ 中不能出现超过 $a$ 个连续的 $\\mathtt{D}$ 或超过 $b$ 个连续的 $\\mathtt{C}$。问是否能够做到。 $1\\leqslant n\\leqslant 10^6$，$0\\leqslant a,b,d_i,c_i\\leqslant 10^6$。 $\\mathtt{1s/256MB}$。 构造题，一生之敌。 不过算了，反正 SHX 写出来了。 构造题是人类思维进步的阶梯。 ——関原みや M. Mahjong得。这题我连题意都不知道。只听说是个大模拟。 不过算了，反正 SHX 写出来了。 大模拟题就是【ACM 粗口】题。 ——関原みや 没过的题E. My friends’ friends are my friendsWarning：以下所用记号与原始题面存在出入。 Warning：以下文字已经经过了一定程度的转化，与原始题面想要表达的含义存在出入。 给定一张 $n$ 个和 $m$ 条边的无向图和一个特殊节点 $r$。点有点权 $a,b$，边有边权 $w$。 现在每个点上都站着一个人。对于一个点 $i$，如果您能够支付给这个点上的人 $a_i\\cdot\\operatorname{dist}(r,i)$ 元，那么 TA 就会对您产生 $b_i$ 点贡献。其中 $\\operatorname{dist}$ 表示两点间的最短路。 现在您需要集齐 $S$ 点贡献，但是您的预算只有 $T$ 元。问是否能够做到。 $1\\leqslant n\\leqslant 10^4$，$1\\leqslant m\\leqslant 10^6$，$0\\leqslant S\\leqslant 10^4$，$0\\leqslant T\\leqslant 10^{12}$。 $0\\leqslant a_i,b_i\\leqslant 10^4$，$1\\leqslant w_i\\leqslant 10^4$。 $\\mathtt{1s/256MB}$。 令 $f(i)$ 表示恰好获得 $i$ 点贡献至少需要多少钱。不过 $f(S)$ 比较特殊，它表示至少获得 $S$ 点贡献（即包括了 $S+1$ 点和更多的情况）至少需要多少钱。 那么我们可以写一个 $O(nS)$ 的背包 DP。 结果 T 了（悲 I. Counting Lines给定 $n$。称平面直角坐标系内横纵坐标均为 $[0,n)$ 上的整数的这 $n^2$ 个点为标记点。一条直线是好的，当且仅当它满足如下两个条件： 经过至少两个标记点 与 $x$ 轴的夹角的绝对值小于等于 $\\frac{\\pi}{4}$ 试求好的直线的数量。 多组数据。$2\\leqslant n\\leqslant 10^6$。$T\\leqslant 10^3$。 $\\mathtt{1s/256MB}$。 推了半天结果发现不对（悲 以下是考场思路： 我们把夹角在 $[-\\frac{\\pi}{4},0)$ 的部分逆时针旋转 $\\frac{\\pi}{2}$ 到 $[\\frac{\\pi}{4},\\frac{\\pi}{2})$，然后再减去夹角为 $0$ 和 $\\frac{\\pi}{4}$ 的部分（加起来一共是 $3n-3$），发现剩下的部分实际上是 \\sum_{\\Delta x=1}^{n-1}\\sum_{\\Delta y=1}^{n-1}[\\Delta x\\perp\\Delta y]f(\\Delta x,\\Delta y)其中 $f(\\Delta x,\\Delta y)$ 表示斜率为 $\\frac{\\Delta y}{\\Delta x}$ 的好的直线的数量。 套路莫比乌斯反演 \\begin{aligned} &\\sum_{\\Delta x=1}^{n-1}\\sum_{\\Delta y=1}^{n-1}[\\Delta x\\perp\\Delta y]f(\\Delta x,\\Delta y)\\\\ =&\\sum_{t=1}^{n-1}\\mu(t)\\sum_{u=1}^{\\lfloor(n-1)/t\\rfloor}\\sum_{v=1}^{\\lfloor(n-1)/t\\rfloor}f(tu,tv)\\\\ \\end{aligned}然后就是这里。仔细思考我们会发现，$f(\\Delta x,\\Delta y)$ 与 $(\\Delta x,\\Delta y)$ 有关，因此不能直接套二者互质时的式子。 然后……然后就不会了（悲 K. Quarantine现在有排成一条直线的 $n$ 个居民区，依次标号为 $1,2,\\dots,n$。 有 $m$ 个时间，每次事件有如下 $4$ 中类型： 给出 $l,r$。区间 $[\\max(l-A,1),\\min(r+A,n)]$ 内的所有居民区进入「被感染」状态。 给出 $l,r,k$。如果区间 $[\\max(l-A,1),\\min(r+A,n)]$ 内处于「被感染」状态的最长连续段长度至少为 $k$，那么区间内的所有居民区进入「隔离」状态；否则，什么也不发生。 给出 $l,r$。区间 $[\\max(l-A,1),\\min(r+A,n)]$ 内的所有居民区解除「被感染」状态和「隔离」状态。 给出 $l,r$。查询区间 $[\\max(l-A,1),\\min(r+A,n)]$ 内有多少个居民区处于「隔离」状态。 其中 $A$ 表示上一次事件 $4$，即查询的答案，初始为 $0$。 $1\\leqslant n\\leqslant 10^9$，$1\\leqslant m\\leqslant 10^5$。 $\\mathtt{1s/256MB}$。 抽象一下的话就是： 区间覆盖 查询区间最长连续段长度 查询区间和 第一反应是珂朵莉树，但是细想发现需要手写平衡树维护，因为 std::set 在这道题中已经不够用了。 但是想了想觉得太麻烦了于是放弃了。 SHX 的写法是动态开点线段树，但是没写出来。 剩下的题C 超级大模拟题（样例解释一页半） D 看不懂 F 神仙计算几何题 L 神仙数学题","link":"/icpc-2022-regional-hefei-notes/"},{"title":"随笔题解 Pb. 5","text":"2022 年 10 月 17 日 22：35 ~ 次日 00：35，AHU 2021 届不知名 ACM 选手関原みや（化名）报名参加 Educational Codeforces Round 137 (Rated for Div. 2)。期间因急了，C 题 WA 1 发，（某数据随机复杂度虚伪的）D 题 WA 4 发；但最后关头潜力爆发，做出 F 题并成功上分，跻身 Candidate Master 之列。距今已过……不知道多久，佳话永流传。 来源：CF1743 F Intersection and Union 给定 $n$ 个集合 $S_1,S_2,\\dots,S_n$，其中 $S_i=[l_i,r_i]\\cap\\mathbb{Z}$。 现构造操作序列 $p_1,p_2,\\dots,p_{n-1}$，其中 $p_i\\in\\{\\cup,\\cap,\\oplus\\}$，$\\cup$ 表示集合的并，$\\cap$ 表示集合的交，$\\oplus$ 表示集合的对称差。 显然整个操作序列 $p$ 一共有 $3^{n-1}$ 中方案。试对于每种 $p$，计算 \\left|(((S_1\\;p_1\\;S_2)\\;p_2\\;S_3)\\;p_3\\;S_4)\\;\\cdots\\;p_{n-1}\\;S_n\\right|的和。对 $998244353$ 取模。 $2\\leqslant n\\leqslant 3\\times 10^5$，$0\\leqslant l_i\\leqslant r_i\\leqslant 3\\times 10^5$。 $\\mathtt{5s/512MB}$。 令 $T_k$ 表示下式的计算结果 (((S_1\\;p_1\\;S_2)\\;p_2\\;S_3)\\;p_3\\;S_4)\\;\\cdots\\;p_{k-1}\\;S_k可以大致看成是 $S_k$ 的前缀和。 考虑对于每个 $x$，计算有多少种方案使得 $x\\in T_n$。 设当前考察到 $T_{k-1}$。并且有 $x\\not\\in S_k$，那么： 如果 $x\\not\\in T_{k-1}$，无论 $p_k$ 如何取值，总有 $x\\not\\in T_k$。 如果 $x\\in T_{k-1}$，$p_k=\\cap$，那么 $x\\not\\in T_k$。 如果 $x\\in T_{k-1}$，$p_k=\\cup$ 或 $p_k=\\oplus$，那么 $x\\in T_k$。 同理，如果 $x\\in S_k$，那么： 如果 $x\\not\\in T_{k-1}$，$p_k=\\cap$，那么 $x\\not\\in T_k$。 如果 $x\\not\\in T_{k-1}$，$p_k=\\cup$ 或 $p_k=\\oplus$，那么 $x\\in T_k$。 如果 $x\\in T_{k-1}$，$p_k=\\oplus$，那么 $x\\not\\in T_k$。 如果 $x\\in T_{k-1}$，$p_k=\\cup$ 或 $p_k=\\cap$，那么 $x\\in T_k$。 设 $f(k,0/1,0/1)$：其中 $f(k,0,0)$ 表示在 $x\\not\\in T_{k-1}$ 的情况下，$x\\not\\in T_k$ 的方案数；剩余状态的含义可以以此类推。我们可以整理出： \\begin{bmatrix} f(k,0,0)&f(k,0,1)\\\\ f(k,1,0)&f(k,1,1) \\end{bmatrix} =\\begin{bmatrix} f(k-1,0,0)&f(k-1,0,1)\\\\ f(k-1,1,0)&f(k-1,1,1) \\end{bmatrix} \\begin{bmatrix} 3&0\\\\ 1&2 \\end{bmatrix}\\quad(x\\not\\in S_k)\\begin{bmatrix} f(k,0,0)&f(k,0,1)\\\\ f(k,1,0)&f(k,1,1) \\end{bmatrix} =\\begin{bmatrix} f(k-1,0,0)&f(k-1,0,1)\\\\ f(k-1,1,0)&f(k-1,1,1) \\end{bmatrix} \\begin{bmatrix} 1&2\\\\ 1&2 \\end{bmatrix}\\quad(x\\in S_k)这样我们只需从小到大扫一遍 $x$，用扫描线处理出每个 $S_k$ 是否包含当前 $x$，然后再用线段树维护单点修改和区间矩阵乘积即可。 当然还有一些细节，比如说 $S_1$ 这个位置有些特殊，所以实际上求解矩阵乘积的时候求解的是 $[2,n]$ 上的乘积，然后再根据是否有 $x\\in S_1$ 单独计算 $S_1$ 产生的贡献。 还有就是，如果 $x\\not\\in\\bigcup S_i$，那么这个 $x$ 不应该参与计算。","link":"/random-solution-pb-5/"},{"title":"随笔题解 Pb. 4","text":"2022 年 10 月 1 日 20：00 ~ 21：40，AHU 2021 届不知名 ACM 选手関原みや（化名）报名参加 AtCoder Beginner Contest 271。期间因大脑短路，A/D/E 题各 WA 1 发，C 题 WA 4 发，G 题本应做出却未能做出（F 题就算了，真不会），最终以 1075th 的坏成绩遗憾离世离场，Rating 倒扣 17 分。距今已过 34 分 24 秒，警钟长鸣。 来源：ABC271 G Access Counter 高桥君建立了一个网站，然后在上面放置了一个访问计数器。在这之后，高桥君和他的一个朋友青木君会频繁地访问这个网站。 给定一个长度为 $24$ 的字符串 $c_0c_1\\cdots c_{23}$，且 $c_i\\in\\{\\mathtt{T},\\mathtt{A}\\}$。在访问计数器被设置后的第 $n$ 个小时中（$n$ 从零开始计数），如果 $c_{n\\bmod 24}=\\mathtt{T}$，那么高桥君有 $X/100$ 的概率访问网站；如果 $c_{n\\bmod 24}=\\mathtt{A}$，那么青木君有 $Y/100$ 的概率访问网站。 如果访问计数器统计到的第 $N$ 次访问恰好是高桥君，高桥君会爆炸。因此试求第 $N$ 次访问恰好是青木君的概率。对 $998244353$ 取模。 $1\\leqslant N\\leqslant 10^{18}$，$1\\leqslant X,Y\\leqslant 99$，且 $X$ 和 $Y$ 都是整数。 $\\mathtt{2s/1024MB}$。 这么一看相当直来直去的概率题。 令 $P(i,j)$ 表示第 $i$ 次访问的下一次是第 $j$ 次访问的概率。这里不考虑这次访问是谁。显然我们有 P(i,j)=\\sum_{n\\geqslant 0}\\prod_{k=i+1}^{j-1}(1-p_k)\\cdot p_j\\cdot\\left(\\prod_{k=1}^n(1-p_k)\\right)^n=\\frac{\\prod_{k=i+1}^{j-1}(1-p_k)\\cdot p_j}{1-\\prod_{k=1}^n(1-p_k)}$Q_t(i)$ 表示第 $t$ 访问对应 $c_i$ 的概率。显然我们有 Q_1(i)=\\prod_{k=1}^{i-1}(1-p_k)\\cdot p_iQ_t(i)=\\sum_{j=0}^{23}Q_{t-1}(j)P(j,i)注意到，如果我们能够把 $P(i,j)$ 和 $Q_t(i)$ 写成如下的矩阵形式的话 A_t=\\begin{bmatrix} Q_t(0)\\\\ Q_t(1)\\\\ \\vdots\\\\ Q_t(23)\\\\ \\end{bmatrix} \\quad F=\\begin{bmatrix} P(0,0)&P(1,0)&\\cdots&P(23,0)\\\\ P(0,1)&P(1,1)&\\cdots&P(23,1)\\\\ \\vdots&\\vdots&\\ddots&\\vdots\\\\ P(0,23)&P(1,23)&\\cdots&P(23,23)\\\\ \\end{bmatrix}上面那个关系式就可以简写成 A_t=A_{t-1}F=A_1F^{t-1}即 A_N=A_1F^{N-1}那么我们就可以在 $O(\\log N)$ 的时间复杂度内计算出所有的 $Q_N(i)$。虽然严格上来讲这部分还会有一个高达 $24^3$ 的常数。 那么最终的答案就是 \\sum_{i=0}^{23}[c_i=\\mathtt{A}]Q_N(i)","link":"/random-solution-pb-4/"},{"title":"随笔题解 Ct. 4","text":"第一次试图在实验室过夜并打 Codeforces Global Round。 d*m「听上去很容易下分的样子。」 85 min 写出来四题我觉得已经可以开香槟了。这波上大分。 于是从考场偷偷溜出来写一写题解（ 用户名 CLT，如果想要 AC 代码请去 CF 翻提交记录。（考场代码，不保证可读性） A. Glory Addicts您有 $n$ 个技能。第 $i$ 个技能的类型为 $a_i$（只能为 $0$ 或 $1$，$0$ 表示火属性技能，$1$ 表示冰属性技能），威力为 $b_i$。 您需要将这 $n$ 个技能每个释放恰好一遍。 如果释放一个技能时，之前刚刚释放过一个不同类型的技能，那么当前这个技能威力翻倍。 试求所有技能实际威力之和的最大值。 多组数据。$1\\leqslant n\\leqslant 10^5$，$a_i\\in\\{0,1\\}$，$1\\leqslant b_i\\leqslant 10^9$。$\\sum n\\leqslant 10^5$。 $\\texttt{2s/512MB}$。 假设火属性技能的数量严格大于冰属性技能的数量，那么有一种思路是： 释放威力最低的火属性技能 释放威力最高的冰属性技能 释放威力最高的火属性技能 释放威力第二高的冰属性技能 释放威力第二高的火属性技能 ……（如此重复直到所有的冰属性技能均被释放过） 释放剩余的火属性技能 这样一来，所有的冰属性技能和等数量的威力最高的火属性技能被以双倍威力释放。 反过来，如果释放的第一个技能是威力最低的冰属性技能，模拟一遍会发现，除了这个威力最低的冰属性技能的威力从双倍变成了单倍，其他方面没有任何变化。因此，火属性技能较多时，释放的第一个技能应当是火属性技能。 同理，冰属性技能较多时，释放的第一个技能应当是冰属性技能。 但是如果两种技能恰好数量相同，那么就不得不牺牲一个威力最低的技能了（它只能以单倍威力释放）。 B. Prefix Sum Addicts假设有一个长度为 $n$ 的单调不下降序列 $a$。定义其前缀和序列 $s$ 为 s_i=\\sum_{j=1}^ka_j现在给定 $s_{n-k+1},s_{n-k+2},\\dots,s_n$，试求是否存在一个符合条件的 $a$。 多组数据。$1\\leqslant n\\leqslant 10^5$，$1\\leqslant k\\leqslant n$，$|s_i|\\leqslant 10^9$。$\\sum n\\leqslant 10^5$。 $\\texttt{2s/512MB}$。 如果 $k=1$ 那么必定有解。以下考虑 $k\\gt 1$。 首先肯定是检查一下它给的这部分 $s$ 是否满足差分单调不下降。 然后如果 $k=n$ 还需要有 $s_1\\leqslant s_2-s_1$。 然后令 $x=s_{n-k+2}-s_{n-k+1}$，那么对于所有的 $1\\leqslant i\\leqslant n-k+1$，需要有 $a_i\\leqslant x$。 那么显然只要 $(n-k+1)x\\geqslant s_{n-k+1}$ 就必定会有解。至于这个解具体长什么样，这不重要。 C. Even Number AddictsAlice 和 Bob 在一起玩游戏。 现在他们面前有 $n$ 个数 $a_1,a_2,\\dots,a_n$。每次一个人可以选择其中的一个数，将其加入自己的得分，然后将其删去。Alice 先手。 等到所有数都被删去之后，如果 Alice 的得分是偶数，那么 Alice 获胜；否则，即若 Alice 的得分是奇数，那么 Bob 获胜。 Alice 和 Bob 都足够聪明。试判断谁会获胜。 多组数据。$1\\leqslant n\\leqslant 100$，$|a_i|\\leqslant 10^9$。$1\\leqslant T\\leqslant 100$，这里 $T$ 表示数据组数。 $\\texttt{2s/512MB}$。 令 $O(x,y)$ 表示当前剩余 $x$ 个奇数和 $y$ 个偶数，且 Alice 先手时，Alice 能否让自己的最终得分为奇数。 $E(x,y)$ 类似，不过是能否让自己的最终得分为偶数。 首先考虑边界条件。手玩一下可以发现 O(4k+1,0)=\\texttt{T}\\quad O(4k+2,0)=\\texttt{T}\\quad(k\\geqslant 0)O(4k+3,0)=\\texttt{F}\\quad O(4k+4,0)=\\texttt{F}\\quad(k\\geqslant 0)O(0,k)=\\texttt{F}\\quad(k\\gt 0)E(4k+1,0)=\\texttt{F}\\quad E(4k+2,0)=\\texttt{F}\\quad(k\\geqslant 0)E(4k+3,0)=\\texttt{T}\\quad E(4k+4,0)=\\texttt{T}\\quad(k\\geqslant 0)E(0,k)=\\texttt{T}\\quad(k\\gt 0)其中 $\\texttt{T}$ 表示 true，$\\texttt{F}$ 表示 false。 考虑 $x\\geqslant 1$ 且 $y\\geqslant 1$ 时。此时 Alice 有两种选择：删去一个奇数，或者删去一个偶数。 如果 Alice 希望她的得分是奇数，且她选择删去一个奇数，那么当前局面变为 $x-1$ 个奇数和 $y$ 个偶数，且 Alice 之后的得分需要是偶数。 此时 Bob 同样有两种选择：（$x\\geqslant 2$ 时才可以）删去一个奇数，或者（任何情况都可以）删去一个偶数。 这两种情况分别对应了 $(x=1\\vee E(x-2,y))$ 和 $E(x-1,y-1)$。显然只有这两种情况的结果均为 $\\texttt{T}$ 时 Alice 才能获胜。 以此类推，还有如下三种情况： Alice 希望她的得分是奇数，且她选择删去一个偶数 Alice 希望她的得分是偶数，且她选择删去一个奇数 Alice 希望她的得分是偶数，且她选择删去一个偶数 总而言之我们有 O(x,y)=OO(x,y)\\vee OE(x,y)E(x,y)=EO(x,y)\\vee EE(x,y)其中 OO(x,y)=(x=1\\vee E(x-2,y))\\wedge E(x-1,y-1)OE(x,y)=(y=1\\vee O(x,y-2))\\wedge O(x-1,y-1)EO(x,y)=(x=1\\vee O(x-2,y))\\wedge O(x-1,y-1)EE(x,y)=(y=1\\vee E(x,y-2))\\wedge E(x-1,y-1)读者可自行验证正确性。 D. Permutation Addicts给定一个长度为 $n$ 的排列 $a_1,a_2,\\dots,a_n$ 和 $0\\leqslant k\\leqslant n$。 现构造序列 $b$。对于每个 $1\\leqslant i\\leqslant n$： 如果 $a_i\\leqslant k$，令 $b_{a_i}$ 的值为所有满足 $1\\leqslant j\\lt i$ 且 $a_j\\gt k$ 的 $j$ 中最大的 $j$ 对应的 $a_j$。如果不存在这样的 $j$，令 $b_{a_i}$ 的值为 $n+1$。 如果 $a_i\\gt k$，令 $b_{a_i}$ 的值为所有满足 $1\\leqslant j\\lt i$ 且 $a_j\\leqslant k$ 的 $j$ 中最大的 $j$ 对应的 $a_j$。如果不存在这样的 $j$，令 $b_{a_i}$ 的值为 $0$。 现给定构造好的 $b$，要求还原出 $k$ 的值和整个的 $a$。多解则任意输出。 多组数据。$1\\leqslant n\\leqslant 10^5$，$0\\leqslant b_i\\leqslant n+1$。$\\sum n\\leqslant 10^5$。输入数据保证有解。 $\\texttt{2s/512MB}$。 为了方便，以下称 $\\leqslant k$ 的数为小数，$\\gt k$ 的数为大数。 如果 $b_y=x$，一种简单的思路就是直接把 $y$ 摆在 $x$ 右侧一个位置。$x=0$ 和 $x=n+1$ 的情况则是摆在排列最左侧。 如果有多个两两不同的 $y_1,y_2,\\dots,y_s$ 满足 $b_{y_i}=x$，那么这些 $y_i$ 都摆在 $x$ 右侧最靠近的位置即可，且它们之间的相对顺序无影响。 但是可能会存在一些 $z_1,z_2,\\dots,z_t$ 满足 $b_{z_j}=y_{i_0}$，这样的话 $y_{i_0}$ 必须要在其他 $y_i$ 的右侧，然后再往右侧直接接 $z_j$。 考虑到，无论如何，$y_i$ 和 $z_j$ 不可能同时是小数或大数，必定是以下两种情况恰好之一： $y_i$ 都是小数，$z_j$ 都是大数。 $y_i$ 都是大数，$z_j$ 都是小数。 如果存在超过两个 $y_{i_0}$，那么无论如何排列这些 $y_i$，都会出现要么有一些 $z_j$ 无法紧跟在对应的 $y_{i_0}$ 的右侧，要么两个相邻的 $y_j$ 之间插入了一些 $z_j$（这样 $b_{y_j}$ 的值会不对）。这不符合题目的「保证有解」的限制条件，即每次这样的 $y_{i_0}$ 至多存在一个。","link":"/random-solution-ct-4/"},{"title":"ICPC 2022 网络赛 Round 2 部分题解","text":"还没有题面。等拿到题面了再补。","link":"/icpc-2022-net-contest-round-2/"},{"title":"随笔题解 Ct. 3","text":"今天 ACM 实验室的一场原题大赛。 把其中一些觉得稍微有点意思的题跳了出来写一写题解。 今日题源: A: 1426A (*800) B1: 1560F1 (*1900) B2: 1560F2 (*2100) C: 1509B (*1100) D: 1295E (*2200) E: 1608B (*1200) F: 1612D (*1600) G: 1624D (*1400) H: 1495C (*2300) I: 771A (*1500) J: 583A (*1000) 差点就 AK 了。以及被三队暴打。 C. TMT Document给定一个长度为 $n$ 且只包含 $\\texttt{T}$ 和 $\\texttt{M}$ 两种字符的字符串 $S$。保证 $3\\mid n$。现在需要把 $S$ 分割成若干个互不相交的子序列，且每个子序列都是 $\\texttt{TMT}$（$\\texttt{Towa Maji Tenshi}$）。试判断是否可能。 多组数据。$3\\leqslant n\\lt 10^5$。$\\sum n\\leqslant 10^5$。 $\\texttt{1s/256MB}$。 其实……只要把前 $\\frac{n}{3}$ 个 $\\texttt{T}$ 和后 $\\frac{n}{3}$ 个 $\\texttt{T}$ 匹配，然后每对 $\\texttt{T}$ 中间再塞一个 $\\texttt{M}$ 就可以了。 但是考场被牛客还是哪里的一道 $\\texttt{red}$ 题带偏了，写了好几发没过于是暂时搁置了。 最后回头重新看这道题的时候感觉当时的自己就是个**。 D. Permutation Separation给定一个长度为 $n$ 的 $1\\sim n$ 的排列 $p$ 和另外一个长度为 $n$ 的序列 $a$。 首先选定 $1\\leqslant k\\lt n$，将 $p$ 分割成 $S_L=\\{p_1,p_2,\\dots,p_k\\}$ 和 $S_R=\\{p_{k+1},p_{k+2},\\dots,p_n\\}$ 两个集合。然后执行如下操作若干次（可以是 $0$ 次）： 选定 $1\\leqslant i\\leqslant n$，支付 $a_i$ 的代价将 $p_i$ 其移动到另外一个集合——即，如果 $p_i\\in S_L$，将 $p_i$ 从 $S_L$ 中删去并加入 $S_R$；反之亦然。 目标是不存在 $x\\in S_L$ 和 $y\\in S_R$ 使得 $x\\gt y$。试求达成目标需要支付的最小代价。 值得注意的是，如果操作后 $S_L=\\varnothing$ 或 $S_R=\\varnothing$，算作目标被达成。 $2\\leqslant n\\leqslant 2\\times 10^5$，$1\\leqslant p_i\\leqslant n$，$1\\leqslant a_i\\leqslant 10^9$。 $\\texttt{2s/256MB}$。 虽然这是不符合题目要求的，但是让我们首先考虑一下 $k=0$ 时的情况。 定义 $f(i)$ 表示，在当前的 $k$ 的取值下，通过若干次操作将 $S_L$ 变为 $\\{1,2,\\dots,i\\}$ 的最小代价。特殊地，$f(0)$ 表示将 $S_L$ 变为 $\\varnothing$ 的最小代价。 不难得出 f(0)=0f(i)=\\sum_{j=1}^ia_{q_i}其中 $q$ 表示 $p$ 的逆排列。 如果现在将 $k$ 的值增加 $1$，考虑 $f(i)$ 会如何变化。 （以下的 $k$ 的值都是增加后的） $f(p_k),f(p_k+1),\\dots,f(n)$ 会减少 $a_k$，因为现在 $p_k$ 已经在 $S_L$ 中了。 相对地，$f(0),f(1),\\dots,f(p_k-1)$ 会增加 $a_k$，因为现在 $p_k$ 已经不在 $S_R$ 中了。 那么对于当前 $k$ 的取值，答案显然是 \\min_{i=0}^nf(i)最终答案就是 $k$ 的所有取值对应答案的 $\\min$。这可以很容易地通过线段树维护区间加 + 区间 $\\min$ 求解。 F. X-Magic Pair给定 $(a,b)$ 和 $x$。执行如下两种操作之一若干次（可以是 $0$ 次）： 将 $a$ 变为 $|a-b|$。 将 $b$ 变为 $|a-b|$。 试求能否把 $a$ 或者 $b$ 变为 $x$。 多组数据。$1\\leqslant a,b,x\\leqslant 10^{18}$。 $\\texttt{2s/512MB}$。 不失一般性，令 $a\\leqslant b$。 令当前状态为 $(a_0,b_0)$。那么可以到达的状态有 $(a_0,b_0)$ $(b_0-a_0,b_0)$ $(a_0,b_0-a_0)$ $(b_0-2a_0,b_0-a_0)$ $(a_0,b_0-2a_0)$ $(b_0-3a_0,b_0-2a_0)$ 脑补一下可以得出：如果令 $b_0=p\\cdot a_0+q$，其中 $0\\leqslant q\\lt a_0$，那么 $a_0$ 和所有的 $p^\\prime\\cdot a_0+q$ 都会出现，其中 $0\\leqslant p^\\prime\\leqslant p$。 但是如果持续操作到 $b\\lt a$，那么事情会发生变化。 但是根据类欧几里得算法的相关结论，这个变化次数一定不会超过 $O(\\log b)$。","link":"/random-solution-ct-3/"},{"title":"随笔题解 Pb. 3","text":"来源：ABC268 F Best Concatenation 给定 $N$ 个只包含 $\\texttt 1$ 到 $\\texttt 9$ 的数字和字符 $\\texttt X$ 的非空字符串 $S_1,S_2,\\dots,S_N$。您需要将这 $N$ 个字符串拼接成一个大串 $T$，即确定一个长度为 $N$ 的排列 $P$ 然后令 T=S_{P_1}+S_{P_2}+\\cdots+S_{P_N}在这之后，对于每一个满足 $1\\leqslant i\\lt j\\leqslant|T|$ 的 $(i,j)$，如果 $T_i=\\texttt X$ 且 $T_j$ 是数字，那么您获得与 $T_j$ 的数值相等的分数。试求您能够获得的最终分数的最大值。 $2\\leqslant N\\leqslant 2\\times 10^5$，$\\sum|S_i|\\leqslant 2\\times 10^5$。 $\\texttt{2s/1024MB}$。 也不知道我这个题意说的清不清楚。 总之就是如果前面有一个 ‘X’ 后面有一个数字那么就获得那个数字那么多的分数。然后求最大分数。 对于每个 $S_i$，令 $A_i$ 表示其中 $\\texttt X$ 的数量，$B_i$ 表示其中数字的值的总和。 考虑已经确定了排列 $P$。此时若交换 $P_i$ 和 $P_{i+1}$，不难发现分数变化量为 A_{P_{i+1}}B_{P_i}-A_{P_i}B_{P_{i+1}}如果 $P$ 是最优解，上面这个变化量需要 $\\leqslant 0$。整理一下得到 \\frac{A_{P_i}}{B_{P_i}}\\geqslant\\frac{A_{P_{i+1}}}{B_{P_{i+1}}}即 $\\frac{A_{P_i}}{B_{P_i}}$ 单调不增。 那么把所有 $\\frac{A_i}{B_i}$ 算出来排个序即可。注意特殊处理一下 $B_i=0$ 的情况。","link":"/random-solution-pb-3/"},{"title":"随笔题解 Ct. 2","text":"来源：COMPFEST 14 - Preliminary Online Mirror (Unrated, ICPC Rules, Teams Preferred) 21：35 开始 5h，02：35 结束。 群友「多打打，运气好直接少走 $70$ 年弯路。」 当然我是 1：00 就去睡觉了，剩下一个 C 交给 chr 写了。 当然之前 20：00 的 ARC 我是不可能一不小心下了一波小分的。没有这种事。 A. Accumulation of Dominoes有一个 $N\\times M$ 的网格写有数字，第一行从左到右依次是 $1,2,\\dots,M$，第二行是 $M+1,M+2,\\dots,2M$，以此类推。试求有多少对格子四联通且数字相差恰好 $1$。 $1\\leqslant N,M\\leqslant 10^9$。 $\\texttt{1s/256MB}$。 签到题一号。 显然 $M\\gt 1$ 时答案为 $N\\times(M-1)$；$M=1$ 时答案为 $N-1$。 B. Basketball Together有 $N$ 个人，第 $i$ 个人的力量是 $P_i$。可以把若干个人组成队伍，这样同一个队伍里的所有人的力量都会变为队伍中力量最大的人的力量。一个队伍是合法的当且仅当其中所有人的力量之和严格大于 $D$。试求至多能组成多少个合法的队伍。 $1\\leqslant N\\leqslant 10^5$，$1\\leqslant D,P_i\\leqslant 10^9$。 $\\texttt{1s/256MB}$。 签到题二号。 显然最优策略是选定一个剩下的人里面力量最大的。设这个人的力量为 $A$，那么在从剩下的人里面抽出来力量最小的 $\\left\\lceil\\frac{D+1}{A}\\right\\rceil-1$ 个人凑成一个队伍即可。 G. Garage如果一个正整数 $x$ 能够被表示成 $b^2-a^2$ 的形式，其中 $1\\lt a\\lt b$，那么称 $x$ 是好的。试求第 $N$ 小的好的正整数。 $1\\leqslant N\\leqslant 10^9$。 $\\texttt{1s/128MB}$。 当然，OEIS 上是能够找到这个数列的。它是 A024352。 我们可以看到，有 $a_n=4+\\left\\lfloor\\frac{4n-3}{3}\\right\\rfloor\\;(n\\gt 1)$。特殊地，$a_1=3$。 M. Moving Both Hands有一张 $N$ 个点 $M$ 条边的有向图，无重边，无自环，边有边权。现在 Challestend 想要玩一个游戏：首先将他的两只手分别放在两个不同的点上。每次他可以将其中一只手沿着一条边移动到一个相邻的点。这一过程需要花费的时间等于边的边权。如果某个时刻 Challestend 的两只手停留在了同一个点上，那么结束游戏。 试求，对于所有 $2\\leqslant p\\leqslant N$，如果 Challestend 的左手放在 $1$ 号点上，右手放在 $p$ 号点上，那么他是否能够在有限时间内结束游戏，以及如果答案为是，结束游戏的最短用时是多少。 $2\\leqslant N\\leqslant 10^5$，$0\\leqslant M\\leqslant 2\\times 10^5$，边权 $1\\leqslant W_i\\leqslant 10^9$。 $\\texttt{1s/256MB}$。 日常花式求最短路。相当于求 $1$ 到 $p$ 的最短路，但是要求路径的前半段正常走，后半段要按照边的反方向走。 总之就是正着求一遍最短路然后倒着再求一遍就可以了。 H. Hot Black Hot White令 $\\operatorname{concat}(x,y)$ 表示将 $x$ 和 $y$ 在 $10$ 进制下拼接起来得到的数，如 $\\operatorname{concat}(10,24)=1024$。 给定 $N$ 个数 $A_1,A_2,\\dots,A_N$，保证 $N$ 是偶数。将这 $N$ 个数分成两类，每类 $\\frac{N}{2}$ 个。如果存在一个数 $Z\\in[0,3)$，使得对于任意一对被分到不同类的 $A_i$ 和 $A_j$，都有 \\operatorname{concat}(A_i,A_j)\\times\\operatorname{concat}(A_j,A_i)+A_i\\times A_j\\not\\equiv Z\\pmod 3那么这种分类方案是好的。试给出一种好的分类方案并给出对应的 $Z$。 $2\\leqslant N\\leqslant 10^5$，$1\\leqslant A_i\\leqslant 10^9$。 $\\texttt{1s/256MB}$。 众所周知，一个数模 $3$ 等于它的 $10$ 进制数位和模 $3$。根据这一条性质，我们能够很容易地得出 \\operatorname{concat}(x,y)\\equiv x+y\\pmod 3于是限制条件可以整理为 A_i^2+A_j^2\\not\\equiv Z\\pmod 3$0,1,2$ 平方之后分别变为 $0,1,1$。那么相当于将 $N$ 个 $0$ 或 $1$ 分成两类，并且找到一个数使得它不能通过从两类中分别选出一个数相加得到。不难发现，$0$ 比较多时可以取 $2$，$1$ 比较多时可以取 $0$。 C. Circular Mirror一个圆上排列着 $N$ 个标记点，顺时针标记为 $1,2,\\dots,N$。对于 $1\\leqslant i\\lt N$，$i$ 号点到 $i+1$ 号点之间的弧长为 $D_i$；$N$ 号点到 $1$ 号点之间的弧长为 $D_N$。 现在需要用 $1\\sim M$ 的 $M$ 种颜色给每个标记点上色，且不能出现构成直角三角形的三个标记点颜色均相同的情况。求方案数，对 $998244353$ 取模。 $1\\leqslant N\\leqslant 3\\times 10^5$，$2\\leqslant M\\leqslant 3\\times 10^5$。 $\\texttt{1s/256MB}$。 以下仅考虑 $N\\gt 2$。 考虑直径穿过的一对标记点，如果这两个标记点颜色相同，那么用于这两个标记点的颜色就不能用于其他标记点；如果这两个标记点颜色不同，那么并没有什么其他限制。 设一共有 $K$ 对标记点被直径穿过。考虑枚举有 $i$ 对标记点颜色相同，可以很容易地得到答案为 \\sum_{i=0}^K{K\\choose i}{M\\choose i}i!(M-i)^{K-i}(M-i-1)^{K-i}(M-i)^{N-2K}","link":"/random-solution-ct-2/"},{"title":"你解锁了『牺牲者污化以撒』","text":"英文原文是 “Sacrifice”，为了匹配堕化角色解锁成就的命名格式（比如堕化以撒解锁成就 “Broken” 被译为「神伤者」）而译为「牺牲者」。 解锁方式：使用堕化以撒击败精神错乱。 初始基础属性和以撒完全相同；自带一个炸弹；自带次要主动道具 Blighted Dice。 被动能力LESS OPTIONS MORE CONTROL 污化以撒与堕化以撒类似，只能同时持有 $8$ 个被动道具，且剧情道具和长子名分不占据被动道具槽。但与堕化以撒不同的是，污化以撒没有所有道具二选一的能力。 关于 MORE CONTROL，见 Blighted Dice。 Blighted DiceReroll a part of you 道具品质 $4$。 主动道具，$1$ 充能。 无标签。 存在于以下道具池：宝箱房，隐藏房，贪婪模式商店，贪婪模式隐藏房，腐烂乞丐。 使用时，将被动道具槽内当前被选中的道具摧毁，并生成两个随机底座道具，这两个道具均为来自相同道具池内的相同品质道具，且只能拾取一个。 使用后，该道具变为 Broken Dice。 Broken DiceRuined destiny 道具品质 $4$。 主动道具，$6$ 充能。 标签：非伊甸 不在任何道具池内且为隐藏道具。 该道具可以在任意充能时使用。使用时，不消耗充能并触发 Blighted Dice 的使用效果，但只生成一个底座道具，同时移除角色的一个心之容器或两颗魂心（可能致死）。 满充能时，该道具转化为同样满充能的 Blighted Dice。 持有未满充能的该道具时，若触碰底座道具，角色会将其摧毁，然后将该道具充能至满充能。如果角色处于这种状态下，被触碰后会被摧毁的底座道具会变得半透明。触碰由 Blighted Dice 的使用效果生成的底座道具或剧情道具不会触发这一条。 游魂使用该道具会立即死亡。这一条同样适用于堕化游魂，虽然在通常的游戏流程中堕化游魂无法遇到该道具，因为其没有「攻击性」标签。 堕化雅各之魂能够正常使用该道具。 长子名分Better options 更好的选择 触发 Blighted Dice 的使用效果时，生成的底座道具有 $25\\%$ 变为被摧毁的道具品质 $+1$ 的道具。 策略 若持有未满充能的 Broken Dice，角色总是会摧毁遇到的第一个被动底座道具。千万不要在这种情况下触碰强力道具。剧情道具可以无视这一条，但必须注意的是长子名分在这种情况下会被摧毁，尽管它在某些方面拥有类似于剧情道具的性质。 若未持有长子名分，使用 Blighted Dice 摧毁道具只会得到品质相同的道具，这意味着无论摧毁多少个低品质道具都无法使得角色获得较大的提升。 使用 Blighted Dice 摧毁道具时，生成的底座道具会从被摧毁的道具出现的所有道具池中抽取，而与角色实际在哪个道具池中遇到该道具无关。以五芒星为例，即使角色通过 BOSS 掉落的形式获取该道具，将其摧毁时仍然可能会生成恶魔房道具池甚至是究极隐藏房道具池的道具。 即使一个道具已经因为被角色拾取过而被移除出道具池，它仍然可能被 Blighted Dice 生成。 BOSS 房的 $1$ 级道具中有很多提供心之容器的道具，这类道具即使被放下不会收回已经获得的心之容器。使用 Blighted Dice 摧毁一个这类道具大概率会得到另外两个提供心之容器的道具。这相当于 $6$ 格充能换取至少一个心之容器的血量，而且如果当前层存在确定不需要的其他道具则还可以牺牲它们来换取充能。重复这样做，角色可以获得大量的心之容器用于获取恶魔交易等用途。 若未持有长子名分，使用 Blighted Dice 无法得到高品质的道具，这使得污化以撒在获取高品质道具方面不如堕化以撒。因为虽然前者能够通过 Blighted Dice 产生多次而不仅仅是一次二选一，这些二选一的品质始终是确定的；而后者则有可能在虽然仅有一次的二选一中获得高品质道具。 逆位审判可以在当前房间生成补货机，可以将 Blighted Dice 生成的道具重置为当前房间道具池的道具。可以在天使房/恶魔房/隐藏房使用这一策略，因为这些房间道具池的道具平均质量较高。隐藏房有时会出现天然生成的补货机，也可以加以利用。 剩余部分基本上和堕化以撒类似，如糖果心，灵魂吊坠，店长的胯袋，谷底石等道具能够给角色带来极大的属性提升；虚空，无底坑等道具能够回收利用角色不得不放下的道具等。","link":"/epiphany-tr-isaac/"},{"title":"随笔题解 Ct. 1","text":"来源：Codeforces Round #816 (Div. 2) 为什么是 Ct 呢因为这是一整场比赛的题解。 为什么 tag 这么多呢因为一道题对应两三个 tag。 A. Crossmarket有一个 $n\\times m$ 的网格。Stanley 要从 $(1,1)$ 移动到 $(n,m)$，Megan 要从 $(n,1)$ 移动到 $(1,m)$。两个人可以在 $1$ 个单位时间内移动到自己当前所在格子四联通的格子，而且可以任意决定自己的出发时间。除此之外，Megan 会在经过的每个格子上留下传送门，Stanley 可以在 $1$ 个单位时间内在任意两个传送门之间移动。求两人到达各自终点的合计用时最少是多少。 多组数据。$1\\leqslant n,m\\leqslant 10^5$。 $\\texttt{1s/256MB}$。 样例解释已经很明显地告诉了我们答案是 $2(n+m-2)-\\max\\{n-1,m-1\\}$。 时间复杂度 $O(1)$，空间复杂度 $O(1)$。 B. Beautiful Array构造一组 $a_1,a_2,\\dots,a_n$ 使得 \\sum_{i=1}^n\\left\\lfloor\\frac{a_i}{k}\\right\\rfloor=b\\sum_{i=1}^na_i=s或判断无解。 多组数据。$1\\leqslant n\\leqslant 10^5$，$1\\leqslant k\\leqslant 10^9$，$0\\leqslant b\\leqslant 10^9$，$0\\leqslant s\\leqslant 10^{18}$。$\\sum n\\leqslant 10^5$。 $\\texttt{1s/256MB}$。 显然有解当且仅当 bk\\leqslant s\\leqslant bk+n(k-1)构造也很简单。 时间复杂度 $O(n)$，空间复杂度 $O(n)$。 C. Monoblock给定序列 $a_1,a_2,\\dots,a_n$。$m$ 次单点修改，每次修改后求 \\sum_{1\\leqslant l\\leqslant r\\leqslant n}g(l,r)其中 $g(l,r)$ 表示 $a_l,a_{l+1},\\dots,a_r$ 的极长连续段数量。 $1\\leqslant n,m\\leqslant 10^5$，$1\\leqslant a_i\\leqslant 10^9$。 $\\texttt{1s/256MB}$。 可以将一次修改 $(x,v)$ 拆分为：删去包含位置 $x$ 的区间的贡献；将 $a_x$ 修改为 $v$；重新统计包含位置 $x$ 的区间的贡献。 甚至初始状态也可以拆分成 $n$ 次修改，第 $i$ 次为 $(i,a_i)$。 然后就……维护一下每个极长连续段的左右端点再写个线段树啥的数据结构查询一下就可以了。 懒得写了。 时间复杂度 $O(n\\log n)$，空间复杂度 $O(n)$。 D. 2+ doors设有一序列 $a_1,a_2,\\dots,a_n$。有 $m$ 条限制，第 $i$ 条形如 $a_{u_i}\\vee a_{v_i}=x_i$，其中 $\\vee$ 表示按位或。 求一组字典序最大的解。输入数据保证至少存在一组解。 $1\\leqslant n\\leqslant 10^5$，$0\\leqslant m\\leqslant 2\\times 10^5$，$1\\leqslant u_i,v_i\\leqslant n$，$0\\leqslant x_i\\lt 2^{30}$。 $\\texttt{1.5s/256MB}$。 2-SAT。 时间复杂度 $O(n\\log x_i)$，空间复杂度 $O(n+m)$。 E. Long Way Home有一张 $n$ 个点 $m$ 条边的无向图，边有边权。每次可以沿着一条给定边移动，消耗的时间等于这条边的边权；也可以从点 $u$ 直接跳跃到点 $v$，消耗时间 $(u-v)^2$。 对于每个点 $i$，求在至多进行 $k$ 次跳跃的前提下，从点 $1$ 到点 $i$ 的最少用时。 $2\\leqslant n\\leqslant 10^5$，$1\\leqslant m\\leqslant 10^5$，$1\\leqslant k\\leqslant 20$，无重边，可能有自环，$1\\leqslant$ 边权 $\\leqslant 10^9$。 $\\texttt{3s/256MB}$。 令 $f(u,i)$ 表示至多进行 $i$ 次跳跃，到达点 $u$ 的最少用时。那么显然 $f(u,0)$ 可以一遍 Dijkstra 求出。 设当前已经求出了 $f(u,i)$。令 $g(u,i)$ 表示表示至多进行 $i$ 次跳跃，且最有一次移动恰好是一次跳跃，到达点 $u$ 的最少用时。有 g(u,i+1)=\\min_{v=1}^n\\left\\{f(v,i)+(u-v)^2\\right\\}这部分可以一遍斜率优化 DP 求出。 在这之后，建立一个超级源点 $0$，向其他每个点连一条边权为 $0$ 的边。令点 $u$ 此时的 dist 为 $g(u,i+1)$，用 Dijkstra 更新一遍从点 $0$ 出发的最短路，此时点 $u$ 最终求得的最短路长度就是 $f(u,i+1)$ 的值。 时间复杂度 $O(k(m\\log n+n))$，空间复杂度 $O(n+m)$。 F. Crop Squares这是一道交互题。 在平面直角坐标系中有一个矩形，四个顶点分别为 $(0,0)$，$(0,m)$，$(n,0)$ 和 $(n,m)$。其中有一个平行于坐标轴的 $1\\times 1$ 的正方形被标记了。这个正方形被矩形完全包含。 每次询问，您可以给出一个面积严格为正的简单多边形，交互库会返回这个多边形与被标记正方形的并的面积。这个多边形不需要被矩形完全包含。 您需要在至多 $5$ 次询问内给出被标记正方形的左下角坐标。 $1\\leqslant n,m\\leqslant 100$。 $\\texttt{1s/256MB}$。 神仙题。 只需要两次询问。 第一次询问给出一个下图中的蓝色多边形： 其中红色区域是要求的被标记正方形，绿色区域是二者的并。 若被标记正方形左下角坐标为 $(x,y)$，绿色区域面积为 $S$，有 1-S=\\frac{1}{2}\\left[\\frac{m-y}{m}+\\frac{m-y-1}{m}\\right]=1-\\frac{2y+1}{2m}可以解得 y=mS-\\frac{1}{2}第二次询问给出一个下图中的蓝色多边形： 令绿色区域面积为 $T$，同理有 x=nT-\\frac{1}{2}时间复杂度 $O(n+m)$，空间复杂度 $O(1)$。","link":"/random-solution-ct-1/"},{"title":"随笔题解 Pb. 2","text":"来源：2022 杭电杯 Day 6 1011 Find different。 设有一个长度为 $l$ 的序列 $x_0,x_1,\\dots,x_{l-1}$，其中 $0\\leqslant x_i\\lt m$。两种操作： $x_i\\leftarrow (x_i+1)\\bmod m$ $x_i\\leftarrow x_{(i+1)\\bmod n}$ 每次操作时，所有 $x_i$ 同时发生变化。 两个序列 $x_0,x_1,\\dots,x_{l-1}$ 和 $y_0,y_1,\\dots,y_{l-1}$，如果 $x$ 能够通过若干次操作变为 $y$，那么称 $x$ 和 $y$ 本质相同；否则称 $x$ 和 $y$ 本质不同。 $(0,2,2)$ 和 $(0,1,0)$ 是本质相同的，因为： 进行操作 $1$：$(0,2,2)\\rightarrow(1,0,0)$ 进行操作 $2$：$(1,0,0)\\rightarrow(0,0,1)$ 进行操作 $2$：$(0,0,1)\\rightarrow(0,1,0)$ 对于所有 $1\\leqslant l\\leqslant n$，求出长度为 $l$ 的所有序列中有多少种本质不同的序列。模 $998244353$。 $n,m\\leqslant 10^5$。 令 $f(n)$ 为长度为 $n$ 且满足题目要求的序列的数量。 Burnside 引理：集合 $X$ 在群 $\\langle G,\\times\\rangle$ 作用下的等价类数量等于 $G$ 中所有元素作用在集合 $X$ 上时的不动点数量的算术平均值。 令 $X$ 为全体长度为 $n$ 的序列构成的集合；$G=\\{(x,y)\\mid 0\\leqslant x\\lt n,0\\leqslant y\\lt m\\}$，其中 $(x,y)\\in G$ 表示进行 $x$ 次操作 $2$ 和 $y$ 次操作 $1$。显然两种操作的相对顺序不影响。 定义 $G$ 上的乘法 $\\times$ 为 (x_1,y_1)\\times(x_2,y_2)=(x_1+x_2\\bmod n,y_1+y_2\\bmod m)显然 $\\langle G,\\times\\rangle$ 是一个群。 考虑在 $(x,y)$ 作用下 $X$ 中的不动点的数量。此时为了方便，把 $x=0$ 看作 $x=n$，$y=0$ 看作 $y=m$。进行 $x$ 次操作 $1$ 会把原序列划分为 $(n,x)$ 个环（简单回路），每个元素移动到对应环上下一个元素的位置上；进行 $y$ 次操作 $2$ 会把所有元素在模 $m$ 意义下加 $y$。如果进行完所有操作之后序列仍保持不变，必是每个元素移动到的位置上原本的数值恰好比自身大 $y$。按照这样推下去，环上的每个元素会比自身大 k\\cdot\\frac{n}{(n,x)}y\\quad(k\\geqslant 1)那么这就要求 m\\Bigm|\\frac{n}{(n,x)}y于是我们就可以写出答案的表达式 \\begin{aligned} &f(n)\\\\ =&\\sum_{x=1}^n\\sum_{y=1}^m\\left[m\\Bigm|\\frac{n}{(n,x)}y\\right]m^{(n,x)}\\\\ =&\\sum_{x=1}^n\\sum_{y\\mid m}\\left[\\frac{m}{y}\\Bigm|\\frac{n}{(n,x)}\\right]m^{(n,x)}\\\\ =&\\sum_{x=1}^n\\sum_{y\\mid m}\\left[y\\Bigm|\\frac{n}{(n,x)}\\right]m^{(n,x)}\\\\ =&\\sum_{x=1}^n\\left(\\frac{n}{(n,x)},m\\right)m^{(n,x)}\\\\ =&\\sum_{d=1}^n\\sum_{x=1}^n\\left[(n,x)=d\\right]\\left(\\frac{n}{d},m\\right)m^d\\\\ =&\\sum_{d\\mid n}\\sum_{x=1}^{n/d}\\left[\\left(\\frac{n}{d},x\\right)=1\\right]\\left(\\frac{n}{d},m\\right)m^d\\\\ =&\\sum_{d\\mid n}\\varphi\\left(\\frac{n}{d}\\right)\\left(\\frac{n}{d},m\\right)m^d\\\\ =&\\sum_{ij=n}\\varphi(i)(i,m)m^j \\end{aligned}时间复杂度 $O(n\\log n)$。","link":"/random-solution-pb-2/"},{"title":"OI Team Meating：2022-07-24","text":"感觉阿烜一天比一天蛤蟆了。 预定 11：00 到，结果因为一些预想外的事情耽误了 1.5h+，到的时候已经 11：40 了。 地点是主席家的会议室。 中午一起去吃了华莱士。于是阿潮下午的时候真的喷射出来了。 然后下午打了一个下午的红警，虽然因为我完全不会于是毫无游戏体验。 然后他们似乎开了一局三国杀，然而这个我也是一点都不会。 聚会体验极差（绝望 于是这个时候拥有专车接送的主席就回家了。剩下的我们分两路打车去万达吃晚饭。 然后不知道为什么又回到了去年那个绕了一圈结果去吃火锅的地方。结果真的去吃了火锅。 吃完晚饭离开万达之后，不知道为什么又回到了去年那个玩剧本杀的地方。 （忘了是谁了）「完了，时间线轮回了。」 于是这次我们不打算开剧本杀然后选了一款名为《鲜血盟约》的桌游。 结果打开说明书就被超级长的游戏规则震撼到了于是不打算玩了。 于是阿烜拿来一盘大富翁。 一开始我玩得顺风顺水，第一个命运格就抽到了「所有人给我 $600$ 元」这样一张牌。 反观旁边的阿陶，碰到的所有命运格要不就是交钱，要不就是直接进监狱。 然后是对面的阿烜，那个入狱格就像家一样踩了一遍又一遍。 （忘了是谁了）「进狱系男孩了属于是。」 游戏进行到中盘，R 和我积攒了大量的资本。这个时候阿陶在他的《天目路》上成功地建造了第二栋房子。 于是我就一不小心踩上去了。于是我就要给阿陶 $3000$ 元。 也就是这个时候我的局势开始急转直下，不知不觉间之前积攒的资本全 部 木 大。 然后阿陶甚至在他的《天目路》上建起了第三栋房子，踩一脚 $7500$ 元。 这个时候我的所有土地都已经抵押出去了，然后我手上也没有钱了，然后我现在就站在《天目路》前面一个格子。 我「来个 $1$ 送我走吧。」 一扔。出 $1$ 了。 一 代 小 资 本 家 的 陨 落。 后续的话就是，那个《天目路》存在某种引力一样，让其他所有人都情不自禁地往上踩了一脚（同时也几乎送走了其他所有人，除了曾经的大资本家 R 和苟延残喘了很长时间结果踩到一个扣除 $2000$ 元的格子暴毙的 zhuoer），让阿陶几乎一夜翻盘，最终以碾压的优势赢得了胜利。 风 水 轮 流 转。 好吧其实也不是，只不过觉得再这么耗下去肯定是阿陶赢于是就这样了。","link":"/oi-team-meating-220724/"},{"title":"Logic Puzzle Pack","text":"Steam 页面 没错这次是一个系列一共五款游戏。 这篇文章多少会涉及到一些关于一些基本游戏机制的剧透……不过这种程度应该还好吧。 块「这是扫雷？」 如图所示，这的确是一款有些类似扫雷的游戏。 不过不只是扫雷。 如同很多类似的解谜游戏一样，这里面所有的谜题都是能够在不依靠瞎蒙乱猜的前提下完成的……大概罢。 一开始，尤其是第一作 Hexcells 的时候，这个游戏看起来还十分的小清新。但是到了第三作 Hexcells Infinite，事情就开始变得诡异起来了。 觉得必须有一点要指出来的是，这游戏的机制是，每次将一个小格染色的时候，颜色对不对会直接有反馈，并且如果要拿到满星评价的话，整个过程中不能失误一次（手抖也不行）（后期有些关卡会允许至多一次的失误）。 我个人认为这是不好的设计。很多时候一不小心手都一下可能满星评价就没了。然后如果还想拿到满星评价的话，就必须要从头再玩一遍，或者把最终的图案截图下来然后对着这个一个一个点过去。 我觉得可以借鉴一下隔壁 Pepper’s Puzzles 的设计：染色的时候无法直接知道这个格子的颜色是否正确。只有把所有格子全部染色之后，才能知道是否所有格子的颜色都是正确的。如果有不正确的格子也不会有提示，需要回过头去修改直到所有格子颜色正确。 这样做虽然可能会出现一个失误导致满盘皆输的情况，不过总体而言肯定要比现在这样过分强调一遍全对的机制要好。 关于后两作 SquareCells 和 CrossCells……那就是完全不同的两个游戏了。读者可自行尝试。","link":"/logic-puzzle-pack/"},{"title":"随笔题解 Pb. 1","text":"前几天《2022 年安徽省机器人大赛本科组》的 K 题，也就是最后一题。 虽然听说都是原题，不过我懒得去找了。 给定一张 $n$ 个节点 $2n-3$ 条边的无向图，保证这些边形成了一个正 $n$ 边形的三角剖分。求这张图的一个最小点覆盖。 $n\\leqslant 10^5$。 对于上面这个样例来说，答案为 $\\{1,3,5,7\\}$。 考虑多边形内部的某一个三角形，不难发现这三个节点中，至多有一个不在点覆盖内。 如果确定了某一个节点不在点覆盖内，那么与该节点相邻的所有三角形，它们的其它节点则必须在点覆盖内。 考虑对于每个三角形建立一个方点。 如果两个三角形公用一条边，就在两个对应的方点间连一条边。 考虑一下这张新图。如果其中出现环，说明多个三角形共用了一个节点，而且这个节点必须要严格在多边形内部才可以。因此新图不存在环。 同时显而易见地，新图是联通的。因此新图是一棵树。 那么下一步，考虑与某个节点相邻的所有三角形，这些三角形对应的方点一定形成了新图中的一条简单路径。 于是问题转化成，给定一棵树和若干条简单路径，选择尽可能多的路径（对应原图中选择尽可能多的点不在点覆盖内），使得这些被选择的路径互不相交（对应点覆盖的性质）。 这应该是一道树上 DP，但是我调不出来了 :( 读者可自行尝试（光速逃","link":"/random-solution-pb-1/"},{"title":"ヤマふだ！　にごうめ","text":"Steam 页面 听说最近杀戮尖塔更新了，而且是大更新。 把之前有一个 mod 角色加进来了，忘了名字不过记得是一个如果有一张牌正好在手牌正中央的话，打出去会有加成的角色。有一说一之前玩的时候就觉得这个角色综合质量极高，说成是官方角色都不奇怪。 而且似乎还吸收了 DownFall 的内容，不过没怎么玩过所以不评价。 扯得有点远，总之就是一个轻松愉快的爬山(?)游戏。 你这爬山怎么一边爬一边打牌啊（小声 想起来有句话：你这打架怎么掷骰子啊（ 刚打完第三关，可能对游戏还理解不深（光速逃 以下说明以日语描述为准。 这游戏日语文本基本上没几个汉字全是平假名，子供向游戏确认。 「あと２２ｍ」是说这座山的当前区段还剩 22m。也可以理解成怪的血条还剩 22 点。 怪的左边有一个直角三角形和数字 6，表示当前区段的当前小区段的危险度是 6。可以理解成怪的下一次行动打出 6 点伤害。 画面最下端就是手牌，有些牌上面会带着「のぼる」「まもる」，分别代表这张牌向上攀登的距离和对自身的防护。也可以理解成打出多少伤害和获得多少格挡。 如果带着这两个关键字就说明这张牌是一张攀登牌，一回合只能打出一张攀登牌，且打出之后会直接与怪进行攻击判定，然后结束回合。 攻击判定时，因为怪不会防御，玩家角色侧的伤害是打满的。玩家角色的格挡自然就是减免伤害。 左上角的红心是血条。蓝色石头相当于分数，每打出一点伤害就获得一颗小石头，相当于一点分数。也可以消耗以换取被动道具。 当然游戏中还会有亿些其他的机制，读者可自行探索。 感觉这游戏有一点就是，保留字太多了。就比如说上面这张截图中就出现了「こうしん」「おちつき」「わくわく」「やまぶみ」「きらきら」「のびのび」「てつなぎ」「おもいだす」「いちごうぶん」这样九个保留字。 哦等等，「てつなぎ」的描述里引用了「もういっぽ」，这样一来就是十个了。 可能本意是为了让卡面上写出来的东西尽可能的少，毕竟这游戏的整体风格也不适合往卡面上塞一大堆文字性的描述。 不过缺点就是记不住这些保留字都是啥效果（ 好吧可能玩多了就记住了（ 不过还是总结了以下上述十个关键字的意思，不打算自己玩游戏或者想看看的话可以点开看看（ 12345678910こうしん：每打出 1 次，所有同名卡牌获得 +1/+1（指伤害/格挡 +1）。使用非同名卡牌时清零。おちつき X：下一回合格挡加成 +X（X 表示层数）。わくわく X：整场战斗伤害加成 +X。やまぶみ：打出伤害时获得分数 ×2.きらきら X：斩杀（可参考杀戮尖塔的定义）时最大生命 +X。のびのび X：每 1 个回合不打出，获得 +X/+X，不影响同名卡牌。打出后复原。てつなぎ X：伤害加成以 X 倍计算。おもいだす：从弃牌堆中拿取一张牌放回手牌。いちごうぶん：每场战斗只能打出一次，打出后不会进入弃牌堆。もういっぽ X：当前回合伤害加成 +X。","link":"/yamafuda/"},{"title":"一道日常题的题解","text":"今天校内某比赛的一道题。 感觉挺有意思的于是来写一篇题解。 题面甚至是纯英文，怕不是防 AK 用的。 其实我是可以 AK 的，不过剩下三道题（其中还有一道大模拟懒得写了）。 顺便一提，其实我睡过去了一整个上午，打开比赛页面的时候已经是比赛开始五个小时了（ 给定一棵 $n$ 个点的树，边有边权。从 $1$ 号节点开始，每次等概率随机选择一个相邻节点走过去，到了叶节点就停下来。这里叶节点定义为度数为 $1$ 的节点。保证根节点不满足这个定义。 走过一条边需要消耗的时间等于这条边的边权。求期望多长时间后能停下来。答案对 $10^9+7$ 取模。 $1\\leqslant n\\leqslant 10^5$。边权范围不重要（反正不爆 int）。 设 $E(u)$ 表示从 $u$ 号节点出发的期望停止时间。根据期望的线性性，我们可以得到 E(u)=\\frac{1}{\\operatorname{deg}u}\\sum_{(u,v)}(E(v)+w(u,v))如果 $u$ 号节点已经是叶节点，那么 $E(u)=0$。 当然，这在形式上完全可以视作一个 $n-r$ 个变量和 $n-r$ 个方程构成的线性方程组，其中 $r$ 表示叶节点的数量。 但是考虑到本题的数据范围，这样做的时间复杂度太大了。我们需要换一个思路。 首先我们梳理一下思路（非形式化地）： 考虑到，如果节点 $u$ 的所有子节点都是叶节点，那么 $E(u)$ 只会取决于 $E(f(u))$；而且一定是 $E(f(u))$ 的一次函数。 如果节点 $u$ 存在一个不是叶节点的节点 $v$，但是 $v$ 的所有子节点都是叶节点，那么 $E(v)$ 也是 $E(u)$ 的一次函数，我们就可以在 $E(u)$ 的式子中出现的 $E(v)$ 替换成 $E(u)$。这样整个式子中的待求量还是只会剩下 $E(u)$ 和 $E(f(u))$，也就是说 $E(u)$ 可以表示成 $E(f(u))$ 的一次函数。 如此递推到 $1$ 号节点，那么实际上我们需要求解的只有一个关于 $E(1)$ 的一次方程。 形式化地： 如果一个节点 $u$ 满足 E(u)=\\alpha(u)E(f(u))+\\beta(u)其中 $f(u)$ 表示 $u$ 的父节点，且 $\\alpha(u),\\beta(u)$ 只与 $u$ 有关而与其他节点无关，那么我们称 $u$ 是可表示的。 显然叶节点都是可表示的。 如果一个节点 $u$ 的所有子节点均是可表示的，那么 \\begin{aligned} &E(u)\\\\ =&\\frac{1}{\\operatorname{deg}u}\\sum_{(u,v)}(E(v)+w(u,v))\\\\ =&\\frac{E(f(u))+w(u,f(u))}{\\operatorname{deg}u}+\\frac{1}{\\operatorname{deg}u}\\sum_{(u,v)\\wedge v\\neq f(u)}(E(v)+w(u,v))\\\\ =&\\frac{E(f(u))+w(u,f(u))}{\\operatorname{deg}u}+\\frac{1}{\\operatorname{deg}u}\\sum_{(u,v)\\wedge v\\neq f(u)}(\\alpha(v)E(u)+\\beta(v)+w(u,v)) \\end{aligned}整理可得 \\left(1-\\frac{1}{\\operatorname{deg}u}\\sum_{(u,v)\\wedge v\\neq f(u)}\\alpha(v)\\right)E(u)=\\frac{E(f(u))+w(u,f(u))}{\\operatorname{deg}u}+\\frac{1}{\\operatorname{deg}u}\\sum_{(u,v)\\wedge v\\neq f(u)}(\\beta(v)+w(u,v))即 $u$ 是可表示的。 于是我们可以容易地注意到，所有节点均是可表示的，且 $\\alpha,\\beta$ 均是可求解的。 考虑 $1$ 号节点，有 E(1)=\\alpha(1)E(f(1))+\\beta(1)这里 $f(1)=0$，即 $E(f(1))=0$，我们就可以得到 E(1)=\\beta(1)而 $E(1)$ 正是本题要求的答案。","link":"/a-daily-problem/"},{"title":"退役选手 Challestend 的 CF 杂题题解 II","text":"直角。 因为觉得把所有东西都堆在一篇 Blog 太挤了，于是考虑每十题一篇（ 「CF1408F」Two Different传送门 想象有一个长度为 $n$ 的正整数序列 $a$ 和函数 $f:\\mathbb{N_+}\\times\\mathbb{N_+}\\rightarrow\\mathbb{N_+}$。每次操作指定两个位置 $u,v$，然后将当前的 $a_u$ 和 $a_v$ 同时替换为 $f(a_u,a_v)$。您需要给出方案，使得对于任意的序列 $a$ 和函数 $f$，$q$ 次操作后整个序列最多只剩下两个不同的正整数。 比如说 $n=3$，一种可能的最终序列是 \\{f(a_1,a_2),f(a_1,a_2),a_3\\}$n=4$ \\{f(a_1,a_2),f(a_1,a_2),f(a_3,a_4),f(a_3,a_4)\\}$n=5$ \\{A,A,A,A,a_5\\}其中 $A=f(f(a_1,a_2),f(a_3,a_4))$。 $1\\leqslant n\\leqslant 15000$，$0\\leqslant q\\leqslant 5\\times 10^5$。 注意到我们可以在 $2^k$ 次操作内将一个长度恰好为 $2^k$ 的子区间处理成一个数字。 然后我就卡在这里了。因为 $n$ 的二进制表示也许会有 $3$ 个或者更多的 $1$。于是我就在想怎么将 $4$ 个相同的数字和另外 $2$ 个相同的数字合并成六个相同的数字。 然后想不出来去看题解发现大可不必。直接取 $k=\\lfloor\\log n\\rfloor$ 然后将序列的前 $2^k$ 和后 $2^k$ 个数字合并即可。显然这样处理之后整个序列最多只剩下两个不同的正整数。 于是代码实现就没有了。 「CF543D」Road Improvement传送门 给定一棵 $n$ 个节点的无根树。对于每个节点 $u$，您需要求出，至少需要标记树上的多少条边，才能使得对于树上除 $u$ 以外任意节点 $v$，路径 $u\\rightarrow v$ 上最多存在一条边未被标记。 $2\\leqslant n\\leqslant 2\\times 10^5$。 我觉得大力树上 DP 就好了。 代码实现下辈子再说。 「CF1139D」Steps to One/* 闲扯开始 本来是想按顺序刷的然而看到这道题于是光速跑过来开搞。 记得高中的时候我刚把位置搬到阿潮旁边的那个晚上大吊阿烜就在写这道题。 ……欸不对？哦好像的确是不对。那个晚上阿烜写的是一道虚树题。 算了不管了。 闲扯结束 */ 传送门 有一个序列 $a$，初始为空。每次操作等概率随机选择一个 $[1,m]$ 上的整数并将其插入至 $a$ 的末尾。每次操作后计算 $a$ 中所有元素的 $\\gcd$，若为 $1$ 则结束，否则再进行下一次操作。求最终 $a$ 的长度的数学期望值。模 $10^9+7$。 $1\\leqslant m\\leqslant 10^5$。 考虑令 $f(N,M)$ 表示 $a$ 的长度恰好为 $N$ 时其中所有元素的 $\\gcd$ 恰好为 $M$ 的概率。那么显然 \\begin{aligned} &f(N,M)\\\\ =&\\frac{1}{m^N}\\sum_{1\\leqslant i_1,i_2,\\cdots,i_N\\leqslant m}[(i_1,i_2,\\cdots,i_N)=M]\\\\ =&\\frac{1}{m^N}\\sum_{1\\leqslant i_1,i_2,\\cdots,i_N\\leqslant\\lfloor\\frac{m}{M}\\rfloor}[(i_1,i_2,\\cdots,i_N)=1]\\\\ =&\\frac{1}{m^N}\\sum_{1\\leqslant i_1,i_2,\\cdots,i_N\\leqslant\\lfloor\\frac{m}{M}\\rfloor}\\sum_{x|i_k}\\mu(x)\\\\ =&\\frac{1}{m^N}\\sum_{x=1}^{\\lfloor\\frac{m}{M}\\rfloor}\\mu(x)\\left\\lfloor\\frac{m}{Mx}\\right\\rfloor^N \\end{aligned}考虑枚举 $a$ 的长度。设第 $N+1$ 次操作后 $a$ 中所有元素的 $\\gcd$ 恰好为 $1$，那么发生这种情况的概率是 \\frac{1}{m}\\sum_{M=2}^{m}f(N,M)\\phi(M)其中 \\begin{aligned} &\\phi(M)\\\\ =&\\sum_{i=1}^{m}[i\\perp M]\\\\ =&\\sum_{i=1}^{m}\\sum_{x|i,x|M}\\mu(x)\\\\ =&\\sum_{x|M}\\mu(x)\\left\\lfloor\\frac{m}{x}\\right\\rfloor \\end{aligned}值得注意的是需要特判一开始就随机到 $1$ 的情况。 然后对 $N$ 求和，我们得到答案为 \\begin{aligned} &\\frac{1}{m}+\\frac{1}{m}\\sum_{N\\geqslant 1}(N+1)\\sum_{M=2}^{m}f(N,M)\\phi(M)\\\\ =&\\frac{1}{m}+\\frac{1}{m}\\sum_{N\\geqslant 1}(N+1)\\sum_{M=2}^{m}\\phi(M)\\sum_{x=1}^{\\lfloor\\frac{m}{M}\\rfloor}\\mu(x)\\left(\\frac{\\left\\lfloor\\frac{m}{Mx}\\right\\rfloor}{m}\\right)^N\\\\ =&\\frac{1}{m}+\\frac{1}{m}\\sum_{M=2}^{m}\\phi(M)\\sum_{x=1}^{\\lfloor\\frac{m}{M}\\rfloor}\\mu(x)\\sum_{N\\geqslant 1}(N+1)\\left(\\frac{\\left\\lfloor\\frac{m}{Mx}\\right\\rfloor}{m}\\right)^N \\end{aligned}我们遇到这样一个子问题 \\sum_{n\\geqslant 1}(n+1)\\alpha^n当然这里保证 $|\\alpha|\\lt 1$。 设其为 $S(\\alpha)$，则 \\begin{aligned} &\\alpha^{-1}S(\\alpha)\\\\ =&\\sum_{n\\geqslant 0}(n+2)\\alpha^n\\\\ =&\\sum_{n\\geqslant 0}(n+1)\\alpha^n+\\sum_{n\\geqslant 0}\\alpha^n\\\\ =&1+S(\\alpha)+\\frac{1}{1-\\alpha} \\end{aligned}可以解得 S(\\alpha)=\\sum_{n\\geqslant 1}(n+1)\\alpha^n=\\frac{\\alpha(2-\\alpha)}{(1-\\alpha)^2}那么答案就可以记作 \\frac{1}{m}+\\frac{1}{m}\\sum_{M=2}^{m}\\phi(M)\\sum_{x=1}^{\\lfloor\\frac{m}{M}\\rfloor}\\mu(x)S\\left(\\frac{\\left\\lfloor\\frac{m}{Mx}\\right\\rfloor}{m}\\right)第一个 $\\sum$ 可以 $O(\\sqrt{m})$ 枚举，第二个 $\\sum$ 直接 $O(m)$ 暴力算。这样时间复杂度 $O(m\\sqrt{m})$ 十分健康可以通过。 其实感觉这个东西可以用 NTT 做到 $O(m\\log\\text{mod}+m\\log m)$，但是反正根号可以过就不用专门动用多项式板子了。 好吧其实是因为我已经不会多项式了。 评测记录 「CF1167F」Scalar Queries// 口胡一时爽，实现火葬场（光速逃 传送门 给定一个长度为 $n$ 的序列 $a$，保证 $a_i$ 两两不同。如下定义 $f(l,r)$： 将 $a_l,a_{l+1},\\cdots,a_r$ 取出并从小到大排序。设结果为 $b_1,b_2,\\cdots,b_{r-l+1}$。那么 f(l,r)=\\sum_{i=1}^{r-l+1}i\\cdot b_i求 \\sum_{1\\leqslant l\\leqslant r\\leqslant n}f(l,r)模 $10^9+7$。 $1\\leqslant n\\leqslant 5\\times 10^5$，$1\\leqslant a_i\\leqslant 10^9$。 考虑将 $a_i$ 从小到大排序，然后分别计算每个 $a_x$ 的贡献。 设对于当前的 $a_x$，设其左侧有 $N$ 个位置的值小于它，从右到左分别为 $l_1,l_2,\\cdots,l_N$；类似地，设其右侧有 $M$ 个位置的值小于它，从左到右分别为 $r_1,r_2,\\cdots,r_M$。 考虑到，只要选定区间包括 $x$，答案中就会有一个 $a_x$。这部分的贡献为 $x(n-x+1)a_x$。 如果选定区间包括 $l_i$，答案中就会又有一个 $a_x$。注意这里是只考虑 $l_i$ 这一个位置。这部分的贡献为 $l_i(n-x+1)a_x$。 类似地，$r_i$ 对应部分的贡献为 $x(n-r_i+1)a_x$。 求和，我们得到 \\left[x(n-x+1)+(n-x+1)\\sum_{i=1}^{N}l_i+x\\sum_{i=1}^{M}(n-r_i+1)\\right]a_x使用线段树简单维护即可。总时间复杂度 $(n\\log n)$。 代码实现下辈子再说。 「CF1204E」Natasha, Sasha and the Prefix Sums传送门 构造一个长度为 $n+m$ 的恰好包含 $n$ 个 $1$ 和 $m$ 个 $-1$ 的序列 $a$，然后定义其价值为其 $n+m+1$ 个前缀和（包括空前缀）中的最大值。对所有可能的序列 $a$，计算价值和。对 $998244853$ 取模。 $0\\leqslant n,m\\leqslant 2000$。 Warning：$998244{\\color{red} 8}53$。 Warning：$998244{\\color{red} 8}53$。 Warning：$998244{\\color{red} 8}53$。 可以类比一下卡特兰数的求法。 令 $F_k$ 表示最大前缀和 $\\leqslant k$ 的方案数。那么考虑一个不符合该条件的序列 $a$，记其前缀和为 $s$。取最小的 $i$ 使得 $s_i\\gt k$，那么此时有 $s_i=k+1$，即前 $i$ 个元素中 $1$ 比 $-1$ 多恰好 $k+1$ 个。将 $a_1,a_2,\\cdots,a_i$ 取相反数我们就得到了一个恰好包含 $n-k-1$ 个 $1$ 和 $m+k+1$ 个 $-1$ 的新序列 $a^\\prime$。 相反地，假设我们现在有一个恰好包含 $n-k-1$ 个 $1$ 和 $m+k+1$ 个 $-1$ 的序列 $a^\\prime$，记其前缀和为 $s^\\prime$。取最小的 $i$ 使得 $s^\\prime_i=-k-1$。将 $a^\\prime_1,a^\\prime_2,\\cdots,a^\\prime_i$ 取相反数我们就还原出了 $a$。 也就是说上述的 $a$ 和 $a^\\prime$ 之间存在一一映射。注意到 $a^\\prime$ 一共有 ${n+m\\choose n-k-1}$，我们就得到 $F_k={n+m\\choose n}-{n+m\\choose n-k-1}$。 特别地，$F_n={n+m\\choose n}$。 然后令 $G_k=F_k-F_{k-1}$，计算 \\sum_{i=\\max(n-m,0)}^{n}i\\cdot G_i即为答案。 $m=0$ 时需要特判直接输出 $n$。 结果我 WA 了三发。 第一发没特判第二发没注意求和下限第三发忘了删调试信息。 评测记录 话说回来，这数据范围还是太小了啊。建议加大力度开到 $10^7$（光速逃 「CF1594E2」Rubik’s Cube Coloring (hard version)传送门 给定一棵深度为 $k$，即包含 $2^k-1$ 个节点的完美二叉树。有六种颜色：白，黄，绿，蓝，红，橙。每个节点需要染一种颜色，而且： 相邻节点不能同色。 相邻节点不能一白一黄。 相邻节点不能一绿一蓝。 相邻节点不能一红一橙。 有 $n$ 个节点已经染好色了。问给剩下的节点染色的方案数。模 $10^9+7$。 $1\\leqslant k\\leqslant 60$，$1\\leqslant n\\leqslant 2000$。 首先考虑两个子问题。 子问题一：如果有一个深度为 $d$ 的子树，其根节点已经确定了颜色，除此之外没有已经确定颜色的节点。那么该子树的染色方案有多少种？ 显然为 $4^{2^d-2}$。 子问题二：有一条从深度递增的链，两端点的深度分别为 $L,R$。且这条链上其他节点（不包括两端点）及其子树均没有已经确定颜色的节点。那么这条链的染色方案有多少种？不考虑两端点的子树。 显然这可以通过一个 $O(k^2)$ 的 DP 解决。 于是我们对给定的 $n$ 个节点建立虚树，然后在上面跑 DP 即可。 至于建立虚树时需要求 dfs 序，我们可以利用完美二叉树的性质在 $O(k)$ 的时间复杂度内求出任意节点的 dfs 序。具体方法读者可自行撕烤。 注意到上面的 DP 并没有考虑到两端点的子树。考虑到一个节点在虚树上当且仅当它是给定点或它是两个给定点的 LCA，只有第一种情况时，该节点可能存在未被考虑的子树，手动计算然后加上即可。 还有就是虚树中的叶子节点在原树中的子树也需要手动计算。 总时间复杂度 $O(nk+n\\log n)$，后面那个 $\\log$ 是排序的。 然而不怎么好写于是就不写了（ 建议加大力度把 $n$ 开到 $10^6$（光速逃 「CF1619H」Permutation and Queries传送门 给定一个长度为 $n$ 的排列 $p$。$m$ 次操作，每次要么交换 $p_x$ 和 $p_y$，要么给定给定 $x$ 求执行 $x\\leftarrow p_x$ 连续 $k$ 次后 $x$ 的最终结果。 $1\\leqslant n,m\\leqslant 10^5$，$1\\leqslant k\\leqslant n$。 因为太菜不会做于是被迫去看题解。 好吧其实只是一个先猜出复杂度然后再根据复杂度想搞法的题。 一开始一直在想启发式合并启发式分裂，然后线段树分治搞成只有接环或者是只有断环。总而言之就是困在 poly-log 的怪圈里绕不出去了。然后这道题正解是大根号。 令 $B=\\sqrt{n}$。处理出 $p$ 的逆排列 $r$，以及另外一个序列 $f$ 表示每个位置沿着 $p$ 指针跳 $B$ 次到达的位置。预处理需要 $O(\\sqrt{n})$ 的时间复杂度。 每次修改的时候，假设 $p_x$ 被修改了，那么有且仅有 $x$ 沿着 $r$ 指针跳 $B$ 次以内经过的位置，也就是 $x$ 沿着 $p$ 指针反着跳 $B$ 次以内经过的位置，这些位置的 $f$ 需要修改。也就是说单次修改的时间复杂度这样就是 $O(B)$。 查询的话，显然可以设 $k=l\\sqrt{n}+d$，然后跳 $l$ 次 $f$ 再跳 $d$ 次 $p$ 即可。单次查询时间复杂度 $O(\\frac{n}{B}+B)$。 综上所述，总时间复杂度 $O(n\\sqrt{n}+m\\sqrt{n})$。 评测记录 // 什么时候才能变得想杜爷一样强啊 /se 「CF1626D」Martial Arts Tournament// 火星艺术主题旅游（光速逃 // 好吧其实 martial 的意思是「军事的」然后 tournament 的意思是「锦标赛」 传送门 给定 $n$ 个数 $a_1,a_2,\\cdots,a_n$。您需要指定两个数 $x,y$，然后所有小于 $x$ 的数构成集合 $S_1$，所有大于等于 $x$ 且小于 $y$ 的数构成集合 $S_2$，所有大于等于 $y$ 的数构成集合 $S_3$。然后您需要在这三个集合中插入尽可能少的元素，使得三个集合的大小均变为 $2$ 的自然数幂。 您需要找到一组 $x,y$，使得最终需要插入的元素数最少。您只需给出这个插入元素数的最小值。 多组数据。$1\\leqslant n\\leqslant 2\\times 10^5$，$1\\leqslant a_i\\leqslant n$。$\\sum n\\leqslant 2\\times 10^5$。 记 $c_k$ 表示有多少个数恰好为 $k$。相当于是说把数组 $c$ 分成三个连续段，记这三个连续段的和分别为 $s_1,s_2,s_3$，那么答案就是 $f(s_1)+f(s_2)+f(s_3)$，其中 $f(N)$ 表示大于等于 $N$ 的最小的 $2$ 的自然数幂。 根据题意每个连续段均不能为空，不过因为不需要给出具体方案，所以这个条件可以无视，因为就算最终找到的方案某一段为空，也一定会存在某个三段均不为空的方案，使得这两种方案得出的答案相同。 证明不会。反正是对的。 考虑枚举最右侧连续段的长度，然后枚举最左侧连续段的贡献——也就是说枚举一个 $2$ 的自然数幂 $p$ 然后找到一个尽可能靠右的前缀使得这个前缀的贡献为 $p$，然后要求尽可能靠右是因为这样可以最小化中间连续段的贡献。 两个枚举的时间复杂度分别是 $O(n)$ 和 $O(\\log n)$，再加上二分的一个 $\\log$，总时间复杂度 $O(n\\log^2n)$。 写到这里我突然意识到，如果直接分别枚举两侧连续段的贡献，那么实际上可以做到 $O(\\log^4n)$，差不多相当于是线性的。 不过算了。 评测记录 「CF893F」Subtree Minimum Query传送门 给定一棵 $n$ 个节点的树，以 $r$ 为根，点有点权。$m$ 次操作，每次给定 $u,k$，查询在 $u$ 的子树内且到 $u$ 的距离不超过 $k$ 的所有点中点权的最小值。强制在线。 $1\\leqslant n\\leqslant 10^5$，$1\\leqslant a_i\\leqslant 10^9$，$1\\leqslant m\\leqslant 10^6$。 不知道这道题正解是什么，不过我感觉我的做法非常的奇怪。 首先定义 $f_{u,k}$ 表示在 $u$ 的子树内且到 $u$ 的距离严格小于 $2^k$ 的所有点中点权的最小值，然后将这个东西预处理出来——至于怎么预处理就发挥人类智慧吧只能说我的方法感觉已经乱了。 然后将询问给出的 $k$ 分解成若干个 $2$ 的正整数次幂，这里令 k=\\sum_{i=1}^{L}2^{x_i}其中 $x_i$ 两两不同。那么我们首先对于在 $u$ 的子树内且到 $u$ 的距离恰好为 $1$ 的每一个点 $v$，计算 $f_{v,x_1}$ 的最小值；然后再对于距离恰好为 $1+2^{x_1}$ 的每一个点 $v$，计算 $f_{v,x_2}$ 的最小值；依此类推。然后将上述 $L$ 个值与 $u$ 自身的点权取最小值即为答案。 关于「距离恰好为某个数」这个限制条件，我们可以考虑对原树求一个类似于 BFS 序的东西，就是说，进行一次 BFS，然后对于每个点，定义其 BFS 为其是第几个入队的。 我们刚刚定义的这个 BFS 有一个十分容易注意到的性质：原树中深度相同的节点一定会组成一个连续段。而且能够想象得出来的是，如果我们在进行 BFS 和 DFS 时，对于每个点，访问它的出边的顺序相同，那么对于 BFS 序序列中的一个深度相同的连续段，这些点的 DFS 序一定也是递增的。 这就意味着我们能够通过二分查找来找到，在这样一个连续段上，哪个区间恰好属于某个点的子树。然后套用数据结构在 BFS 序上维护区间最小值即可。 单次查询的时间复杂度是 $O(\\log^2n)$。至于总时间复杂度，虽然还会有一个预处理但是考虑到这道题 $m$ 相对于 $n$ 范围较大，因此总时间复杂度可以认为就是 $O(m\\log^2n)$。 然而……调不出来了 :( 这条评测记录是我的最后一次提交，它十分英勇地杀到了 test 42，然后在那里折戟而亡。让我们记住它的故事(???)。 「CF1691F」K-Set Tree传送门 给定一棵 $n$ 个节点的树和正整数 $k$。 定义 $f(r,S)$ 表示以 $r$ 为根时，包含 $S$ 中所有节点的 $T$ 的最小有根子树的大小。 有根子树：若 $u$ 属于该有根子树，则 $u$ 的所有子节点也都属于该有根子树。 试求 \\sum_{r\\in V}\\sum_{S\\subseteq V,|S|=k}f(r,S)对 $10^9+7$ 取模。 $3\\leqslant n\\leqslant 2\\times 10^5$，$1\\leqslant k\\leqslant n$。 令 $1$ 号节点为根节点。 首先考虑 $r=1$ 时的情况，此时这个最小有根子树的大小实际上就是 $\\mathrm{size}(\\mathrm{lca}(S))$。对于每个点 $u$，$\\mathrm{size}(\\mathrm{lca}(S))=u$ 的方案数为 {\\mathrm{size}(u)\\choose k}-\\sum_{v\\in\\mathrm{son}(u)}{\\mathrm{size}(v)\\choose k}于是 \\sum_{S\\subseteq V,|S|=k}f(1,S)=\\sum_{u\\in V}\\left[{\\mathrm{size}(u)\\choose k}-\\sum_{v\\in\\mathrm{son}(u)}{\\mathrm{size}(v)\\choose k}\\right]\\mathrm{size}(u)考虑某种类似树上 DP 的换根。现在我们需要将根节点从 $f(r)$ 转移到 $r$，会有如下几种情况： $S$ 完全位于 $r$ 的子树内。 $S$ 完全位于 $r$ 的子树外。 不是上述两种情况。 情况 1：转移后，$r$ 的子树大小从原来的 $\\mathrm{size}(r)$ 变成了 $n$。另一方面，$\\mathrm{lca}(S)=r$ 的方案数为 {\\mathrm{size}(r)\\choose k}-\\sum_{v\\in\\mathrm{son}(r)}{\\mathrm{size}(v)\\choose k}从而这部分的贡献为 \\left[{\\mathrm{size}(r)\\choose k}-\\sum_{v\\in\\mathrm{son}(r)}{\\mathrm{size}(v)\\choose k}\\right](n-\\mathrm{size}(r))情况 2：转移后，$f(r)$ 的子树大小从原来的 $n$ 变成了 $n-\\mathrm{size}(r)$。另一方面，$\\mathrm{lca}(S)=f(r)$ 的方案数为 {n-\\mathrm{size}(r)\\choose k}-{n-\\mathrm{size}(f(r))\\choose k}-\\sum_{v\\in\\mathrm{son}(f(r)),v\\neq r}{\\mathrm{size}(v)\\choose k}从而这部分的贡献为 \\left[{n-\\mathrm{size}(r)\\choose k}-{n-\\mathrm{size}(f(r))\\choose k}-\\sum_{v\\in\\mathrm{son}(f(r)),v\\neq r}{\\mathrm{size}(v)\\choose k}\\right](-\\mathrm{size}(r))情况 3：转移前，$\\mathrm{lca}(S)=f(r)$，此时 $f(r)$ 的子树大小为 $n$；转移后，$\\mathrm{lca}(S)=r$，此时 $r$ 的子树大小同样为 $n$。即这种情况实际上对答案没有贡献。 时间复杂度 $O(n)$。 评测记录 // 好久没写题已经不会调代码力（悲","link":"/random-solutions-2/"},{"title":"そう死して尚も咲く人間劇場だ","text":"已完结。 新学期开始了（绝望 日常推歌时间 不定期推歌（指正 由于我之前给块块看上学期的日记的时候…… 阿块「游戏记录是不是有点多。」 于是笔者再次郑重声明，本文章是我在大学阶段的游戏记录，并且会插入一些大学生活和 ACM 的记录（光速逃 Day ???（寒假期间）寒假那当然是愉快的颓废时间。 复习是不可能复习的，这辈子都不可能的。 好吧其实还是看了一点。 然后某一天突然发现同宿舍 dalao FYF 打开了脑叶公司（其实 Steam 也只加了他一个好友），于是会动不动跑去凑热闹看他打游戏。 虽然实际上观看体验完全没有因为画质糊的就像每天都是情报部核心抑制一样而且非常的卡。于是到后面就看不下去了。 这位 dalao 因为及时找到了交流群而不是像我一样闷着头玩于是避开了不少坑而且很快集齐了不少强力装备。 以下是一些交流片段。 我「你觉得安保部部长是男是女。」 FYF「没注意。没怎么看剧情。」 （第二天，趁他刚结束前一天的管理正在看安保部剧情） 我「你觉得安保部部长是男是女。」 FYF「女的吧。」 我「他是男的。」 FYF「啊？？？」 男美女（确信 FYF「这些英文名我啥都记不住。」 我「没事多看就能记住了。」 FYF「我突然发现我分不清控制部部长和培训部部长了。」 我「可海星。我一开始玩废墟图书馆的时候也分不清。」 （我是通关了图书馆再去玩脑叶的） FYF「拿本子的是哪一个？」 我「拿本子的是控制部部长 Malkuth。」 FYF「哦哦，毒贩子。」 我「啊这。毒贩子是培训部部长 Hod。」 趁着打折买了以撒的结合，虽然只买了本体。 然后打完三次妈心才知道 DLC 也需要买，于是被迫原价（ 只能说从重生到忏悔的这个难度差距实在是太大了。 修复了新手玩家也能在困难模式乱杀的 BUG（确信 不得不说这游戏不整个图鉴啥的是真的没法玩（ Day 0「开幕」（2022-2-16）今天返校。 反正总而言之就是平静的一天。 Day 1「分裂」感受到了窒息胎的难度。 只能说那波紫黑色的穿屏弹幕实在是一点看不懂（ 然后第二次打死窒息胎之后受到了精神错乱的盛情邀请。 只能说这种扭来扭曲的开花弹是真的难处理（ 而且还动不动变身，变个妈腿直接照着我头上就是一 jo。 好吧其实也可能是大部分血量都已经被窒息胎耗掉了。 下午辅导员来查寝，被告知除了我们寝室以外所有人都在努力复习。 于是为了避免导致挂科的结局我和寝室其他三位 dalao 开始试图复习高数。 虽然没看一会就放下了（光速逃 晚上尝试了以撒的困难难度。 只能说道具拿的好是真的能为所欲为。 3 美元纸币（随机眼泪特效） 铅笔（每发射 15 颗眼泪向前抛射大量眼泪） 天使棱镜（环绕角色，使触碰到其的眼泪分裂成四颗） 光明之冠（未受伤时发射钻石眼泪） 圣饼（所有伤害降至半颗心） 柯吉猫的身体（眼泪命中时分裂成四颗较小的） 多维宝宝（模仿角色路径，使触碰到其的眼泪分裂成两颗） 打完？？？之后一个虚空传送门恰到好处地生成在了金宝箱的下面。 于是我冲进去把精神错乱揍了一顿（ 到最后按住射击我甚至啥也看不清（ Day 2「潜力」尝试用拉撒路通关困难模式以解锁伯大尼。 达到妈心的时候身上就带着五颗红心还挂着黑暗诅咒。 然后我突然不知道为什么走位能力大幅度上升只挨了两下就过了。 人在危急关头会爆发出潜力，这句话果然不假（ 然后玩了两把伯大尼发现玩不懂。 然后试图使用莉莉丝击败窒息胎（这样就是第三次了）。 结果这次到窒息胎门口身上只堆了两个跟班而且其中一只还是开局自带的淫魔，而且并没有拿到 BFF。 结果我和上一把一样莫名其妙走位能力大幅度上升剩两颗红心过了。 然后下到阴间被乱杀。 似乎打过羔羊会解锁传送门和石头胖子，然而我现在连底片甚至都还没有解锁（ Day 3「起承」上午迎来了上一学期拖欠的高数期末考试。 结果一道计算题喜提算的不知道是个什么东西，一道证明题喜提一点不会（ 下午是 C 语言的期末考试。 结果喜提坐牢一个小时以上。 不过说实话在纸上写代码确实是有点离谱。 Day 4「转」上午是英语期末考试。 笑死，什么都不会。 听力啥也听不懂，阅读 xjb 蒙，词汇一个词不认识，翻译平均每句话 1-2 个词见都没见过，作文写得狗屁不通。 老师，菜菜，捞捞，呜呜.jpg Day 5「合」上午是计算机的期末考试。 笑死，什么都……好吧其实会一点（ Day 6「萍果与科学素养」（2022-2-22）上午喜提新学期第一节高数课。 喂，前面可是地狱啊（确信 下午喜提第一节离散数学。 老师「假设你现在要去买一些 ping 果……等会 ping 果怎么写的。」 然后老师转身在黑板上写下了「萍果」。 奇怪的苹果增加了.jpg 老师「（为了讲述符号化的重要性）……假设 A 买了 2 个『萍果』 3 个橘子花了 15 元，然后 B 买了 3 个『萍果』 4 个橘子花了 20 元，那么『萍果』和橘子一个各多少钱……」 不要钱的苹果增加了.jpg 说起水果我不禁想起我以前上高中学长给我们讲算法的时候。 学长「……那么好吧假设我们现在这里有一些玉米树……啊什么你说玉米不长在树上？啊这线段都能长在树上了为啥玉米它就不能了呢？」 下午三四节物理老师试图通过问我们一些十万个为什么来检测一下我们有没有科学素养。 「1 皮秒是多少秒？」 「1 太赫兹是多少赫兹？」 「晴天的时候天空为什么是蓝色的？」 我没有科学素养.jpg Day 7「想要乱杀的愿望」本来下学期的课都是排满的一整天十节课甚至八节课。 但是周三却神奇地一节课都没有，于是快乐颓废。 解锁了堕化莉莉丝。 第六层的时候本来拿到了一个回形针想扔到 BOSS 房的结果一不小心忘了。 于是在拿便条之前把它扔到了第七层的 BOSS 房。还好变钥匙碎片了（ 听说堕化莉莉丝胎拳道乱杀，试了一下发现也就前几层可以（ 到最后惨死以撒三阶段（ 好吧也许是我攻击力没叠够。 Day 8「脸接子弹」sto 胎拳道天上第一（ 感受到了什么叫做乱杀。攻击力叠上去之后冲进人堆打一拳直接死一半，再打一拳死四分之三。 欸为什么不是全死了（ 感觉这种东西玩多了我的耐心正在以肉眼可见的速度衰减。现在我已经玩不下去其他的角色了，然后看到怪也懒得走位直接冲上去脸接子弹。 于是疯狂掉血导致开不开天使房拿不到钥匙碎片（ 好不容易凑齐一次两个钥匙碎片结果被超级撒旦一阶段（召唤的小怪）乱杀。 第二次凑齐钥匙碎片结果教堂玩具箱连续两层诅咒看不见血条。 不过还好过了。之后一个虚空传送门恰到好处地生成在了金宝箱的下面。 进去一看发现身上带着三颗红心。 然后被精神错乱丝血反杀（ 然后我本来想再开一把打精神错乱然后突然转念一想去打回溯先吧。 然后就去打了。 拿到了某个受伤后当前房间内获得圣饼效果的星座道具，说实话要是没这个东西我说不定就要被四名天启骑士乱杀了。 究极瘟疫究极战争至今不会躲（ 跟这几位一比祸兽菜的，也就血厚点外加压迫感强点。 （↑因为用堕化莉莉丝而移速不够于是被激光糊脸的人） 不过拖屏速度有点快的说实话。 Day 9「？？？」平静的一天。 Day 10「？？？」平静的一天。 其实是忘了写了。 Day 11「下落无敌的狐狸」平静的一天。 Day 12「颓废」（2022-2-28）平静的一天。 Day 13「觉醒(?)」在连续颓废了几天之后，我再次认识到了再这样下去是不行的。 于是从明天（其实还是有点拖延）本日记将会再次变为稍微正常一点的大学生活记录并（尽量）减少游戏记录。 以上。 最近在跟着同寝室 dalao 安利的 Unity 教程试着做 Roguelike 游戏。 然后我现在已经能够生成随机地图了。 当然因为我最近一直在玩以撒，所以说搞出来的这个地图，或者说我正准备做的这款游戏也基本上可以说是和以撒一个模子刻出来的。 没有创意.jpg 以上。 Day 14「假期」从某种意义上也是吧毕竟没课（ 啊什么？做游戏？太难了不做了。 Day 15「我靠我游戏闪退了」晚上正准备去吃晚饭的时候看到同寝室 dalao FYF 正在玩脑叶于是跑上去凑热闹。 然后拖到 18：40 才去吃完饭。结果就是吃完已经 52 了。 晚上有一节 C 语言然后我们俩现在甚至还不知道教室在哪。 然后我们就问同寝室的另外两位大佬，他们说是在 T02 教室，然后 T02 教室在 T01 教室的里面。 结果我们在外面绕了一大圈却没有找到 T02 教室。 就是说，教室门前的编号非常神奇地从 T01 跳到了 T03。 灵异教室.jpg 于是我们当机立断地决定不上课了回宿舍打游戏。 那位 dalao 成功地突破了记录部核心抑制战并来到了 Day 46，虽然研发部核心抑制战还没打。 于是我就在旁边指点，帮助他一次就无伤突破了 Day 46。 然后到了 Day 47。 我「Day 47，简单来讲就是，上层四核心同时抑制。」 FYF「卧槽这么 EX？」 然后因为那位 dalao 地游戏设备不是很好然后快打完的时候突然来了一波闪退。 心肺停止.jpg 注 1(?)：到最后那两位成功地找到了教室的 dalao 回来告诉我们说去 T02 需要先进去 T01，然后 T01 最里面有一扇门是 T02 的。 注 2(?)：奇怪的教室分布增加了.jpg 注 3(?)：不过因为教室不够大人太多坐不下于是我们喜提被 T02 除名然后下节课要去 T01 了。 注 4(?)：心情简单.jpg Day 16「？？？」管他的（ Day 17「体测重测与睡大觉」早上 8：20 有体测的重测和补测。 笑死，再测一遍也过不了.jpg 晚上是这一学期的第二节 C 语言，虽然对于我和另外某一位 dalao 来说可能是第一节。 然后老师似乎是接着上节课讲单向链表，然后让我们用链表写一个学生成绩管理系统。 那位 dalao 成功地在下课的瞬间写完了 95% 以上的代码。 然后这个时候我写完了于是老师来看我的程序，然后看到了旁边那位 dalao。 老师「还差多少啊。」 dalao「我就差这一行了。」 老师「你确定你写完这一行之后你的这个程序能跑起来吗？」 dalao「大概吧。」 然后 dalao 写完一点运行，20+ error(s), 20+ warning(s)。 然后我就提前跑回寝室了。 结果最后是，那位 dalao 回到宿舍之后继续发奋图强并（在我的帮助之下）成功地当天完成了作业。 dalao「我的作业……完成啦！哈哈哈哈哈！」 Day 18「古典音乐」在同寝室 dalao 的安利之下（其实是看着他玩然后也想玩）开始玩《冰与火之舞》。 然后了解到了我的节奏感到底有多么的差 :( Plum 是什么 dalao 啊写的曲子真好听（ 在创意工坊找到了一个六星的 Terrasphere，再一次了解到了我的节奏感到底有多么的差 :( 搜了一下发现这个俗称大雪花的东西还有一个八星的版本，看了一眼只能说，我看不懂，但我大受震撼。 Turkish March 警告.jpg Day 19「游戏玩法变化了！」（2022-3-7）最近音乐打太多甚至我以撒都不会玩了（ 找到一张谱子《Commando Steve》，然后打完我的感受总结一下就是： 游戏玩法变化了！（指唐突下落式音游） 深夜试图通关《僕たちの旅とエピローグ》，然而并没有成功。 只能说，我现在的想法就是，非常想顺着网线把谱师（们）揪过来问问他（们）这些个阴间变速都是跟谁学的。 感想的话，一句话，「这他妈是啥」。 Day 20「假如给我三天光敏性癫痫」——那在这三天里我可能玩不了音游了。 在创意工坊里面翻到了一张又一张奇怪的阴间谱子。 点名批评某《RUSH E》，只能说，就算是像弹钢琴那样十指并用我觉得都不行。 这他妈是啥？ ——某图书馆语言科学层指定司书 Day 21「假如给我三天会做物理题」——那我也写不来物理作业。 总而言之就是，物理作业好难，算不出来，自闭了。 I closed myself.（小声 Day 22「人是有惰性的」今天喜提早八，于是同寝室的某位不方便透露姓名的 dalao 就不想起床了于是让我们拿上他的卡去教室帮他打卡。 dalao「我电子电路的作业还没写完呢今天下午就要收了我得补作业啊。」 然后我们当然都是拒绝了（ 然后上完一整个上午的课一回到寝室发现那位 dalao 已经点了外卖开始吃午饭了。 一问作业补了吗说没补。 意料之外，情理之中.jpg 买了一块新的机械键盘，至少声音听起来比我之前那块好听不少。 虽然跟我去 CCPC 的时候摸到的大三学长的那块还稍微有点差距不过星吧。 总而言之就是现在我可以用机械键盘打音游了然后这样我就不会说按下去一个键还完全感觉不到我有没有按下去了虽然这可能并没有什么大用毕竟凭我乱七八糟的节奏感肯定按着按着拍子就乱了不过总而言之就是好耶！ 下午喜提体测，然后要测 1500m。 但是我并跑不下来于是我就去问老师能不能不跑了然后老师让我跑不下来也要走完全程。 然后我走（确信）了 1200m 左右吧老师可能等不及了直接给我一个 7：30 写上去了。 我没有体质.jpg 下午三四节电子电路当然是一句话都不听。 然而讲的网孔电流法和节点电压法似乎十分重要而且有些难以理解（悲 要挂科力（绝望 晚上老师让我们用 C++ 的 EasyX 库编写游戏（大作业）。 然后我选择的题材是迷宫，坐在旁边的另一位 dalao 选择的是黑白棋（没玩过也没听说过）。 晚上回寝室才发现用新键盘打游戏还非常地不适应（悲 今天的推歌时间 哦我的上帝 Plum 是什么神仙啊纯音乐 vocal 都会写的。 记得之前——至少得是很久以前了是在我还在听术曲的那个时候——奶油糖曾经整过一首所谓的自创语言的术曲。不过虽然实际上那个只是用日语唱出来然后处理一下音频。 可能是为了表现出，歌词一个字都听不懂，只是单纯地被旋律吸引的那种感觉？ 但是上面我推的这首是真的我一个字都听不懂。 因为不会韩语（理直气壮 Day 23「黑白棋」晚上上完离散数学一回来同寝室 dalao 就开始编写自己的黑白棋游戏。 然后他成功地用 350+ 行代码写出来了一个最基本的逻辑框架。 然后他邀请我们和他玩，然后我因为没有玩过然后被 dalao 吊锤（悲 Day 24「？？？」真的真的忘了写了 qaq Day 25「请你编程，消灭所有的圣斗士」上午三四节是两节职业生涯规划。 那当然是光明正大地划水写高数作业一个字都不听（ 好吧其实还是听了一点的（ 然后前几天似乎有人让我跑去体育馆签个字，8:30 到 10：30 的时候，因为乐跑没过还是啥的。 然后我当然是忘了（ 下午在新校区有一场 ACM 比赛。 同寝室有一位 dalao 报了名但是觉得去了也是一道题不会于是就临阵脱逃了。 然后整个寝室只剩下我一个人去了。 我「我一个人去的话没信心找到路啊」 FYF「群里不是有拼车的吗，你跟他们一起拼不就行了。」 我「都不认识啊。」 当然最后我还是下定决心自己打车去了新校区。 新校区规模是真的大（梅开二度 然后我自己打车到了南门，然后找不到实验楼南楼，于是向 WWJ 学长求助，然后学长热心地给予了我帮助。 sto WWJ orz 到考场开题。ABEG 没有什么问题，加起来 1h 之内搞定了。 然后剩下 3h 基本都在坐牢。感觉好像有点思路但是就是不会做。 以及就是不得不批评一下题面，题意表述不清（指升序降序都不说），遣词造句随意，定义不严谨（指 C 题说如果矩阵大小不够需要在「周围」补 $0$ 但是「周围」没有严格定义）。 考场上有一位老哥甚至直接骂出声了，「不会出题就不要出题」。 总而言之就是，到最后 C 题打了不需要补 $0$ 的 $60$ 分暴力分，然后总分 $460$。 剩下的 CDFH 每道题甚至不超过四个人切掉（ 只能说低估了题目难度了。本来是做着随手 AK 的打算去的结果当头一棒。 还有就是，居然不给发草稿纸。 不过嘛，毕竟都让自带纸质资料了草稿纸应该也可以被解释称一种广义的纸质资料吧也就是说是那种需要自带的。 虽然可能就算有了草稿纸我也拿不了更多的分了。 只能说自己太菜吧，DP 啥都不会的那种。把一个长度为 $n$ 的序列分成恰好 $m$ 段，并最小化每段的平方和。这个应该是一个经典题目了，考场上看出这个模型结果 D 不出来于是寄了。 Day 26「无题」（2022-3-14）毕竟只是用来交作业的游戏，我就从以撒 wiki 上整了一只大可爱扔了进去。 然后……然后就没了。 补：今天好像是 $\\pi$ 日？ Day 27「天选之子」晚上是高数习题课。 于是一周五天就只有周三晚上（当然其实是一整天）没有课了（悲 然后课上助教告诉我们说上个学期高数挂科率达到了整整 $40\\%$。 于是这个学期作业提交情况和习题课出勤率要算入平时分（大悲 结果这一天同寝室 FYF dalao 就没有去上习题课。 （↑其实他今天一整天都在寝室里打游戏） 然后老师可能是点名点到一半累了，于是名单后半段就随机抽取了几个名字象征性地点了一下。 然后没点到 FYF。 奇怪的运气增加了！ （↑虽然他作业还是没交（其实是没写）所以平时分还是要扣的） Day 28「？？？」总而言之就是没有课的一天。 Day 29「职业电竞选手」今天下午就要交大雾实验（大雾，大物实验）作业了。 然而我们的 FYF dalao 依然是一个字没写却仍然在高枕无忧地打游戏。 （↑他已经三四天没去教室了） CTY「我们已经可以为他的职业电竞之路加油鼓劲了。」 Day 30「US，ES，EG 和 UG」今天上午有大雾实验。 然而因为我实验报告并没有写（其实是看着那么多字懒得写了）于是和 FYF 一起缩在寝室睡大觉（ 晚上两节离散数学讲数理逻辑及确实是差点没听懂。 话说上面那位几天没去上课了啊。 Day 31「？？？」总而言之就是（几乎）没有课的一天。 突然想起来我英语作文还没写。 Day 32「幸运一抽」上午三四节职业生业规划。 老师想抽几个同学回答问题结果上来一抽就抽到了 FYF。 噔 噔 咚（心肺停止 下午晚上玩以撒的时候觉得是时候打一打挑战了，于是一口气打了十个（ 甚至还录屏了（指高血压操作集锦 Day 33「？？？」（2022-3-21）平静的一天。 找红隐藏真有意思（ Day 34「你太菜了，把手柄给我」/jk 挑战 22 着实折磨，但是幸运饼干给的魂心实在是太多了（ Day 35「？？？」本来今天上午是要去做核酸的然而整个寝室集体没起来于是只能明天了（ 下午打了 1h+ 的挑战 29，只能说太难了 :( 于是又打了 1h+ 的挑战 31，然后勉强过了。 来让超级撒旦告诉你一个好开局有多么重要吧（ Day 36「拉了」拉了。 Day 37「制裁」总而言之就是同寝室的那位成天所在寝室不去上课的 dalao 被辅导员叫去谈话了（预计，似乎是下周一下午）。 噔 噔 咚（绝望 晚上终于过了挑战 37「血腥玛丽」，只能说半颗红心实在是容错太低，稍微多动症一下就没了。 不过其实大部分是运气成分。一层献祭房出了圣餐，然后五层出圣心七层出圣饼。阴间拿了本死灵之书在撒旦面前连拍好几下直接送走。 你不必担心，我已经听到了你那略带惊恐的祈祷（每层一开始拼了命找红心）。 如今，你还没有意识到，痛苦（被血誓吸干红心）这种事物再微小不过了吗？ 你需要向我证明你的出人之处。 你应该信任我，将生命（红心）奉献（献祭）给我。然后，我自然会向你展示，什么叫做力量（圣心，圣饼）。 Day 38「咋办啊！」下午晚上打以撒，最新更新蓝宝宝加强了，正好我通关标记除了 BR，Hush 和究极贪婪以外还差一个母亲，于是就开始打。结果打了几把总是暴毙，于是果断地进行了一个游戏的退出。 晚上老师要验收 C 语言大作业，要问问题。然后班上有一位 dalao（因为和我写的是一个题目）就想和我一起上去然后让老师只看我的代码问问题都朝着我问。 结果老师问到一般突然点着他让他回答。然后他答不上来…… 然后老师又指问了他几个语法问题，就像是，结构体里面定义了两个构造函数（当然名字是一样的，一个有参数一个没有所以可以重名），然后问它们为什么可以重名。然后他答不上来…… 噔 噔 咚（绝望 咋办啊！ Day 39「咋办啊！！」太久没玩隐藏章节已经不会玩力（悲 也许是因为最近玩得太多了腻了吧。 晚上寝室集体赶线代作业，然后发生了如下对话： FYF「是不是一个大数在一个小数前面就算做一个逆序数？$4123$ 是 $3$ 个还是 $1$ 个？」 CTY「你自己看书啊。」 FYF「我怎么知道书上哪个地方写了，我这第一次翻开书。」 噔 噔 咚（绝望 Day 40「？？？」（2022-3-28）平静的一天。 Day 41「通向虚空的大门」晚上刷夏娃的通关标记。 一连打了三四局结果一次都没有成功见到虚空传送门（悲 最后一局天使房出了光明之冠于是立刻停下了手中的剃刀片（ 本来这个时候还拿了一块钥匙碎片的，结果后面给忘了直接走恶魔房了（ 不直接凑齐两块碎片是因为炸弹不够。 然后喜提硫磺火，然后不知怎么开了蓝子宫的门（可能是第八层打得太快了吧）（指 Boss 房刷的太近了），进去对着窒息胎喷了一通硫磺火（它的连续统还是不会躲）然后成功摸到了虚空的大门。 然后差点被精神错乱乱杀（指一红心 + 一永恒之心）（ 前几天的更新似乎在虚空层的时候在画面四周新增了某种黑白噪点，更新前录下来的视频里还是没有的。 教义同款特效（ Day 42「小概率事件」晚上继续刷通关标记（这次是参孙）。 习题课，（）都不听。 只能说，概率是真的奇妙。 （↑三层天使房开启率被打到 $9\\%$ 还能开甚至出了圣饼的人） （↑当场把两个天使都给鲨了）（光头恶霸确信） 最后一局本来向走死母线结果快打死的时候玩血权玩到没血了结果同归于尽了（悲 推歌？ BLASPHEMY AGAINST THE HOLY SPIRIT!!! Day 43「日记」我为什么要来写这么一个破玩意。 Day 44「愚人节」今天似乎是愚人节的样子。 一打开 QQ 发现 SDOI 群的名字发生了奇怪的变化，吓得我反复确认这的确是 SDOI 群。 本来想看看今天 Steam 库里的游戏有没有愚人节彩蛋的结果全忘了（ Day 45「日记？」（）都不写。 Day 46「无题」今天打了一场校赛。 只能说，题目太简单了（ 不过有一道 C 还是挺有意思的（ Day 47「摆烂，但是没完全摆烂」（2022-4-4）下午本来是昨天比赛的复赛，结果评测系统爆炸了于是取消了。 不过说实话就算系统不爆炸，就这个题目难度也是随手 AK（ 刷拉撒路的通关标记。 拉撒路，指复活以后触发贫血，拉出来的血撒了一路（光速逃 第一局，吐根，结果自己摆烂给摆死了。 第二局，史诗胎儿博士 + 硫磺火，结果一不小心就导弹炸自己，最后给炸死了。 第三局，吐根 + 硫磺火（我也想知道为什么每局都有这么多强力道具），结果不知道是因为这两个道具的某种化学反应还是其他道具的效果，每次攻击都会有概率炸自己一下。 第七层发现了这个问题想确认一下结果直接给自己人炸没了。 Day 48「咋办啊」上午是昨天下午的比赛。 一上来切掉 AB 然后开始对着 C 犯傻。 交了几发发现过不了于是开 D，然后各种犯低级错误，包括但不限于求网格四联通有障碍最短路写成 DFS。 功力尽失（悲 身败名裂（绝望 到最后 D 勉强过了，E 看出来个大概思路不过没时间写了。 我没有水平.jpg 出考场试图与 WWJ 学长交流，然后得知他刚刚知道今天上午有比赛。 学长「睡得可香了。」 Day 49「请各位光头不要在挑战 45 耍仙术」解锁了堕化伊甸，于是成功解锁了传说中的挑战 45。 然后明白了什么叫做真正的仙术。 第一局遇到两个印象比较深刻的主动道具。其中一个好像是吸收掉当前房间内的所有底座道具，每吸收一个道具就生成一只怪物。 然后它生出来的第一只就是回溯线限定的那种堕化狙击苍蝇（好像是这个名字）。 吓得我夺门而逃（ 第二个是一个没有充能条的主动道具，使用时在角色位置生成一只大胖。 大胖迫害协会狂喜（错乱 最后通关的那一局是，在第一层的道具房发现了一个没有充能条的主动道具，使用时原地生成一个随机卡牌/符文/魂石。 混沌宝珠警告（噔噔咚 妈腿？妈心？以撒？小蓝人？一张混沌卡下去全部木大（ 还有一些，像是： 角色清理完房间时，原地放置一颗大爆弹先生的炸弹。 角色杀死怪物时，几率在当前房间获得一只格罗。 角色拾取卡牌/符文/魂石时，几率将其重置，然后放屁，并原地生成另一个随机卡牌/符文/魂石。 角色清理完房间时，承受一颗心的伤害，优先扣除红心。 角色杀死怪物时，在当前层获得一只随机跟班。 角色拾取掉落物时，会听到撒旦的笑声，然后手上会被塞入一颗鲍勃的烂头（可以投掷）。 Day 50「科目变化了！」早上又要去做核酸（ 在门口排了可能有一节课时间的队（ 三四节是高数。讲重积分的几何应用和物理应用。不过都是后半段都是计算没啥意思就没听（ 在课桌上看到了不知是哪位 dalao 写下的字： Be positive. Be patient. 成为阳性。成为病人。 lmao 下午本来是气排球课，但是老师看体育馆基本上这个学期不能用了于是临时把项目改成了散打。 没错散打。虽然在我看来教别人散打就是教别人鲨人（光速逃 晚上试图打以撒，但是似乎状态不够好于是开摆。 Day 51「你是一个一个一个接龙群啊！」查了一下发现表双子解锁的道具是真的一个比一个香，长子权，谷底石，达摩剑，创世纪。于是考虑开始挑战表双子全红。 我严重怀疑以撒这游戏有一个隐藏设定：每当玩家开始认真地玩一个新角色的时候，那一局遇到的道具质量提升。 总之就是半个乱杀局（ 晚上一二节离散数学，因为清明假期刚过去老师怕我们前面学的都还给他了于是带着我们进行了一个一节课半的复习。 然后懒得听于是水群。 SD NOIP 群已经沦为复读群力（悲 Day 52「今天我死了」把双子的标记刷得差不多了（指还剩下母亲和究极贪婪三个）（隐藏章节双拿天使房双拿带来的战斗力提升原来这么多吗），想开始开表罗的坑了。 结果第一局上来伊甸的祝福送我一个吐根。 因为表罗子弹幽灵眼泪也不用担心子弹撞到石头上或者是板边爆炸，相比于其他角色开局吐根会好打一些。虽然炸隐藏房就有点难。 直接冲进 Boss Rush 房一通乱杀，吐根两下带走一个 Boss。 然后冲进蓝子宫正面刚死寂（话说回来官中的翻译改成「死寂」了？之前还是「窒息胎」的来着），结果靠太近一发吐根直接给我破盾了。 然后惨死在死寂的连续统攻击之下（ 翻了翻之前的视频，发现好像，如果同时持有「硫磺火」「吐根酊」「多维宝宝」，角色发射的血激光在碰到多维宝宝时会爆炸，然后我有一局拉撒路就是这样被炸死的。 可能其他的能够让角色眼泪分裂的跟班，像是天使棱镜也会有类似地效果。不过懒得测试了。 Day 53「咋办啊！！！！」下午事校内的比赛。 自信慢慢地去实验室，切掉 ABC 然后开始自闭。 D 看了看感觉不会就跳过了。 E 也感觉不会。然后开 F。 想了 1.5h+ 的暴力递推，写分数类发现 unsigned long long 都存不下，写 long double 发现精度不够。 本来想直接转 Python 的结果发现电脑上没装解释器。 好吧其实就算用 Python 感觉复杂度也要出锅。 比赛开始 2h 过去了才想起来观察性质，结果观察了一下一发过。 G 的大意事给定一个凸包 $A$ 和另一个简单多边形 $B$，问 $B$ 是否严格在 $A$ 内部。 实际上由凸包的性质很快可以得到，如果 $B$ 的所有顶点都严格在 $A$ 内部，那么 $B$ 本身也一定严格在 $A$ 内部。 然后就是 $m$ 次查询某个给定点是否在凸包内。 然后，因为不会写计算几何，我直接把整个凸包拆成两个 $y$ 关于 $x$ 的分段线性函数当作上下界，然后判断每个点的坐标是否在对应 $x$ 坐标的上下界内。 然后返回去看 D 发现暴力背包可行，一写发现写不对。 学术垃圾竟是我自己.jpg 晚上想起来自己英语作文还没写。 向 WWJ 学长求助，结果…… 学长「上网搜英语作文，我的经历，然后抄一篇。」 我「直接抄网上搜到的真的不会被发现吗（」 学长「不会，老师根本没时间。」 这就是学长吗（ 然后上网搜了一篇，xjb 改了改交上去了。最后修改到 83 pts，海星吧。 Day 54「啊我死了」（2022-4-11）尝试刷游魂的母亲通关标记，然而因为隐藏章节没怎么打过疯狂暴毙（ 最远的一次在尸宫 I BOSS 房，因为不熟悉那个甩鞭子的 BOSS 的攻击模式，连着两次被鞭子抽到脸上于是寄掉了（ 啊我死了（物理 Day 55「啊我死了（梅开二度」晚上试图刷游魂的最后一个通关标记，也就是究极贪婪的标记。 然而因为贪婪模式太难了各种暴毙（悲 最远的一次见到究极贪婪结果，因为 BOSS 房旁边有一些上吊的店主，究极贪婪的炸弹硬币把这些炸出蜘蛛了，然后我没看见。 饿啊（指操作下饭 然后就再也没有出过第三章。 此时，一条咸鱼失去了梦想.jpg Day 56「别玩了！」继续尝试刷游魂的究极贪婪标记。 然后日常暴毙（悲 最后一局成功地拿到了传说中「跳出三界外，不在五行中」的计数二十面骰，然后直接复杂性骨折，柯吉猫的身体，强力安眠药，科技零，剖腹产给整上把究极贪婪按在墙角锤（ 强力安眠药 + 剖腹产的组合竟然还是发射拳头（拿了 A+），不过拳头似乎有追踪并且会发射小拳头。 你都生了些什么东西出来啊 kora（ 莉莉丝在贪婪模式以外有亿点不好用，于是开始刷店主的标记（ Day 57「？？？」平静的一天。 Day 58「发生肾么事了？？！！」早上虽然有大物实验不过因为不想写实验报告于是日常翘掉。 结果突然辅导员就推门进来了。 然后那个时候我甚至还没起来。 噔 噔 咚（绝望 晚上继续刷店主的标记，只能说三格血上限可容易暴毙了。 有一局见到母亲结果被二阶段的那个白色蠕虫弹幕爆杀（ Day 59「？？？」平静的一天。 Day 60「九条可怜（绝望」下午是 CCCC 的热身赛。 虽然上午三四节似乎还有职业生涯规划的样子不过还是半个字不听（ 开始比赛前确认到场需要扫一个验证用的二维码，结果 13：30 开始但是老师 12：20+ 才把二维码给出来。 抱歉，搞忘咯.jpg 进去一看发现巨大多水题。直到我看到最后一题。 题意就是一个序列，每次随机添数，所有数 $\\gcd$ 到 $1$ 了就结束，问序列期望长度。 之前写过一篇 CF 上这个题的题解，不过那个时候数据范围只有 $10^5$ 所以我写了个根号的交上去了。不过这次数据范围被超级加倍到了 $10^{11}$。 不会。告辞。 Day 61「？？？」（2022-4-18）平静的一天。 Day 62「？？？」/kel Day 63「？？？」/kel Day 64「？？？」/kel Day 65「？？？」虽然当初立志要写日记，但是真的不想写（ Day 66「废物竟是我自己」之前有一天被 ZJ 私聊问要不要打 CCCC 团体天梯赛，然后那我肯定不好拒绝。 于是就是今天了。虽然我觉得以我的水平也就是去划个水。 要求似乎还挺多，让录一段考场周围环境的视频，甚至还要求这段视频里面周围两米范围内不能有其他人。 然后开题。L1，L2 的题都是巨大多水题，除了 L2 的最后两道。 L2-3 感觉是个树上的经典题目，结果不会。 L2-4 写了个 $O(n^2\\log n)$ 的 Dij 结果 T 掉了。 L3-1 是个，算是模拟吧，总而言之是顺利地切掉了。 L3-2 感觉也是个树上的经典题目。大体题意是，给定一棵有根树，求这棵树所有节点按照所有可能的 DFS 序排序后形成的序列的逆序对数量的总和。 记得好像有一种保留重儿子的技巧，可以把时间复杂度从平方优化到一个 $\\log$，不过没写出来。 题目给的第二个样例答案是 $516$，然后我的代码跑出来 $258$。感觉就差一点但是不知道错在哪里了。 L3-3，九条可怜，不会，滚。 感觉最近日渐颓废。想着做 CF 题，结果思维不够做不出来。想着做 OI 题，结果每次都是一读完题就开始写，写到一半才发现自己的思路太过暴力或者直接就是假的，正确的思路又需要使用一些数据结构，然后就懒得写了。 如此往复循环，现在是什么题都不会做了。 你他妈的！不可以这样的啊！不可以啊！.jpg Day 67「？？？」/kel Day 68「？？？」（2022-4-25）最近在刷堕化角色的通关标记。 堕化以撒强归强，对选择困难症太不友好了。 玩这个角色得有一半左右的时间在撕烤该拿哪个道具该换哪个道具。 堕化抹大拉好强啊直接横冲直撞都不用担心暴毙反正杀敌掉血然后副主动拍一下两颗红心。 然后开始玩堕化该隐。 有一说一，堕化该隐正常一局我能打 1h+。 Day 69「黑暗中的犹大人（bushi」因为堕化该隐非常的没有意思，于是开始玩堕化犹大。 然后第一局就在第一层的宝箱房捡了一个小号。 emmm……无法接受，R 了（ 以撒不就是个屎尿屁游戏（暴论 Day 70「食雪汉（指里蓝人」堕化犹大非常强于是很快就全红了。 然后开始玩堕化蓝宝宝。 弟啊你这眼泪根本打不出伤害啊。 弟啊你自带这么多大便有什么用吗。 总而言之就是无解弱。埋了吧（无慈悲 于是跑去隔壁打挑战。 首先是成功地靠镰刀眼泪和削皮刀削出来的 3 级肉哥打过了挑战 29。 然后是只开了一层天使房里面还只有一个道具的挑战 40。 第八层 BOSS 战两个妈心直接打起来了甚至连眼睛都没召唤出来。 挑战 41 需要解锁弹珠袋，但是我才发现我还没有解锁。于是直接打开控制台进行了一个安慰剂 + Gulp 的刷。 剩下的挑战还有三个：32，愚人节；34，终极困难；42，烫手山芋。 充血怪/肿胀/双目硫磺火是什么 diaomao BOSS 啊（暴论 Day 71「FUCK BLOAT！！！（震声」下次版本更新把这个 diaomao BOSS 删了罢（无慈悲 尤其是绿色变种（ 总而言之就是挑战 32 过了。 挑战 42 也在怀表和圣经的帮助下过了。 第六层一进商店就看到圣经是什么神仙运气啊。 然后尝试挑战 34。 因为比较难于是试图刷开局（指在一层图书馆刷出启示录）。 然而因为都是双重 BOSS 所以并不能被替换成天启骑士（悲 第八层，或者说因为是合并诅咒所以实际上是第四层，开了恶魔房，进去一看一个一血交易一个二血交易。 拿了那个二血的一看是亚巴顿。海星吧虽然不是硫磺火。 结果被超级撒旦乱杀（悲 Day 72「参孙感觉很健康！」又来打挑战 34（ 日常刷开局直到一层图书馆出启示录。 洞穴层开了天使房，一进去发现是个二选一，深思熟虑之后拿了左边的。 终末天启 唤醒你的信仰 于是这一局就过了（喜 感觉大傻蛋二阶段平均难度略低于一阶段。就拿这一局挑战 34 来说，我一阶段挨了三下，然后二阶段甚至无伤。 感觉二阶段就像期末考试，大傻蛋（试卷）要是只用（出）你会躲（做）的弹幕（题目）你就能无伤（过），要是只用（出）你不会躲（做）的弹幕（题目）你就会暴毙（挂）（光速逃 从某种意义上来说，挑战 34 稍微挽回了一些超级撒旦作为最终 BOSS 的威严。 然后开始刷里蓝人的通关标记……什么屑角色埋了罢（无慈悲 Day 73「休伤吾儿！」堕化蓝宝宝实在是太难玩了（悲 于是开始考虑刷堕化夏娃的通关标记。 感觉堕化夏娃就是血团数量堆上来了就能横着走，但是尤其是打 BOSS 的时候，或者是遇到某些高速贴脸怪，很容易一下子死一大片。 有一局打精神错乱就是如此，然后那局被百变怪残血反杀（悲 有一说一，平衡符号天下第一。 晚上打开了近一个月没有碰过的百橙，顺便进行了一个 DLC 的安排。 两个新角色，希夫和星乃丽华，分别对应之前 NoName 和星破的普通人(?)世界线。 然后拿到新角色肯定是先把语音听一篇。听说相比于之前的星破，丽华的性格要温和一些……但是完全听不出来，感觉还是跟个疯子一样（光速逃 属性的话，希夫 8 滴血是什么神仙啊。上一个血这么厚的好像还是斩子，然而斩子不能回血，这个希夫却有着 +0/-2/+0 的面板。这么一看好像也就平均值高了那么一点（ 机制并没有完全玩懂（ 另一边丽华则是 3 滴血，继彼特和奈奈子之后第三个全游戏血量最少的角色出现了，挺容易暴毙的。然后面板是 +2/+0/+0，兄啊说好的性格温和呢你这 +2 攻击真的不是用来鲨人的吗（半脑 被动倒是有一个和星破相反的只能选择星星目标，以及获得星星时数量 +1，然后 Hyper 是接下来三个回合从其他角色手上持续抢夺星星。 深夜突然想去玩一玩传说中的超级食肉男孩，于是就去买了个玩。 有一说一，操作手感真的就那样了（ 不知道是不是因为食肉哥只是一块肉，他是真的会粘在墙上和地板上的，尤其是粘在墙上的时候，不按跳跃只按方向键甚至从墙上下不来。 Day 74「山东盛产数学高手是吧」下午又有实验室的比赛。一共 4h，又是坐大牢的时间了（悲 上来 A 感觉很简单但是写了很久过不了一只 WA on test 2，于是去写 BC，结果 B 交了两发，C 交了三发才过。功力尽失（悲 读完 D 感觉不大会于是去改 A 的代码，终于在第五次提交的时候过了。 然后去写 E。 题目大意是，有一场 IOI 赛制的比赛，有一道题，有 $N$ 组测试数据，每组测试数据的答案都是 yes 或 no。但是您不会做，于是对于每一组测试数据，您随机回答 yes 或 no。为了防止被判作弊，您至多提交 $K$ 发，求最优策略下的期望成绩。 显然是，如果某一次提交的分数已经足够高了，那么就不要再提交了。 一开始我以为是只要分数严格高于 $\\lfloor\\frac{N}{2}\\rfloor$ 就不要再提交了，然后发现假了。 于是我很快（1h 之后）注意到，每次提交之后，如果剩下的提交次数能够达到的期望分数大于等于这此次提交的分数，那么就要再交一发。形式化地，设 $k$ 次提交的期望分数为 $E_k$，有 E_{k+1}=2^{-n}\\sum_{i\\gt E_k}{n\\choose i}i+2^{-n}\\sum_{i\\leqslant E_k}{n\\choose i}\\cdot E_k=p(E_k)\\cdot E_k+q(E_k)其中 $p(E_k),q(E_k)$ 可以预处理出来。 这是一个变系数线性递推数列。但是注意到数据范围有 $K\\leqslant 10^9$，一开始我是想不算到 $E_K$，算到 $E_{3\\times 10^7}$ 左右就足够满足精度要求了，结果喜提 WA on test 10。 注意到，当 $\\lfloor E_k\\rfloor$ 不变的时候，$p(E_k),q(E_k)$ 也是不变的，我们可以用二分求得下一个使得 $\\lfloor E_k\\rfloor$ 发生变化的 $k$。 $p(E_k),q(E_k)$ 为常数 $p,q$ 时 E_{k+1}=pE_k+q设 E_{k+1}+\\lambda=p(E_k+\\lambda)可以解得 \\lambda=\\frac{q}{p-1}然后我们就可以用求等比数列的方法求 $E_{k+m}$ 了，然后就真的可以二分了。 Day 75「？？？」（2022-5-2）本来想写点什么的结果忘了。 堕化参孙强是强，只是进了狂暴接下来连着两三个房间一只怪不刷是真的血压 up。 Day 76「？？？」堕化 AZ 似乎也很强，只是如果不用标记的话自带的硫磺火蓄力时间有点长（ 蓄力到一半以为可以了一松射击发现射不出来（悲 Day 77「？？？」平静的一天。 Day 78「？？？」平静的一天。 Day 79「？？？」平静的一天。 Day 80「？？？」今天下午是电路实验。 发现座位表上没有我的名字但是有一个座位是空着的于是我就坐在那里了。 同组的（本来应该是的）FYF 还在寝室里睡大觉于是只能我一个人做了。 做实验好难啊我用了 1.5h+ 才弄明白那些个仪器怎么使用。 Day 81「？？？」平静的一天。 晚上成功地举办了信息组第一次大型（指除了阿块以外基本上都来得差不多了）线上集会（ Day 82「周三放假是吧」（2022-5-9）下午一二节本来是电路课，但是 XP 群里面不知道为什么突然有一群蛤蟆开始语音聊天。 然后我还没下课不好开麦于是试图使用它那个文字交流功能，结果不知道为什么没有人理我。 然后快下课的时候…… zhuoer「诶成爷似乎在这里孤独地发着文字。」 心情简单.jpg Day 83「什么超级贪婪」本来正在刷堕化伊甸的通关标记，结果刷到自闭了。 堕化伊甸是什么 diaomao 角色啊不会真的有人在除了刷成就以外的时候玩吧。 堕化游魂那当然是跳过。整个游戏暴毙率第一的超级 diaomao 角色（ 试图刷堕化店长的通关标记，结果是两个血上限其实比起里罗的一碰就死并没有多出来多少容错，尤其是向死寂，精神错乱这种没有小怪补给的最终 BOSS，差不多也就相当于是身上带着一张神圣卡的里罗。 有一局在蓝子宫层的宝箱房找到了吸血鬼之魅，打死寂前半段血量直接巨大多溢出，结果后半段它就不刷小怪了（ 喜提暴毙 :( Day 84「？？？」职业生涯规划是什么 diaomao 作业啊（暴论 Day 85「？？？」平静（并不是）的一天。 Day 86「？？？」电子电路实验报告是什么 diaomao 作业啊（半脑 Day 87「？？？」军事理论论文是什么 diaomao 作业啊（全脑 话说回来今天似乎是恋恋之日的来着（ 奇怪的节日增加了（光速逃 好吧可能也没那么奇怪（光速跑回来 Day 88「什么人形自走 D4 + D8」堕化伊甸是什么 shadiao 角色啊（震怒 本来想用那个人形自走 D100 的说法的，不过一想好像里伊甸能 roll 的也就只有自己身上的东西了，对应的骰子好像只有一个 D4 一个 D8。 如果真的挨一下就触发一次 D7（重新开始当前房间）那就真的是狗都不玩的角色了（ 打百变怪打到残血一不小心挨了一下，直接全 部 木 大（绝望 或者当成里罗玩（小声 Day 86「？？？」（2022-5-16）堕化该隐，狗都不玩.jpg Day 87「？？？」里罗好难（悲 Day 88「？？？」晚上把大逆转裁判又捡起来玩了玩。 Day 89「？？？」日常打里罗，这次走回溯线结果第一次打到这里太紧张于是暴毙了（绝望 论里罗的一百种死法.jpg 话说回来，大逆连续两次提示存档的时间间隔好长啊。逆转 123 都是每隔 30min 左右就待续一下，结果大逆直接一口气 2h+。 Day 90「……我那狂野的钢铁脚后跟重重地敲在桌子上的无礼。」还请原谅。 lmao.jpg Day 91「里双子，（）都……还是算了罢」距离全红还剩四个角色： 堕化该隐，还差究极贪婪。 堕化游魂，比起上面还差精神错乱。 堕化伊甸，比起上面还差母亲和祸兽。 堕化雅各，比起上面还差撒旦，羔羊和超级撒旦。 :( 大逆转裁判真好玩（光速逃 Day 92「？？？」还没写呢.jpg 算了不写了.jpg Day 93「今天没碰以撒」（2020-5-23）直角。 Day 94「今天没碰以撒 ×2」直角。 试图用 Unity 写一个简单的 STG。 造轮子好难（光速放弃 Day 95 - 98「这个人很懒」什么也没有写。 Day 99「基础生疏.jpg」今天下午去新校区打排位赛 R2。 首先 A 一眼秒了，结果乘法取模之后加法忘记取模了喜提一发 WA。 然后 B 不会于是去看 C。 C xjb 转化了一波自以为高到不知道哪里去了，结果疯狂 WA。 然后回过头去看 B，对着样例总结了一下规律，然后再稍微一分析，啊这这不是思博题吗。 然后 D 就是一个树上 DP，没有问题。 这个时候已经 2h 了。 然后返回去看 C，才发现是转化出锅了，直接一波暴力然后真就过了。 这个时候已经 3h 了。 E 一看就知道不会。 F 有一个弱化版 F1，切掉算 0.5 分。一开始我是写了个 std::set&lt;std::string&gt;，结果因为时间复杂度实际上大概有 $O(n^3\\log n)$ 于是疯狂 TLE。 后来我突然意识到，不是有个东西叫字符串 hash 吗。 于是写了个双模 hash，模数用的 $998244353$ 和 $19^9+9$，然后过了。 虽然都是 4.5 题但是很明显有一位叫做 SHX 的同级 dalao 的罚时不知道比我小到哪里去了。 只可惜那位 dalao R1 比我少切一道题然后排名就比我低了（ 群内 dalao「AB 考察的都是取模。」 还是上面那位「没有很快通过的说明经验生疏了。」 Day 100「100 天辣！」（2022-5-30）去他妈的电路实验（震声 Day 101「人为什么要活着」为什么要连着补两节课直接从 7：00 一口气干到 12：00 啊，老师这是觉得 AHU 人均铁人是吗（ Day 102「儿童节」（2022-6-1）儿童的眼神.jpg Day 103「新宇宙（迫真」还挺上头的（这句话指《盗贼遗产 2》）（ 简单感受了一下《冰与火之舞》的新 DLC Neo Cosmos，感觉要患上读谱障碍综合征了（ 长条好别扭啊而且还是尾巴带判定的长条。不过也可能只是单纯地因为我不会打（ 这个 DLC 甚至还有剧情（ 话说回来，存档读档算作弊吗（ 如果算的话，那个存档点都是你给我摆好的为什么我就不能用了（ 感觉一开始那个什么监管者的角色设计挺 ao 看的，有新宇宙的感觉。我是说他那一堆手。 亡蝶葬仪（无端迫害 Day 104「盗贼遗产 2」成功通过堆命打过了这游戏的一周目的两个最终 BOSS？算是吧。 虽然但是，稍微小小地剧透一下，最终 BOSS 是个缝合怪（ 然后会解锁一个累赘系统，类比一下的话就是 Hades 的热度系统，就是会有一些增加难度的选项，然后打开这些选项再从头通关一遍就会有新内容。 一周目忍着没开房规，二周目试着关了碰撞伤害果然世界清静了许多。 感觉如果一个 BOSS 身上安上去太多风格不同的技能的话就会有缝合的感觉。 我觉得这是坏的，是个人都会谔谔的（ 全盛拉麦好强（ 话说回来，为什么 BOSS 房地形也被加强了啊（ 简单找了一下隐藏要素，感觉任务表上给的提示就是那种，找不到的时候看不懂，找到了又觉得好像说的挺有道理的。 以撒说不定已经不会玩力（悲 Day 105「逻辑与推理的实验剧场」其实就是看福尔摩斯胡诌（ 每天日常部分第一件事就是看福尔摩斯日常犯病（ Day 106「:(」:( Day 107「:(:(」（2022-6-6）明天似乎是高考 Day 1？ 希望无敌的阿块能够考个好成**。 Day 108「？？？」虽然端午节已经过去很久了不过…… 什么是粽子？ 要是被包起来的就行。 里面是不是饭也没关系了。 综上所述，结肠造口袋是粽子（暴论 Day 109「？？？」全盛拿玛是什么 diaomao 东西啊（半脑 Day 110「？？？」平静的一天。 Day 111「？？？」平静的一天。 Day 112「？？？」平静的一天。 Day 113「进行一个分的骗」上午有 diaomao 军事理论考试。 虽然准备了答案但是还是有部分题目找不到（悲 下午去新校区打省赛。 三人一组共用一台电脑。IOI 赛制，因为没有罚时所以十分地不紧张刺激。 贡献了一道 A 和一道 E。本来想写一写 K 的结果到最后调不出来了。 其中 F 存在判断无解并输出 No Solution 的部分。 同队 dalao「进行一个 &quot;No Solution&quot; 的 puts()。」 Day 114「推理（确信」（2022-6-13）大逆转裁判 2-5，最后的《逻辑与推理的实验剧场》。 福尔摩斯「船马上就开了，这次就不『玩』了。」 燃起来力！燃起来力！（狂喜 所以说福尔摩斯以前推理的时候都是，5s 看到真相，然后 55s 撕烤怎么整活（ 那就是饿昏头的狮子吃了《地毯》！ 就是成为这家当铺的店员，用铲子在这里挖地！ 被害人的死因就是「吃太多」质量很差的肥皂所引发的中毒身亡！ 龙之介写的人物档案「他的推理每次都让人惊掉下巴。」 Warning：以下折叠部分包含剧透内容。 Warning：以下折叠部分包含剧透内容。 Warning：以下折叠部分包含剧透内容。 123456789大逆二最终章一连放倒两个法官，打破了逆转史上「法官席无真凶」的定律……好像的确「法官就是真凶」这种展开还是天马行空了一点（好吧其实如果是《惯例的老爷爷》的话就不会有问题，但是问题是沃尔特克斯和慈狱都是《有名字的》。（↑这是什么奇妙的书名号用法）此玉正是狼（划掉烧起来力！烧起来力！（指法官豹变 Dat 115「？？？」平静的一天。 Dat 116「？？？」平静的一天。 Dat 117「？？？」平静的一天。 Dat 118「？？？」平静的一天。 看了一遍大逆转裁判的附加内容里面的《成歩堂龍ノ介の罪深き七日間》。 虽然不知道为什么没有翻译。 而且甚至不能暂停。 好吧其实有暂停不过暂停的时候是看不到字的而且暂停之后一小段时间内不知道为什么听不到语音。 很多时候只能读懂一个大概意思。具体细节就分析不过来了（光速逃 有些时候甚至大概意思都不确定看得对不对（再次光速逃 尤其是第一夜和第四夜的判决篇，福尔摩斯那什么「言えない」「気がしない」一套组合拳打下来直接给我干蒙了（ 还有，班吉克斯声音 ao 听 /se バンジークス「罪深き被告人、成歩堂龍ノ介。 貴公の罪は、『殺人』。」 这里应该指的是 1-1 吧。后面还说审判就在明天（指游戏正式版发布）。 Day 119「？？？」平静（其实也不是啦）的一天。 Day 120「期末考试 Day 1/3」期末考试 Day 1，物理 + 英语。 感觉不良好.jpg 到了物理考场突然发现一个问题就是，没带计算器。 噔 噔 咚（绝望 下午英语……只能说整整一年没学过英语了，上课全程划水半个字都不带听一下的（光速逃 选词填空平均一道题一个词不认识，选答案全凭感觉。 欸这个词看起来好像带点贬义的样子。 欸这个词看起来像是刚学的的样子。 能过应该是能过，不过大概也就仅此而已了（小声 下午有亚洲时间场的 CodeForces Div. 2（17：05 开始，2h），本来想在 xp 裙里问一下有没有人打不过还是算了吧，应该是没有的。 好久没打过 CF 了怕不是要下分。 话说回来 xp 裙改名了。 Day 121「期末考试 Day 2/3」（2022-6-20）期末考试 Day 2，高数 + 线代。 而且还是一个上午连着考两门。 拿到高数试卷一看，选择第一题要求计算两条直线的夹角。 结果算了半天 $\\cos\\theta$ 整出来了一个非常奇怪的数字，好像是 $\\frac{11}{23}$ 还是多少。 当时我就方了，啊这为什么我选择第一题都算不对了。 然后大题第三题让算一个函数的极值，然后那个函数里面含 $y$ 的部分居然是 $y^3+12y$。 兄啊这不都无界了吗（半脑 当然最后说是题目出错了。 隐函数怎么搞啊不会啊。结果大题第二道 xjb 写了一通，估计一分都捞不着了。90+ 怕不是没希望了。 然后是线代。感觉就计算量来说的话，线代应该是最大的了。草稿纸整整两面被我几乎写完了。 大题倒数第二道要求二次型的标准型，然后就需要用到那个 $QAQ^{-1}$，就需要用到施密特正交化。 $QAQ^{-1}$（并不是颜文字 结果把 $(\\alpha_1,\\alpha_2,\\alpha_3)$ 算出来之后我突然意识到一个问题，我忘了施密特正交化的式子了。 噔 噔 咚（绝望 就在这个时候我随手算了一下 $\\alpha_1\\cdot\\alpha_2$，发现…… 欸这个东西居然等于 $0$！（感叹号，表达惊讶，不表示阶乘） 然后进一步验证之后我发现，$(\\alpha_1,\\alpha_2,\\alpha_3)$ 已经两两正交了。 乐，都可以乐。 证明题感觉 xjb 写了一通也不知道对不对。这边 90+ 应该也希望不大了。 Day 122「中场休息 Day 1/3」平静的一天。 Day 123「中场休息 Day 2/3」虽然说是中场休息不过下午还有电路实验考试。 抽到了积分运算电路，xjb 连了一通结果老师过来一看「嗯……不是很理想（连的什么 jb 玩意）」，然后给了个 B。 Day 124「中场休息 Day 3/3」平静的一天。 Day 125「期末考试 Day 3/3」上午离散。 感觉比想象中难了那么一些，怪不得考试前三天老师一只在群里催我们复习。 两道逻辑演算题一道写到一半发现条件写假了，一道只证明出来一般的结论。 下午电路。 觉得电路可能会有一些复杂的计算于是带上了计算器。结果一次都没有用上。全是字母（ 感觉题型有那么的一些出乎意料，不过这种程度没有问题的！（大嘘 收卷的时候看了一眼前桌同学的答案突然发现自己第一大题第三小题算平均有功功率的时候直接用的是最大值。 噔 噔 咚（绝望 老师，菜菜，捞捞，呜呜.jpg 犯什么病啊你又不需要捞（","link":"/university-second/"},{"title":"退役选手 Challestend 的 CF 杂题题解","text":"直角。 值得注意的是，本题解使用的记号可能与原题不同。 有些看题解看出来的思维题就不写代码了。 「CF558E」A Simple Task传送门 给定一个长度为 $n$ 的仅包括小写英文字母的字符串。$m$ 次操作，每次给出一个区间要求升序或降序排序。输出最终得到的字符串。 $1\\leqslant n\\leqslant 10^5$，$0\\leqslant m\\leqslant 50000$。 显然我们可以将排好序的区间缩成一个点，然后维护一下每个点内部每个字母的出现次数和它的排序方式。一开始的时候可以认为是 $n$ 个点，每个点只包含一个字母且升序排序。 每次操作就把区间两边的点拆开，然后把整个操作区间并成一个大点。 时间复杂度 $O((n+m)|\\Sigma|\\log n)$，这题 $|\\Sigma|$ 是常数 $26$ 所以实际上就是 $O((n+m)\\log n)$。 然而拆点写不动 :( 写了大半天突然发现没考虑操作区间已经被包含在一整个点内部的情况于是果断放弃了。于是就没有代码实现了。 「CF451E」Devu and Flowers传送门 给出 $n$ 个集合，第 $i$ 个集合有 $a_i$ 个元素。相同集合元素不可区分，不同集合元素可区分。从这里面选出 $m$ 个元素，问方案数，模 $998244353$。 $1\\leqslant n\\leqslant 20$，$0\\leqslant m\\leqslant 10^{14}$，$0\\leqslant a_i\\leqslant 10^{12}$。 首先我们发现 $m$ 和 $a_i$ 的范围都非常非常的大，也就是说 NTT 行不通了。 于是考虑容斥。转化为求 \\begin{cases} &\\forall 1\\leqslant i\\leqslant k,0\\leqslant x_i\\leqslant a_i\\\\ &\\sum_{i=1}^{n}x_i=m \\end{cases}的解 $(x_1,x_2,\\cdots,x_n)$ 的数量。 令 $F_k$ 表示恰好有 $k$ 个 $x_i\\gt a_i$ 的方案数；$G_k$ 表示钦定 $k$ 个 $x_i\\gt a_i$ 其他随意的方案数。那么 G_k=\\sum_{1\\leqslant i_1\\lt i_2\\lt\\cdots\\lt i_k\\leqslant n}{m-\\sum_{j=1}^{k}a_{i_j}+n-1\\choose n-1}G_k=\\sum_{i=k}^{n}{i\\choose k}F_iF_k=\\sum_{i=k}^{n}(-1)^{i-k}{i\\choose k}G_i求出 $F_0$ 即可。 关于 $G_k$，注意到右边那个组合数因为 $n$ 很小，算一次只需要 $O(n)$。那么 $O(2^n)$ 暴力枚举左边的子序列就好。总时间复杂度 $O(n2^n)$。 我是绝对不会说我算减法忘了 +mod 结果 WA 了一发的（ 当然我更不会说我因为每次求组合数 $O(n\\log\\text{mod})$ 暴力算阶乘逆元结果 TLE 了一发的（ 功 力 尽 失 不会吧为什么 $O(n2^n)$ 和 $O(n2^n\\log\\text{mod})$ 差得这么多啊。 评测记录 「CF1188B」Count Pairs传送门 给定一个长度为 $n$ 的序列 $a$ 和常数 $p,k$。保证 $a_i$ 两两不同，且 $p$ 是质数。 求数对 $(u,v)$ 的数量，使得 $1\\leqslant u\\lt v\\leqslant n$ 且 $(a_u+a_v)(a_u^2+a_v^2)\\equiv k\\pmod{p}$。 $2\\leqslant n\\leqslant 3\\times 10^5$，$2\\leqslant p\\leqslant 10^9$，$0\\leqslant k,a_i\\lt p$。 太菜了没有思路于是被迫看题解。 考虑到 $a_i$ 两两不同，我们有 \\begin{aligned} (a_u+a_v)(a_u^2+a_v^2)&\\equiv k\\pmod{p}\\\\ (a_u+a_v)(a_u-a_v)(a_u^2+a_v^2)&\\equiv (a_u-a_v)k\\pmod{p}\\\\ a_u^4-a_v^4&\\equiv (a_u-a_v)k\\pmod{p}\\\\ a_u^4-ka_u&\\equiv a_v^4-ka_v\\pmod{p}\\\\ \\end{aligned} emmm 话说回来 $u,v$ 放在下标上是不是看不大清啊。 但是我觉得这种情况下 $u,v$ 两个字母算是最合适的了。所以说就这样吧（光速逃 没有代码实现。 「CF383D」Antimatter传送门 给定一个长度为 $n$ 的序列 $a$。每次操作可以选定一个区间 $[l,r]$，将区间内每个数染成红色或者黑色（不可以不染色），如果红数黑数分别求和后结果相等，那么这次操作是合法的。求合法操作数量，模 $10^9+7$。两次操作不同当且仅当选定区间不同或者区间内至少一个数颜色不同。 $1\\leqslant n,a_i\\leqslant 1000$，$\\sum a_i\\leqslant 10000$。 太菜了没有思路于是被迫看题解。 令 $w=\\sum_{i=1}^{n}a_i$。 首先我们有一个简单粗暴的背包搞法。令 $f(i,j,S)$ 表示在 $[i,j]$ 内选出若干个数加起来等于 $S$ 的方案数，那么这个显然可以 $O(n^2w)$ 搞出来。那么答案就是 \\sum_{i=1}^{n}\\sum_{j=i}^{n}f\\left(i,j,\\frac{1}{2}\\sum_{k=i}^{j}a_k\\right)但是这不够，我们需要优化。 考虑分治。设当前分治到 $[L,R]$，令 $m=\\left\\lfloor\\frac{L+R}{2}\\right\\rfloor$，我们需要处理出左端点在 $[L,m]$ 上且右端点在 $(m,R]$ 上的所有区间的贡献。这里一个区间的贡献指的是一次操作选定这个区间后染色的方案数。 考虑任意选取 $x_1\\in[L,m],x_2\\in(m,R]$，令 $T_1=\\sum_{i=x_1}^{m}a_i,T_2=\\sum_{i=m+1}^{x_2}a_i$。设有一种操作，$[x_1,m]$ 上黑色数字之和为 $S_1$，$(m,x_2]$ 上黑色数字之和为 $S_2$。那么这次操作合法当且仅当 S_1+S_2=\\frac{T_1+T_2}{2}即 (2S_1-T_1)+(2S_2-T_2)=0则 $[L,R]$ 上跨中点区间的贡献之和为 \\sum_{x_1=L}^{m}\\sum_{S_1=0}^{w}\\sum_{x_2=m+1}^{R}\\sum_{S_2=0}^{w}\\left[\\left(2S_1-\\sum_{i=x_1}^{m}a_i\\right)+\\left(2S_2-\\sum_{i=m+1}^{x_2}a_i\\right)=0\\right]f(x_1,m,S_1)f(m+1,x_2,S_2)虽然这个式子像这样写出来很吓人，但实际上只要稍微发挥一下人类智慧我们就可以将其优化到 $O(w(R-L))$。具体方法读者可自行撕烤。 那么总时间复杂度 $O(nw\\log n)$。 本来不想写的不过想了想还是写一下吧。 下了体育课就去写。 评测记录 「CF1451E2」Bitwise Queries (Hard Version)传送门 有一个长度为 $n$ 的序列 $a$，但是您不知道它长什么样。每次您可以指定 $1\\leqslant u\\lt v\\leqslant n$，并得到 $a_u$ 和 $a_v$ 按位与|或|亦或的结果，这叫做一次查询。您最多只能进行 $n+1$ 次查询，然后您需要给出序列 $a$。 $4\\leqslant n\\leqslant 2^{16}$ 且 $n$ 是 $2$ 的幂，$0\\leqslant a_i\\lt n$。 以下，$\\wedge$ 表示按位与，$\\vee$ 表示按位或，$\\oplus$ 表示按位异或。 首先我们需要对于 $i\\gt 1$ 查询 $a_1\\oplus a_i$，然后我们只需要知道 $a_1$ 的值即可还原出整个序列。 以下设 $t_i=a_1\\oplus a_i$。显然 $t_1=0$。 若存在 $u\\neq v$ 但是 $t_u=t_v$，这说明 $a_u=a_v$。那么我们查询 $a_u\\wedge a_v$ 即可得到 $a_u$ 和 $a_v$，也就得到了 $a_1$。 否则，则 $t_i$ 两两不同，即 $a_i$ 两两不同。找到 $u$ 使得 $t_u=1$，查询 $a_1\\wedge a_u$ 即可得到 $a_1$ 的二进制表示中除最低位以外的所有其他位。然后再找到 $v$ 使得 $t_v=2$，查询 $a_1\\wedge a_v$ 即可得到 $a_1$ 的二进制表示的最低位。 注意到 $t_i\\in[0,n)$ 且 $t_i\\neq 0$，可以看出上述 $u,v$ 必定存在且唯一。 评测记录 「CF1613E」Team Building传送门 有 $n$ 个人，要从中选出恰好 $p$ 个人参加比赛以及恰好 $k$ 个人围观。第 $i$ 个人如果围观会产生 $a_i$ 的价值。参加比赛的话有 $p$ 个位置，第 $i$ 个人在第 $j$ 个位置上产生 $s_{i,j}$ 的价值。要求最大化价值和。 $2\\leqslant n\\leqslant 10^5$，$1\\leqslant p\\leqslant 7$，$1\\leqslant k,p+k\\leqslant n$，$1\\leqslant a_i,s_{i,j}\\leqslant 10^9$。 考虑到，如果我们已经确定好了要让哪些人参加比赛，那么剩下的人里面要去围观的一定是 $a_i$ 最大的那 $k$ 个人。 于是我们先将所有人按 $a_i$ 降序排序。令 $f_{i,S}$ 表示在前 $i$ 个人中选出一些人参加比赛并填满集合 $S$ 里的位置，然后其他人围观，这样能够得到的最大价值和。 同理，令 $g_{i,S}$ 表示在前 $i$ 个人中选出一些人参加比赛并填满集合 $S$ 里的位置，然后其他人闲着什么也不干，这样能够得到的最大价值和。 显然 $O(p2^pn)$ 可以处理出来。 然后答案就是 $\\max_{i=|S|+k}(f_{i,S}+g_{n-i,U-S})$。其中 $U=\\{1,2,\\cdots,p\\}$。 这题是我在学校的 ACM 实验室写出来的。一个下午一共写了两道题都和状压有关。下一题也是。 评测记录 「CF547C」Mike and Foam传送门 给定一个长度为 $n$ 的序列 $a$。您需要维护一个集合 $S$，初始为空。$m$ 次操作，每次给出一个下标 $x$，如果 $x\\notin S$ 就将 $x$ 插入 $S$；否则就从 $S$ 中删除 $x$。每次操作后您需要给出下式的值 \\sum_{u,v\\in S,u\\neq v}[a_u\\perp a_v]$1\\leqslant n,m\\leqslant 2\\times 10^5$，$1\\leqslant a_i\\leqslant 5\\times 10^5$。 以下令 $w=\\max_{i=1}^{n}a_i$。 一开始我是这样想的：对于每个位置 $x$ 建立一个标号为 $x$ 的圆点；对于 $\\leqslant w$ 的第 $i$ 个质数建立一个标号为 $i$ 的方点。每插入一个位置 $x$，如果第 $i$ 个质数能够整除 $a_x$，就在标号为 $x$ 的圆点和标号为 $i$ 的方点之间连一条边。 这样，$a_u\\perp a_v$ 当且仅当标号为 $u$ 的圆点和标号为 $v$ 的圆点不连通。于是使用并查集维护。 但是这样的话不好删除，于是考虑线段树分治转化成只有插入没有删除。总时间复杂度 $O(m\\log m\\log(n+w))$。 但！是！……显然这种做法是假的。 考虑 $a=\\{2,3,6\\}$，我们发现按照上述建图方式我们会得到「这三个数两两不互质」这样的结论。但显然这是错的因为 $a_1\\perp a_2$。 于是我们考虑容斥。令 $f_{x,v}$ 表示集合 $S$ 中有多少个下标 $y$ 满足 $(a_x,a_y)\\geqslant v$。那么插入 $x$ 时产生的贡献就是 \\sum_{v|a_x,v\\gt 1,|\\mu(v)|=1}(-1)^{\\gamma(v)-1}f_{x,v}其中 $\\mu(v)$ 表示莫比乌斯函数，要求 $|\\mu(v)|=1$ 是因为我们只需要关注 $(a_x,a_y)$ 中有多少个不同的质因子，而并不需要知道这些质因子的次数分别是多少。 同时 $\\gamma(v)$ 表示 $v$ 有多少个不同的质因子，$(-1)^{\\gamma(v)-1}$ 就相当于是容斥系数。当然这个东西也可以用 $\\mu(v)$ 来表示不过我觉得这样清晰一些。 然后值得注意的是上式计算的是有多少对 $(a_x,a_y)\\gt 1$，最终答案实际上是 ${|S|\\choose 2}$ 减去上式。 然后我们还需要维护一个 $c_v$ 表示集合 $S$ 中有多少个下标 $y$ 满足 $v|a_y$。 那么显然计算一次上式所需要的时间复杂度是 $O(2^{\\gamma(a_x)})$。注意到 2\\times 3\\times 5\\times 7\\times 11\\times 13\\times 17=510510\\gt 5\\times 10^5这意味着 $\\gamma(v)\\leqslant 7$。因此总时间复杂度 $O(2^7m)$。 虽然最慢的点跑了 $1871\\text{ms}$ 不过还好吧。 评测记录 「CF1404C」Fixed Point Removal传送门 给定一个长度为 $n$ 的序列 $a$。每次可以删除一个满足 $a_i=i$ 的元素 $a_i$，且删除会使得元素的下标发生改变。$m$ 次询问，每次给出 $x,y$，将序列的最左侧 $x$ 个数和最右侧 $y$ 个数修改成 $n+1$，然后问最多进行多少次删除。询问相互独立即，上一次询问时被删除或被修改的元素会在下一次询问前复原。 $1\\leqslant n,m\\leqslant 3\\times 10^5$，$1\\leqslant a_i\\leqslant n$。 被最新的多项式黑科技重工业干烂了继续来刷我的小水题。 每次询问相当于给出区间 $[l,r]$，然后只能删除这个区间内的元素。 考虑到对于 $a_i$，删除左侧的元素会使得其下标 $-1$，删除右侧的元素不会改变其下标。也就是说如果 $a_i\\gt i$，那么其一定无法被删除。 如果 $a_i\\leqslant i$，且能够在 $a_i$ 左侧进行至少 $i-a_i$ 次删除，那么 $a_i$ 一定能够被删除。每次贪心地删除最靠右的能够被删除的元素即可。 对于一次询问，显然其左端点越靠左，能够被删除的元素就会越多，且数量至少不会减少。即对于每个位置 $i$，存在一个 $f_i$，使得当询问区间包括 $i$ 时，若询问区间左端点 $\\leqslant f_i$，那么 $a_i$ 能够被删除；否则 $a_i$ 不能被删除。 考虑二分求解 $f_i$。注意到当询问区间包括 $i$ 且左端点恰好为 $L$ 时，$a_i$ 能够被删除当且仅当区间 $[L,i)$ 上存在至少 $i-a_i$ 个 $k$ 满足 $f_k\\geqslant L$。这部分可以使用主席树维护。总时间复杂度 $O(n\\log^2 n)$。 评测记录 「CF888G」Xor-MST传送门 给定一个长度为 $n$ 的序列 $a$。构造一张无向完全图，其中点 $u$ 和点 $v$ 之间连一条边权为 $a_u\\oplus a_v$ 的边。求最小生成树边权和。 $1\\leqslant n\\leqslant 2\\times 10^5$，$0\\leqslant a_i\\lt 2^{30}$。 经典 Boruvka 算法练习题。 简单介绍一下这种 B 开头的最小生成树算法： 每次迭代对于每个点 $u$，找出当前与其不连通的所有点 $v$ 中 $(u,v)$ 边权最小的 $v$，然后连边 $(u,v)$。 这里有一个细节是，每次迭代的时候选出来的 $n$ 条边要按照边权从小到大连，否则可能会出现连了大边结果小边连不上了的情况。 不难看出每次迭代每个点所在的连通块大小至少翻倍，于是总时间复杂度 $O(f(n)\\log n)$，其中 $f(n)$ 表示单次迭代的时间复杂度。 对于这道题，每次迭代需要对于每个点找出与其不连通的所有点 $v$ 中 $a_u\\oplus a_v$ 最小的 $v$。这可以通过动态开点字典树实现，读者可自行撕烤。 于是 $f(n)=n\\log a_i$，总时间复杂度 $(n\\log n\\log a_i)$。 然后调不出来了就这样吧。 评测记录（虽然是 WA 掉的） 「CF1528C」Trees of Tranquillity传送门 给定两棵 $n$ 个节点的树 $S,T$，均以 $1$ 为根。构造一张无向图 $G$，其中 $u,v$ 两个点之间有边当且仅当它们在 $S$ 中是祖先后代关系且在 $T$ 中不是祖先后代关系。求 $G$ 的最大团大小。 $2\\leqslant n\\leqslant 3\\times 10^5$。多组数据，$\\sum n\\leqslant 3\\times 10^5$。 首先我们把这个题意翻译一下，就是让我们找出一些点且这些点中任意一对点在 $S$ 中是祖先后代关系且在 $T$ 中不是祖先后代关系。 显然这些点在 $S$ 中是从一条深度递增的链上抠下来的，因此考虑对 $S$ 中每一条深度递增且从根到叶子的路径计算贡献。 对于点 $u$，设 $[l_u,r_u]$ 为 $T$ 中 $u$ 的子树的 DFS 序区间，问题转化成在一些区间中选出尽可能多的区间互不相交。 考虑设 $f_k$ 表示当前选出的所有区间右端点最大值恰好为 $k$ 时最多能选出多少个区间；同理，$g_k$ 表示当前选出的所有区间左端点最小值恰好为 $k$ 时最多能选出多少个区间。那么显然如果我们一定要选区间 $[l_u,r_u]$，此时的答案为 1+\\max_{i=1}^{l_u-1}f_i+\\max_{j=r_u+1}^{n}g_j使用线段树即可维护。总时间复杂度 $O(n\\log n)$。 代码实现先等会爬会山先。 结果一连拖了好几天。","link":"/random-solutions/"},{"title":"Codeforces Round","text":"直角，口胡一下刚刚过去的一场 CF 的题。 其实本来想打的然而没仔细看时间以为还是 22：35 开始结果一看 18：05 就开始了于是没赶上。 传送门 A. Luntik and Concerts给出 $a$ 个 $1$，$b$ 个 $2$ 和 $c$ 个 $3$。把这些数字分配到两个集合 $S_1,S_2$ 里，并最小化 $\\left|\\sum_{x\\in S_1}x-\\sum_{x\\in S_2}x\\right|$。 多组数据。$1\\leqslant a,b,c\\leqslant 10^9$。 $\\texttt{1s/512MB}$。 观察样例之后大胆猜想最小值一定是 $0$ 或 $1$。 于是 $a+2b+3c$ 为奇数时答案为 $1$，为偶数时答案为 $0$。 虽然只是个猜想不过看上去很靠谱而且如果是在考场上的话已经可以开始写了。 至于证明，肯定分类讨论几波就出来了就不整了（光速逃 B. Luntik and Subsequences给定一个长度为 $n$ 的序列 $a$。令 $S=\\sum_{i=1}^{n}a_i$，求 $a$ 有多少个子序列的和等于 $S-1$。 多组数据。$1\\leqslant n\\leqslant 60$，$0\\leqslant a_i\\leqslant 10^9$。 $\\texttt{1s/512MB}$。 注意到一个满足条件的子序列一定是 $a$ 删掉恰好一个 $1$ 和若干个 $0$ 得到的。 设 $a$ 中有 $c_0$ 个 $0$，$c_1$ 个 $1$，则答案为 $c_1\\cdot 2^{c_0}$。 所以说为啥数据范围这么小。 C. Grandma Capa Knits a Scarf给定一个长度为 $n$ 的字符串。从中删去若干个同种字符（可以一个不删或全部删去）使得原字符串变成回文串。无解输出 $-1$；否则输出至少需要删去多少个字符。 多组数据。$1\\leqslant n\\leqslant 10^5$，字符集小写字母。$\\sum n\\leqslant 2\\times 10^5$。 $\\texttt{1s/512MB}$。 首先，如果给定字符串最左侧和最右侧的字符相同，我们可以将它们删去，即不考虑它们。重复这个动作直到字符串最左侧和最右侧的字符变得不同（或者字符串变为空串，那么答案就是 $0$）。 假设我们选择删去最左侧的字符，将其记为 $c$。重复上述动作，如果最左侧和最右侧的字符相同，就将它们删去；如果不同，这两个字符中有 $c$ 就将其删去然后计数器 $+1$，没有 $c$ 就无解。直到字符串变为空串或者得出无解结论。 不过说实话看上去有点假。 D. Vupsen, Pupsen and 0给定一个长度为 $n$ 的序列 $a$，$a_i\\neq 0$。试构造一个同样长度为 $n$ 的序列 $b$，$b_i\\neq 0$ 且 $\\sum_{i=1}^{n}|b_i|\\leqslant 10^9$，使得 $\\sum_{i=1}^{n}a_ib_i=0$。 多组数据。$2\\leqslant n\\leqslant 10^5$，$0\\lt|a_i|\\leqslant 10^4$。$\\sum n\\leqslant 2\\times 10^5$。 $\\texttt{1s/512MB}$。 注意到对于任意实数 $x,y$，有 $y\\cdot x + (-x)\\cdot y = 0$。于是对于 $a_{2k-1},a_{2k}$，我们构造 $b_{2k-1}=a_{2k},b_{2k}=-a_{2k-1}$。 但是这样 $a_n$ 可能会单出来，于是我们就将其和 $a_1$ 再配对一次即可。 注意到此时 $\\sum_{i=1}^{n}|b_i|\\leqslant\\sum_{i=1}^{n}|a_i|+|a_1|$……好像超了。 好家伙管他的直接 xjb 一通乱凑得了。 E. Pchelyonok and Segments给定一个长度为 $n$ 的序列 $a$。构造 $k$ 个区间 $[l_1,r_1],[l_2,r_2],\\cdots,[l_k,r_k]$ 满足： $r_i-l_i+1=k-i+1$。 若 $i\\lt j$ 则 $r_i\\lt l_j$。 若 $i\\lt j$ 则 $\\sum_{x=l_i}^{r_i}a_x\\lt\\sum_{x=l_j}^{r_j}a_x$。 只需输出 $k$ 的最大值。 多组数据。$1\\leqslant n\\leqslant 10^5$，$1\\leqslant a_i\\leqslant 10^9$。$\\sum n\\leqslant 10^5$。 $\\texttt{2s/512MB}$。 令 f[i][j] 表示在原序列的第 $i$ 个后缀构造 $j$ 个区间时最左侧的区间上 $a_i$ 的和的最大值。 显然靠右的区间上 $a_i$ 的和越大，靠左的区间就会有越多的选择。 注意到 $j$ 一定和 $\\sqrt{n-i+1}$ 同级，这使得我们可以 $O(n\\sqrt{n})$ 暴力搞。 转移的时候就对于每个 $j$ 维护一下所有 f[i][j] 的最大值就好。 F and G不会（理直气壮 自己去看 CF 的题解吧（光速逃","link":"/cf1582contest-outnotes/"},{"title":"死するまで征く、この世界を彩るように","text":"已完结。 以不到 600 的高考成绩喜提安大（马哥大学）录取通知书。 然后颓废。 阿潮「靠！全都荒废了！」 经 典 永 流 传 Day -1早上 6 点出发，差不多快到下午 7 点才到。吃完饭已经 8 点了。 然后向阿块汇报了一下现状。 欸我这电脑的逗号键怎么坏了啊。好像有什么东西卡在下面了。 明天就要去报道了。那么现在是传统艺能的打退堂鼓的时间了。 话说回来，坐在车上没事干的时候回顾了一下卡农的《抚子色心灵》，才发现歌词几乎句句有据可考而且甚至看不大懂。 卡农的作词从某种意义上来说是不是退化了呢。虽然我也其实并不是很懂。 标题也是从里面复制摘抄出来的。 Day 0（2021-9-22）一大早上就听见有一群屑在外面大喊大叫。 6 点就起来了。以后是不是都得这个点起来了啊。 小颓一会，8 点去报道。 似乎我是第一个到宿舍的，然后碰到了两个推销校园卡的。 稀里糊涂地就办了一个。然后马上到宿舍的 FYF dalao 也跟着我办了一个。 然后突然发现不大对劲。 然后 YZ dalao 也到了。 剩下一位名字不会读的 dalao 要晚上才能到。 在这之后因为某些原因磨蹭了很久，一直到 12 点才整完。 然后跟着同宿舍 dalao 去食堂吃午饭，感受到了大学食堂和高中食堂之间的差距。 因为最近几天还没有课，整个下午都没什么事干，然后想颓却放不开手脚，于是整个下午就这样荒废了。 然后晚上最后一位 dalao 到宿舍了。其他两位 dalao 一起帮着他铺床铺。 气抖冷为什么我就没人帮我还差点把褥子套当成床单直接铺上去了（好吧是我自己没问 晚上 10 点开了班会，虽然我不确定自己有听进去多少。 听说宿舍氛围太沉闷了。啊这，躲在角落里一个人乖巧地自闭.jpg Day 1虽然把报道的那一天当成 Day 0 了，但是今天一节课没有就当成 Day 1 真的好吗。 6：30 就被吵醒了，然而完全不想起。 9：00 开始选课。虽然昨天晚上同宿舍 dalao 一直在研究怎么选但是并没有因此而学到些什么。 虽然听说教务系统的服务器不大星但还是被卡到去世了甚至卡出乱码了。 首先似乎要选一门体育。能不能不选啊（光速逃（好吧好像不行 和同宿舍 dalao 一起选了乒乓球，虽然完全不会。不过还好没有喜提啦啦操。 然后似乎还要选一门公共艺术。然而看着十四页的列表完全不知道怎么选（光速逃×2 最后艰难地选了「绘画赏析与启智疗愈」。好吧别让我来画就星。 然后今天就没有事了。愉快地颓废.jpg 话说回来，为什么课表里会有「军事理论」「形势与政策」「中国近现代史纲要」这种东西啊（苍蓝残想不通.jpg 听说 Deltarune 出第二章了于是去玩了玩。虽然其实第一章我已经玩通过一遍了。 和平线真是和平啊。目前进度第二章打完三个播放器。 不过说实话，全是英文的确是完全看不懂只能理清剧情大概（留下了英语没学好的泪水.jpg Day 27：00 才起来，就算这样整个人还是跟要去世了一样。于是早饭也没有吃。 8：30 进行了一个半小时的班会，虽然我并不觉得自己听进去了几个字。 然后 14：30 进行校史中的红色基因教育。那当然是一个字不听。整个宿舍全在打游戏。 16：30 线下班会。换句话说就是，要「自我介绍」了。 世界啊毁灭吧（无慈悲 在下面看着一群 dalao 上去一边自称社恐一边侃侃而谈只有我缩在最后一排乖巧地自闭。 结果没一会就到我了。好家伙这就是该来的总是会来的吗。 上去胡说八道了一通，顺便宣传了自己的题目组，虽然应该没什么用吧。 因为有些紧张于是通过给阿块留了几句话稍微缓解了一下。 然后下来才想起来好多该说的都没说。啊这我能不能用时间机器回到过去再来一遍啊（光速逃 本来打算不去吃晚饭直接回宿舍的，结果到了门口发现钥匙丢了于是去食堂等他们吃完。 欸不对啊我记得把钥匙放兜里了啊，它会不会是用瞬移自己走掉了呢？ Day 3早上天还没亮就被某种神秘力量叫醒了然后睡不着了。 而且不知道为什么这几天经常半夜莫名其妙醒过来。苍蓝残想不通.jpg 早上去录入面部图像数据，然后领教材。 录入完数据差点没找到其他人，一问发现其他人都让回宿舍了，只留下寝室长把四人份的书搬回去。 然后果然一个人太少了，于是除了我以外的两位 dalao 也被叫去了。 等真正拿到书才发现居然这么多整整 26 本。而且竟然给体育也专门整了一本书。这是 ao 的（没那回事 把这一大坨子书扔到桌子上，瞬间觉得这屑桌子怎么这么小。 「今天晚上一定有人预习，但我不说是谁。」 ——某 dalao 最近一直在玩 Hades，突然发现这游戏的盾牌是可以把攻击正面挡下来的。我大受震撼。 一直以为这游戏强调输出，只要我先一步把对面打死我就不会被打到了。 Day 48：00 开学典礼。 典礼最后一项要求唱校歌，然而并不会唱。甚至不看着歌词都听不清唱了些什么。 幻听「莘莘国士集资上香」（第三宇宙速度逃跑 明天就要开始上课了怎么办啊。 听说高数挂科的很多然而我还什么都不会啊怎么办啊。 世界啊毁灭吧（还是不要这样吧 Deltarune 第一章背景故事自带的 BGM 真好听我听爆.jpg 后天就要抽血了怎么办啊我可以提前先去世一下吗（好像不行 Day 5（2021-9-27）某种意义上的真正的大学的第一堂课。高数。上午一二节。 感觉可能至少三个月左右没动过脑子了有些去世。不过还好第一节课总体没讲什么。 然后三四节英语。三个月没接触过英语于是再次去世了。当头一棒。 中午随便吃了点啥就去体检了。然而排队时间过长导致四班集体迟到（ 下午五六节中国近现代史，鬼才听这种课翘了翘了。其实也没听进去几个字（心虚 然后今天就没有课了。快乐地颓废.jpg Hades 真好玩.jpg（虽然其实今天还没来得及碰 17：00 到 19：00 晚自习，虽然只是预习了一个小时的数学然后对着英语课本发了一个小时的呆。 求极限好玄学啊感觉课本上的习题都只是瞪眼出答案然后证明。这要是万一瞪眼出不来答案那不就去世了吗。 Day 67：00 要去抽血。虽然整个宿舍都是睡过了 7：00 才起床。 去体育馆一看发现队伍长得跟什么一样然后当场去世了。 于是光明正大地插队。于是 8：30 就抽完了。 然后本来打算去吃点啥然而没发现啥想吃的，于是直接开溜了。 11：00 开始试着写了写阿块的神仙题。 13：30 似乎就写出来了（虽然中间吃去吃了个午饭 就这么个小东西也要写两个小时我好菜啊（倒地 测了两个（弱不禁风的）小样例发现没有什么大问题的样子 下一节课是高级语言程序设计（ 不过因为是第一节课说不定只是去听老师瞎扯（小声 好吧还是讲了不少东西的。 Day 7早上 7：30 才挣扎着爬起来。 阿块「这就是大学生活吗。」 上午两节英语两节数学，虽然我感觉几乎没听进去什么。 qaq 可能这就是菜吧。 趁着下课时间跟阿块简单探讨了一下新题，顺便确定了国庆假期不回家留在学校。 然后中午在和阿块深入探讨分块问题。 说到区间修改区间数颜色，阿块想起来了一道 lxl 题于是去 Luogu 找。 找到之后一翻题解发现题解有一篇讲的做法还是阿块亲自教 TA 的。 阿块「忘的一干二净，笑死。」 阿块「那我可要经典想当年了。」 阿块「你要说理论上我会的确实还挺多的。」 阿块「但是根本写不出来，笑死。」 Day 8上午没有课，于是整个宿舍集体睡到 9：00+ 才醒。 阿块「这就是大学生活吗。」 12：45 要上交写给四年后的自己的信，于是趁这个时候赶了赶。 听说字数要求最低 400，然而并不管这些糊了两段不到 200 字打算就这么交上去了。 我「不会吧不会吧不会真的有人认真写这种东西吧。」 回想起来，其实五天前就说让写这个东西了。 本来是想着五天写一篇 400 字的小作文绰绰有余，结果拖延症发作硬是给拖到今天早上，然后开始赶工。 好家伙真就人均拖延症晚期。 下午四节计算机导论。前两节讲计算机的发展历史。 晚上一二节是第一次 后两节摸底测试，考了些基础理论，中文打字，Word，Excel 还有 PowerPoint。笑死，忘得一干二净.jpg 19：00 去上了人生第一节大学选修课。绘画鉴赏。 主要就是给您一幅画然后让您说这幅画哪里好哪里不好。 然后这个老师准备了很多大艺术家的画册一类的。上课积极回答问题可以加分，回答得越多得分越多；如果当上班长还会有分数保底。得分前几名就可以获得这些画册。 社恐原地去世。 Day 9（2021-10-1）国庆假期第一天，因为整个宿舍没有人回家，于是集体睡大觉。 上午当然是愉快地颓废。 下午似乎他们在整什么美术用具购买。因为一直在玩游戏一眼没看，就让同宿舍 dalao 帮我全都整了。 晚上跟着同宿舍其他三位 dalao 出去逛超市顺便在外面吃完饭。 来回一共走了 8000+ 步吧听一位 dalao 说。其他人似乎都一点事没有的样子只有我累到去世。 某 dalao「我靠我看你就是欠走。谁叫你成天坐在电脑前面玩游戏敲代码。就你这身体，你以后去当那个什么 007 你吃得消吗好家伙你吃不消的。」 Day 10国庆假期第二天。当然还是快乐地颓废。 关于 Hades，这游戏竟然第 10 次通关可以直接跳过最终 BOSS。然后还会看到 Staff 表。 也就是说，我终于真正意义上通关了这个游戏了吗。 然后王子就把他母亲接回阴间了。 然后王子就获得了一份还算正式的工作，从内部对冥府的防御工事进行武装突破，以此来揭露出其中的漏洞。同时把奥林匹斯众神一个个全都蒙在鼓里，让他们还以为自己是在一次一次地前往阳间找母亲。 话说回来你们阴间的这些个所谓防御工事，难道不是直接正面突破就能解决的东西吗（小声 In the name of Persephone, the queen. Open the door!（虽然这句话没截图 看了一下到目前为止总游戏时间 64h。 其实感觉如果一开始去看一些教程的话会进行地更快。虽然我不喜欢看那种东西。 虽然其实我也是看了一些的。看之前我甚至还以为好感度完全没用（小声 Day 11不知道为什么又把图书馆捡起来了。 在下四层卡到去世之后中三层莫名流畅。 然后被普鲁托暴打。 然后中午闯进来两个学长就开始推销。给推销了几瓶洗鞋洗衣服总之可能啥都能洗的产品。 然后当场拿起 CTY 的鞋洗了几下做演示。 CTY「那你直接把我整只鞋都给我洗了吧。」 学长「要收费。」 CTY「那可算了。」 演示完之后学长给出了两个方案：200 买三瓶，或者是 300 买五瓶。 CTY「我觉得三瓶就足够了。我是一个理性的消费者。」 学长「你看看，三瓶的话你们四个人分起来多不方便啊。五瓶的话你们每人单独用一瓶还可以留一瓶公用。」 CTY「我觉得我们三瓶全都公用谁想用谁就拿来用挺好。」 学长「你的这两个室友（FYF，YZ）怎么想。」 CTY「他们随我。他们都非常社恐的。——好吧其实我也社恐但我是寝室长。」 学长「那边那位学弟（我）呢？带着耳机听见了吧。」 CTY「ZYC 你好好想想。你一定要做一个理智的人。」 我「我都行。」 然后学长提出 300 给我们六瓶。 CTY「然后我就在想，如果我以后创业，跑到别人家去推销，我会想别人怎么对待我。如果我遇到的人一个个都不像我这样好说话，一听说我是传销的二话不说把我赶出去该怎么办。」 学长「那就支持一下吧。」 CTY「但是比起一个善良的人，我更愿意当一个理性的人。」 然后 200 买了三瓶。然后学长又送了一瓶。于是整个宿舍均摊费用每人 50。 然后宿舍长就开始在宿舍里大声呐喊，说如果我们感觉被强制消费了就大声说出来，强扭的瓜不甜之类的。儿童的目光.jpg 因为学校体育课要求跑步，同宿舍几个 dalao 就开始商量什么时候去跑步。 因为不是很饿，我就没去吃晚饭，在宿舍等另外三位 dalao 吃完回来。 CTY「我晚饭吃多了跑不了了。」 然后拖到 19：00。 CTY「我想起来了 20：00 还有原神直播。」 然后拖到 19：30。 FYF「我想起来了我 21：00 还有游戏内社团活动。」 然后拖到 19：50。 CTY「好的直播要开始了。」 于是今天并没有跑步。 Day 12我竟然打过普鲁托了！（倒地 有一说一泪滴的书页好强啊，切成防御姿态拿上「关注与集中」然后几乎完全不攻击只用反击的招架骰子把普鲁托震晕了。 晕过去之后还剩 120+ 血，然而这个时候助理司书也都死得差不多了能打出有效输出的也就穿着泪滴衣服的 Hokma 了我还觉得一回合不大星结果一张「紫光凝剑」一刀下去 70+ 伤害于是普鲁托直接没了。 快进到总类层阿尔加利亚反复多次暴打罗兰。 为什么这个苍蓝脑残这么强啊（ 为什么哲学层和宗教层的书页这个时候还是锁着的啊（ 罗兰你星布星啊你是不是传说中的黑不拉几哑巴啊（ 经过一个下午的反复尝试我觉得这样是布星的于是我把在哲学层用掉的塔尼娅的「傲然挺立」扣过来了。 然而这并没有什么用该被打死还是被打死.jpg 关于打法，现在有两个想法。 想法一就是只要脑残用「崩坏序曲」就想办法把第一颗骰子拼过去。 然而对面第二回合开始每回合至少 3 层强壮，然后就容易翻车。 想法二就是首先第一回合攒出 3-2=1 层震颤，然后第二回合一口气攒出 1+3+3=7 层震颤。之后想办法把震颤的数值维护在脑残的速度骰子取值范围之外。 然而「独奏之刻」命中掉震颤，「不谐和音」拼点失败掉震颤。很容易一不小心震颤层数就被砍。 而且似乎是只要脑残有一颗速度骰子和这边的震颤层数相等，他这一回合使用的所有「心灵共振」都会触发特殊效果。这可太阴间了。 这个 Win 10 自带的输入法是不是有什么大病每次出来的第一个匹配项总能巧妙地出点差错。 晚上跟着同宿舍 dalao 去跑步。 要求跑 2.5km 然而我跑了 1.0km+ 就感觉要去世了于是临阵脱逃了。 我觉得我体育就不及格了吧（ Day 13我打过苍蓝脑残了！！！（大叫并倒地 经过 40+ 次反复尝试，最终我找到了一种十分简单粗暴的策略： 第四张异想体书页拿「剧烈搏动」，然后在两个回合之内把脑残打晕并把他的红条削到 25。 然后我就真的做到了。于是下一回合脑残回满黄条并扔出来一张「最终旋律」，被放在了一颗 95 的速度骰子上。 然而我「Furioso」上一回合刚用完，于是我尝试扔出一张「卡莉斯塔工作室」。 第一次拼点 18：14，这一下给罗兰回了 18 点混乱，顺便脑残因为流血掉了 7 点血。 第二次拼点 19：12，这一刀下去 22 点伤害于是脑残直接没了。 话说回来脑残哪来的 7 层流血。 好吧原来是一张「Furioso」给了 5 层。 然后我就录屏了。我觉得这可以扔到 B 站上去。 了解一下 qwq 然后被黑不拉几哑巴暴打。 有一说一漆黑噤默接待战真的流程太长了。 Day 14一觉醒来 10：30。 为什么这个黑不拉几哑巴三阶段这么硬啊。 仔细分析了一下我发现我的卡组里面没有回转的卡。 于是我尝试在卡组里塞了两张「苍穹之枪」。 然而并没有什么用不如说表现得还比以前差了整个语言层在三阶段直接团灭了。 吃完晚饭把试着把星天歌下回来玩了玩。 好家伙这游戏竟然没有决死。好家伙这游戏按一下 Esc 居然直接就退出了。 虽然之前看过视频不过还是，2 BOSS 的二符终符太阴间了。这种弹幕射击绝对是不可取的。 之前那个视频好像是直接上避了。 话说回来，三面标题竟然直接就叫「森の中の猫の小屋」。本 社 爆 破（指冲到制作组老家 好吧也许是之后才确定这个名字的。 顺便 6 BOSS 可爱 awsl（光速逃 ……好吧原来宗教层和哲学层没有完全解放的话只能看到 A 结局。 然后我整个残响乐团就白打了！ 脑残白打了！ 黑不拉几哑巴白打了！ 好吧似乎我需要动用一些不正当手段了。 写个被动能力「拼点开始时，对所有来宾造成 998244353 点混乱伤害和伤害」。 Day 15国庆假期最后一天（悲 虽然好像其实也没干啥。 Day 16（2021-10-8）国庆假期结束了（悲 然后迎接我的是两节比红茶还要催眠的高数课（大悲 「没有人规定必须要正着走路啊为什么你们不倒着走路呢？」 话说今天似乎是我生日啊。 不知道为什么把兔子捡回来又玩了玩。 但是为什么我是不是显示出错甚至闪退啊（ 以及，哲学层解放战好难。去世了。 Day 17上午没有课于是睡到 10：00。 起床再次尝试了一下哲学层解放战。自闭了。 三阶段好难控罪痕层数啊一不小心就 3 个 3 层了。 然后四阶段的骰子点数就离谱为什么它随手一扔就是两个 18-18 的清算好家伙我直接暴风疑惑。 下午的时候买的椅子到了。然后试图一个人把它搬到宿舍然后去世了。 搬到一半感觉胳臂快要断了于是叫了一位同宿舍 dalao 来帮着搬。 晚上连着三节艺术鉴赏，然后我们在老师的指示下进行 抽 象 派 艺 术 创 作。 Day 18VICTORY！ 好家伙我终于打过哲学层解放战了。 因为四阶段有个形态 BOSS 会用一张命中扣光的 AOE，之前打的时候可能没怎么重视于是把光都给扣完了。 这次我打的时候特别重视了回光，在泪滴书页的防御架势里面塞了三张「能量转换」。于是成功做到了每回合开幕满光。 一鼓作气把宗教层解放战也打了。 「……操。我真的，不想，再，面对它了。」 话说回来这场解放战居然只有一个阶段。不过很难就是了。 一形态说每有一名使徒死亡就会使用一张书页「圣洗」我还一位会是什么 diaomao 没想到竟然给我这边回血回混乱抗性。 然后二形态上来一看红条黄条 666 还全抗性抵抗我差点吓死。 然后二形态上来就秒掉两个助理司书我直接暴风疑惑。 然后打着打着不知道为什么全抗性致命了。然后才发现是我没仔细看对面被动。 结果打死了对面突然原地复活然后甚至还把我这边所有司书一棒子敲晕了。 然后甚至还扔出来一张 66-66 的清算。 然后我一看 Hokma 的状态，我发现了 100 层守护和振奋。 然后下一回合除了 Hokma 以外所有司书被秒了。然后 Hokma 凭借着 100 层守护和振奋抗了对面一个回合的集火。 然后手里突然多了一张书页 666-666 清算，且造成真实伤害。 好家伙这算个什么演出我直接暴风疑惑。 然后使用作弊手段跳过了残响乐团接待战和漆黑噤默接待战。开始打总类层解放战。 馆长你星布星啊为什么你这些书页这些个骰子点数一个比一个小啊。 晚上的时候收到通知说军事理论课程到最后需要写论文。 一下是给定的论文课题，二选一。加粗部分是重点。 课题一：2009年开始，党中央、国务院、中央军委着眼建设一支强大的人民军队，作出重大战略安排，全面展开大学生征兵工作。你对这一战略安排有什么认识？你愿意在大学期间入伍吗？主要考虑是什么？ 课题二：学习和研究中国国防历史，通过比较中日甲午战争和抗美援朝战争，谈谈自己对国防和国防（军队）建设的体会和认识。 好家伙我直接龙卷风疑惑。 字数限制似乎是不超过 3000 字。啊这我写个 30 字交上去星布星啊。 Day 19（2021-10-11）早上睡到 7：30 被同宿舍 dalao。 爬起来已经 7：45 了于是没去吃早饭直接跑去教室了。 一二节高数，讲极限。感觉海星。 三四节英语。好家伙一个字不听，在 QQ 群里和高中同学聊天。 下午一二节近现代史。笑死，一个字都不听.jpg 晚上一二节是第一次上机课程。然后老师让我们自行研究代码。从下次上课开始正式开始学习自己写。 于是和同宿舍的另一位有一定基础的 dalao 一起教另外两位 dalao 阅读代码。 其实本来还戴着耳机打算听歌的来着，但是一看有老师学长到处转还有摄像头于是放弃了。 看戏.jpg 晚上又尝试了一下总类层解放战。 发现如果第一回合安吉拉拼点全输掉拿一张「脉动」就有机会在后面的一个对面扔过来三张「瘆白之手」的回合苟住不被打晕。 然后切阶段竟然给自动存档。好家伙这场解放战可太良心了。 （↑被热望带着 25 层「渴望」爆揍了一顿之后滚回来的人） （我还想为什么这样都能拼输结果一看好家伙 25 层强壮） Day 20没什么可以记录的 Day 21试图切掉 Luogu P7882。 然而经过多次反复尝试后我明白了，这不是我能做的题。 干败吓疯。告辞.jpg 把 Rabi-Ribi 捡起来又玩了玩。 本来想试试 Hell 难度的 DLC 沙耶，结果被揍到自闭。于是开 BEX 难度。 不知道为什么，感觉比以前玩 Hell 难度的时候顺畅很多。很多以前觉得非常难的地方现在都没什么了。也许是我的技术提升了吧。 话说回来我的新电脑可能有什么大病。动不动就会出现一些乱七八糟的显示错误。包括但不限于角色立绘五官莫名其妙消失，小怪的像素图看不到头发变成大光头或者干脆只剩下一双兔耳朵在空中飘着，以及文本出错。 而且每打完一个 BOSS 就要给我玩一波闪退。就是那种击破瞬间突然游戏崩掉然后只能再打一遍的那种。 现在卡在 Noah 战。四连 BOSS 战还没有补给可太去世了。 第一场 Miru 战甚至还不能带 Ribbon。瞬间感觉 DPS 下降了好几个数量级。 在 Miru 战用掉了所有消耗性物品然后打不过了于是被迫 SL。 Day 22下午四节计算机导论，其中三四节是上机课。 闲着没事翻了翻自己以前写的 Blog，发现自己竟然还研究过伯努利数这种神仙科技。 然后仔细阅读了一下还发现了一些小问题。 关于兔子，卡在（至少在我心目中的）整个游戏本篇（就是说不包括 DLC）最难 BOSS Milliam 了。 然后回去找了找发现以前的地图有好多道具落下没拿。 拿完之后道具收集率从 85%+ 提升到了 90%+。可海星。 Day 23上午一二节高数。虽然听得懂但还是差点昏睡过去。 「坐后排的那些……这个，不要放弃。」 中午尝试了一下国内做的那个兔子高级技巧教程，见识到了瞬移以及各种乱七八糟的极限高跳极限远跳。 学不来，告辞。 Day 24因为是周六然后只有晚上有两节课于是快乐地颓废。 看到 Luogu 有月赛于是报名了 Div 1。 切了 T1 然后 T2 因为一些玄学原因 WA 掉了。 然后看了看 T3 觉得不大会于是打算打一打 T4 的暴力，$O(nq\\log a_i)$ 的那种。 但是打到一半突然高中同学群里面有人讲话，于是跑去聊天然后暴力也不打了。算了 140 分就 140 分吧。 晚上有第一节大学生心理健康课。然后气氛活跃得完全不像是在上课。 然后情景模拟。就是说有个小宇同学高中成绩很好然后上了大学退步了于是开始怀疑人生。需要有一个人扮演小宇同学然后另外一个人扮演心理委员去对他进行心理辅导。 小宇「我学习不好。」 心理委员「学习不好那就要好好学习。」 小宇「我觉得你不适合干这行。」 xswl（某种 高雅的 笑声） 晚上上完课正在像一道 Ynoi 的某个实现细节，突然阿块在群里冒泡了。 然后阿烜来了一句「阿块，我的阿块」。 于是我们纷纷复读，然后群里就出现了一大片「〇〇，我的〇〇」。 然后逐渐发展成「〇〇……/se/se/se/se……我的〇〇……/se/se/se/se」。 zhuoer「突发恶疾了属于是。」 Day 25下午整个宿舍去图书馆转了一圈。 然而第一次去图书馆啥也不懂就跟乡下人进城一样乱逛。 然后打算去借书的地方看看。虽然其实一本书都没借就跑路了。 然后宿舍长自己留下来随便找了个地方，因为自习室都坐满了，然后打算写作业。剩下我们三个就回宿舍了。 一回到宿舍就看到大吊阿烜在群里宣传他们的 diaomao 队名。 我「我觉得哪个都不好。」 wwr「确实。」 晚上的时候第一次尝试了一下 BABA is YOU，虽然很早以前就听说过这游戏的大名了。 然后现在卡在 LAKE EX 2 了。 Day 26（2021-10-18）好耶！我打穿图书馆主线了！ 关于扭曲残响乐团，第一场我用的艺术层，本来想借着艺术层的回血手段用柳科长把他们全砍死，结果柳科长出师未捷身先死。 虽然到最后总而言之是勉强解决掉了对面四个。 然后第二场用语言层乱杀。 第三场还是用语言层，把脑残打成残血之后用哲学层补刀。 说实话扭曲残响乐团的配卡机制啥的完全没研究，一路莽过去的。 然后是最后的接待。不过话说回来明明是剧情杀为什么还要求必须要坚持足够的回合数啊。 然后获得一个 Steam 成就，「一码归一码」（指观看 C 结局）。 「그건 그거고，이건 이거니까。」（鸣谢此网站提供的文字识别服务） 打算写几个 mod 突然感觉自己那些想法一个比一个逊。然后美术工作也没办法搞。还是算了吧.jpg Day 27下午又是三节 C 语言。日常看戏 + 划水。 Day 28晚上卡着 18：20 去食堂，然后喜提最后一份麻辣香锅。 今天辅导员生日。然后见识到了二班三班的奇妙内卷。 生日蛋糕 + 祝福小视频 + 一整个黑板的祝词。甚至据说准备了五天。 好家伙，我直接好家伙。 Day 29听说 Deltarune 的背景故事配上自带的 BGM 是可以唱出来的。试了一下然后发现并不大能。 仔细反思了一下自己最近颓废地有多厉害，然后我意识到了再这样下去是不可取的。 于是立志开始重拾 OI 功力。 从字符串相关算法开始吧。 说不定明天早上一起来就全给忘了。 算了吧还是明天吧。 Day 30早上 8：00 才起来。然后一二节是高数于是早饭都来不及吃暴风赶到教室。 上完课跑去食堂买了个三明治，吃完才回宿舍。 一开电脑就看到百橙的新的角色 DLC，好家伙我直接当场。 首先是月夜姬梦。 I always though Hime with -1 DEF is bad…. now they gave her -2 DEF! Great! 翻译： 我一直觉得姬梦的 -1 防御已经挺糟糕了…… 结果她现在直接 -2 防御了！真棒！ （摘抄自 Steam 某评测） 然而 Hyper 看上去很强。闪避成功时对对方追加自身本应受到的伤害，回合数是 5 的倍数时最终伤害两倍。 想起「萎缩的血翼」 于是马上打开游戏试了一把。 结果没带抽卡的卡。 好不容易抽到一张 Hyper，然后踩到 BOSS 格，想都不想直接扔出去。 然后对面 +2 攻击扔了个 6。然后我这边回合数不是 5 的倍数于是 +2 闪避躲不开。 真棒！ 关于某社交界的菲尔涅特，不是很喜欢这个角色。而且根本就完全变了个人吧！ 不过说实话这身新衣服挺不错（ 然后甜点品尝者的兔萌萌和 Dangerous 的由希有了新的语音，也就是说不再和原版共用语音了。 去听了听甜点品尝者的新语音好家伙这兔子变身前也太懒了。当代大学生现状。 然后一变身不知道是不是错觉声音年轻好几岁（ 在不久的将来应该还会有一个角色 DLC。好家伙 gkdgkd（ 下午乒乓球课，打了一会球然后老师让我们跑 1000m。 结果跑了不到一圈就跑不动了于是耻辱跑路。 好吧希望我人没事。 Day 31中午试着写了一下 19 年十二省联考的某串串题。 然后写了调了三个小时发现没写拆点。 写拆点写到一半转念一想好像又得写个倍增不然复杂度要去世。 然后自闭了写不下去了。 甚至写到这里我 DAG DP 还一行没写。 好家伙，现在我连这么不到 200 行的代码都写不出来了吗。 想当年我可是盯着 500+ 行的代码硬生生调试了一个星期才终于做出来一道题的。 果然经过一整个高三，一整个暑假还有大学的最初一个月已经功力尽失了吗。 翻 Luogu 关注列表，看到这么一个签名： 高二学 OI 的一年，是我人生中最快乐的时光。 …………………… ……………… ………… …… 有点想重开了。 Day 32上午同宿舍其他三位 dalao 一起去了某个 1024 程序员节展览会。 早上 8：30 就开始有人敲门催，然而那个时候我们宿舍集体没起床。 然后拖到快 9：00 才走。 13：45 左右回来。然后一进门宿舍长就冲过来跟我说「还好你没去」「可无聊了」。 下午试图写题然而写不动，于是嘴巴了几道串串题。 Day 33（2021-10-25）晚上一二节是 C 语言上机课。 然后一会宿舍就开始和同宿舍 dalao 辩论三目运算符里面能不能加逗号的问题。 然后我甚至跑去查了 C Reference，到最后发现是那位 dalao 读入的变量是 double 然而写了个 %f。 好家伙这么低级的错误都没看出来我怕不是要身败名裂（ 然后一看 SD NOIP 群发现今年 CSP 提高组 T1 三分做法是假的？！ 跑去 Luogu 翻了翻评论区发现题目给的大样例就不单峰。好家伙我要是在考场怕不是挂成蛤蟆。 算了反正我都退役了。 推一首歌 ワンワンでツーカーでスリーフォー エビバティショウタイム！♪ Day 34下午三节 C 语言完了之后似乎有团日活动，然而不是团员于是溜回宿舍摸鱼。 在宿舍一个人撕烤了一下自己前两天想出来的奇妙的 duliu 题然后发现不会。 那我可要经典想当年了。 想当年我还给 Ynoi 写过 std 造过数据呢（ 然后得知不是团员也需要去参加活动。然而这个时候我已经要去吃晚饭了。 晚自习一开始打算搞一搞数学作业。然而五分钟就搞完了于是继续撕烤自己的题然后没有思路。 闲着没事上 LOJ 搜了几道串串题嘴巴了两下。 晚自习回到宿舍突然想起来这周要交图库于是觉得不能再颓废下去了于是开始着手。 Day 35上午一二节英语三四节数学。 好家伙最后一节是真的昏睡过去了。 14：30 有反电信诈骗讲座。试图鸽掉。 好吧还是跟着去了。 17：00 听说有人要来检查寝室的卫生情况，于是同宿舍 dalao 纷纷奋发图强地开始收拾。 17：00 一道没过两分钟查寝的人就来了。 久 等 了.jpg 结果站在门口瞅了两圈就溜了。 白 等 了.jpg 晚上把赶完的图库扔到附件里邮给班长了。 然后正文部分写了： （一些象征性的正文） 于是班长给我回了一封： （一些象征性的回复） 黄豆托腮.jpg 尝试了一下渡鸦小队 mod。然后开幕就被一张大点数清算书页干烂了。 好家伙这是什么阴间玩意。 Day 36绘画鉴赏课上完了一个游戏。就是三个人分成小组，然后其中两个人观察一幅绘画作品三分钟，另一个人不看；然后这两个人指挥第三个人将这幅作品复刻出来。每次两个小组，然后其他人投票决定哪个小组复刻的更好。 然后第二次的图是一朵白色的花。然后 A 组再画面的右下角加上了「艺术国际 vlog」的字样。 然后我们仔细一看原图的右下角，于是真的发现了艺术国际的水印。 细 节.jpg 然后发现我的图书馆加载不了 MOD 了。于是试图重新下载。 然后发现还是加载不了。苍蓝残想不通.jpg Day 37下午试着刷了刷图书馆的非主线成就。 比如说「被封印的黑暗大小丑」「黑森林里住着一头可怕的大怪兽！」。 但是因为这两个成就需要的异想体书页基本上都是红色的。然后就需要故意输掉频点攒负面情感。 但是因为我用的是通关了主线的顶配。然后一不小心就会拼赢。 然后故意拼输的话还会挨很多打。然后一不小心就会去世。 然后因为 Steam 会展示一些未获得的成就中全球获得率相对较高的，于是我就看到了： 「我这可是施了法的魔弹」 「您往后稍稍！」 当然还有宗教层的「我们未能击穿敌人的反甲」。 lmao Day 38先总结一下昨天晚上的 CF 比赛。就不专门写另外一篇了。 首先 A 题上来一眼没看出来写了个非常假的东西然后直接就交上去了。 然后一交发现 WA on test 2 突然反应过来正解。 等到切掉已经 10 min 了。 然后看 B 题。 这个是一眼就有思路然而关于 $n=k=2^c$ 的部分想了好久怎么特判拖了好久。 然后交了两次都是 WA on test 2。一看有个 if 后面没接 else。 身 败 名 裂 然后开始写 C 题。 有些紧张结果分类讨论的时候把自己脑子给绕进去了然后 WA on test 2 了一发。 看到 D 题的通过人数没有 E 题多于是去开 E 题。 然后推着推着推出来一个有点像分拆数的东西。然后觉得自己肯定写不出来就跑路了。 这个时候 AHU ACM 群里面有学长嘴巴了两下 D 题，于是尝试去写。 这个时候离比赛结束只剩半个小时了。写了一大串突然发现好像不大对劲是假的。于是就放弃去睡觉了。 第二天一看 Rank 2450。好吧等会看看会不会掉分。希望不要。 算了掉就掉吧反正 Rating 这种东西不过是虚荣的工具罢了。 然后第二天要体测。体前屈，引体向上，肺活量，50m，立定跳远，1000m。 首先是第一项，体前屈。 尝试了两次以后喜提 1cm 的好成绩。 然后是第二项，引体向上。 老师「觉得自己一个都做不了的直接来拿笔写个零吧。」 然后同宿舍一位 dalao 试图写零结果一不小心写到身高那一栏去了。 接着是第三项，肺活量。 第一次 4000+，第二次 3800+。感觉海星。 然后是第四项，50m。 喜提 9.4s。比昨天的 9.3s 还要慢一点于是压线不及格。 接着是第五项，立定跳远。 xjb 一条结果没想到竟然跳出去 2m 整。 好家伙我一直以为我最多也就 1.6m+ 的来着。 最后是第六项，1000m。 不出所料地跑了一圈就累得去世了。然后跑了 600m+ 的时候实在是人快没了就放弃了。 FYF「尼玛，开学一个月，先挂了一科。」 FYF「强烈建议公众号每周督促同学们体育锻炼。」 然后中午也什么都不想吃了。 今天 22：35 还有一场 Div. 1 + Div. 2 的 CF。看我挽回我的名誉.jpg 然后 Steam 上一看《脑叶公司》打折 37。好家伙我直接当场。 然后晚上心理健康课进行了一场激烈的辩论赛。 《大学生应不应该谈恋爱》 Day 39昨天晚上又打了一场 CF Div. 2。 当然是切完三题跑路的那种。 然后第二天早上起来一看 Rating 掉了 50+ 然后掉到只剩下 1660+ 了。 真棒！ 什么时候才能变得有阿烜 $\\lim_{x\\rightarrow 0}(1+x)^x$ 强啊。 Day 40（2021-11-1）获得成就：在一节高数课上至少睡 40 分钟。 但是说实话是真的困。 现在还只是刚开始讲导数，不是很难所以还顶得住。 后面讲到积分的时候，尤其是讲到换元积分法的时候，照这个节奏怕不是就要挂科了。 下午一二节近现代史。蛤蛤蛤我怎么会听这种东西。 晚上寝室长表示想吃外卖，于是我先发制人地预判了他要点什么并跟他点了一份一样的。 然后过了一会他点的到了于是他问我们有没有人愿意帮他去拿一下因为他要进行体育锻炼。 然后这个时候正好我点的也到了于是我就直接去拿了。 然后回来才听说他以为我只是出去了于是让同寝室另一位 dalao YZ 去帮他拿了。 CTY「这波配合得不是很好。」 然后他一看发现我和他点的是一样的。 CTY「好家伙是不是我身为寝室长在寝室里带起了一股吃外卖的不正之风啊现在怎么都不去吃食堂了。」 晚上一二节是 C 语言上机课。然后回来的路上听到有人在说「我们寝室最低水平三道题」。 当时把我吓得一哆嗦（内心里）因为我以为他们说的是 CF。 然后听到后面发现似乎不是因为他们还说什么「书上」「选择」之类的。 好家伙吓我一跳。 然后晚上突然有一位 19 级的学长加我 QQ。 然后一上来就扔给我一张我的 OIerDb 的截图问这是不是我。 好家伙原来我名气这么大的吗居然被一位完全不认识的 dalao 推荐去打 ICPC 了。 可把我牛逼坏了叉会儿腰。 别别别还是收敛一些比较好。 然后得知我是互院的之后： 那位学长「我超，互院的未来。」 那位学长「互院又捡个宝。来【数据删除】击剑。」 别别别不至于不至于。 Day 41听说明天中午要开班会？ 【信息学奥林匹克竞赛粗口】。 12：00 就上床了然而睡不大着于是看 QQ 群里学长聊天。 学长 1 号（不便透露姓名）「支楞起来啊我的【橙子的 emoji】，速度适应一下 ICPC 赛制。」 学长 2 号（不便透露姓名）「你这橘子是什么勾八。」 学长 1 号「橙（成）子。」 Day 42好家伙那当然是不去。 反正肯定讲不了啥实质的东西。 上午上课的时候我们 ICPC 队伍的名字正式决定叫做「坐牢」了。英文名 In Jail。 阿烜「这着实没啥意思。」 晚上数学习题课下了回宿舍又复习了一遍之前的某个观赏谱。 请 您 读 谱.jpg Day 43qwq Day 44阿块……/se/se/se/se……我的阿块……/se/se/se/se 晚上数学习题课光明正大地不听课和慎老师进行亲切交流。 然后得知了慎老师现在在学数分和线代。 我看懂了，而且我大受震撼。 我「（慎老师的班级）听上去像是成功人士聚集地。」 慎老师「听上去像是失败人根据地。」 假假 /kk 听说 SD 又喜提省队名额 -1 个了。 好家伙我这一辈子能碰到 SD 被克扣多少次名额。 高一一次。高三一次。现在又一次。 Day 45早上 9：00 才爬起来。 继续玩脑叶，然后稍微感受到了一点什么叫做白干公司。 本来三次融毁之后已经达到能源指标了但是我突然想尝试一下正午级别的考验是什么样的。 还没打完结果波迪突然跑出来了。 然后有点方然后一看小帮手也跑出来了。 然后我发现小帮手的攻击模式是一个大蓄力然后横扫整个房间。 然后我当机立断趁着它蓄力的时候疏散了所有员工。 打着打着突然发现焦化少女也跑出来了。 献祭了三位文职。 然后往上一看怎么亡蝶葬仪也跑出来了。 // 一级警报 亡蝶葬仪有一种攻击是把它那个棺材摆到面前然后扔出好多好多的蝴蝶覆盖住整个房间。然后白伤杀人。 于是在这里控制部某位勇气 V 的员工壮烈牺牲了。 话说回来这都 Day 18 都结束了为什么我培训部第一个任务都还没完成（ 「请给我们爱！！！！！！！！」 重新开始这一天。 晚上第一次去实验室和学长们打 ICPC 模拟赛。 实际上中午的时候已经去探了一波路然后找到位置了。但是不敢进去（ 结果一进去一看发现就很小两个隔间然后只有十台左右的电脑。 除了我以外就只有三位学长了。人少得可怜。 然后开题。 首先找到一道签到题切掉。 然后找到一道逆序对建图染色的题。然后我读完题直接「我有一个想法」，学长表示震惊。 然后写挂了好几发才过。 然后我们盯上了两道看上去还算能做的题。一道构造，一道计算几何。 于是我写构造，学长们写计算几何。 最后的结果……那当然是全军覆没。 然后就「坐牢」了（指一题不会但又不能走就只能坐在电脑前面发呆 看了看其他队伍的名字感觉都好有意思啊。 然后我口胡了一下最后一题是个主席树。 这个时候已经 22：30 了于是我就跑路了。 不过有一说一，一到考场就开始犯低级失误，这个毛病真就一点没改。 听学长说至少要切掉三道题才能有个能看一点的排名。那我感觉其实我们快了（心虚 然后一回寝室发现甚至灯都关了。说是因为明天考试所以要早睡。 我「那你们这么早上床你们睡得着吗？」 FYF「睡不着啊。」 我「那你们这么早上床干啥反正你们又睡不着。」 FYF「啊就但是，万一躺着躺着就睡着了呢？」 滑稽流汗.gif 然后晚上似乎是有什么大型游戏赛事。然后大概整个男生宿舍楼都在看。 然后大概 1：00 的时候突然整个男生宿舍楼炸开锅开始喊 NB。然后女生宿舍楼那边似乎是派出了一个代表试图把这边的声音怼下去。 场面一度十分混乱.mp4 ？？？「好了好了，比赛结束了，打完了，我们不吵了行吧。睡觉了啊。」 ？？？「真是有病的男人。」 滑稽喝茶.jpg Day 46今天下午似乎有英语考试的样子然而我还几乎，好吧我是说，完全没复习。 了解了一下线性预处理常数查询的 Method of Four Russians。 我看不懂，但我大受震撼.jpg 不过话说回来这个该怎么翻译？四个俄罗斯人的算法？四毛子算法？ 英语考试也就那样吧。 也就听力因为有点紧张有几个没听清。其他的都还好。 考完试跑去实验室搞昨天的 M 题。 题意是这样的： 给定一个长度为 $n$ 的正整数序列 $a$。$m$ 次询问，每次询问给定一个区间 $[l,r]$，将 $a_l$ 到 $a_r$ 这 $r-l+1$ 个数取出来（不影响原序列）构成一个可重集 $S$。定义 $v$ 是好的当且仅当存在 $T\\subseteq S$ 使得 $\\sum_{x\\in T}x=v$；$v$ 是不好的当且仅当 $v$ 不是好的。求最小的正整数使得它是不好的。强制在线。 显然，对于 $S$ 中的一个数 $v$，设区间上严格比它小的所有数之和为 $s(v)$，那么 $v$ 是不好的当且仅当 $s(v)\\lt v - 1$。 首先我想到的是二分。 然而今天仔细一想发现一个数是不是好的，这样一个问题不满足单调性。 然后我开始在脑海中回想我毕生所学过的数据结构 trick。 然后我想到一个东西叫做猫树。 对于一个区间 $[L,R]$，我们取这个区间的中点 $M$。然后对于 $i\\in[L,M]$，预处理出 $[i,M]$ 上的答案；对于 $i\\in(M,R]$，预处理出 $(M,i]$ 上的答案。然后向下分治。 显然任意一个询问区间一定能恰好分解成两个被预处理过的区间的并。 在这一过程中需要维护每个位置对应区间，也就是 $[i,M]$ 或 $(M,i]$ 上所有出现过的不好的数。 询问时，设询问区间上出现过的不好的数中最小的是 $v$，那么答案就是 $s(v)+1$。 假设 $v$ 是不好的，那么下一个不好的数显然至少是 $v+2$，再下一个至少是 $2v+4$，再下一个至少是 $4v+8$……也就是说每个区间内至多有 $\\log a_i$ 个数是不好的。特别地，如果一个区间上所有出现过的数都是好的，这个区间上的答案就是区间和 $+1$。 而且注意到，两个区间合并时，如果一个数之前在两个区间上都是好的，那么它在新区间上也一定是好的；如果一个数之前至少在一个区间上是不好的，那么它有可能在新区间上是好的。这部分写个主席树暴力 check 即可。 这个区间合并的性质既可以用在分治时扩展区间，也可以用在询问时合并左右区间。 总时间复杂度 $O(n\\log n\\log a_i)$。 Update 2021-12-28 emmm 深夜看自己 Blog 发现问题了。 假设 $v$ 是不好的，那么 $v+1$ 的确是好的。但是 $v+2,v+3,v+4\\cdots$ 这些数都有可能是不好的。也就是说是好的数的数量是没有保证的。 身败名裂.jpg ……然而……喜提 TLE。 于是心灰意冷的我开始研究上午看到的另外一个神奇的数据结构搞法——$O(n)-O(1)$ RMQ。 首先假设序列 $a$ 中任意两个相邻数之差均为 $\\pm 1$，那么我们可以使用 Method of Four Russians 做到 $O(n)-O(1)$ RMQ。 令块长 $B=\\frac{\\log n}{2}$，将原序列分成 $\\frac{2n}{\\log n}$ 个块，然后跑 ST 表。这部分的时间复杂度为 O\\left(\\frac{2n}{\\log n}\\log\\frac{2n}{\\log n}\\right)=O(n)然后考虑边角块。注意到差分不同的块只有 $2^{B-1}$ 种。那么对于每种块，我们预处理出其中所有子区间的最值，然后搞出原序列的每个块都属于哪种块，再结合上述的 ST 表，我们就能做到 $O(1)$ 查询了。 关于对于每种块预处理所有子区间的最值，这部分的时间复杂度为 O(2^{B-1}B^2)=O(\\sqrt{n}\\log^2n)=O(n)太 美 妙 了 那么如果对相邻数之差不做保证该怎么做？ 笛卡尔树转化成 LCA，然后欧拉序再转化成 RMQ。 然后有人肯定就要跑出来喊「欸你这不是又绕回去了吗！」 实际上真正的欧拉序是能够保证相邻两个点的深度差总是 $\\pm 1$ 的。 至于如何实现，我的方法是，DFS 的时候，对于每一条从根指向叶子的边 $(u,v)$，把 $u,v$ 顺次加入欧拉序尾部，然后处理 $v$，处理完之后再把 $v,u$ 顺次加入欧拉序尾部。 但是这样可能会出现两个相同点相邻的情况。于是就在加点的时候特判一下这种情况，保证最终构造出来的欧拉序满足相邻点不同。 不过需要注意的是，我们需要的是点在原序列对应位置的值，而不是这个点的深度。因此我们预处理出的答案不应该是最小值本身，而应该是最小值的位置。当然如果有多个那就任取。 于是我们就得到了一个放之四海皆准的 $O(n)-O(1)$ RMQ 算法。 ス バ ラ シ イ 然而实现难度……怎么说呢，数组多到我都不会起名了真的。 在学校实验室干了两个小时愣是没干出来。到最后看着 22：30 了如果再不会寝室就回不去了于是只能耻辱跑路。 说实话在寝室写这段文字的时候我突然反应过来我的块的数量忘了 $\\times 2$ 了。然后我数组照着 $\\frac{n}{\\log n}$ 开的。明天回实验室得先把这个改一下。 然后明天学长再次邀请我和另一名学长打练习赛。好家伙这次我一定要努力切掉三道题拿到大铜牌。 什么时候才能拿大奖牌啊 /kel emmm Day 46 竟然写了这么多吗。 果然 OI ACM 能够充实我的大学生活（光速逃 对了，不出所料地，一回寝室关着灯锁着门。 好家伙一个个的这么早就上床。睡得着吗就上床。到最后不还是躺着发呆还不如写两道数学题明天下午考数学了也不看看自己能考几个分。 Day 47（2021-11-8）今天数学考试。 说实话没啥难题。 然后关于练习赛，有一位学长因为有事于是取消了。 Day 48上午把买来放在那里搁置了很久的《The Witness》掏出来玩了玩，然后得到了同寝室 dalao 的指点。 下午和学长一起练习沈阳的 ICPC 复现赛。 上来先秒掉一道签到题。 然后找到一道题：给定一个序列，将其分成尽可能多的连续段，使得将每个连续段从小到大排序后，整个序列能够变得单调不降。 经过和学长的一番讨论，我得出了这样一个算法： 对于每个数，处理出如果将整个序列从小到大排序后它会跑到哪个位置。如果有相同的数就保持相对位置不变。 如果 $a_i$ 排序后跑到了 $x_i$，那么 $i$ 和 $x_i$ 及其之间的所有数必须要被分到同一个连续段内。于是问题转化成给定 $n$ 个区间，求它们的并是多少个互不相交的区间。差分一波搞定。 然后学长帮我切掉了一道大模拟题（至少学长们这么说反正我也没看题）。 然后有这么一道题：给定一个序列初值均为 $0$，每次操作给定一个区间，将其上所有 $x$ 变为 $x+1$，或者查询区间最大值。 大！分！块！ 好家伙我直接开始写。 然而写完发现我的写法需要对于每个块维护 $m$ 个并查集，这需要 $O(m\\sqrt{n})$ 的空间然而这题 $n$ 和 $m$ 都是 $5\\times 10^5$ 于是它甚至过不了编译。 :( 然后又有这么一道题：在某个神奇的异世界里，时针转一圈相当于一天，然后一天 $H$ 小时，一小时 $M$ 分钟。问有多少个整分钟满足时针分针所成角度 $\\leqslant\\alpha$。保证 $\\alpha\\leqslant\\pi$。输入给出 $A$ 使得 $\\alpha=\\frac{2\\pi A}{HM}$。 首先设当前时刻为 $i$ 点 $j$ 分，$0\\leqslant i\\lt H$，$0\\leqslant j\\lt M$。这个时候时针相对于零刻度转过的角度为 $\\frac{2\\pi i}{H}+\\frac{2\\pi j}{HM}=\\frac{2\\pi(iM+j)}{HM}$，同理分针为 $\\frac{2\\pi j}{M}$。因此问题转化为求满足 \\left|\\frac{2\\pi(iM+j-jH)}{HM}\\right|\\leqslant\\alpha\\vee\\left|\\frac{2\\pi(iM+j-jH)}{HM}\\right|\\geqslant 2\\pi-\\alpha也即 |iM+(1-H)j|\\leqslant A\\vee|iM+(1-H)j|\\geqslant HM-A的二元组 $(i,j)$ 的数量。 显然我们可以将其转化成 \\begin{cases} &j\\geqslant\\frac{iM-A}{H-1}\\\\ &j\\leqslant\\frac{iM+A}{H-1}\\\\ \\end{cases}\\begin{cases} &j\\leqslant\\frac{iM-(HM-A)}{H-1}\\\\ &j\\geqslant\\frac{iM+(HM-A)}{H-1}\\\\ \\end{cases}这两个不等式组解集的并集。 于是考虑使用类欧几里得算法求解。 然而值得注意的是，我们还需要手动过滤掉 $j\\geqslant M$ 的情况。 然而写了一个小时硬是没写出来。 到最后四个半小时就写出来三题。怕不是又要打铁。 Day 49下午整个寝室跑到外面去逛商场，然后顺便叫上了隔壁寝室的 HTL 和 MSB 两位 dalao。 虽然真的只是去逛然后什么都没买就回来了。 好家伙走得我腿要断了。 Day 50qwq Day 51深夜一边装 TeX Live 一边水群。 19 级某学长「未定义行为（undefined behavior, ub）的意思是，无论编译器怎么实现，都是认为合理的。」 还是上面那位学长「我常举的例子是，即使你的编译器打印出一个变形金刚也是合理的。」 Day 52qwq Day 53qwq Day 54（2021-11-15）emmm 怎么说呢前面好几天只有一个 qwq 然后什么内容都没有主要是因为成天打游戏然后没什么好记录的然后就只能这样了。 今天查了一下期中考试的英语成绩然后发现是 82，然后全班最高分 92。海星吧可以接受。 Day 55qwq Day 56qwq Day 57qwq Day 58qaq 感觉自己又混了四天啊。 看到旁边的 dalao 在写找出 $100$ 以内的所有质数的程序。 结果他直接整了个这个： 123456789101112for(int i = 1; i &lt;= 100; ++i) { if(i == 1) continue; if(i == 2 || i == 3 || i == 5 || i == 7) printf(\"%d \", i); if(i % 2 == 0 || i % 3 == 0 || i % 5 == 0 || i % 7 == 0) continue; printf(\"%d \", i);}// 这段代码是我自己的码风// 显然那位 dalao 不会刚学 C 语言就知道打空格而且我这是 C++ 的语法（指在 for 循环里定义变量） emmm 虽然做法挺离谱但显然这是正确的。 于是在旁边围观的我提出了一种全新的质数筛法： 如果我们需要找出 $N$ 以内的所有质数，我们只需要先找出 $\\sqrt{N}$ 以内的所有质数，然后对于每个数，判断一下它是否能被 $\\sqrt{N}$ 以内的质数整除即可。 那么我们发现这样做的时间复杂度是 $O(N\\sqrt{N}+\\cdots)$…… ……笑容逐渐凝固.jpg 我还不如去写个欧拉筛（ 晚上数学习题课。 老师「不会真的没人考满分吧？」 老师「你看这题都不用动脑子，脑子放宿舍都能考。」 Day 59今天似乎又运动会。那当然是不看。 整个下午缩在实验室敲代码。 进门前听到实验室里传出来激烈的敲打键盘的声音，然后以为学长在攻克难题。 结果推门进去一看发现是在打游戏。 晚上和学长练习 21 年 CCPC 桂林赛。 首先切掉 A 签到。 然后我搞出来一个贪心匹配的题。 然后有一道买边删边的题，题意有点复杂就算了。 然后我想出来一个找最小环的搞法，然而写了老半天然后 T 掉了。 然后旁边一位学长接过去接了个 Dij 然后过了。 然后有个题是，给定一个序列，保证是一个排列，每次交换一个逆序对，在 $\\frac{n(n-1)}{2}$ 次操作内将原序列从小到大排好序。然后另一位学长直接给写好了。 然后我盯上了一道串串题：给定一个字符串，多次询问严格第 $k$ 小字串最靠左的出现位置。 然后我发现我 SA 忘了怎么写了然后学长给提供的板子用不惯于是翻了翻自己的 Blog。 这个时候已经 22：00 了。然后寝室 23：00 很有可能会关门。 结果我 SA 都建好了但是找第 $k$ 小的部分怎么写怎么不对劲。 就是说思路是有的但是代码不知道怎么回事敲不出来。 最后 22：50 不得不耻辱下机。 好家伙这么简单的题才切了四道怕不是又要打铁。 什么时候才能拿（除了铁牌以外的）大奖牌啊 /kel 对了想怎么写最小环的时候我翻了翻学长的某个两百多页的打板子然后发现没有。 学长「你看我就说，别看这个板子看着挺全，真正要用的时候上面就没有。」 Day 60晚上玩了玩 Hades，结果弓二随便配祝福然后简简单单四连胜。 然后点了三级的极端措施结果被 3 BOSS 打成筛子（ 好吧其实二见就通了。这下肯定得先打牛了不然场面太乱受不了。 这么一比没有极端措施加成的哈迪斯就太菜了。 有一说一，感觉满级弓二本身已经能乱杀了。再配点加攻击的祝福或者是「箭如雨下」「透甲排箭」「致命齐射」这样的附魔直接无敌。 哦对了宙斯的某个特殊攻击命中时打雷的祝福也可以考虑安排上。 把塔纳托斯给的纪念品升到满级了。每无伤一个房间 +2% 攻击。 然后把这个数值堆到 30% 以后：你（3 BOSS 国王）和你那徒有其表的战车令我感到可笑。 有一说一实在是太强了。四五个连招下去把牛打进二阶段，再四五个连招下去直接带走。 Day 61（2021-11-22）今天通过新生赛选拔出来的 21 级新生可以去实验室了。 然而我只有下午三四节没有课于是一下第二节就冲去实验室了。 然后 17：35 有 CF。 然而我晚上还有课，不过还好是 C 语言的上机实验课，于是直接翘掉。 A 题五分钟搞完。还算可以。 结果 B 题构造连着暴毙了三次。然后才发现是最开始判断无解的时候漏了一种情况。 C 题二分又调了一辈子。 然后 D 题经过我大胆猜想成功一发通过。 于是目前为止喜提四题。 翻 身 农 奴 把 歌 唱（指 CF 终于可以上分了 然后剩下三题全都不会了。 最后 Rank 1100+，海星吧我觉得。 最后趁着剩下的半个小时写了写 E 题虽然并没有过。 我是不会说晚上被带着极端措施加成的哈迪斯干烂了的。 不是但是为什么他攻击频率这么高啊。 Day 62结果今天一上 CF 发现掉了 8 分。 :( 貧相な 心の 持ち主たちは 淘汰されてしまう 世界なんだよ♪ Day 63本来今天下午会有一场训练赛。 然而和我组队的两位学长都有事于是只剩下我一个人了。 然后因为今天用的是今年威海 CCPC 的题然后 pdf 文件周一的时候就被扔到群里了于是我已经看过题了。 我的个人印象大概是这样的： AG：简单题。 I：劲爆数论。但是不会。 M：劲爆概率论。但是也不会。 其他题更不会了。 中午比赛刚开始的时候正好我外卖刚到于是正在吃。 然后 1h 切掉 AJD 三题然后坐牢了。 于是向学长要了一份题解。 结果发现 G 题竟然是一个根号 trick。好家伙我竟然在根号题上栽跟头了。 身 败 名 裂 然后 H 题竟然是最小割。我一直以为是个神仙树形 DP。 阿烜因为有两位神仙带他于是拿了大金牌。但是没有人带我啊。 我也想要大金牌 /kk Day 64突然发现周日上午有第一节军事理论。 然而我要打比赛啊（光速逃 晚上继续玩 Hades。然后这次超常发挥把蝴蝶的伤害加成堆到了 40%。 结果栽在老爹手上了。 :( 好吧一定是我不在状态了。 Day 65上午一直想着要去找辅导员请假。然而到最后拖到吃午饭也没能付诸行动。 WWJ「不要害怕。」 我「（害怕」 然后正打算去上乒乓球结果辅导员突然叫我去座谈。 本来我还以为是什么严重的事结果就是一个关于心理健康状况的抽查然后我被选中了。 好家伙，我直接好家伙。 于是假条 get√（ Day 66今天班级组织秋游。于是翘了跑去打上海 ICPC 的热身赛。 然后只有我和其中一位学长。另一位今天下午有课于是没能来。 跑到隔壁新校区然后见识到了什么是真正的大学。 跑去那边的 ACM 实验室然后见识到了什么是真正的实验室。 不像某地下室。 13：00 开始。 A 题给定 $n$ 个点 $(i,y_i)$，再加上 $(0, 0),(n+1,0)$ 一共 $n+2$ 个点。删去恰好两个点，然后相邻点连线，要求最小化最后得到的这条直线的长度。$2\\leqslant n\\leqslant 2\\times 10^5$。 显然如果删去两个点，那么这两个点要么相邻，要么不相邻。于是预处理一下单独删去第 $i$ 个点和同时删去第 $i$ 和 $i+1$ 个点对答案产生的贡献，然后贪心选贡献最小的。 需要注意的是这里选单独贡献的时候要保证选的两个点不相邻。 结果因为把最小化读成最大化 WA 了两发。 B 题是给定一个 $n\\times m$ 的矩阵 $a$，由 $a_{i,j}=r_i\\cdot c_j$ 构造。想象一个 $n\\times m$ 的方格，时刻 $0$ 没有杂草，从时刻 $1$ 开始每个时刻开始时第 $i$ 行第 $j$ 列长出 $a_{i,j}$ 棵杂草。$q$ 次操作，每次操作选择一个时刻，在这个时刻结束时割掉一行或者一列的杂草，割完以后这一行或一列的杂草数量归 $0$。所有询问的时刻严格递增。求所有操作割掉的杂草总量模 $10^9+7$。$1\\leqslant n,m,q\\leqslant 10^5$。 显然对于每一个格子，我们只需要关注最后一次割到它的操作即可。于是我们从后往前处理，每遇到一个操作，计算它的贡献，然后删去它影响的这一行或一列。 C 题给定二维平面上 $n$ 个点，保证 $4\\mid n$，没有重点，没有三点共线。要求给出两条不重合的相交直线，将整个平面分成四部分，且每部分恰好有 $\\frac{n}{4}$ 个点。这两条直线均不能经过 $n$ 个给出的点中的任意一个。无解输出 $-1$。$4\\leqslant n\\leqslant 5\\times 10^4$，$\\sum n\\leqslant 10^5$，$|x_i|,|y_i|\\leqslant 10^6$；使用两点式给出直线，且这两点横纵坐标绝对值不能超过 $10^9$。 emmm 好吧其实这道题我们没有切掉。 首先我们有一个想法是，求出这 $n$ 个点的「中位点」，也就是，横坐标是所有点横坐标中位数，且纵坐标同理的点。那么这两条直线一定交于这个中位点。 于是把所有点根据这个点求个极角排个序。 假设其中一条直线要穿过第 $k$ 个点和第 $k+1$ 个点之间的线段，这条直线也一定要穿过第 $k+\\frac{n}{2}$ 个点和第 $k+\\frac{n}{2}+1$ 个点之间的线段。我们可以容易地判断出这条直线是否存在。 同理，同样需要有一根直线穿过第 $k+\\frac{n}{4}$ 个点和第 $k+\\frac{n}{4}+1$ 个点之间的线段以及第 $k+\\frac{3n}{4}$ 个点和第 $k+\\frac{3n}{4}+1$ 个点之间的线段。 但是注意到这样求出来的直线很有可能并不经过任何整点。但是我们可以考虑选取这条直线上坐标绝对值足够大但是仍在题目要求范围内的两个点，然后在它们附近分别随便找一个整点代替。因为坐标绝对值足够大，这样的近似可以被认为是正确的。 结果喜提 WA。 :( 顺便，作为纪念，保留了热身赛的试题册。 Day 67今天就是正式比赛了。 至于打得怎么样……emmm 一个小时切掉包括签到题在内的两道题，然后剩下两个小时调第三题。最后两个小时坐牢。 :( 怎么办啊为什么阿烜就有大金牌我就没有啊。 于是我下定决心开始刷思维题。 迪屁了解一下 Day 68（2021-11-29）平静的一天。 Day 69平静的一天。 Day 70Challestend はただ静かに暮らしていた。 Day 71平静的一天。 本来想在晚上写一下 CF558E 结果发现这个拆点太难写了于是放弃了。 Day 72 Why do deaths end my torture? ♪ Why can’t anyone feel my hurt? ♪ Why’d you crown the most violent to be champions? ♪ In this inferno (inferno) ♪ We built for ourselves ♪ Day 73平静的一天。 Day 74下午在实验室刷 CF 题然后刷到一道可以转化成多项式的题。 突然想起来自己多项式相关已经不会了（指 NTT 板子全忘了 于是跑去 Luogu 搜了一下多项式，感受到了走在时代最前沿的多项式重工业，包括但不限于拉格朗日反演，转置原理等神仙技巧和多项式符合逆，整式递推，边双计数，点双计数等神仙板子以及各种各样需要多步转化的神仙数数题。 我看不懂，但我大受震撼.jpg 什么时候我才能和杜爷一样强啊（追星行为 Day 75（2021-12-6）平静的一天。 试图翘 C 语言实验课然而同寝室 dalao 回来告诉我说又点名了。 :( Day 76平静的一天。 Day 77平静的一天。 Day 78平静的一天（其实也不是啦 下午整整四节计算机导论全程不听课玩手机。然后翻 CF 的时候发现一位黑红名 dalao 提到我了。 于是我过去一看发现是快半个月前的一场 Deltix Round 随机抽人送衣服然后我被抽中了。 苍蓝残想不通.jpg 吓得我赶紧完善了一下 CF 的个人资料然后在那位 dalao 的评论下面回了句 Nice。 话说回来那个评论下面有好几个回复 Nice 的为什么有的就能 +7 有的就只有 -13 啊。 上面似乎还有一位许愿自己能够切掉四题的 dalao 结果 -17。 Day 79平静的一天。 Day 80平静的一天。 Day 81晚上上课前突然反应过来四史作业没写于是一二节形势与政策光明正大地一个字不听补作业。 深夜 23：05 打 CF Div. 2。 结果比赛开始前三分钟我一刷新发现开始时间变成了 23：10。 于是我就等到 23：10，然后一刷新发现开始时间变成了 23：15。 啊这没见过世面原来这就是延迟吗（ 结果比赛刚一开始 CF 突然崩掉了进不去了。 （滑稽流汗.gif 吓得我试图使用 m1 镜像站虽然实际上并没有起到什么作用。 然后这直接导致了我看到 A 题题面的时候已经过去至少 2 min 了。 不过说实话其实影响不大。 难度的话，ABC 三题都不难。 D 题我通过玄学瞪眼法成功地强行找出了规律，并在 WA 了两发然后进行了一些小小的改动之后在 46 min 时切掉了。 然后 E 题一眼出来一个 $O(m\\log^2n)$ 的写法（二分 + 树状数组），于是开始写。不过当然是 T 掉了。 然后我仔细撕烤，发现这个东西可以优化到 $O(m\\log n)$。结果交上去还是 T 掉了。 苍蓝残想不通.jpg 啊这不是说 CF 的评测机耐造吗为什么我一个 $O(m\\log n)$ 跑 $10^6$ 而且还是 $4\\text{s}$ 都能 T 掉。 算了还好我前四题罚时优秀。 我觉得这一波又可以来一次火箭式上分。 这上分，多是一件美事啊。（紧跟时事（指玩新梗 Day 82（2021-12-13）平静的一天。 Day 83平静的一天。 Day 84平静的一天。 Day 85平静的一天。 Day 86平静的一天。 Day 87晚上试图打 CF Educational Round。 结果开幕雷击 A 题交了五发没过。 然后心态爆炸只搞出来 BCE 三题然后就耻辱跑路了。 感觉 D 题其实也可以搞但是没搞出来。 同级某 dalao 在群里「还有一个哥十几分钟写完 C，结果 A 错了 6 次，就挺离谱的。」 Day 88平静的一天。 Day 89（2021-12-20）平静的一天。 Day 90平静的一天。 Day 91平静的一天。 Day 92平静的一天。 Day 93上午一二节是高数。 然而因为某种未知的神秘力量，我和同宿舍其他三位 dalao 同时睡过了。 醒来发现已经 8：23 了。 苍蓝残想不通.jpg 然后我和 FYF dalao 当机立断地决定不去了。 除此之外的话……平静的一天。 Day 94成功地看到了 The Witness 的隐藏结局 ED。 虽然完全没有看懂。 感觉像是一个人躺在沙发上快死了然后突然醒过来拔掉身上的医疗器具一边扶着墙一边走到后院然后躺在那里然后就死透了。 ？？？ 总之我大受震撼。 Day 95平静的一天。 Day 96（2021-12-27）今天拿到了《高等数学（下册）》《线性代数》《离散数学》。 把全新的高数课本放在面前，您感觉知识从里面不断涌出。 Laying out the brand new advanced mathematics textbook in front of you, you can feel knowledge springing out. 您充满了决心。 You are filled with DETERMINATION. 晚上和慎老师和大吊阿烜进行了一些友好沟通。 shzr「我现在可能处于一种，考验操作的游戏玩不了，考验策略的游戏没策略，的悲惨境地。」 我「那玩 gal。」 shzr「说得好！」 过了一会。 shzr「我向同学抱怨无聊后，她给我一个 iwanna。」 shzr「对我来说过于困难的游戏.jpg」 shzr「iwanna 立竿见影。我现在直接不想碰电脑了。」 shzr「这是一个督促学习的好方法。我打算看两节课本再接着打了。」 Day 97墙裂推荐 qwq 晚上光明正大地不去晚自习。 翻了翻《离散数学》的课本，虽然我没怎么看懂，但我大受震撼。 第一章主要讲述了逻辑表达式命题范式等等一系列乱七八糟的东西。 本来我还是看得很认真的，然后看到一半太抽象了看不下去了（光速逃 好家伙这就是最最底层的数学逻辑语言吗。感觉我见识到了什么叫做真正的力量。 而且这本书还很厚，两百多页而且很大。 看了一眼目录发现最后一章居然是图论。 晚上 21：30 有 CF。 本来想打的结果把时间记成 22：30（其实是完全忘了）结果 21：35 一看发现比赛已经开始了。 不过它有 Extra Registration。虽然这会使得我的罚时变得不是很理想不过我觉得我可以。 ABC 三题海星。切完之后 Rank 600+。 这个时候还剩 70min。 结果我的 D 题就是没写出来（ :( 最后 Rank 734。 其实最后 5min 我已经能够解决 $n=m$ 的情况了。 然后比赛后仔细一想并不是位置和初始位置重合就说明循环了，重合时的方向也是需要考虑的。 好家伙为什么我一个多小时连这点东西东西都想不出来（ 好吧其实中间有半个小时是因为我看 $n,m$ 范围有点大（当时没看到是限制的 $nm\\leqslant 10^5$ 还以为是 $n,m\\leqslant 10^5$）以为 $O(mn)$ 要 T 掉于是想了半天怎么优化（光速逃 一定是因为寝室太嘈杂了影响了我的正常思考（光速逃 睡觉前学长交流了一下关于如果在实验室打完 CF 但是宿舍门已经锁了那么该怎么进去这样一个问题。 Day 98晚上玩脑叶，然后突然意识到自己已经 Day 40 了然而一场核心抑制都没有打。 于是回滚到 Day 36 开始打黄昏考验。 第一次刷到的黄昏考验是红色黄昏。果然红色的考验都是最简单的（ 不过打死之后还会生成低一个等级的同色的考验。 快打完的时候我几个员工被某些异想体吸引不受控制了。于是为了防止局面失去控制我果断地直接结束管理。 结果考验没打完然后不算任务完成没办法解锁核心抑制。 :( 于是第二次我特别注意了某些会吸引员工的异想体。 然后第二次刷到的还是红色黄昏。 为了方便（其实也是怂）我把所有员工全都疏散到了安保部主休息室，仅仅指派了那几个拿着 W 级 EGO 装备的员工去打考验。 然后快打完的时候突然屏幕两边开始出现某种绿色的幕布。 ${n\\choose m}$，垃圾游戏浪费了我两个小时的人生。 关于昨天晚上的 CF，他 Rating 算出来我竟然是 Rank 551，然后 Rating +18。 :) 深夜 23：30 继续快乐 CF。Good Bye 2021: 2022 is NEAR。这就是 2021 年的最后一场 CF 了。 果然如我所预料的一样，这个点基本上没什么噪音可以认真撕烤题目。 30 min 切 ABC。1.5 h 切 D。 其实这个 D 我可以更快的但是因为光去想大暴力了然后忽视了数据结构。 其实就是暴力题写多了懒得写数据结构了（光速逃 然后一看 Rank 1000+。 然后看了下公告发现是 Div. 1 + 2 混合场。 下一场 CF 就是明年 1 月 3 号的 Hello 2022 了。 然后关于我之前抽到的衣服，他终于联系我了（ 不过有一说一虽然但是，我觉得在我放完寒假回来之前能不能真正拿到衣服都难说（ Day 99中午日常玩脑叶。 这次抽到了绿色黄昏。 结果打到一半想起来下午还有课。 :( 告辞.jpg 然后晚上沉默乐团给面子于是成功地解锁了核心抑制战。 首先打了控制部的核心抑制。 （我个人探索出来的）机制如下（还是扔到代码框里面吧别剧透太多了）： 12345开始核心抑制后，指派工作时四个工作选项会被随机打乱。但是每个选项变成哪个选项是固定的。比如说所有异想体的「本能」选项全部变成「压迫」，「压迫」变成「洞察」，「洞察」变成「本能」，「沟通」不变。每次触发熔毁警报时会重新打乱。熔毁等级达到 3 级以后无法取消已经下达的工作指令。 然后是一些核心抑制战的共性： 1234567如果要打某个部门的核心抑制战，那么那个部门当天无法部署员工，并且文职加成失效。在这一天，所有 Sephirah 不会在异想体出逃/员工恐慌/员工死亡/部门全灭时给出提醒。没有鼠标指针悬停提示（比如说正常情况下鼠标指针悬停在某个部门的文职加成等级上会提示您这个部门的文职加成但是现在没有了）。目标是触发 5 级的熔毁警报并集满能源。 虽然感觉摸清机制之后难度也不算很高但是就是不知道为什么莫名其妙失误（ 反正四五把就过了。 然后意识到一个问题就是回到记忆库会不会保留已经打过的核心抑制战进度。然后上网搜了一下发现不会。 不过 Day 37 打控制部抑制战是不是有那么亿点点晚啊（ 睡觉前瞅了一眼 CF 发现…… 我！紫！了！ Candidate Master CLT Contest Rating: 1902 Day 100第一百天！ 早上差点忘了一二节还有高数。 然而非常不想去想直接放假走人回家。 中午成功地一次通过了情报部的核心抑制。 机制如下： 123456789开始核心抑制后，游戏分辨率会降低。必须要将镜头拉到最大才能看到员工和异想体的轮廓以及各种数字。至于员工的各项属性的具体数值，像是伤害抗性/移动速度/工作成功率等则是完全看不清。熔毁等级达到 1 级以后，分辨率会进一步降低。此时就算将镜头拉到最大也已经无法看到清晰的轮廓。同时这一天的所有异想体不显示血条。熔毁等级达到 3 级以后，分辨率（大概）会进一步降低，并且整个屏幕的色调会开始变得阴间。此时只有将镜头拉到最大才能勉强辨识出部分细节。 《卓尔不凡的视力》（确信 然后第二天选异想体的时候给我整了个 3A 风景区，「一无所有」「数据删除」「碧蓝新星」齐聚一堂。 于是我果断选了数删。 一开始我让整个公司属性最高资历最老的员工利弗尔去试图刚正面。 结果一进去啥也没干精神条先扣掉一半多。 我看懂了，而且我大受震撼.jpg 一次工作判定 32 次，失败 7~8 次直接人给带走了。 不过至少比某乐团工作结果优就减少计数器要好处理。 「小伙子你太懂音乐了来让我给你来一曲。」 话说回来这么一想利弗尔也太难了每天面对的都是高鸟乐团数删这种级别的（ 结果数删只给一把武器。于是让利弗尔反复工作拿了武器然后直接跑路（指回到记忆库）了。 晚上打培训部核心抑制。 机制如下： 12345678910111213（具体数据均为目测，可能不准）开始核心抑制后，所有员工所有属性减少：最大生命/最大精神/工作速度 -10，成功率/攻击速度/移动速度 -15。于此同时，画面中出现某种类似老旧显示器的暗色条纹。熔毁等级达到 1 级以后，减少量变成 20/25。与此同时暗色条纹加深。熔毁等级达到 3 级以后，减少量变成 30/35。同时，画面变得和情报部核心抑制一样看不大清并自带阴间滤镜。 其实感觉这场核心抑制的机制听上去挺难处理的。 实际上也的确挺难处理，工作的时候不能向以前一样 18 个 E-BOX 里面 16+ 个 PE-BOX 了。 不过其实也还好。 而且这次正午挑战运气非常好地抽到了红色。正裁数删左右开弓几下带走。 于是就一遍过了。 下一天的异想体抽到了「穿刺天堂」。听说这玩意是 C 的脑子。 因为我急着要再回滚一次打安保部核心抑制，于是让利弗尔顶着 -24% 成功率反复工作在一天以内搞出三把武器两件衣服然后跑路了。 然后打安保部核心抑制。 机制如下： 123开始核心抑制后，所有部门再生反应堆读条速度大幅度降低，且所有员工无法进行生命值和精神值的恢复（福利部任务给的子弹也会失效）。但是每触发一次熔毁，本性善良的 Netzach 就会为所有员工恢复全部的生命值和精神值。 说实话没啥意思。听上去挺简单的。 但是第一次尝试的时候，因为我这一天拿的异想体是大鸟，然后不会管，于是寄了。 然后第二次乐团又跑出来了。 :( 后记emmm 没想到竟然恰好写了 100 天。 AHU 寒假提前放假（虽然之后还要上网课），1 月 1 号就走人了。 为了不让一篇文章的篇幅太长，这篇日记就到此为止吧。 祝愿看到了这里的您 AK Ynoi。","link":"/university/"},{"title":"Hades","text":"Steam 页面 买了有一段时间的游戏了。 最近因为换了新电脑，捡起来又玩了玩。 然后玩累了放了半个多月，然后又捡起来了。 头铁不开作弊模式。然后前天终于通关了。 关于为什么拿了厄里斯形态又拿人体炸弹，这个是因为升级厄里斯形态的时候我还遇到过人体炸弹。但是人体炸弹太好用了。 有一说一应该是这把大炮太好用了。打 3 BOSS 的时候我直接一边绕著而走一边用特殊攻击打，直接把他俩苟死了。打得那叫一个厚颜无耻，那叫一个卑鄙下流，怕不是观众都得跳下来揍主角一顿。这也配自称英雄吗。 整个游戏的话，给人的第一印象大概会是「文本量好大」吧。每次遇到每个 BOSS，每个友好 NPC 都会有不同的对话，粗略估计一百个小时见不着重样的。（虽然我游戏时间也才二十多个小时） 然后就是，按键频率太高了。键盘大概没法玩吧虽然我也没试过。用手柄玩，连着玩上两三把就能把我右手大拇指快累断了。 不过也可能是我太菜了吧。毕竟我一直是闭着眼睛 ABXY 四个键瞎 jb 按。 操作逐渐失去理性.jpg 还有就是，这游戏的关键资源竟然每一关每种武器只能拿一次，想拿第二次就必须要加难度。这也太去世了。这游戏真换成近战武器怕不是没法玩。毕竟近身打就意味着会挨打。 听说这游戏可以用来当作第一款 Rogue 游戏来玩。表示怀疑。 不过给永久升级还是很好的。不过凭这游戏的难度不给永久升级怕不是逼人开作弊了。 话又说回来了（指强行扯开话题），最近把 Slay 下回来玩了玩又卸了。之前从创意工坊下了下乱七八糟的 mod 解锁了很多乱七八糟的成就，像是一回合打死 BOSS 啥的。看着这些成就莫名其妙觉得难受于是就卸了。 不过我还是很好奇一回合打死 BOSS 这像是人干得出来的事吗。 弱者为何要战斗.jpg 不过话说回来，我居然发现 Markdown 里被用单对波浪线包括的内容会以下标的形式显示。~就像这样。~然后我就发现上传上去就不行了，也许是 VS Code 的某种神奇的 feature 吧。 话说回来，竟然连阴间也是要送礼的。这个世界怎么了.jpg 写了这么久才 800+ 字，10 分钟不到就能读完。为什么凑字数这么难啊。 不过话说回来，我 VS Code 内部的字数统计显示已经 1300+ 了。很神奇.jpg 话说回来，我这是用了多少遍「话说回来」了啊。","link":"/hades/"},{"title":"简单随笔","text":"还有不到一个月我就要去大学报道了（悲 快乐无比的暑假生活马上就要迎来结局了。 这让我失去了 决心。 喂，这前面可是地狱啊！ 颓废回想一下，发现这两个月什么都没干。 想过要写点东西然而写了半个小时就写不下去了。 可能我并不适合创作吧。 脑海中会不时地浮现出一些片段，然而没有办法缝合起来。 图书馆最近换了一台电脑。比之前那台配置好了不少。当然也贵了不少。 试着重新捡起《废墟图书馆》玩了玩，发现不卡了。 从头开始玩发现，认真玩的话前期还是不算太难的。 然后现在卡在殷红迷雾了。有一说一卡莉强到不讲道理了。 比如说某张杀死目标或令目标陷入混乱就再次重新打出的书页。 第一次看我还觉得这个触发条件太严格了，直到有一次我五个司书被这玩意一网打尽。 Geburah「这 TM 是啥？」 近期可能会写一篇相关的 blog。 但是也可能就鸽了。没人看感觉写的动力不大。 VTB然后最近又在 Steam 上找到一个 VTB 模拟器。 想着当成是个 2D 捏人游戏于是买了。 虽然可能的选项非常少，但是捏出来看久了还觉得挺可爱？ 游戏性的话就那样吧。不专门安利了。 把捏出来的成果放一下吧： 名字叫「夢宮むきゅう きりこ」，「きりこ」写成汉字的话是「雾子」。 Steam 愿望单当然最近也在 Steam 上看到了其他比较想玩的。 比如说大逆终于上 Steam 了。 比如说既然换了个好电脑想玩玩莱莎的炼金工房。 然后现在在等打折。 OI 出题就算是现在还是想出一些题的。 翻了翻之前记录下来的题，发现很多都很有意思。 然而我当时一直在想新题就忽视了这些有意思的老题了。 现在新的 idea 有些少了，想着要不要把这些老题翻出来解一解。 但是还是没什么动力。 虽然就现在我是没什么举行正式比赛的可能性了，但是还是不想公开这些题。 不过说起正式比赛，之前 CrOI 第一次正式比赛几乎已经配置好了。然而最后还是弃掉了。 现在就算再扔出来也不会有人做了吧。毕竟我自己都不写 OI 了。 阿块现在毕竟高四肯定没时间。其他人一提起分块就告辞。 说不定这样下去这些题就要发霉了。要不要干脆公开了算了？ 这些题里面有一看就不能做的，有看上去能做但我没细想的，也有一看就很简单的。 总之是各种各样乱七八糟的 idea 糅合在一起。甚至还有我做梦梦到的。 补充 I阳的主题曲好好听啊。 Children of the city see only the neon stars Reflected on the murky gutter sky Don’t ask me why I desperately wish to be included in the city’s night 致 Challestend： 在北京时间公元 2021 年 9 月 12 日 00：00 之前写完《逆转潮流》的剧本。 补充 II邵好强啊。 补充 III打过殷红迷雾了。 但说实话我也很迷，打着打着不知道什么时候给对面打晕了。 这场战斗让我明白了人海战术的重要性。 然后把迷雾的书烧到剩最后一本被泪滴抢了（悲 第二次用两层把迷雾削成残血然后 Geburah 一张「血舞弥漫」带走了。还解锁一个成就。 然后去打泪滴。这么说好像最后一击好像也是「血舞弥漫」。 一本书里面塞了十几张战斗书页，不愧是您。 补充 IV查了一下自己在 Steam 上的总消费金额，发现竟然有 $956.76。 也就是人民币 6196.11 元。 我看懂了，而且我大受震撼.jpg 补充 V邵好强啊。 补充 VI干了一下午六协。 突然注意到我语言层和哲学层还没完全解放，没有 E.G.O. 书页，总体强度不比艺术层大多少。 于是去打异想体。 自然层解放战最终阶段什么乱七八糟一堆玩意，直接上去照脸揍不就行了整的什么花里胡哨的。 语言层解放战让我切实明白了「最强之人」是什么意思。 E.G.O. 展现 + 血雾 + 强壮一共 14+ 的骰子点数加成我就问您怕不怕。反正我是怕了。 补充 VII打过邵了。 我太牛逼了，哈哈！ 战术的话，首先用哲学层抽烟耗血，虽然整个哲学层就算全灭了邵还剩 600+ 血。 然后换语言层战神组合刚。 但是并没有什么效果。反而是这边被耗到残血了。 还死了一位助理司书。 然后异想体出尸山了。 我当机立断地把剩下三位助理司书喂给 Geburah，照着邵的逆鳞骰子一刀给她砍晕了。 然后下一幕直接砍死了。 我太牛逼了，哈哈！ 杂质的第一战要求 rnfmabj，泪滴和邵的书。 然而我都没有。 烧三本烧不出东西于是一咬牙把第四本也给烧了。 当一位废墟图书馆玩家试图从书籍中获取知识时.jpg 补充 VIII刚知道怎么打邵。 原来逆鳞骰子不是一直不能打。 威力有效的回合是可以打的，这样她下一回合就算叠强壮也没有用会被无效化掉。 原来如此这就是为什么我这么菜吗。 补充 IX因为昨天晚上熬夜打 Hana 协会，早上起来已经 11 点了。 看了一会儿沙雕视频，总之是到了 12 点。 一开电脑发现有一位不认识的 dalao 评论了我的 Blog。 妈耶现在我的 Blog 真的输出到信息组以外了吗。 不对其实可能早就输出出去了。 dalao 给捉了一只虫。那么好的已经修复 √ 话说回来，虽然写的时候因为想着是随便写可能没怎么用心， 被别人看到的话还是会想「我写的足够好了吗」。 要知道那篇可是全程口胡一行代码都没有的。 突然反应过来，我搁着 QQ 聊天呢一句话分一段。 补充 X一早上（指 13 点）起来发现百橙有新活动了。 是一个新的世界 BOSS。 500W 血的精污游泳圈聚合体（ 剧情的话就是兔萌萌拉着由希教自己游泳然后魅樱追上去造了一个巨大怪物给她们打。 兔萌萌「您就不会点别的了是吗？」 其实还有凯在呢。 不像其他 BOSS，这个 BOSS 不会在地图上乱逛。 但是它生成小怪会扣自己血，说不定真就是从自己身上扯下来的。 补充 XI试着打了 Codeforces Round #741 (Div. 2)。 本来想在群里拉几个人开黑的，结果没有拉到人。 用了近 50 分钟才切掉三道题，然后弃疗了。 其实也没完全弃疗，最后 15 min 想出了 D 题的解法的雏形。 虽然其实就差了那么一两步。 但是还是没赶上。 最后一个 FST 都没有。于是取得了三题的好成绩。 排名 1919，最后 Rating 掉了 40。 虽然其实我觉得早就该掉了。毕竟我现在这个 Rating 是开黑开出来的。 Steam 愿望单里有游戏发售了。《熔铁少女》。23 点多给我发了封邮件然而没看到。 明天玩玩。 虽然还只是看了几张截图但是阿莉比娜 suki（光速逃 （↑无可救药的 lsp） 补充 XII话说回来，信息组里面好像军训完了的都有。然后我甚至还在暑假模式。阿稳好像也是。 zhuoer「我现在已经不会走路了。」 阿陶「开学几天你就会再次学会走路的。」 害怕（大一新生限定）.jpg 原来如此，VS Code 内部的字数统计把空格标点符号甚至换行符都给算进去了。 补充 XIII在 B 站找到了写图书馆 mod 用的 dll 的教程。 然后发现我甚至残响乐团还没打。于是去打。 累到半死才打过菲利普和艾琳。 才发现残响乐团也会掉书页。 不过话说回来，我哲学层和宗教层还没解放……应该没啥问题吧…… 至少我不想再把这些 BOSS 打一遍了。 话说回来格蕾塔一上来就在面前摆上三大块肉啊该说果然是主厨吗（ 开饭.jpg 话说回来，司书在图书馆内死去的话应该是会变成书而不会留下尸体的。四舍五入一下就是她在吃书（不是 大肉之书.jpg Finn其实标题是个人名。","link":"/how-am-i-doing/"},{"title":"弹幕结界：红色禁果","text":"Steam 页面 志ココロザシナカバニテ死シス 闲着没事逛 Steam 发现的 STG。 是原来某个叫做《星天歌：魔界的日常》的游戏的续作。虽然前作我只是云过，是个风格类似东方旧作的类东方 STG。 上 B 站看了一下，然而只能找到一个 20 年的视频。然而我明确地记得我第一次了解到这个游戏是只有我和阿块去了的一轮省队集训，也就是 19 年左右。 不是很懂.jpg 说一下系统。 击破敌人掉绿宝石，可以 +1 火力，收集很多可以奖残。 每 400 绿宝石奖一残。3200 绿宝石，也就是 8 个奖残之后改为 800 绿宝石奖一残。 一般混关应该可以拿到 4800 的奖残，也就第是 11 个。加上三面道中的一个 Extend 和初始的残机，一共 14 残。别看这么多一会就撞没了。 擦弹掉红宝石而且自动吸取，只能 +1 火力。 火力分 1~4 的等级。等级 2 以上时可以按 X 清空火力槽扔雷。 用雷消去的弹幕会变成白宝石，可以增加收集绿宝石时的得分。 没有上线回收。 总体来讲，糟点就是几乎没有什么保命措施。雷一扔出去了很容易被弹幕包围不知所措连续去世。 没错，这游戏就是个猴子游戏，扭不来弹幕死路一条。 还有就是，收集宝石会加 Rank，被弹或扔雷会降 Rank。Rank 越高弹幕越难，虽然我一上手就是 Lunatic 自带锁定 Rank Max。 通了本篇之后解锁 Extra 和 Challenge。 Challenge 就是，把某个角色的所有符卡在 Rank Max 的情况下 NN 击破，就可以解锁一张隐藏符卡。 不知道是要同一难度的所有符卡还是什么，反正我把 Lunatic 的所有符卡击破就解锁了。 还有就是，实战是真的会自带 debuff 的。 单关练习里面什么小缝我不敢钻，一上实战好家伙比谁都怂。 以下是一些截图 初通 MISS 情况：三面关底二符，终符；四面关底二非；五面关底二非×2，二符×2；六面关底一符，三非，四符，终符。 没想到四面 BOSS 竟然给面子只杀了我一次，二符三非三符连起来我竟然没有死。我大受震撼.jpg 然后五面 BOSS 打崩了死了四次。我再次大受震撼.jpg 总而言之就是一个超级无敌野蛮的猴子游戏，换句话说就是吃状态。状态不好一面循环。 有一说一一面关底一符难的。 如果您想要观看我的初通 Replay 并以此嘲讽我有多菜，可以联系我 qwq 最后吐槽一句这游戏中文翻译做的不好。很多地方语句逻辑莫名其妙的。 还有别看第一个角色 POWER 是五颗星，实战就她输出最低。 果然金发的女孩子无论在什么世界里都是只有被迫害的份吗（悲 欸等会隐藏角色也是金发啊（惊觉 啊，什么，BGM？不重要，反正都不咋样。其实是还没空听。 2021 年 7 月 23 日凌晨更新： 通关之后解锁了一个隐藏角色 Angelica。似乎是 Eldied 捡来的猫？ 至少 Eldied 的 Challenge 符卡的符卡说明里这么写。当然我是直接翻的游戏源文件看到的。 高火力诱导，整个游戏输出最高的机体。反正我是怕了。 称号是「かわいい黒猫」，嗯确实可爱。 说不定其实项圈也是萌点。 而且是唯一一个答应 Yami 说还会去找她玩的 qwq ED 里和 Cocoa 好上了，ED 就是两只猫一起喵喵乱叫。 以及吐槽一下 Cocoa 的猫弹幕太出戏了。甚至 BGM 里还有猫叫。那种真的猫叫。 看评测说低难度版本的弹幕在 Rank 相同的情况下几乎都比高难度版本难出很多。 实际试了一下感觉也就个别情况吧。 但是低难度版本的弹幕 Rank 一高确实变化很大。 而且写那个评测的那位还来了句这游戏难度太低。原来如此这就是 dalao 吗。干败吓疯.jpg 而且才发现原来三个机体对应的 EX 道中 BOSS 不一样。 Eldied 对应 Tenka；Diana 对应 Beliel；Angelica 对应 Cocoa。","link":"/red-forbidden-fruit/"},{"title":"OI Team Meeting：2021-07-17","text":"2021 年 7 月 17 日，星期六。 SLYZ 2018 级信息竞赛组内部的同学聚会！ 计划：到了地方看着办。 前一天我还因为是几乎第一次一个人出门想要临阵脱逃，这个时候 阿块「我觉得车到山前必有路吧。」 第二天 8：00 左右坐上车，差不多 10：00 左右到北门。 想着去找找他们，然后发现了迎面走来的阿稳。 几分钟之后我们又发现了阿块和 R。 阿稳「我靠阿块变这么壮了。」 然后我们打算先进门，于是四个人一起在建筑里随机游走。 然后我们看到了一个舞台，一些老年人在上面表演。 阿稳「老年文工团。」 阿块「我听不清，但我大受震撼.jpg」 然后我们遇到了阿陶和阿烜。 zhuoer 似乎要 11：30 才能来。 于是我们继续随机游走到四楼电影院，在那里就坐了。 这个时候阿块向我安利了《元气骑士》。于是我开始和他们打联机。 我「这场面好混乱啊……欸我怎么死了。」 过了一会 我「是谁打死了我……而我又打死了谁……」 我「……！」 我「是……我打死了我！」 然后等 zhuoer 来了我们打算去吃饭，于是下到三楼。 然而除了我，阿块和 R 以外的四个人两两一组便闲聊便只顾着往前走。 阿块「打扰一下，你们有在看去哪家吃吗？」 阿陶「没有。」 然后走着走着我们发现我们绕回起点了。然后我们决定再绕一圈。 第二圈绕到一半，阿稳提议说去吃火锅，然后 zhuoer 说他刚好拿到一张火锅店的票。 阿稳「有你怎么不早说！」 zhuoer「我说了你不听啊。」 然后我们去吃火锅。点了一份双人套餐，本来以为他会有两个锅，但实际上是一个锅砍成两半一边一种底料。 于是我们就又点了一份。 在这期间我们聊了很多话题，包括但不限于： 上了大学去哪 Steam 18+ 游戏盘点（我「话题变得奇怪了.jpg」） 高考前在干什么（阿稳「高考前一天晚上我还在看番。」） 我还给阿块展示了一下主席自交的后代预测。 吃完饭我们打算去超市逛一圈，然后不知道为什么跑去 B1F 的停车场绕了一大圈。停车场真就热死了。 从超市出来我们发现了两个买彩票的机器，然后阿块身先士卒地上去买了一张。 买的时候他还会问你是否已年满 18 岁。形式主义提问。 似乎是刮开之后每三个一样的图案就可以获得那一行的奖金。 第一行 阿块「哎呀不一样。」 第二行 阿块「5 块钱！很好我回本了。」 剩下几行略。最后 阿块「很好我赚了 15。」 然后把票还给机器，上面就会有一个二维码，扫那个拿钱。 阿稳「欸那如果说我抢在那个买彩票的人之前扫上这个二维码钱是不是就是我的了？」 然后 zhuoer 又买了一张中了 20，扫码的时候真就自己没扫上给阿稳扫上了。 阿稳「欸等会他说不定要确认的。」 机器「已将奖金打入您的微信钱包。」 阿稳「********。你快过来我把钱还你。」 等两个人跟上我们之后 R「哟！这不是赚了 20 块的阿稳和亏了 5 块的 zhuoer 么！」 14：00 左右，其他几个人想去玩剧本杀，想带上我。 我「剧本杀怎么玩啊没玩过。」 阿烜「没事的成爷，到时候你就照着剧本说蛤话就可以了。」 然后我们就去玩了。 阿烜「要不我们约定以后每年暑假都来这儿聚一聚吧。」 zhuoer「靠这破地方说不定过两年就给拆了。」 阿稳说因为我话不多，想给我分一个简单一点的剧本。 （虽然实际上我拿到的并没有多简单 然后开始游戏后我因为不知道说什么于是全程掉线。 阿稳「成爷怎么挂机啊。」 过了一会 zhuoer「不是，现在的问题是我们对成爷的角色一无所知。」 然后，说实话知道游戏结束我也没能理清楚整个剧情。 啥玩意啊咋回事啊.jpg 插播一则旧闻： 慎老师「我们接着做那个机房模拟器吧！」 我「这是 ao 的 qwq」 慎老师「ao 是啥啊。」 我「啊这。ao 就是好的意思（」 慎老师「嗷。」 还有，这个 Win 10 自带的中文输入法真就太拉了。 2021 年 7 月 21 日更新： 块块给捉了几只虫 qwq","link":"/oi-team-meeting-210717/"},{"title":"《キミガシネ》最终章前编 B 部分简评","text":"35a38ec48261007c19c17531251046751928eec990ebc90b81468155098643b53434599e5a94bb1f19896fc1de3673c3218151691017f848f720ecb4fba06653a64041ecd1dd76820cb8013c2fffd1d02ae9873e29812a2c805b445f256938485b3566945fe841efea08b9a3b72b308c7475effc86ed39b63a60311f8559badd290a8023ff309239f4e2813648661f2051aac2ada7f2446421b99ac5574d9e7dccc3efd31bce34b9f5268851956d0ae900db207e1bc796f14e56d85ac1fbe56909e5730de58f407c6b01d3ed7c7310c2ea5ee48f2270dca51b8dfeb3b2260ae0a56d9de2a557c6d818911e0383c9beeb56e5d0c8af95690f2d521b1c35109467d760c45574a0c7b2557a2295c7fde5f931475bf689ef6753d9761464a0f97c03e6b9532e2a1305a9c2510b10667044f9c33270fa0a2d800459566cffd7450c1c5055a8a04cd291a1e899fd00bc7130146a570c999740499cd10c50a70fdb9bc0a4899866947214c536ff545464cf4963efa73fdbc2682b57a3059898b70cd1f8d70b13bb35917a87938a253c984aedec23cd13f3bef0ded8d70db114256ec527c10850ceeb6e2c85fe605c762828344ffaf5265c68d2c7adfb355d082022f4d6bac3d5501d7d99ad9ee0f14c85c1c48af74ab58c578b542f492ab4c2740349beba815b49a7474375b40e4eb8e5de4476d295f64b592d0dbc9b715251f8fd9a469c030c3c507612381ebd15c0689470dcbc5ecd0ca62d6036655010da4537c2abfbfa528cb475935be2cb41b53c82e5876862988fb96fe37aac10d57051399f48a9c3b1bfa7850b3f9a631307d65dfadb82b5b02c81ec0a6227fdcde04a8dedf2c59466d75d9dd32a67c51677aefd4e13639076c494366920850efca49f69ada6163f9751cb368527d70175cf96ff3c2a707281c4fdd24ce411fcf200bf797ca6bf7f0f0ffc667d3167e32b9181bf92cc3b3a986b19362782317ea77ad3e7657cd419ea824bfee8bc9658403ee8594d55075d7501014904f75a83aacd7b1c22b96cf0ab667020083d1ecc618940c0227a12ea6955209a8d8b9f9df2087f0df9a49225d6571d2f7fe50b94423b60142d52b1dc5f7e96cab8dd27d5f1ad82dc8dc331d92bf1a78fc8b57aa3b8810530a1aa8caa26f59e776cabe1c0f250a056933a56733aba36ac823c5de0be95118da69bd9e25ba8787512373d56eb316fb99d8fb47ea43f7c641fc0bd5e806506d3cebcb71e8dac6a1445d996356100cd3ec40da6f928dafb65a3e5074aacd33f11f7eb81e3c8fbe57d4cda42dfec4421453cc7b31fd94db3251d624251d2914e206b65ba980ee8cb6e489fe5daca8afa52bc63f5c51f796642307f968a29ff5d0b7510a0ba4e92c0f61936d7d257aec57dd54cd8d2ed529fe3309d99d7ed1e63713d631a62c39d52fe00a3e71e35372e91e719f0dda0d8237e3ccfb2c64ff7df081cb34fbb3823ec0c011a2d54bea24cad0f705deb3d1d94ec43a785d33abf2849d4364d812b1df910943a82cecc293334f96fd372ee4c7eec12dda10afa0a53da7a6d316baa5093d3e761d10fdfd0eb61d4089c9137bfd11fac345832bb9bfd03eac42c1c0f71c196745600f52870c45b778d38f68b0abd620e7f56b2bdbbb71167d300d0e31caaf5a36e972b1d46443a12e88cd8498ae64a6284849d274aa81fe93914097bd48ed4fad3dcd49a77a3bd24c51bb7ab519ceaa4e749b0a0eb83523505360748e7986b0e6133b52411770b6b50530b5d64112fef2ebe344df454b886d394cf290967e374419ccc61ddd23bcc49ec66d1e42bcea216d2eb4a50842f7e5d478fe18e4a35df1f61728d7eb2dea1348b6de06e280d80be1354783651caa6776887ef8f4cc1747eb34344237d230b7a0290a210540f3a4bcdff07484e684c963c57ff105957e989fb75fa4816f89b5be3f4888f6858ecac729bf5f495fc70669d93d6a9648d305b8fbe5658dd2d9f0430e8f05e7e0111030cfbb7e1223c7b214f085cbb9f8d8ababd5849780c5de5f1d45c4a692ebc525630093c7216e98080eb5df3ed71a31abcf9b2a41524c9690c6b6168603976b2b506946f5a6068795efe4a830de88545f7b7e633d9260986bfb32702b8f5afd115cc41cd6aef3a3efc2ebb227c5333b429cfdff34d05b622fad3a2058292080af1a9ca3ece5ea15efa6825b6f2101094581891374d7e3720ed1bb5dd765c0f2d4a87953c92246df913d757fc534ab4df95a1ee2b22d201b04dcddea7f22b1713f520ddd5af0992db29933df4fa47e3aa7b8cd933bdec5673421e156ad619dc382a2899006b1776888c699d943213e51fddf80ca0510b3da679b0ac38916ff1d99af219c96249ddba6faae9330eca1308e5935da6b82bb1b0f0382ebdfc6867bff9b30154fdc51174b9542fd5e93e081c5df27e55bf8fde13bf379fcae16329316986850a2b3450f7b0448e0d2682eb461ad7aa9aa96abd91d133b96a04507f596aa15cad2a0690feaf82ab697cdf4f84c171a0ed871b6720d2394c098646299bc9ae42a0a707bd9c33960991ccaf917ce8574775c0c3afd389d1628c2c731c2e1b205291c538210ae40d1a23238133fa69a7726ca814fe8167c5b98fd27ef398dcc902efb6b4f8f2b8cf4ae2c9a80334b3abeb2e32f3f6c4a1987c3ba9630bcf7b2dff65bdf6c4d1f7d213778550a5b24c4385e42d935d7c257f8fdb054e84b60365267bd60ee84bd4e92786d10d756aa8f2634790b777987211d14522dd5b9ac360e4205591cbe16a26f28e1ddd3674a16f76ed1c17542a6ab5be6802fd6ee9137b79315d7c355c962342925b74c9f1ba47b3c41831ec606b4914822e2fe7cee258c0b7fbd02ba8d7725bed304b1db131f4271d036a9ef109f532f5f57882b7aaf74f915d56bdb332a425e57f79b79c1a7d981c4c17a76d013ee5f59718b85a128f3c139bd62673f53b841cbe0583dfa5579e0f66ced49647e10ae0d618d9876854e23b525c67c974dfc1e91f33afad67f1482527123def6e41b66df1501a3541c173de5d27f88f089f255d3bd4f3600f144088e8b58b0e959cb1d5600aa0bc95005b672a34f5a7ee820247d277fb926136d89ed5a6718a53b956d11f850d064376b8f49358360872b0d50fc2e088ab89cd01400147faf6c08f3d2108268d70d65daee41114a78b47ab47888a437ff729d6acad1e6427a700553f0605bbc98e04d88a3a88ad0c706121e0fbd0db9c9b39af674290f05ee8ff65d952de14fe5d57afe2d378c0da95eec99dd2cff23ad62e91cbbaae50a7ab4e7ea279d3aaa03041819724a4282a46b0cc3a2233f2e22b1602e97d25a7e6cb4a2b02097193a6ed07919eb75b454c5b9ec4dbaee57a44d6f5ae7e7de03b85d20704a786bb3cb98909c9ea5936e3ce2f2ea9e33cedf50a2d067f9004a9a1c52f792370dd764712b331619ece05073a5db84fa60209a93414a72887e0df600f7fad32a26c29bb868277ef0914d5ac763c74dc5ee7bd381978045ce4e3462ac5ce580e984c091ac2c66e4665a60f7304088c636e1fb31aadc97e60789c52238de81899d2f0c257573a30545f80314324f7e49c28e3875709e0ca34e03578b94562e03ce2e6071d644f42e1ff8c1b31236f4a8b5c7b33c0651035b791e58175ba0ad58733f8eb36fbbcb76f1f442a1122b782e52798ffa7e585f4eb097176a70f8ddfb0ded386b63d4e2ae4a7467b0990317ba876a2a6f7af8d15d623d184e430adbec50840cb095f25f16fb365599e0c5c11efdbba6c49c77ba529cb5a757cd99b3e 输入密码继续阅读","link":"/kimigashine/"},{"title":"《常世ノ塔》简要测评","text":"Steam 页面 $ git status Nothing to commit, working tree clean 闲着没事逛 Steam 翻到的游戏。 每天 23 点刷新一次的塔。刷新完之后可以有两条路线，而且路线中间可以来回切换——流程中有固定的切换点。 本质上当然是更接近平台跳跃，虽然 Steam 上有「Rogue 恶魔城」这样的标签。 稍微玩了 3 个小时左右。 要说第一印象的话，那就是手感不怎么好了。 虽然说跳跃的时候可以通过调节按键时间的长短来调节跳跃的高低，但是实际上可调节的范围并没有多少。轻轻按一下还是跳起来很高。 然后就是重力加速度太大了，或者说角色太重了。空中跳平台的话，滞空时间一长就不知道掉到哪里去了。 然后跑步有惯性？一类的，经常上平台的时候跑过头。 还有为什么没有下蹲啊。 然后关于角色。 默认角色ココア，男孩子——但是因为太可爱了成为了魔界的女仆长——我是说，当然，这是 ao 的，正太控狂喜。 其他角色倒是没怎么了解过，虽然除了ココア之外还有 4 个可选角色。 角色不同大概只有一个不同，那就是用出来的技能不同——顺便一提这游戏没有普攻，蓝条没有满放不出技能的时候就没有攻击手段了——虽然不知道为什么要这么设计。 总感觉玩多了血压上来了。 最远到 5st Region。可能是我太菜了吧。告辞。失礼了。 话说回来这游戏每天更新地图的时候不整点彩蛋啥的吗。 更新完地图不到一个小时就有人通关了，这就是 dalao 吗。 插播一条新闻： 在独一无二·绝对无敌·天下无双的伟大的 OI 之神慎老师的启发下，我打算实现一款类似于模拟 OIer 的游戏——在这款游戏中可以像 OIer 一样学习、娱乐、社交…… 但是想实现的要素太多，一时间整理不过来。所以说——有没有谁愿意帮我写一点。 最近突然喜欢用破折号了也不知道为什么。 6 月 25 日凌晨 3 点左右更新： 我终于通关啦！！！ 最终 BOSS 见了 3 次过了。 其实本来初见可以过的但是前两个 BOSS 都会开护盾然而最终 BOSS 不开护盾直接可以打，不知道以为还要等护盾结束然后跟她耗了好长时间。 还有就是，全身判定的打击判定是真的大，这个最终 BOSS 再一次用实际行动告诉了我这一点。 以及，冷静下来玩真的会有加成。 顺便一提，那个 W-W 是路线，两个 W 意思是两次都选白线。类似地 B 就是黑线。 个人觉得白线比黑线简单的概率大一些。 最后还有个 To Be continued…?，嘛不过毕竟这游戏才是 EA。 不过说实话，50 层已经够难了，如果继续往上堆层数的话真不一定受得了了。 然后就是，虽然我之前一直在说这游戏手感怎么怎么差，通关一次之后我明白了——本质上只是我不会玩平台跳跃而已。 告辞。失礼了。 6 月 26 日 11 点左右更新： 其实今天凌晨 0 点左右看的时候发现一个人没通关时，我是有些震惊的。 直到我看到了今天的白线最终 BOSS。 しにぞこないナナハ。野蛮。几乎每一招都能杀人。 其中有一招是，她扔出一串手榴弹——或者类似的东西——以抛物线轨道瞄向玩家位置，然后落地炸开一大片。反正我是不会躲。 反观黑线最终 BOSS——暗い星のルゥラ——当然这个名字我是凭记忆打的可能会错，总而言之就是她就很菜了。 虽然技能和昨天在白线时不一样，但还是就那样了。 还有就是，不知道是昨天随机到的道中比较简单，今天的比较难，还是今天我状态不在，道中打得十分去世——进 47 层时，也就是进最终 BOSS 前的补给点时身上只剩下 20+ HP。 最后也是差一下就要在最终 BOSS 9961 了。 顺便一提，9961 是指 BOSS 剩最后一滴血时 Game Over。类比.jpg 顺便一提，上图右半边是因为截这张图的时候是打完最终 BOSS 屏幕闪白的一瞬间，所以什么都看不清。 顺便一提，第二次用ココア通关的时候又确认了一遍剧情，上面总结的应该没啥问题。 6 月 27 日凌晨 3 点左右更新： 又遇到一个新的最终 BOSS，而且似乎和ココア认识？虽然名字忘了。 初见 9961。二见就通了。难度一般。至少比某个死不掉的家伙弱。 顺便一提，这次不知道是状态好了还是什么，满血进的 47 层，因此就不需要支付分数回血了。但是我今天的分数反而比昨天低了近 10000 分。神奇.jpg 还有，手感这种东西，玩多了是真的能适应下来的。 冷静下来想了想，我好想突然明白为什么ナナハ难打了。 到目前为止我一共遇到过三个不同的最终 BOSS，只有她的房间是没有空中平台的——这也就意味着提供给玩家的躲避空间是最少的。 ……大概吧。 不知道是什么时候的更新： 玩不下去了。告辞。失礼了。","link":"/tokoyo-no-tou/"},{"title":"東方覚醒珠（※二次創作） ~ Fan-made Virtual Autography","text":"Steam 页面 弾たまを 撃うつ 遊あそびのプレイヤーよ 、 玉たまを 打うつ 遊あそびの 前まえに 敗北はいぼくせよ ！ 双关真好玩（ 没错，就是这么一款 Steam 上刚出（指两周前）的东方同人……STG？某种意义上算是吧，因为这游戏主要强调的还是 RPG 的部分。 弹幕方面——尤其是 5 Boss，基本不能躲，然后 124 Boss 莫名其妙地糟，其他的其实还好。 尤其是 Ex Boss，说实话除了四符，八符，时符和终符以外并没有什么拿得出手的弹幕。 但实际上从混关角度考虑，时符终符两张糟卡放在一起从 RPG 的角度来说十分麻烦，再加上这个时候这边的资源也已经被耗得差不多了。 玩法： 如上文所言，这游戏重点在 RPG。 本质上是单关练习。自机这边需要带上四个「单位」，按照游戏中的说法是「地珠ちず」。单位分红白二色。 通过击破杂鱼敌人和 Boss 的非符或符卡来收集道具。 道具也分红白二色，可以给同色的单位充能。充满一次可以获得一次攻击的机会。 敌方也有单位。自机每 miss 一次也会给对方送过去一些道具，而且这些道具一定会使得对方所有单位获得一次攻击机会。 游戏进行到某些特定节点的时候，会出现 Party Battle 事件，就是敌我双方的单位互相攻击，自机一定先手。 自机方的单位会攻击敌方的单位，一旦某个单位的 HP 降到 0 了，它就不能攻击了。 另一方面，敌方一定会直接攻击自机本体，也就是说自机方的单位不会出现 HP 降到 0 无法攻击的情况。 当然自己本体的 HP 降到 0 了就真的满身疮痍了。 在 6 Boss 的 Final Spell 和 Ex 道中，会出现一些 特殊的 Party Battle。 单位有 spell turn 这个属性。大部分单位以 4 或 5 为主，当然也有几个 3 和一个 8。 单位每充满 spell turn 次，就可以扔雷。扔完一个雷就需要重新充满 spell turn 次才可以扔下一个。 虽然一次指扔一个雷，但是扔雷的时候处于能够扔雷的状态的单位越多，雷的威力也会越强。 其实，因为我也没有认真读设定文档，还不知道这个游戏到底讲了一个什么故事。 但是还是不可避免地被 5 Boss 这个叫「仙覚寺せんがくじ 鞠子まりこ」的角色留下了深刻的印象。 首先一登场二话不说切 BGM（而且她的 BGM 的氛围和 5 道中一个天上一个地下），然后直接怼到自机脸上开始自顾自地说自话。 ——没错，直接怼到自机脸上。不管这个时候自机往哪跑她都会跟着。 BGM 叫「偏執へんしゅうの 朱筆しゅひつ」，好吧的确挺「偏执」的。 而且，设定上她似乎是给「和歌」，或者说「弹幕」做注解的。也许是因为这个原因，弹幕强度高不说，她在 5 关底虽然只有一个单位，但是血非常厚（44444），攻击也很高，基本上两三下就可以直接送自机上路。 ——从某种意义上来说她才是这游戏的本体。 因为这个 5 Boss 我还自闭了有一阵子。 不过话说回来，这游戏竟然还有汉字注音（ 以及，以下是一些截图。 那么就这些了。 このブログを 読よんで 下くださった 貴方あなたに、いや 重しけ 吉事よごと！","link":"/fan-made-virtual-autography/"},{"title":"東方鬼葬剣（とうほうきそうけん） ~ Infinite Blade Pavilion","text":"「靠为什么刚开学才一个星期我已经感觉过了一辈子了。」 SLYZ 2018 级 24 班朝代，皇帝及年号更替史： YHN，立「精朝」，称「精太祖」，开元（忘了），后自谥「精虚帝」。 YHN，改「精朝」为「楠朝」，称「楠太宗」，开元「真虚」。 时生物听写，太宗大挫，改元「太虚」。 总而言之就是介绍一个叫做鬼葬剑或者说鬼那啥剑的游戏。 一年前发布的体验版，当时号称东方史上最难同人 STG，并且真的做到了。 然后正式版难度大砍。 不过有一说一体验版的确有一些无理了。 而且可以续关，虽然是星莲船的续关。我是不会说体验版是连续关都不可以的。 似乎ミルカ写的剧本（大概？）都会找一些神话故事作为蓝本。邪星章是旧约新约圣经，导命树是北欧神话，桃源宫是克苏鲁神话，真珠岛是埃及神话。 这次轮到中华神话了。 我是指，六面 Boss 是「蚩し尤ゆう」，萝莉（确信）。 「八や蘇そ神がみ 秋しゅう雨う」（指正 其实这游戏所有角色都是萝莉（光速逃 但是我永远喜欢那谁谁まぐら（超光速逃 去 THBWiki 翻了翻发现是「饕と喰ぐ楽ら まぐら」（奇怪的名字 秋雨终符之前其实也有一些台词的。但是因为是图像，在游戏代码里面找不到文字。那么我就回忆一下视频里： 我が名は蚩尤 鬼として葬られたものたちの剣となり！ 结 尾 点 题 文 题 呼 应 升 华 主 题 好吧，其实我现在在游戏里（虽然说是最高难度 Lunatic）连秋雨终符都见不到（ 但是不得不说这游戏的弹幕都太野蛮了。比如说，我们有： 一面吊打砂哥（？ 二面很酷很炫 三面版底出缝 四面劲爆砌墙 五面斩了再说 六面花样爆菊 黄 金 精 神（等等好像哪里不对 好。写完了。睡觉。 链接： 在 Bullet Forge 上下载该游戏 在 THBWiki 上查阅相关资料 观看相关视频（其实这个我也没看，我看的是另外一个 NBNC 的） 9-11 补充： 不得不说，这游戏相比起体验版来说真的是削得超级多： 梦 A 的面包片的发射频率快了 2 ~ 3 倍左右 道中杂鱼敌人血量大幅度降低，弹幕强度大幅度削弱 Boss 血量大幅度降低 资源变多 我初通的时候道中几乎没背板，只是稍微记了一下一些比较麻烦的地方。 结果到最后 7 残见秋雨 5 残通。 什么嘛，我打得不是挺好的吗（自许 然后试了一下剩下 5 个机体： 梦 B 就一个直线机跑得还贼慢 魔 A 说是贯通激光其实还是没法用 魔 B 攻击太鶸 妖 AB 吊毛机体用不来 顺便还想补充一下。感觉这游戏 SpellPractice 有问题。很多在 SpellPractice 里面形状固定的弹幕到了 ScenePractice 里面就变成了随机的了。 给人感觉最明显的应该是二面二符・死凶「窮奇のデスサイズ地獄変」。ScenePractice 里可以看到四个分身的初始角度是随机的，结果 SpellPractice 里直接给固定了。 太懒了就不截图什么的了。","link":"/touhou-kisouken-infinite-blade-pavilion/"},{"title":"SpellCardsCollectionSecond","text":"Juan_feng 使用了 AK Ynoi 之术！ 效果拔群！ 内含大量图片！（真的很大） 最近想突然写一个 OI 模拟人生。 和慎老师交流之后，确定了「设计一个两名玩家见面之后的决斗方式」这样的总体方针。 最后我们确定了「传统的回合制 RPG」「卡牌对决」这样的两种方案。 然后为了设计招式名称，我很快想到从 Nono 443 设计的丰富的符卡库里面找一些灵感。 突然发现 SpellCardsCollectionSecond 还在更新，于是去玩了一下。版本号 0b.39。 b0.39 已实装符卡寒波「Cold Stream」（寒流） 随便扭扭.jpg 流星「Comet Shower」（彗星之浴） 随便扭扭.jpg 月相「Blind Wall」（盲目之壁） 小玉随机，且只能看到一半；激光奇数。 随便扭扭.jpg 增幅「Howl Amplify」（怒吼放大） 红弹回音式反弹；蓝弹奇数。 随便扭扭.jpg 把驻「Splash Anchor」（溅射锚击） 锚奇数，回来的时候会有水滴弹，way 数会不断增加。 随便扭扭.jpg 爪痕「染血的狂爪」 随机 + 有些初见杀的狙。 随便扭扭.jpg 辻风「弹幕尘旋风」 好像 yuke 和梦旧市都玩过这种弹幕？ 随便扭扭.jpg 北风「Northern Gust」（北方阵风） 随便扭扭.jpg 阳光「Solar Ray Fall」（太阳射线落） 激光打到自机会变成麟弹狙。 诶真好玩.jpg 月日「Miniature Eclipse」（微型日食） 露娜本体会把桑尼的激光变成米弹；但是血很少且不会复活所以需要控枪。 话说回来那激光也不是完全无缝啊 TAS 大概能躲吧。 现像「虚 像 投 影Virtual Projection」 趁着弹幕虚化，一遍向上冲异变躲紫铳弹。 雷庭「天空中的龙之巢」 随便扭扭.jpg 结界「多重捕缚阵」 随便扭扭.jpg 祈愿「风祝的祝福」 有一说一，到后面发弹频率狂暴之后还有点麻烦的。 残响「Reverberate Echo」（反响回声） 中玉打到板顶版底反弹出发光点弹，发光中玉，光玉三层。 随便扭扭.jpg 咆哮「Hunting Howls」（猎杀咆哮） 扔出两拨人弹，然后把它们变成自机狙的狗弹。 需要引到角落否则很麻烦。 星条「Old Glory」（旧日荣耀） 美国国旗.jpg 横向的红白激光每个一段时间就会触发一次；被蓝色激光围住的大星弹打到版底会变成小星弹；所有弹幕都在向下移动。 说实话我也不知道怎么躲，随缘吧。 星月「Tiny Satellites」（极小的卫星） 整个游戏最无聊的符卡。 魔涡「Deep Mealstrom」（深涡） 怎么说呢……随便扭扭吧也没啥好说的。 突风「叶团扇 Downburst（爆发）」 中玉打到版底炸成开花麟弹链，然后麟弹又变成带环小玉自然下落。 旧版本玩过的符卡，用金发孩子的话需要左右大幅度横拉，总之很糟就是了。 离散「调 律 搅 乱Tune Shaker」 一堆狙加上乱七八糟的随机弹。 随便扭扭.jpg 狱炎「Abyss Prominence」（深渊流行） 其实我也不知道 Abyss Prominence 该咋翻译。 月球可以消去黑红弹和部分大星弹；必须要借着月球的掩护逆穿黑红弹否则会被封死。 比较典型的看上去简单玩起来难的类型。 「原初之光」 大毒瘤纯狐 /kk 乾坤「如同两位神明大人所说」 青蛙弱诱导弹，蛇 y 轴狙。 我的解法是奇数波往早苗头上引，偶数波等发弹完大力拉上去。 结晶「Fallen Fractal」（坠落分型） 新的 BGM！ ……还有新的难度。 日星「Little Supernova」（小小的超新星） 研究了一段时间的符卡。 最后我找到的解法就是……版底左右晃。 雷鱼「带电游泳弹」 激光靠近你会在你身边生成很密的麟弹，就像放电一样很有意思。 大概绕圈吧。 反击「Interception Charge」（截断蓄力） 本质上是捕获自机子弹变成大玉；然而金发孩子主要用激光所以木大！ 怪奇「Jevodan（杰沃丹）的野兽」 「杰沃丹」这个翻译来自于 https://zh.moegirl.org.cn/%E6%A2%B5%E8%92%82%E5%86%88%E5%A5%87%E8%BF%B9%E8%B0%83%E6%9F%A5%E5%AE%98# 影狼会不停地横冲直撞，并撕碎沿路上的人弹。反而是圈越小越容易突破出去。 总之就是尽快钻到人弹圈外就好了。 传说「三角海域之魔」 船长和两颗鬼火之间的三角形，如果自机进去会生成白色激光，会封死三角形内全部的区域；锚奇数，打到版边的水滴弹大概是随机吧。 大概只能固定走位。 「经年的憎恶」 随便扭扭.jpg 秘术「古代传来的神技」 固定 + 狙。 随便扭扭.jpg 神鸟「迦楼罗天翔」 大概算是整个游戏第三难的符卡。 绿色的麟弹圈速度很快，上穿一定要果断；然后一边处理麟弹圈一边左右移动躲中玉狙或者看准或弹链的缝。 变动「波 纹 偏 移Ripple Shifter」 大概算是整个游戏第二难的符卡。 一共三波，循环；每一波都是红蓝弹绕着版面中心旋转，其中红弹逆时针，蓝弹顺时针；比较特殊的是第三波，红蓝弹重叠会在特定位置形成无缝。 最后一张截图就是差点被封死然后击破了。 電中「超高压 Voltecker（伏特克）」 所以说 Voltecker 是个啥玩意（ 带核弹撞人 + 扔核弹 + 泛狙到纯随机的闪电。 击沉「Abyss Sinker」（深渊坠沉） 锚本身是固定的，扔出去后会在轨迹上留下发光小玉，收回来的时候回把小玉打碎成水滴弹；下一波锚彻底砸下来之前上一波的水滴弹不会消失。 三波，循环，但其实后两波有点像的。 转移「次 元 飞 跃Parallel Switching」 毫无疑问的整个游戏最难符卡。 弹幕本身是无缝的，分红蓝两色，其中有一种颜色的弹幕没有判定（就是半透明的子弹）；如果穿过没有判定的弹链会导致判定状态切换，即之前没有判定的颜色变得有判定，有判定的颜色变得没有判定。 典型的看上去难玩起来更难的类型。 后记如果后面又有更新了的话大概这边也会更新吧。","link":"/spell-cards-collection-second/"},{"title":"「2020 省选联考 A 卷 D1T2」组合数问题","text":"从现在开始我 blog 写题解要附上简要题意（ 给定 $m$ 次多项式 $F(x)=\\sum_{i=0}^{m}f_{i}x^{i}$，试求 \\sum_{k=0}^{n}{n\\choose k}F(k)x^{k}\\在 $\\operatorname{mod}p$ 意义下的值。 其中 $1\\leqslant n,x,p\\leqslant 10^{9},0\\leqslant f_{i}\\leqslant 10^{9},1\\leqslant m\\leqslant\\min(n,1000)$。 不过话说回来，D2 早上去机房听烜说这是道衡水的原题，而且还是比原题简单的那种。 首先我们把 $F(k)$ 拆开，得到 \\sum_{i=0}^{m}f_{i}\\sum_{k=0}^{n}{n\\choose k}k^{i}x^{k}考虑到 $m$ 比较小，我们可以对于外层 $\\sum$ 的每一项单独求值。定义 \\begin{aligned} G_{n,t}(x)&=\\sum_{k=0}^{n}{n\\choose k}k^{t}x^{k}\\\\ &=\\sum_{k=0}^{n}\\left({n-1\\choose k}+{n-1\\choose k-1}\\right)k^{t}x^{k}\\\\ &=\\sum_{k=0}^{n}{n-1\\choose k}k^{t}x^{k}+\\sum_{k=0}^{n}{n-1\\choose k-1}k^{t}x^{k}\\\\ &=\\sum_{k=0}^{n-1}{n-1\\choose k}k^{t}x^{k}+\\sum_{k=0}^{n-1}{n-1\\choose k}(k+1)^{t}x^{k+1}\\\\ &=\\sum_{k=0}^{n-1}{n-1\\choose k}k^{t}x^{k}+x\\sum_{i=0}^{t}{t\\choose i}\\sum_{k=0}^{n-1}{n-1\\choose k}k^{t}x^{k}\\\\ &=G_{n-1,t}(x)+x\\sum_{i=0}^{t}{t\\choose i}G_{n-1,i}(x) \\end{aligned}于是我们构造矩阵 A=\\begin{bmatrix} {0\\choose 0}x+1&0&0&\\cdots&0&0&1\\\\ {1\\choose 0}x&{1\\choose 1}x+1&0&\\cdots&0&0&0\\\\ {2\\choose 0}x&{2\\choose 1}x&{2\\choose 2}x+1&\\cdots&0&0&0\\\\ \\vdots&\\vdots&\\vdots&\\ddots&\\vdots&\\vdots&\\vdots\\\\ {m-1\\choose 0}x&{m-1\\choose 1}x+1&{m-1\\choose 2}x&\\cdots&{m-1\\choose m-1}x+1&0&0\\\\ {m\\choose 0}x&{m\\choose 1}x&{m\\choose 2}x&\\cdots&{m\\choose m-1}x&{m\\choose m}x+1&0\\\\ 0&0&0&\\cdots&0&0&1 \\end{bmatrix}和初始向量 S=\\begin{bmatrix} 1\\\\ 0\\\\ 0\\\\ \\vdots\\\\ 0\\\\ 0\\\\ 1 \\end{bmatrix}那么 A^{n}S=\\begin{bmatrix} G_{n,0}(x)\\\\ G_{n,1}(x)\\\\ G_{n,2}(x)\\\\ \\vdots\\\\ G_{n,m-1}(x)\\\\ G_{n,m}(x)\\\\ 1 \\end{bmatrix}虽然我在我的另一个 blog 里写过了，不过由于某些原因那个 blog 倒了，于是我在这里再写一遍。 如果直接使用矩阵快速幂来计算 $A^{n}$ 的话，复杂度是 $O(m^{3}\\log n)$ 的，但是这还不够。 考虑我们能不能构造出一个奇妙的序列 $c_{0},c_{1},\\cdots,c_{m+1}$ 使得 $C(A)=\\sum_{i=0}^{m+1}c_{i}A^{i}=A^{n}$。 如果我们构造出来了，令 $S_{k}$ 表示 $S$ 从上往下第 $k$ 维的值，从 $0$ 开始标号。那么 (A^{n}S)_{k}=\\left(\\sum_{i=0}^{m+1}c_{i}A^{i}S\\right)_{k}=\\sum_{i=0}^{m+1}c_{i}(A^{i}S)_{k}注意到 $(A^{i}S)_{k}$ 就是 $G_{i,k}(x)$，不过如果 $k=m+1$ 就是 $1$。这样我们就可以在 $O(m^{2})$ 的复杂度内计算出答案。 我们设 $A^{n}=P(A)Q(A)+C(A)$，如果我们能够找到一个 $m+2$ 次多项式 $H$ 使得 $Q(A)=0$，就可以有 $C(A)=A^{n}\\operatorname{mod}Q(A)$。 一下是一些为了求出 $H$ 所必要的矩阵相关知识。 对于矩阵 $A$，如果等式 $(\\lambda I-A)v=0$ 成立，我们称 $\\lambda$ 是 $A$ 的一个特征值，$v$ 是 $A$ 的一组特征向量。 有两个连 shadowice dalao 都不会证的结论： 满足 $\\text{Det}(A)\\neq 0$，即满秩的 $n\\times n$ 的矩阵 $A$ 拥有 $n$ 组线性无关的特征向量。 当且仅当 $\\text{Det}(\\lambda I-A)=0$ 时存在这样的 $v$。 显然我们刚才构造的矩阵 $A$ 是满秩的。于是根据 Cayley-Hamilton 定理，有 $\\prod_{k=0}^{m+1}(\\lambda_{k}I-A)=0$，其中 $\\lambda_{0},\\lambda_{1},\\cdots,\\lambda_{m+1}$ 表示 $A$ 的 $m+2$ 组特征向量。 于是 $Q(A)=\\prod_{k=0}^{m+1}(\\lambda_{k}I-A)$。 考虑另外一个多项式 $R(\\lambda)=\\text{Det}(\\lambda I-A)$，根据 shadowice dalao 的 blog，这两个多项式的系数对应相等。 而显然 $\\text{Det}(\\lambda I-A)=(\\lambda-1)(\\lambda-x-1)^{m+1}$，使用分治 NTT 可以在 $O(m\\log^{2}m)$ 的复杂度内计算出来。 那么总结一下： 计算 $R(\\lambda)=\\text{Det}(\\lambda I-A)=(\\lambda-1)(\\lambda-x-1)^{m+1}$，复杂度 $O(m\\log^{2}m)$。 设 $R(\\lambda)=\\sum_{i=0}^{m+2}q_{i}\\lambda^{i}$，有 $Q(A)=\\sum_{i=0}^{m+2}q_{i}A^{i}=0$。 计算 $C(A)=A^{n}\\operatorname{mod}Q(A)$，时间复杂度 $O(m\\log m\\log n)$。 设 $C(A)=\\sum_{i=0}^{m+1}c_{i}A^{i}$，有 $(A^{n}S)_{k}=\\sum_{i=0}^{m+1}c_{i}(A^{i}S)_{k}$，也即 $G_{n,k}(x)=\\sum_{i=0}^{m+1}c_{i}G_{i,k}(x)$。 对于所有的 $0\\leqslant i\\leqslant m+1,0\\leqslant k\\leqslant m$ 计算 $G_{i,k}(x)$，我们发现 $G$ 的暴力递推式可以转化成 EGF，于是做 $m$ 遍卷积，复杂度 $O(m^{2}\\log m)$。 那么总体的复杂度相当于 $O(m^{2}\\log m)$。 然而我一点都不想写这个玩意（","link":"/sdoi2020-d1t2-solution/"},{"title":"「SDOI2020 游记」五月蠅いなお前なんて大嫌いだ","text":"闲着没事干写篇游记。 鉴于 NOI2020 拟于 8 月份举办以及各省目前的疫情防控情况，NOI 科学委员会经过研究决定：由 CCF 统一命题和评测的 NOI2020 省队选拔安排在 6 月 20 日 - 21 日（周六周日）举行。统一省选安排两试，时间为每天上午 8 点半到 13 点。 以上文字引用自 CCF 关于 NOI2020 省选举办时间和方式的通知。 标题的「五月蠅いな」和「お前なんて大嫌いだ」是两句话，因为「五月蠅い」后面要直接跟名词不能加「な」qwq Day -∞颓废一时爽，一直颓废一直爽，回去做题火葬场。 Day -17（2020-6-2）因为合格考没过被迫开始补政治和语文。 呐，世界，毁灭吧（无端 不知道为什么从中午开始一直头疼，躺了一整个下午总算好点了。 躺在床上的时候突然就想，自己加入信息组已经两年了啊。 曹爷（ID 忘了，Luogu 上叫第一发言者），DEVILK，SuperGoodGame，star_dust，hachimanjy，RiverFun，wavwing，Bj2002，Colorfulmist，SnoWY，Ciyang，ArachnidaKing，Red_dye…… 我突然想起来了，以前每天晚上，我们在宿舍里，一边闻着曹爷的大臭脚一边谈笑风生，然后抢曹爷被子时的事情。 我突然想起来了，曾经有过一个晚上，DEVILK 手把手帮我调生日蛋糕时的事情。 我突然想起来了，2018 年的 NOIp，我们在宿舍里，玩算法版谁是卧底时的事情。 我突然想起来了，曾经有过一个晚上，我帮着 hachimanjy 搭建 GitHub 博客时的事情。 当初我去自招的时候见到 RiverFun 是什么心情呢？我已经不知道了。 一开始因为误打误撞进了信息组，wavwing（好像）还惹出了不少事。当时我还只能跟着他后面不做声，结果现在也变成爷字辈了。 我突然想起来了，第一次合格考我回到机房时，Bj2002 大喊一声「您们看看谁来了！」时的事情。 我突然想起来了，当初我为了和 asuldb 深入交流，不畏 Colorfulmist 的潮之力毅然调座位时的事情。结果调过去遇到的第一道题就是一道神仙虚树反演题 Surprise Me!（ 我突然想起来了，我以前手把手教 SnoWY 学算法时的事情。结果他现在文化课 OI 两开花随手吊打我。 我突然想起来了，以前闲下来没事干的时候，成天就知道往 Taduro 的座位旁边凑时的事情。 我突然想起来了，以前和 Juan_feng 一起调试 五彩斑斓的世界，未来日记 时的事情。结果后来自己参与了 std 编写的题 文化课（一开始叫 四则运算基础练习题）也被收入 Ynoi了。还是活成了自己讨厌的模样（大雾 我突然想起来了，2019 年一轮省队集训，Day 9，被 nzhtl1477 拍着肩膀说「珂以啊！」时的事情。 我突然想起来了，省队选拔前夕，拿着小本本跑回宿舍记录 Colorfulmist 名人名言时的事情。 我突然想起来了，2019 年一轮省队选拔，Day 1 考完，我和 asuldb 几个人一起在教学楼后面谈笑风生时的事情。 也许真就像那句话所说吧： 哪有什么突然想起，只是一直藏在心底罢了。 插播一则旧闻： 潮子与 asuldb 论 SAM。潮子潮之曰：你的 SAM 没有 A，SM，A 不了。次日，asuldb 遇 SAM 题，得正解。然倍增毙，爆零也。遂叹曰：潮爷奶的准，我的 SAM 就是 A 不了。 经 典 咏 流 传。 Day -10（2020-6-9）我终于通关 Slay the Spire 了！（倒地 为什么我这么菜啊 /kk 用新角色观者打了一发，感觉不知道为什么就是好像很厉害（大雾 Day 0（2020-6-19）中间竟然有连着 9 天没有更新（ 而且连 Wiki 也没有（ 其实是有一天 GitHub 突然 push 不上去了于是懒得搞了于是咕掉了（ 明天就是 Day 1 了 /kk 大概考完这场省选我就要退役了吧 /kk 想着要说点什么，想来想去，还是这句话： 「何も問題は無いようじゃがの～」 最近在看 BUG 之风，看得我拳☆銃☆大☆爆☆発。 「そして、オレだけが再リ起タ不イ能ヤしない事を許可しろ！」 Day 1（2020-6-20）前一天晚上定了一个五点整的闹钟，结果因为某种神秘的原因提前十分钟就起来了。 七点几分出的家门，到了机房大概有半多了。进门看到块坐在稳稳的位置上，陶就坐在旁边他自己的位置上。 跟他们说最近在玩 Slay the Spire，陶表示不知道。于是给他看了一下 PKUWC 的同名题目。 以前烜写过这道题的题解，说这是 SB 题。可惜我现在还是不会。直接去问他，他表示早就忘了。 进考场之后也没啥。看他们都在拼命打板子，但是我觉得打了也没用，所以反复确认试题。 一共三道题，icefire，problem 和 shop，从大样例的数量来看全部都是传统题。 解压密码一团乱码。 具体的题意应该迟早会上传到各大 OJ 上，这里就不赘述了。 一开始看了一个小时 T1 毫无进展，于是去看 T2。 稍微推了推就推出来一个矩阵的做法，$O(m^{3}\\log n)$，结合暴力可以拿到 60 pts。 然后再回去看 T1 发现这个东西是单峰的，于是写了个三分套树状数组，$O(n\\log^{2}n)$，60 pts。但实际上因为是三分所以其中一个 $\\log$ 是以 $1.5$ 为底数的，常数会大。可以改成二分，但无论如何都是 60 pts。 做到这里就已经没时间了，T3 直接输出样例走人。 出考场和机房中 dalao 讨论题，发现烜 T1 想出了正解但是没有写出来。据他说是线段树，但是说实话我表示怀疑。 被天下第一的胡块块邀请到了他的家里。现在我写这些东西的时候也是在他家里。 块说自己在家里经常健身，于是我顺便拜见了一下他的健身器械。 被块暴力安利了炉石传说。其实我第一次听说炉石传说还是「你必须攻击该具有嘲讽的随从」的来着。 一个下午就打完了新手教学（ 块「你是我见过的新手教学打得最认真的。」 算了吧还是 Slay 好玩（ Day 2（2020-6-21）又定了一个五点的闹钟，结果又提前十分钟起来了。 不到七点就走了，到了机房还没开门。 重新抽了座位，然而两天都是二号考场。 瞅一眼压缩包里面，count，transfer 和 tree，传统题。 ……？！count！这一定是一道计数题，看我写个 NTT 板子。 结果写了半个小时没写出来 /kk 解压密码和昨天一样是乱码。 打开一看发现 count 是 T3，生成树题。 于是三道题来回看了又看，一直在「想到新思路 -&gt; 开始写代码 -&gt; 写到一半发现假了 -&gt; 自闭」这样循环。 到最后突然发现 T3 可以莫比乌斯反演套矩阵树，然后突然发现自己不会矩阵树。写了半个小时没写出来，弃疗了。 最终成绩：60+60+0+30+10+30=190。我没了 /kk 烜「这套题暴力分贼肥啊你怎么回事啊。」 最后的最后，loli 让我们下午回家，明天开始学文化课。大概这就是我打的最后一场正式的 OI 比赛了吧。 对了差点忘了说了，昨天听说块没看过 JO5 但是被剧透过，于是带着他看了第一话。 黄金精神，指偷别人钱抢别人行李给别人发好人卡。 「めーはもう……めーはもう……めーはもう推しだ！」 「大丈夫ですかブチャラティ？」 The End 今番良晤，豪兴不浅， 他日江湖相逢，再当杯酒言欢。 咱们就此别过。 江湖路远，各位请一路珍重。 虽然是从花花的犇犇里抄来的。 插播一则新闻： 真实成绩：60+60+0+0+10+10=140。看来是 D2T1 整个写炸了，D2T3 莫名其妙丢了 20 pts。","link":"/sdoi2020-notes/"},{"title":"东方催狐谭（とうほうさいこたん） ~ Servants of Harvest Wish","text":"この美しい景色も秋の贈り物…… 滝のように落ちていく紅葉、通りすがる人達に微笑む山…… この絶景を目の前にして、言葉が詰まらない方がおかしいと思わない？ 以上文字选自魔理沙线六面 BOSS 开打前对话。 如果您对东方圈有一定了解，您可能会知道有一款叫做 東方落流星（とうほうらくりゅうせい） ~ The Shattered Sky 的游戏。催狐谭是那个游戏作者的新作。 关于前作落流星，我其实并没有玩过，主要原因就是它的立绘实在是……太抽象了。 然而本作催狐谭的立绘还是可以的。 摘自 THBWiki 的故事背景： 由于不知名的原因，幻想乡中所有稻谷迅速凋零。 如此下去，人类不久便会陷入饥饿之中。 四位少女决定出发寻找异变的原因并解决异变。 总体的剧情就是，EX BOSS 为了给自己创造一个新的肉身，从六面 BOSS 那里偷来了如意宝珠。如意宝珠的消失导致了异变。 后来 EX BOSS 让自己的两个手下把宝珠还回去，结果她俩被自机揍了一顿溜回来了。 EX BOSS 感到十分 excited，于是设计把自机引了过来想会会她们。 本作一共有四个自机：灵梦，魔理沙，早苗和龙子（前作落流星五面 BOSS），每个自机都有 AB 两个配置。当然我是只用过魔 A，而且是两三发就通了的那种。 本作的特殊系统比较简单。击破敌人可以获得特殊道具，收集一定数量可以进入一个特殊模式。在这个模式下按 X 可以扔出风神录一样的灵击然后结束该模式，在该模式中收集到的道具越多，灵击圈就越大。虽然可以决死，但是被弹之后如果不扔决死是会掉残的。我初通的时候就是因为这个在一面抱 B 撞了（ 每一面击破 BOSS 之前收集足够多的特殊道具可以开启 Last Word，不能扔雷，被弹会强制结束符卡而不会掉残。 以及传统艺能，六面 BOSS 的 Last Word 被弹会掉残，以及自机全程处于特殊模式中，普通的雷被换成了原本可以结束该模式的灵击。 我在看过视频剧透的情况下 Lunatic 三发通，而且还是在一面抱 B 撞，四面最后一只大蝴蝶耗俩雷，五道中完全没背板的情况下；Extra 一发通。机体都是魔 A。 所以说这游戏其实也不难，当然我是指 Lunatic 和 Extra 。至于 URA（在 Lunatic 选项处连打 Shift 解锁）和 Lunatic Extra，不好意思我不敢碰。 而且据说，这游戏每一个 BOSS 都有一张异常符卡，是满足一些乱七八糟的条件（比如 EX BOSS 的异常符卡需要在满足一些条件的情况下 NN EX 道中，然后 EX BOSS 的 BGM 甚至还会换曲风，甚至似乎这个才是原曲）之后会额外追加的一张符卡。如果能在实战（单关练习也行，但是 BOSS 练习或符卡练习不行）收掉这张符卡，就会解锁最后的 Overdrive 符卡。 干败吓疯，干败吓疯。 最后是一些链接： 在 Bullet Forge 上下载该游戏 在 THBWiki 上查阅相关资料 观看相关视频 以及，也许近期会做一个 Lunatic 和 Extra 初通 Replay 的解说。","link":"/touhou-saikotan-servants-of-harvest-wish/"},{"title":"Challestend的脑内切题清单","text":"如标题所示。 觉得比较简单或者懒得写代码的题。 wzx「你怎么还懒得写代码啊。你把这些题都写了就有事干了。」 可能有时候会闲着没事写几道。 「CF915F」Imbalance Value of a Tree最大值和最小值分开求。 大力并查集。 以上。 「CF455D」Serega and Fun大力块链。 记得loli以前考过这题。 结果那次数据随机放跑了暴力。 「CF1182E」Product Oriented Recurrence令 g_{i}=\\ln f_{i}那么 g_{n}=(2n-6)\\ln c+g_{n-1}+g_{n-2}+g_{n-3}一定存在这样的$k_{0},k_{1},k_{2},k_{3}$，使得 g_{n}=k_{0}\\ln c+k_{1}g_{1}+k_{2}g_{2}+k_{3}g_{3}于是 f_{n}=c^{k_{0}}\\cdot f_{1}^{k_{1}}\\cdot f_{2}^{k_{2}}\\cdot f_{3}^{k_{3}}「CF1093E」Product Oriented Recurrence定义$f_{i}$表示$a_{i}$在$b$中对应的下标，$g_{i}$表示$b_{i}$在$a$中对应的下标。 操作一就是在询问 \\sum_{i=l_{a}}^{r_{a}}[f_{i}\\in[l_{b},r_{b}]]操作二就交换一下$f_{g_{x}}$和$f_{g_{y}}$，$g_{x}$和$g_{y}$。 大力分块。 「CF446C」DZY Loves Fibonacci Numbers通过查阅题解，我们知道斐波那契数拥有如下性质 F_{n+m}=F_{n+1}F_{m}+F_{n}F_{m-1}考虑使用数学归纳法证明。首先 F_{n+0}=F_{n+1}F_{0}+F_{n}F_{-1}……不从$1$开始。 F_{n+1}=F_{n+1}F_{1}+F_{n}F_{0}=F_{n+1}F_{n+2}=F_{n+1}F_{2}+F_{n}F_{1}=F_{n+1}+F_{n}=F_{n+2}\\begin{aligned} F_{n+m}&=F_{n+m-1}+F_{n+m-2}\\\\ &=F_{n+1}F_{m-1}+F_{n}F_{m-2}+F_{n+1}F_{m-2}+F_{n}F_{m-3}\\\\ &=F_{n+1}F_{m}+F_{n}F_{m-1} \\end{aligned}于是 \\sum_{i=1}^{x}F_{L+i}=F_{L+1}\\sum_{i=1}^{x}F_{i}+F_{L}\\sum_{i=0}^{x-1}F_{i}然后大力线段树（细节略）。 我甚至还写了。","link":"/solving-problems-in-brain/"},{"title":"「CF1114E」Arithmetic Progression","text":"传送门 大概是写的第一道正常一点的交互题吧（ 因为原序列是打乱的等差数列，任意两项的差一定形如$kd$，其中$k\\in\\mathbb{N}^{+}$。 于是我们想到，如果我们提取出序列中的一些项，比如说前$m$项，差分，然后求出这些数的gcd，就有可能是原等差数列的公差。 但这并不一定，因为这个gcd也有可能是$kd$的形式。 那么把原序列随机打乱就行了。 求出公差之后二分找原序列最大值即可。 实测$m$最大可以取到$30$。 这样就可以A了。 评测记录。 那么问题来了，这个算法的正确率到底有多大（ 我们将这个问题抽象为以下模型： 给定一长度为$n$的随机排列$p$和一正整数$m$，$1\\leqslant m\\lt n$，令 q_{i}=|p_{i+1}-p_{i}|\\quad(i\\in[1,m])试求 P\\left(\\gcd_{i=1}^{m}q_{i}=1\\right) 不会。告辞.jpg","link":"/cf1114e-solution/"},{"title":"「XRound2F」永恒（大概算得上是篇题解）","text":"传送门 读完题面，我们很快就想到统计每对点对对答案的贡献，然后累加起来。 于是问题转化成，对于每对点对，求出它们所对应的字符串的lcp长度与树上同时经过它们的路径数量之积并求和。 考虑点分治。 对于一个分治中心，我们可以将答案分成两部分，第一部分是分治中心与子树内其它点的贡献，第二部分是分治中心不同子树内的点对的贡献。 对于第一部分，我们直接枚举子树内其它点，然后直接求其与分治中心在Trie上对应节点的lca的深度，然后乘上其自身的子树大小，与其所在的分治中心的对应子树大小。我们可以通过使用LCT维护Trie来解决。 对于第二部分，我们在对于一个点计算完它第一部分的贡献之后，查询之前已经完全枚举过的其他子树内的所有点的子树大小与其与该节点在Trie上对应节点的lca的深度之积并求和。虽然我不是很懂怎么描述，但是反正这个东西LCT是可以搞的。 计算完以上两部分并累加，我们就得到了答案。不难得出，上述算法的时间复杂度为$O(n\\log^{2}n)$。 https://www.luogu.org/record/22194363 然后评测结果就长这样（ 这时我们点开算法标签，发现里面有个虚树。于是我们来思考用虚树怎么做。 关于上文的第一部分，这个没救，唯一的优化方法就是$O(1)$求lca。 而关于第二部分，如果我们定义两个点之间的距离为它们的子树大小之积再乘以它们在Trie上对应节点的lca深度，我们要求的其实就是除去分治中心外所有点对的距离之和，再减去同一子树内所有点对的距离之和。很明显这可以用虚树实现。 经过这样两个优化，我们成功地在想象中将时间复杂度降到了$O(n\\log n)$。 然而我不会虚树:( 虽然T了但还是贴一下代码吧。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266#include&lt;cstdio&gt;#include&lt;algorithm&gt;#define re register#define maxn 300000#define mod 998244353#define min(a,b) ((a)&lt;=(b)?(a):(b))#define max(a,b) ((a)&gt;=(b)?(a):(b))namespace cltstream{ #define size 1048576 char cltin[size+1],*ih=cltin,*it=cltin; inline char gc(){ #ifdef ONLINE_JUDGE if(ih==it){ it=(ih=cltin)+fread(cltin,1,size,stdin); if(ih==it) return EOF; } return *ih++; #else return getchar(); #endif } char cltout[size+1],*oh=cltout,*ot=cltout+size; inline void pc(char c){ if(oh==ot){ fwrite(cltout,1,size,stdout); oh=cltout; } *oh++=c; } #define clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout),cltstream::oh=cltstream::cltout #undef size template &lt;typename _tp&gt; inline void read(_tp&amp; x){ int sn=1; char c=gc(); for(;c!=45&amp;&amp;(c&lt;48||c&gt;57)&amp;&amp;c!=EOF;c=gc()); if(c==45&amp;&amp;c!=EOF) sn=-1,c=gc(); for(x=0;c&gt;=48&amp;&amp;c&lt;=57&amp;&amp;c!=EOF;x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=gc()); x*=sn; } template &lt;typename _tp&gt; inline void write(_tp x,char text=-1){ if(x&lt;0) pc(45),x=-x; if(!x) pc(48); else{ int digit[22]; for(digit[0]=0;x;digit[++digit[0]]=x%10,x/=10); for(;digit[0];pc(digit[digit[0]--]^48)); } if(text&gt;=0) pc(text); }}int m;struct SplayNode{ int size,val,sum,add; SplayNode *ftr,*lc,*rc;};SplayNode mempool[maxn+1];inline int isRoot(re SplayNode* p){ return p-&gt;ftr==NULL||(p-&gt;ftr-&gt;lc!=p&amp;&amp;p-&gt;ftr-&gt;rc!=p);}inline void pushDown(re SplayNode* p){ if(p-&gt;lc!=NULL){ p-&gt;lc-&gt;val=(p-&gt;lc-&gt;val+p-&gt;add)%mod; p-&gt;lc-&gt;sum=(p-&gt;lc-&gt;sum+1LL*p-&gt;lc-&gt;size*p-&gt;add%mod)%mod; p-&gt;lc-&gt;add=(p-&gt;lc-&gt;add+p-&gt;add)%mod; } if(p-&gt;rc!=NULL){ p-&gt;rc-&gt;val=(p-&gt;rc-&gt;val+p-&gt;add)%mod; p-&gt;rc-&gt;sum=(p-&gt;rc-&gt;sum+1LL*p-&gt;rc-&gt;size*p-&gt;add%mod)%mod; p-&gt;rc-&gt;add=(p-&gt;rc-&gt;add+p-&gt;add)%mod; } p-&gt;add=0;}inline void pushUp(re SplayNode* p){ p-&gt;size=1; p-&gt;sum=p-&gt;val; if(p-&gt;lc!=NULL){ p-&gt;size+=p-&gt;lc-&gt;size; p-&gt;sum=(p-&gt;sum+p-&gt;lc-&gt;sum)%mod; } if(p-&gt;rc!=NULL){ p-&gt;size+=p-&gt;rc-&gt;size; p-&gt;sum=(p-&gt;sum+p-&gt;rc-&gt;sum)%mod; }}inline void rotate(re SplayNode* p){ re SplayNode* q=p-&gt;ftr; pushDown(q); pushDown(p); p-&gt;ftr=q-&gt;ftr; if(p-&gt;ftr!=NULL){ if(p-&gt;ftr-&gt;lc==q) p-&gt;ftr-&gt;lc=p; if(p-&gt;ftr-&gt;rc==q) p-&gt;ftr-&gt;rc=p; } if(q-&gt;rc==p){ q-&gt;rc=p-&gt;lc; if(q-&gt;rc!=NULL) q-&gt;rc-&gt;ftr=q; p-&gt;lc=q; } else{ q-&gt;lc=p-&gt;rc; if(q-&gt;lc!=NULL) q-&gt;lc-&gt;ftr=q; p-&gt;rc=q; } q-&gt;ftr=p; pushUp(q); pushUp(p);}inline void splay(re SplayNode* p){ for(;!isRoot(p);rotate(p)) if(!isRoot(p-&gt;ftr)) rotate((p-&gt;ftr-&gt;ftr-&gt;lc==p-&gt;ftr)==(p-&gt;ftr-&gt;lc==p)?p-&gt;ftr:p);}inline void access(re SplayNode* p){ pushDown(p); splay(p); p-&gt;rc=NULL; pushUp(p); for(re SplayNode* q=p;q-&gt;ftr!=NULL;){ pushDown(q-&gt;ftr); splay(q-&gt;ftr); q-&gt;ftr-&gt;rc=q; pushUp(q-&gt;ftr); q=q-&gt;ftr; } splay(p);}inline SplayNode* LCA(re SplayNode* p,re SplayNode* q){ pushDown(p); access(p); splay(q); q-&gt;rc=NULL; pushUp(q); for(p=q;p-&gt;ftr!=NULL;){ pushDown(p-&gt;ftr); splay(p-&gt;ftr); p-&gt;ftr-&gt;rc=p; pushUp(p-&gt;ftr); p=p-&gt;ftr; } splay(q); return p;}inline void update(re SplayNode* p,re int x){ access(p); p-&gt;val=(p-&gt;val+x)%mod; p-&gt;sum=(p-&gt;sum+1LL*p-&gt;size*x%mod)%mod; p-&gt;add=(p-&gt;add+x)%mod;}inline int query(re SplayNode* p){ access(p); return p-&gt;sum;}int n,ec,rt,sz,cntsum,ans;int des[2*maxn+1],suc[2*maxn+1],las[maxn+1],id[maxn+1];int size[maxn+1],mxs[maxn+1],vis[maxn+1];int cnt[maxn+1],stk[maxn+1];inline void connect(re int x,re int y){ des[++ec]=y; suc[ec]=las[x]; las[x]=ec;}void getRt(re int cur,re int ftr){ size[cur]=1; mxs[cur]=0; for(re int i=las[cur];i;i=suc[i]) if(des[i]!=ftr&amp;&amp;!vis[des[i]]){ getRt(des[i],cur); size[cur]+=size[des[i]]; mxs[cur]=max(mxs[cur],size[des[i]]); } mxs[cur]=max(mxs[cur],sz-size[cur]); if(!rt||mxs[rt]&gt;mxs[cur]) rt=cur;}int calc(re int cur,re int ftr,re int root){ stk[++stk[0]]=cur; re int res=0; cnt[cur]=1; for(re int i=las[cur];i;i=suc[i]) if(des[i]!=ftr&amp;&amp;!vis[des[i]]){ res=(res+calc(des[i],cur,root))%mod; cnt[cur]+=cnt[des[i]]; } ans=(ans+1LL*cnt[cur]*(query(mempool+id[cur])-cntsum+mod)%mod+mod)%mod; re SplayNode* x=LCA(mempool+id[cur],mempool+id[root]); access(x); re int dx=x-&gt;lc!=NULL?x-&gt;lc-&gt;size:0; return (res+1LL*cnt[cur]*dx%mod)%mod;}void divide(re int cur,re int ftr){ vis[cur]=1; cntsum=0; for(re int i=las[cur],j=0;i;i=suc[i]) if(des[i]!=ftr&amp;&amp;!vis[des[i]]){ re int tmp=calc(des[i],cur,cur); ans=(ans+1LL*(n-cnt[des[i]])*tmp%mod)%mod; for(;j&lt;stk[0];++j,update(mempool+id[stk[j]],cnt[stk[j]]),cntsum=(cntsum+cnt[stk[j]])%mod); } for(;stk[0];update(mempool+id[stk[stk[0]]],mod-cnt[stk[stk[0]]]),--stk[0]); for(re int i=las[cur];i;i=suc[i]) if(des[i]!=ftr&amp;&amp;!vis[des[i]]){ rt=des[i]; sz=size[des[i]]; getRt(des[i],cur); divide(rt,cur); }}int main(){ cltstream::read(n); cltstream::read(m); for(re int i=1;i&lt;=n;++i){ int x; cltstream::read(x); if(x){ connect(x,i); connect(i,x); } } for(re int i=1;i&lt;=m;++i){ pushUp(mempool+i); int x; cltstream::read(x); if(x) (mempool+i)-&gt;ftr=mempool+x; } for(re int i=0;i&lt;=n;++i) cltstream::read(id[i]); rt=0; sz=n; getRt(1,0); divide(rt,0); cltstream::write(ans); clop(); return 0;}","link":"/luogu-p5439-solution-probably/"},{"title":"「Luogu-P5349」幂","text":"传送门 其实挺休闲的一道题（ \\sum_{i=0}f(i)r^{i}=\\sum_{i=0}\\sum_{j=0}^{m}f_{j}i^{j}r^{i}=\\sum_{j=0}^{m}f_{j}\\sum_{i=0}i^{j}r^{i}于是我们设 g_{n}=\\sum_{i=0}i^{n}r^{i}\\begin{aligned} g_{n}&=\\sum_{i=0}i^{n}r^{i}\\\\ &=\\sum_{i=0}(i-1+1)^{n}r^{i}\\\\ &=\\sum_{i=0}\\sum_{j=0}^{n}\\binom{n}{j}(i-1)^{j}r^{i}\\\\ &=\\sum_{j=0}^{n}\\binom{n}{j}\\sum_{i=0}(i-1)^{j}r^{i}\\\\ &=n!\\sum_{j=0}^{n}\\cfrac{\\sum_{i=0}(i-1)^{j}r^{i-1}}{j!}\\cfrac{r}{(n-j)!}\\\\ \\cfrac{g_{n}}{n!}&=\\sum_{j=0}^{n}\\cfrac{g_{j}}{j!}\\cfrac{r}{(n-j)!}\\\\ \\end{aligned}我们不难发现卷积的形式。于是此题完。告辞。 怎么这么短啊（ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138#include&lt;cstdio&gt;#define re register#define maxn 524288#define mod 998244353#define swap(a,b) a^=b,b^=a,a^=bnamespace cltstream{ #define size 1048576 char cltin[size+1],*ih=cltin,*it=cltin; inline char gc(){ #ifdef ONLINE_JUDGE if(ih==it){ it=(ih=cltin)+fread(cltin,1,size,stdin); if(ih==it) return EOF; } return *ih++; #else return getchar(); #endif } char cltout[size+1],*oh=cltout,*ot=cltout+size; inline void pc(char c){ if(oh==ot){ fwrite(cltout,1,size,stdout); oh=cltout; } *oh++=c; } #define clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout),cltstream::oh=cltstream::cltout #undef size template &lt;typename _tp&gt; inline void read(_tp&amp; x){ int sn=1; char c=gc(); for(;c!=45&amp;&amp;(c&lt;48||c&gt;57)&amp;&amp;c!=EOF;c=gc()); if(c==45&amp;&amp;c!=EOF) sn=-1,c=gc(); for(x=0;c&gt;=48&amp;&amp;c&lt;=57&amp;&amp;c!=EOF;x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=gc()); x*=sn; } template &lt;typename _tp&gt; inline void write(_tp x,char text=-1){ if(x&lt;0) pc(45),x=-x; if(!x) pc(48); else{ int digit[22]; for(digit[0]=0;x;digit[++digit[0]]=x%10,x/=10); for(;digit[0];pc(digit[digit[0]--]^48)); } if(text&gt;=0) pc(text); }}int unit[2][24],rev[maxn];int n,r;int fac[maxn],fnv[maxn],F[maxn],G[maxn],H[maxn];inline int cltpow(re int x,re int y){ re int res=1; for(;y;x=1LL*x*x%mod,y&gt;&gt;=1) if(y&amp;1) res=1LL*res*x%mod; return res;}inline void NTT(re int* F,re int n,re int tp){ for(re int i=0;i&lt;n;++i) if(i&lt;(rev[i]=(rev[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)?(n&gt;&gt;1):0))) swap(F[i],F[rev[i]]); for(re int k=1,p=1;p&lt;n;++k,p&lt;&lt;=1) for(re int i=0;i&lt;n;i+=p&lt;&lt;1) for(re int j=i,tmp=1;j&lt;i+p;++j,tmp=1LL*tmp*unit[tp][k]%mod){ re int x=F[j],y=1LL*F[j+p]*tmp%mod; F[j]=(x+y)%mod; F[j+p]=(x-y+mod)%mod; } re int v=cltpow(n,tp*(mod-2)); for(re int i=0;i&lt;n;++i) F[i]=1LL*F[i]*v%mod;}inline void Inv(re int* F,re int* G,re int n){ int tmp[maxn]; for(re int i=0;i&lt;maxn;++i) G[i]=tmp[i]=0; G[0]=cltpow(F[0],mod-2); for(re int i=1,j=4;i&lt;n;i&lt;&lt;=1,j&lt;&lt;=1){ for(re int k=0;k&lt;(i&lt;&lt;1);++k) tmp[k]=F[k]; NTT(G,j,0); NTT(tmp,j,0); for(re int k=0;k&lt;j;++k) G[k]=(2-1LL*tmp[k]*G[k]%mod+mod)*G[k]%mod; NTT(G,j,1); for(re int k=(i&lt;&lt;1);k&lt;j;++k) G[k]=0; } for(re int i=n;i&lt;maxn;++i) G[i]=0;}int main(){ unit[0][23]=cltpow(3,119); unit[1][23]=cltpow(332748118,119); for(re int i=0;i&lt;2;++i) for(re int j=22;j&gt;=0;--j) unit[i][j]=1LL*unit[i][j+1]*unit[i][j+1]%mod; cltstream::read(n); cltstream::read(r); fac[0]=fac[1]=fnv[0]=fnv[1]=1; for(re int i=2;i&lt;=n;++i) fnv[i]=(mod-1LL*mod/i*fnv[mod%i]%mod)%mod; for(re int i=2;i&lt;=n;++i){ fac[i]=1LL*fac[i-1]*i%mod; fnv[i]=1LL*fnv[i-1]*fnv[i]%mod; } for(re int i=0;i&lt;=n;++i){ cltstream::read(F[i]); H[i]=(mod-1LL*r*fnv[i]%mod)%mod; } ++H[0]; Inv(H,G,n+1); for(re int i=0;i&lt;=n;++i) G[i]=1LL*G[i]*fac[i]%mod; re int ans=0; for(re int i=0;i&lt;=n;++i) ans=(ans+1LL*F[i]*G[i]%mod)%mod; cltstream::write(ans); clop(); return 0;}","link":"/luogu-p5349-solution/"},{"title":"常系数齐次线性递推式第n项的计算","text":"没想到我竟然还有再次回到机房的一天。 在家颓了两个月了（ 没想到我竟然还有再次开始写题的一天。 luogu都掉蓝了（ 没想到我竟然还有再次更新blog的一天。 上一次还是五月份的时候（ 我也不知道为什么我要学这么个东西（指标题），而且它好像还没什么用。 反正我就是学了。 谁能告诉我递推怎么翻译成英语。扔给google它拼命告诉我recursion（ 好像扯得有点多的样子。 传送门 首先我们分析一下我们需要干什么(?)。 我们需要计算一个满足以下三个要求的递推数列： 「常系数」，指递推过程中用到的系数与下标$n$无关。 「齐次」，指递推式中不存在常数项。 「线性」，指递推式中仅存在一次项（算上系数是二次）。 不过好像存在常数项也能做的样子。 此类递推式一般具有以下形式 a_{n}=\\sum_{i=1}^{k}f_{i}a_{n-i}其中$f_{1},f_{2},\\cdots,f_{k}$为系数数列。 上式仅针对于$n\\geqslant k$的情况，$n\\lt k$时$a_{n}$会被给出。 如下定义初始向量$S$ \\begin{bmatrix} &a_{0}&\\\\ &a_{1}\\\\ &a_{2}\\\\ &\\vdots\\\\ &a_{k-3}\\\\ &a_{k-2}\\\\ &a_{k-1} \\end{bmatrix}如下构造矩阵$A$ \\begin{bmatrix} &0&1&0&\\cdots&0&0&0&\\\\ &0&0&1&\\cdots&0&0&0\\\\ &0&0&0&\\cdots&0&0&0\\\\ &\\vdots&\\vdots&\\vdots&\\ddots&\\vdots&\\vdots&\\vdots\\\\ &0&0&0&\\cdots&0&1&0\\\\ &0&0&0&\\cdots&0&0&1\\\\ &f_{k}&f_{k-1}&f_{k-2}&\\cdots&f_{3}&f_{2}&f_{1} \\end{bmatrix}我们有 a_{n}=(A^{n}S)_{0}于是我们计算出$A^{n}$即可。但该过程需要的时间复杂度是$O(k^{3}\\log n)$的。 假设，我们有了一个奇妙的序列$q_{0},q_{1},\\cdots,q_{k-1}$，它满足 A^{n}=\\sum_{i=0}^{k-1}q_{i}A^{i}这样一来，我们就可以在$O(k^{4})$的时间复杂度内…… 不，实际上我们并不需要知道整个$A^{n}$，我们仅需要知道$A^{n}S$，或者更进一步地，知道$(A^{n}S)_{0}$即可。 我们把上式两边乘以$S$，然后整理 \\begin{aligned} A^{n}S&=\\left(\\sum_{i=0}^{k-1}q_{i}A^{i}\\right)S\\\\ A^{n}S&=\\sum_{i=0}^{k-1}q_{i}A^{i}S\\\\ A^{n}S&=\\sum_{i=0}^{k-1}q_{i}(A^{i}S)\\\\ (A^{n}S)_{0}&=\\sum_{i=0}^{k-1}q_{i}(A^{i}S)_{0}\\\\ a_{n}&=\\sum_{i=0}^{k-1}q_{i}a_{i} \\end{aligned}我们于是得到这样的式子。这使得我们能够在$O(k)$的时间复杂度内计算答案。 然后我们考虑如何构造$q_{i}$。 注意到$\\sum_{i=0}^{k-1}q_{i}A^{i}$的次数比$A^{n}$低，我们令 A^{n}=P(A)G(A)+Q(A)其中$P,G,Q$是三个矩阵多项式，并且我们钦定$G$的次数是$k$，$PG$的次数是$n$。 如果说，这个$G$还满足$G(A)=0$，我们就有 A^{n}=\\sum_{i=0}^{k-1}q_{i}A^{i}=Q(A)也就是说，我们要求的$q_{i}$，就是$Q$的系数，而$Q$是$A^{n}$对$G$取模的结果。 这一过程可以通过快速幂实现，只是取模从整数取模变成了多项式取模。时间复杂度$O(k\\log k\\log n)$。 于是我们考虑如何构造$G$的系数$g_{i}$。 通过查阅题解(??)，我们得知 g_{i}=\\begin{cases} &-f_{k-i}\\;\\;\\;\\;\\;\\;\\;\\;&(i\\lt k)\\\\ &1&(i=k) \\end{cases}证明？不会，告辞。 总结一下就是： 构造多项式$G$。 计算多项式$Q=A^{n}\\operatorname{mod} G$。 计算$a_{n}=\\sum_{i=0}^{k-1}q_{i}a_{i}$。 Updated on 2019-08-04 告辞.jpg","link":"/linear-ditui-learning-notes/"},{"title":"大概算是个斯特林数总结？","text":"看到wzx写了个斯特林数总结，于是也想来写一个。 第二类斯特林数定义将$n$个有标号的元素放入$m$个无标号的集合，且不允许空集的方案数。记为${n\\brace m}$。 递推式{n\\brace m}={n-1\\brace m-1}+m{n-1\\brace m}考虑第$n$个元素单独构成一个集合还是加入之前的某个集合即可。 {n\\brace 0}=1\\qquad(n\\geqslant 0){n\\brace n}=0\\qquad(n\\gt 0)通项公式{n\\brace m}=\\cfrac{1}{m!}\\sum_{i=0}^{m}(-1)^{i}{m\\choose i}(m-i)^{n}=\\sum_{i=0}^{m}\\cfrac{(-1)^{i}}{i!}\\cfrac{(m-i)^{n}}{(m-i)!}大力容斥即可。 不难发现等式最右边形成了卷积的形式，这使得我们能够在$O(n\\log n)$的时间复杂度内计算出${n\\brace i}$。 自然数的次幂及幂和m^{n}=\\sum_{i=1}^{m}{m\\choose i}i!{n\\brace i}考虑将$n$个有标号的元素任意地放入$m$个有标号的集合。每个元素都有$m$种选择，因此总方案数为$m^{n}$。 在这一过程中，可能只有部分集合非空。我们枚举这些非空集合的排列，然后将所有元素放入这些集合，并且这次不允许空集。 显然上述两种方法是等价的。 利用上面这个公式，我们还可以计算自然数的幂和。 \\begin{aligned} \\sum_{i=0}^{n-1}i^{m}&=[m=0]+\\sum_{i=1}^{n-1}i^{m}\\\\ &=[m=0]+\\sum_{i=1}^{n-1}\\sum_{j=1}^{i}{i\\choose j}j!{m\\brace j}\\\\ &=[m=0]+\\sum_{j=1}^{n-1}j!{m\\brace j}\\sum_{i=j}^{n-1}{i\\choose j}\\\\ &=[m=0]+\\sum_{j=1}^{n-1}j!{m\\brace j}{n\\choose j+1}\\\\ &=[m=0]+\\sum_{j=1}^{n-1}{m\\brace j}\\cfrac{n^{\\underline{j+1}}}{j+1} \\end{aligned}关于$\\sum_{i=j}^{n-1}{i\\choose j}={n\\choose j+1}$，我们可以认为，等式左边枚举了一个最左侧的位置，然后再在这个位置右侧选择$j$个元素。 次幂转下降幂x^{n}=\\sum_{i=0}^{n}{n\\brace i}x^{\\underline{i}}考虑数学归纳法。 \\begin{aligned} x^{n+1}&=x\\cdot x^{n}\\\\ &=\\sum_{i=0}^{n}{n\\brace i}x\\cdot x^{\\underline{i}}\\\\ &=\\sum_{i=0}^{n}{n\\brace i}(x-i+i)x^{\\underline{i}}\\\\ &=\\sum_{i=0}^{n}{n\\brace i}x^{\\underline{i+1}}+\\sum_{i=0}^{n}{n\\brace i}ix^{\\underline{i}}\\\\ &=\\sum_{i=0}^{n+1}{n\\brace i-1}x^{\\underline{i}}+\\sum_{i=0}^{n+1}{n\\brace i}ix^{\\underline{i}}\\\\ &=\\sum_{i=0}^{n+1}{n+1\\brace i}x^{\\underline{i}} \\end{aligned}第一类斯特林数这里我们讨论无符号第一类斯特林数。 定义$n$个有标号的元素构成$m$个圆排列的方案数。记为${n\\brack m}$。 递推式{n\\brack m}={n-1\\brack m-1}+(n-1){n-1\\brack m}考虑第$n$个元素单独构成一个圆排列还是插入到之前的某个元素之前即可。 {n\\brack 0}=1\\qquad(n\\geqslant 0){n\\brack n}=0\\qquad(n\\gt 0)通项公式大概……没有吧。 下降幂转次幂x^{\\underline{n}}=\\sum_{i=0}^{n}(-1)^{n-i}{n\\brack i}x^{i}考虑数学归纳法。 \\begin{aligned} x^{\\underline{n+1}}&=(x-n)x^{\\underline{n}}\\\\ &=\\sum_{i=0}^{n}(-1)^{n-i}{n\\brack i}(x-n)x^{i}\\\\ &=\\sum_{i=0}^{n}(-1)^{n-i}{n\\brack i}x^{i+1}+\\sum_{i=0}^{n}(-1)^{n-i+1}{n\\brack i}nx^{i}\\\\ &=\\sum_{i=0}^{n+1}(-1)^{n-i+1}{n\\brack i-1}x^{i}+\\sum_{i=0}^{n+1}(-1)^{n-i+1}{n\\brack i}nx^{i}\\\\ &=\\sum_{i=0}^{n+1}(-1)^{n-i+1}{n+1\\brack i}x^{i} \\end{aligned}斯特林反演观察下面两个式子 \\begin{aligned} x^{n}&=\\sum_{i=0}^{n}{n\\brace i}x^{\\underline{i}}\\\\ x^{\\underline{n}}&=\\sum_{i=0}^{n}(-1)^{n-i}{n\\brack i}x^{i} \\end{aligned}将它们套在一起 x^{\\underline{n}}=\\sum_{i=0}^{n}(-1)^{n-i}{n\\brack i}\\sum_{j=0}^{i}{i\\brace j}x^{\\underline{j}}\\\\=\\sum_{j=0}^{n}\\sum_{i=j}^{n}(-1)^{n-i}{n\\brack i}{i\\brace j}x^{\\underline{j}}于是 \\sum_{i=m}^{n}(-1)^{n-i}{n\\brack i}{i\\brace m}=[m=n]","link":"/strling-number-notes/"},{"title":"不会起标题（理直气壮）","text":"从APIO回来发现luogu多了几道NTT的板子题，于是来写一下。 关于游记……可能不会发了。 普通多项式转下降幂多项式x^{n}=\\sum_{i=0}^{n}S(n,i)x^{\\underline{i}}\\begin{aligned} \\sum_{i=0}^{n-1}f_{i}x^{i}&=\\sum_{i=0}^{n-1}f_{i}\\sum_{j=0}^{i}S(i,j)x^{\\underline{j}}\\\\ &=\\sum_{j=0}^{n-1}\\sum_{i=0}^{n-1}S(i,j)f_{i}x^{\\underline{j}}\\\\ &=\\sum_{j=0}^{n-1}\\sum_{i=0}^{n-1}\\cfrac{1}{j!}\\sum_{k=0}^{j}(-1)^{k}C(j,k)(j-k)^{i}f_{i}x^{\\underline{j}}\\\\ &=\\sum_{j=0}^{n-1}\\sum_{k=0}^{j}\\cfrac{(-1)^{k}}{k!}\\cfrac{1}{(j-k)!}\\sum_{i=0}^{n-1}(j-k)^{i}f_{i}x^{\\underline{j}}\\\\ &=\\sum_{j=0}^{n-1}\\sum_{k=0}^{j}\\cfrac{(-1)^{k}}{k!}\\cfrac{F(j-k)}{(j-k)!}x^{\\underline{j}}\\\\ &=\\sum_{j=0}^{n-1}g_{j}x^{\\underline{j}} \\end{aligned}所以 g_{i}=\\sum_{j=0}^{i}\\cfrac{(-1)^{j}}{j!}\\cfrac{F(i-j)}{(i-j)!}其中求$F(i-j)$需要多点求值。然而我不会。 告辞。 下降幂多项式转普通多项式x^{\\underline{n}}=\\sum_{i=0}^{n}(-1)^{n-i}s(n,i)x^{i}\\begin{aligned} \\sum_{i=0}^{n-1}f_{i}x^{\\underline{i}}&=\\sum_{i=0}^{n-1}f_{i}\\sum_{j=0}^{i}(-1)^{i-j}s(i,j)x^{j}\\\\ &=\\sum_{j=0}^{n-1}\\sum_{i=0}^{n-1}(-1)^{i-j}s(i,j)f_{i}x^{j} \\end{aligned}……告辞。 下降幂多项式乘法根据提示，一个下降幂多项式可以唯一确定一个次数相同的普通多项式，我们只需要转过去乘起来再转回来就好了！ ……大概吧。 第二类斯特林数·行紫题警告。不过的确简单。第二类斯特林数的通项公式推一推就能推成卷积形式。 第二类斯特林数·列不会。抄的题解。 定义 S_{m}(x)=\\sum_{i=0}^{+\\infty}S(i,m)x^{i}利用第二类斯特林数的递推公式 S(n,m)=S(n-1,m-1)+mS(n-1,m)我们有 \\begin{aligned} S_{m}(x)&=\\sum_{i=0}^{+\\infty}S(i,m)x^{i}\\\\ &=\\sum_{i=0}^{+\\infty}(S(i-1,m-1)+mS(i-1,m))x^{i}\\\\ &=S_{m-1}(x)x+mS_{m}(x)x\\\\ &=\\cfrac{S_{m-1}(x)x}{1-mx}\\\\ &=\\cfrac{x^{m}}{\\prod_{i=1}^{m}(1-ix)} \\end{aligned}关于类似$\\prod(1-ix)$这种的怎么计算……我怎么觉得我提过好几遍了呢（ 第一类斯特林数·行思路与「第二类斯特林数·列」类似。 s(n,m)=s(n-1,m-1)+(n-1)s(n-1,m)\\begin{aligned} s_{n}(x)&=\\sum_{i=0}^{+\\infty}s(n,i)x^{i}\\\\ &=\\sum_{i=0}^{+\\infty}(s(n-1,i-1)+(n-1)s(n-1,i))x^{i}\\\\ &=(n-1+x)s_{n-1}(x)\\\\ &=\\prod_{i=0}^{n-1}(i+x) \\end{aligned}第一类斯特林数·列我们发现「第二类斯特林数·列」和「第一类斯特林数·行」的思路行不通了。 题解，打开。 我们来观察一下这个式子 (1+x)^{t}似乎并没有什么用。 \\begin{aligned} (1+x)^{t}&=\\sum_{i=0}^{t}C(t,i)x^{i}\\\\ &=\\sum_{i=0}^{+\\infty}C(t,i)x^{i}\\\\ &=\\sum_{i=0}^{+\\infty}\\cfrac{t^{\\underline{i}}}{i!}x^{i}\\\\ &=\\sum_{i=0}^{+\\infty}\\cfrac{1}{i!}\\sum_{j=0}^{i}(-1)^{i-j}s(i,j)t^{j}x^{i}\\\\ &=\\sum_{j=0}^{+\\infty}\\sum_{i=j}^{+\\infty}\\cfrac{1}{i!}(-1)^{i-j}s(i,j)x^{i}t^{j}\\\\ (1+x)^{t}&=e^{t\\ln(1+x)}\\\\ &=\\sum_{i=0}^{+\\infty}\\cfrac{(1+x)^{i}}{i!}t^{i}\\\\ &=\\sum_{i=0}^{+\\infty}\\cfrac{1}{i!}\\sum_{j=0}^{i}C(i,j)x^{j}t^{i} \\end{aligned}根据上面两个不同的整理过程，我们有 \\sum_{i=0}^{+\\infty}\\sum_{j=i}^{+\\infty}\\cfrac{1}{j!}(-1)^{j-i}s(j,i)x^{j}t^{i}=\\sum_{i=0}^{+\\infty}\\cfrac{1}{i!}\\sum_{j=0}^{i}C(i,j)x^{j}t^{i}进一步地 \\sum_{j=i}^{+\\infty}\\cfrac{1}{j!}(-1)^{j-i}s(j,i)x^{j}=\\cfrac{1}{i!}\\sum_{j=0}^{i}C(i,j)x^{j}","link":"/polynomial-xxx-notes/"},{"title":"「CF570D」Tree Requests","text":"传送门 听说是道dsu on tree的题。然而我不会dsu（ 我们把题目给的字母$c$转化成$2^{c-\\mathrm{a}}$。这样如果一些节点的权值异或和是$2^{k}(k\\in\\mathbb{N}^{+})$或$0$，它们就能够排列成回文串。 我们想到，如果我们能将这些节点重新编号，使得每个询问涉及到的所有节点的新编号都是一个连续的区间，我们就可以直接提取出前缀和。 那么如何编号？BFS序。 一个显然的性质是，如果我们在构建DFS序和BFS序时访问每条边的顺序一致，那么对于深度相同且BFS序递增的一段区间，它们的DFS序一定也是递增的。 于是我们在构建BFS序时预处理每个深度的节点的对应区间，然后二分定位到$v_{i}$的子树内的部分。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125#include&lt;cstdio&gt;#include&lt;algorithm&gt;#define re register#define maxn 500000namespace cltstream{ #define size 1048576 char cltin[size+1],*ih=cltin,*it=cltin; inline char gc(){ #ifdef ONLINE_JUDGE if(ih==it){ it=(ih=cltin)+fread(cltin,1,size,stdin); if(ih==it) return EOF; } return *ih++; #else return getchar(); #endif } char cltout[size+1],*oh=cltout,*ot=cltout+size; inline void pc(char c){ if(oh==ot){ fwrite(cltout,1,size,stdout); oh=cltout; } *oh++=c; } #define clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout),cltstream::oh=cltstream::cltout #undef size template &lt;typename _tp&gt; inline void read(_tp&amp; x){ int sn=1; char c=gc(); for(;c!=45&amp;&amp;(c&lt;48||c&gt;57)&amp;&amp;c!=EOF;c=gc()); if(c==45&amp;&amp;c!=EOF) sn=-1,c=gc(); for(x=0;c&gt;=48&amp;&amp;c&lt;=57&amp;&amp;c!=EOF;x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=gc()); x*=sn; } template &lt;typename _tp&gt; inline void write(_tp x,char text=-1){ if(x&lt;0) pc(45),x=-x; if(!x) pc(48); else{ int digit[22]; for(digit[0]=0;x;digit[++digit[0]]=x%10,x/=10); for(;digit[0];pc(digit[digit[0]--]^48)); } if(text&gt;=0) pc(text); }}int n,m,ec;int des[maxn+1],suc[maxn+1],las[maxn+1];int dfn[maxn+1],dep[maxn+1],size[maxn+1],h[maxn+1],p[maxn+1],bfn[maxn+1],lwr[maxn+2];int a[maxn+1],val[maxn+1];inline void connect(re int x,re int y){ des[++ec]=y; suc[ec]=las[x]; las[x]=ec;}void dfs(re int cur,re int ftr){ dfn[cur]=++dfn[0]; dep[cur]=dep[ftr]+1; size[cur]=1; for(re int i=las[cur];i;i=suc[i]){ dfs(des[i],cur); size[cur]+=size[des[i]]; }}int main(){ cltstream::read(n); cltstream::read(m); for(re int i=2;i&lt;=n;++i){ int x; cltstream::read(x); connect(x,i); } dfs(1,0); h[1]=1; for(re int head=0,tail=1;head&lt;tail;){ re int x=h[++head]; p[head]=dfn[x]; bfn[x]=head; dep[x]&gt;dep[h[head-1]]&amp;&amp;(lwr[dep[x]]=head); for(re int i=las[x];i;i=suc[i]) h[++tail]=des[i]; } lwr[dep[h[n]]+1]=n+1; for(re int i=1;i&lt;=n;++i){ re char c=cltstream::gc(); for(;c&lt;'a'||c&gt;'z';c=cltstream::gc()); a[i]=1&lt;&lt;(c-'a'); } for(re int i=1;i&lt;=n;++i) val[i]=val[i-1]^a[h[i]]; for(re int i=1;i&lt;=m;++i){ int x,y; cltstream::read(x); cltstream::read(y); re int L=std::lower_bound(p+lwr[y],p+lwr[y+1],dfn[x])-p; re int R=std::lower_bound(p+lwr[y],p+lwr[y+1],dfn[x]+size[x])-p-1; if(L&lt;=R){ re int v=val[R]^val[L-1]; if((v&amp;(v-1))==0) cltstream::pc('Y'),cltstream::pc('e'),cltstream::pc('s'),cltstream::pc(10); else cltstream::pc('N'),cltstream::pc('o'),cltstream::pc(10); } else cltstream::pc('Y'),cltstream::pc('e'),cltstream::pc('s'),cltstream::pc(10); } clop(); return 0;}","link":"/cf570d-solution/"},{"title":"「SDOI2019R2游记」不会起标题了","text":"我好菜啊。 Day -1上午loli搞了场模拟赛。 发的第一套题目好像学长们都做过，于是又发了第二套。 然后神仙hz随手秒了T2。 想我这种辣鸡只能在旁边看着。 到最后还是没有人认真写，快乐地颓废了一个上午。 下午当然是回家。 感觉自己最近日渐颓废。 Day 0一觉睡到11点，然后去学校坐车。 因为人很少所以可以一个人占两个位，虽然我一轮时也是这么坐的。 一路上一边听音乐一边睡觉不知不觉到了济南。 然后翻山越岭走了1km的路去试机。济南的坡多到爆炸。 去抽签发现抽到了最后一个编号83号，这一定预示着我要垫底了。 试机的时候什么也没干，就那么看着其他的神仙敲键盘。 ……差点忘了一件事，考场的键盘Ctrl不在最左下角，最左下角是Fn，再往右才是Ctrl，按起来肥肠别扭。 本来loli是想让我们出去吃的，结果我们集体跳车，就只剩下hz、cst、dsq三个人在那，想想还有点尬。 于是什么也没吃。 晚上玩了玩鬼形兽，不知道是因为资源太少还是啥，糟了好一段时间才通。 睡觉前loli日常奶人。 Day 1总之是7点下去吃了早饭。然后再次翻山越岭去考场。 开考前可以随便动键盘，然而就算这样也没干啥。 解压密码画风似乎海星的样子。 首先大概扫了一眼三道题。回来看T1，我们发现这是一道简单题。 然而我却因为这道题调了1h+。自闭。 T2不会，什么毒瘤题部分分都不给的。 T3大概会20左右。 除了考场发现人均120，这样要是一不小心写挂了哪直接就没了啊。 咕掉了下午的讲题。 成绩发下来发现自己100+0+10=110，海星。 然后同级的其他神仙： cst：100+0+10=110 shzr：50+0+20=70 wyx：50+0+0=50 wzx：0+0+20=20 然后一看rqy甚至也0+100+0=100，但是他切了T2啊orz。 大概看了一下群里发的题解，不过自然是什么也看不懂。 快乐地颓了一个下午。 闲着没事开了一把桃源宫PH，结果打到终符loli突然杀了进来。 然后莫名其妙被loli奶了一口，「zyc比较稳」，于是伏笔就这么埋下了。 Day 2本来对今天也没报多少希望。 拿到压缩包发现今天似乎没有大样例。 解压完之后，还是扫一眼三道题。感觉一道都不会的样子。 去看了看T2，发现好像是个阶梯Nim……但是我不会啊。 开始打表。结果好像真的打出规律来了。 于是头铁玩了5h的T2。并且喜提爆零。 看他们好像都会T1的样子……自闭。 并没有怎么看成绩。反正都爆零了就这样吧。 听wzx说shzr从最开始稳到现在，结果最后一天翻车让wyx翻进女队。 走到最后来发现自己什么也没有，就这样回去了。 大概这就是菜鸡的命运吧。 回头一看，似乎自从一轮D2炸掉之后，我就不应该报太大希望的。 虽然说勉强苟进了二轮，但是这并没有什么用。 告辞。然后一想到后面还有合格考……去世.jpg","link":"/sdoi2019r2-notes/"},{"title":"论一条咸鱼如何瞎搞「WC2015」未来程序","text":"传送门 说不定还会持续更新？（ 2019-04-26闲得没事翻到这道题了想试一试。 首先看到测试点1。 很明显的一个$a\\times b\\operatorname{mod}c$。 啊什么爆unsigned long long？Python了解一下（ 然后去看测试点2。 差不多能总结出这么一个规律来 a_{0}=1\\;\\;\\;\\;b_{0}=0\\;\\;\\;\\;c_{0}=0a_{n}=a_{n-1}+2b_{n-1}+c_{n-1}\\;\\;\\;\\;b_{n}=a_{n-1}+b_{n-1}\\;\\;\\;\\;c_{n}=a_{n-1}\\text{Ans}=a_{n}-2b_{n}+c_{n}然后手动打表 $n$ $a_{n}$ $b_{n}$ $c_{n}$ $0$ $1$ $0$ $0$ $1$ $1$ $1$ $1$ $2$ $4$ $2$ $1$ $3$ $9$ $6$ $4$ $4$ $25$ $15$ $9$ $5$ $64$ $40$ $25$ 然后发现$a_{n}=F_{n+1}^{2}$，于是推出$b_{n}=\\sum_{i=0}^{n}F_{i}^{2}$，$c_{n}=F_{n}^{2}$。 有一个结论是$\\sum_{i=0}^{n}F_{i}^{2}=F_{n}F_{n+1}$，证明也不难。于是就这样xjb写了个矩乘。 然后去看测试点3。 自然数$k$次方和，恩没难……等等四次方和是啥（ https://www.zybang.com/question/cd5fa7b364c5ac9f3194eac2525ae6aa.html 光速逃（ 然后去看测试点4。 如果把1看成黑点，0看成白点，type=0就是在遍历所有黑点对，直接一个$\\text{cnt}(\\text{cnt}-1)$解决。 type=1就是对于每个黑点，求出其到所有白点的曼哈顿距离的最小值，再求和。 不难想到枚举这个最小值，虽然复杂度很假但是数据随机啊（ 然后去看测试点5。 很明显的仅包含黑点的矩形的计数……等等，这不就是半个与或和吗（ 然后我就突然回想起来了，那道题WA成0分的记忆。 先把前4个点交上去看看吧。然后10+1+10+6=27。 诶我测试点4怎么6分啊……一看发现type=0写成了$\\cfrac{1}{2}\\text{cnt}(\\text{cnt}-1)$…… 关于测试点2……先放一放。 然后去看测试点6。 感觉不怎么会光速弃疗。 然后去看测试点7。 经过一番分析，我发现这是在求给定数独字典序最小的解，然后第$i$组数据输出前$i$行？（并不是） 打了个爆搜然后跑到死也只跑出来前三组。 哦不我连搜索都不会写了，我失败了:( 然后去看测试点8。 大致可以抽象成是给你7个点，每个点权值$w_{i}\\in[1,n]\\cap\\mathbb{N}$，再给你一些边，对于一条边$(x,y)$，必须要有$w_{x}\\lt w_{y}$，求方案数。 第1问给了一条链，很明显方案数就是$C_{n}^{7}$。 看到后9问好像十分麻烦，先跳过吧。 然后去看测试点9。 一上来一坨字符画一样的东西差点吓到我。 从VSCode右边的缩略图里能够很明显看出是一个人。 在仔细阅读了代码之后，我发现这是10道解答题。 然后……诶好像差不多该溜了。 2019-04-27一大早上被比我不知道强到哪里去了的asuldb安利了一道看上去很吓人的题。 继续来搞这道提答。 答上了测试点9的前两问，然后去看测试点10……？？！！ 这是什么鬼东西怎么这么一大坨子函数…… 一开始没看源文件大小，后来一看发现竟然有1000+KB。 吓得我电脑都卡了。 发现本质上是让求_()这个函数的调用次数。于是我就让这个函数返回1，其他函数返回它调用的所有函数的返回值之和。 然后……算是勉强凑出来前3问，5行左右。 一交……诶我后两个点怎么还RE了？ 不会是我没交4和5的.out文件吧……然后发现还真是，补上去两个空文件之后评测结果正常了，10+1+10+10+0+0+0+1+2+5=39。 然后发现测试点7实际上是将整个数独压成一行复读$i$遍。（好像也不是） 6，8，9，10四个点挣扎了一会还是弃疗了。 回去看测试点5……想到反正数据随机，写了一个稍微优化了一点的暴力。 然后改了改测试点2。一交发现什么变化都没有。 luogu又出锅了？这么想着又交了一遍，然后还是什么变化都没有。 // 以上内容差不多是以回忆的形式写下来的。接下来差不多是边调题边写（ 然后发现我测试点5的二维前缀和写错了（ 仔细一推测试点2发现 \\begin{aligned} \\text{Ans}&=F_{n+1}^{2}-2\\sum_{i=0}^{n}F_{i}^{2}+F_{n}^{2}\\\\ &=F_{n+1}^{2}-2F_{n+1}F_{n}+F_{n}^{2}\\\\ &=F_{n-1}^{2} \\end{aligned}但是就算这样也不应该WA啊……写了个暴力发现是因为偷懒矩阵没清空…… 然后再一交，10+10+10+10+10+0+0+1+2+5=58。 然后我突然有了一个想法，对于测试点10，我可以直接用一个std::map维护出源文件中的所有函数的值啊。 写了写一交……诶怎么还少了4分？ 一检查发现只是计算了调用次数，忘了再乘以那个___。 于是再一交，10+10+10+10+10+0+0+1+2+10=63。 回去看了看测试点7，感觉没救了，于是想搞一搞测试点9。 看到第4问的答案只有3个字符，直接搜于是搜出来一个_。 再像这样搜了一下第5问发现是we。 考虑到后面都是英文单词了于是把枚举的范围压缩到了a~z。 然后搜出了第6问是hold，第7问是these。 然后上百度一查发现这句话是we hold these truths to be self-evident。 那么还剩第3问那个人名……这种问题无解吧，尤其是对于我这种咸鱼来说。 于是一交，10+10+10+10+10+0+0+1+9+10=70。 简单推了一下测试点7，发现指数非常有规律，于是把系数扔到OEIS搜了一波。 虽然是找到了，但是公式也没有生成函数也没有什么也没有。 下面还给我来一行approved（ 弃疗。告辞。","link":"/luogu-p4920-solving-notes/"},{"title":"「Luogu-P5178」公约数","text":"传送门 首先我们看到要求的这个式子……这什么鬼啊能做吗（ 冷静分析一波，我们可以根据括号里的两个加号将原式拆分成三个三重$\\sum$ \\begin{aligned} &\\sum_{i=1}^{n}\\sum_{j=1}^{m}\\sum_{k=1}^{p}(ij,ik,jk)\\cdot(i,j,k)\\cdot\\cfrac{(i,j)}{(i,k)\\cdot(j,k)}\\\\ +&\\sum_{i=1}^{n}\\sum_{j=1}^{m}\\sum_{k=1}^{p}(ij,ik,jk)\\cdot(i,j,k)\\cdot\\cfrac{(i,k)}{(i,j)\\cdot(j,k)}\\\\ +&\\sum_{i=1}^{n}\\sum_{j=1}^{m}\\sum_{k=1}^{p}(ij,ik,jk)\\cdot(i,j,k)\\cdot\\cfrac{(j,k)}{(i,j)\\cdot(i,k)} \\end{aligned}首先我们单独考虑第一个 \\begin{aligned} &\\sum_{i=1}^{n}\\sum_{j=1}^{m}\\sum_{k=1}^{p}(ij,ik,jk)\\cdot(i,j,k)\\cdot\\cfrac{(i,j)}{(i,k)\\cdot(j,k)}\\\\ =&\\sum_{i=1}^{n}\\sum_{j=1}^{m}\\sum_{k=1}^{p}(ij,(i,j)k)\\cdot((i,j),k)\\cdot\\cfrac{(i,j)}{(i,k)\\cdot(j,k)}\\\\ =&\\sum_{d=1}^{\\min(n,m)}\\sum_{x=1}^{\\lfloor\\tfrac{n}{d}\\rfloor}\\sum_{y=1}^{\\lfloor\\tfrac{m}{d}\\rfloor}[x\\perp y]\\sum_{k=1}^{p}(d^{2}xy,dk)\\cdot(d,k)\\cdot\\cfrac{d}{(dx,k)\\cdot(dy,k)}\\\\ =&\\sum_{d=1}^{\\min(n,m)}\\sum_{x=1}^{\\lfloor\\tfrac{n}{d}\\rfloor}\\sum_{y=1}^{\\lfloor\\tfrac{m}{d}\\rfloor}[x\\perp y]\\sum_{k=1}^{p}d^{2}\\cdot(d,k)\\cdot\\cfrac{(dxy,k)}{(dx,k)\\cdot(dy,k)}\\\\ \\end{aligned}考虑将$d,x,y,k$写成唯一分解形式，然后对于第$i$小的质数$c_{i}$，它在四个数中的指数分别是$r_{d,i},r_{x,i},r_{y,i},r_{k,i}$，那么 \\begin{aligned} =&\\sum_{d=1}^{\\min(n,m)}\\sum_{x=1}^{\\lfloor\\tfrac{n}{d}\\rfloor}\\sum_{y=1}^{\\lfloor\\tfrac{m}{d}\\rfloor}[x\\perp y]\\sum_{k=1}^{p}d^{2}\\prod_{i=1}c_{i}^{\\min(r_{d,i},r_{k,i})+\\min(r_{d,i}+r_{x,i}+r_{y,i},r_{k,i})-\\min(r_{d,i}+r_{x,i},r_{k,i})-\\min(r_{d,i}+r_{y,i},r_{k,i})} \\end{aligned}因为$x\\perp y$，$r_{x,i}$和$r_{y,i}$中必定有一个为$0$，带入整理后我们得到 \\begin{aligned} =&\\sum_{d=1}^{\\min(n,m)}\\sum_{x=1}^{\\lfloor\\tfrac{n}{d}\\rfloor}\\sum_{y=1}^{\\lfloor\\tfrac{m}{d}\\rfloor}[x\\perp y]\\sum_{k=1}^{p}d^{2}\\\\ =&p\\sum_{i=1}^{n}\\sum_{j=1}^{m}(i,j)^{2} \\end{aligned}对剩下的两个三重$\\sum$也进行类似的化简，最后我们得到答案就是 p\\sum_{i=1}^{n}\\sum_{j=1}^{m}(i,j)^{2}+m\\sum_{i=1}^{n}\\sum_{j=1}^{p}(i,j)^{2}+n\\sum_{i=1}^{m}\\sum_{j=1}^{p}(i,j)^{2}","link":"/luogu-p5176-solution/"},{"title":"「JSOI2015」染色问题","text":"传送门 sto asuldb orz 我们平时遇到的一维容斥大概长这样 F_{i}=\\sum_{x=i}^{n}C_{x}^{i}G_{x}\\Leftrightarrow G_{i}=\\sum_{x=i}^{n}(-1)^{x-i}C_{x}^{i}F_{x}如果说遇到高维容斥，我们只需要一维一维地解决掉即可。 但实际上，我们是可以总结出一个$k$维容斥的式子的 F_{i_{1},i_{2},\\cdots,i_{k}}=\\sum_{x_{1}=i_{1}}^{n_{1}}\\sum_{x_{2}=i_{2}}^{n_{2}}\\cdots\\sum_{x_{k}=i_{k}}^{n_{k}}\\left(\\prod_{j=1}^{k}C_{x_{j}}^{i_{j}}\\right)G_{x_{1},x_{2},\\cdots,x_{k}}\\Leftrightarrow G_{i_{1},i_{2},\\cdots,i_{k}}=\\sum_{x_{1}=i_{1}}^{n_{1}}\\sum_{x_{2}=i_{2}}^{n_{2}}\\cdots\\sum_{x_{k}=i_{k}}^{n_{k}}\\left(\\prod_{j=1}^{k}(-1)^{x_{j}-i_{j}}C_{x_{j}}^{i_{j}}\\right)F_{x_{1},x_{2},\\cdots,x_{k}}没错，这道题就是一个三维容斥的大板子。 我们令至少$i$行$j$列为空，至少$k$种颜色未出现的方案数为$F_{i,j,k}$，我们有 F_{i,j,k}=C_{n}^{i}C_{m}^{j}C_{c}^{k}(c-k+1)^{(n-i)(m-j)}话又说回来了这个东西应该是会算重啊（ 恰有$i$行$j$列为空，恰有$k$种颜色未出现的方案数为$G_{i,j,k}$，自然 F_{i,j,k}=\\sum_{x=i}^{n}\\sum_{y=j}^{m}\\sum_{z=k}^{c}C_{x}^{i}C_{y}^{j}C_{z}^{k}G_{x,y,z}\\begin{aligned} G_{i,j,k}&=\\sum_{x=i}^{n}\\sum_{y=j}^{m}\\sum_{z=k}^{c}(-1)^{x-i+y-j+z-k}C_{x}^{i}C_{y}^{j}C_{z}^{k}F_{x,y,z}\\\\ &=\\sum_{x=i}^{n}\\sum_{y=j}^{m}\\sum_{z=k}^{c}(-1)^{x-i+y-j+z-k}C_{x}^{i}C_{y}^{j}C_{z}^{k}C_{n}^{x}C_{m}^{y}C_{c}^{z}(c-z+1)^{(n-x)(m-y)}\\\\ &=C_{n}^{i}C_{m}^{j}C_{c}^{k}\\sum_{x=i}^{n}\\sum_{y=j}^{m}\\sum_{z=k}^{c}(-1)^{x-i+y-j+z-k}C_{n-i}^{x-i}C_{m-j}^{y-j}C_{c-k}^{z-k}(c-z+1)^{(n-x)(m-y)}\\\\ &=C_{n}^{i}C_{m}^{j}C_{c}^{k}\\sum_{x=0}^{n-i}\\sum_{y=0}^{m-j}\\sum_{z=0}^{c-k}(-1)^{x+y+z}C_{n-i}^{x}C_{m-j}^{y}C_{c-k}^{z}(c-k-z+1)^{(n-i-x)(m-j-y)}\\ \\end{aligned}我们要求的答案就是$G_{0,0,0}$，简单整理一下就是 \\sum_{x=0}^{n}\\sum_{y=0}^{m}\\sum_{z=0}^{c}(-1)^{x+y+z}C_{n}^{x}C_{m}^{y}C_{c}^{z}(c-z+1)^{(n-x)(m-y)}然后你问我为什么要写一篇blog？闲得没事干（ 代码瞎写的就不贴了（","link":"/bzoj4487-solution/"},{"title":"「NOI2016」循环之美","text":"突然被wzx安利的一道题。 传送门 wzx的题解 通过查阅fuge的题解，我们发现我们要求的式子是 \\sum_{i=1}^{n}\\sum_{j=1}^{m}[i\\perp j][j\\perp k]$[i\\perp j]$保证了这是一个最简分数从而不会算重，$[j\\perp k]$保证了这是一个纯循环小数。 首先关于$[1,n]$中与某个常数$k$互质的数的数量，我们有一个结论 \\sum_{i=1}^{n}[i\\perp k]=\\sum_{i=1}^{n}\\sum_{x|i,x|k}\\mu(x)=\\sum_{x|k}\\lfloor\\cfrac{n}{x}\\rfloor\\mu(x)然后大力整理 \\begin{aligned} \\sum_{i=1}^{n}\\sum_{j=1}^{m}[i\\perp j][j\\perp k]&=\\sum_{j=1}^{m}[j\\perp k]\\sum_{i=1}^{n}[i\\perp j]\\\\ &=\\sum_{j=1}^{m}[j\\perp k]\\sum_{x|j}\\lfloor\\cfrac{n}{x}\\rfloor\\mu(x)\\\\ &=\\sum_{x=1}^{m}\\lfloor\\cfrac{n}{x}\\rfloor\\mu(x)\\sum_{x|j}[j\\perp k]\\\\ &=\\sum_{x=1}^{m}\\lfloor\\cfrac{n}{x}\\rfloor\\mu(x)\\sum_{j=1}^{\\tfrac{m}{x}}[jx\\perp k]\\\\ &=\\sum_{x=1}^{m}[x\\perp k]\\lfloor\\cfrac{n}{x}\\rfloor\\mu(x)\\sum_{j=1}^{\\tfrac{m}{x}}[j\\perp k]\\\\ &=\\sum_{x=1}^{m}[x\\perp k]\\lfloor\\cfrac{n}{x}\\rfloor\\mu(x)\\sum_{y|k}\\lfloor\\cfrac{m}{xy}\\rfloor\\mu(y) \\end{aligned}这道题有一个突破口在于，$k$的范围很小，只有$2000$，从而$d(k)$的范围会更小，这就使得我们能够暴力枚举$k$的约数来计算第二个$\\sum$。 观察第一个$\\sum$，我们发现，套上一层整除分块之后，我们需要计算的是 \\sum_{i=1}^{n}f(i)其中 f(n)=[n\\perp k]\\mu(n)考虑杜教筛，我们再找来一个函数 g(n)=[n\\perp k]把它们卷积 \\begin{aligned} (f\\times g)(n)&=\\sum_{d|n}f(d)g(\\cfrac{n}{d})\\\\ &=\\sum_{d|n}[d\\perp k][\\cfrac{n}{d}\\perp k]\\mu(d)\\\\ &=[n\\perp k]\\sum_{d|n}\\mu(d)\\\\ &=\\epsilon(n) \\end{aligned}然后就差不多了。 不过有一个问题，像这种对$n$和$m$同时整除分块的情况，不能用类似min_25的trick（$N\\leqslant\\sqrt{n}$时存到ans1[N]，否则存到ans2[n/N]），只能通过unordered_map或者Hash来记忆化。 代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123#include&lt;cstdio&gt;#include&lt;tr1/unordered_map&gt;#define re register#define maxn 1000000#define min(a,b) ((a)&lt;=(b)?(a):(b))namespace cltstream{ #define size 1048576 char cltin[size+1],*ih=cltin,*it=cltin; inline char gc(){ #ifdef ONLINE_JUDGE if(ih==it){ it=(ih=cltin)+fread(cltin,1,size,stdin); if(ih==it) return EOF; } return *ih++; #else return getchar(); #endif } char cltout[size+1],*oh=cltout,*ot=cltout+size; inline void pc(char c){ if(oh==ot){ fwrite(cltout,1,size,stdout); oh=cltout; } *oh++=c; } #define clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout),cltstream::oh=cltstream::cltout #undef size template &lt;typename _tp&gt; inline void read(_tp&amp; x){ int sn=1; char c=gc(); for(;c!=45&amp;&amp;(c&lt;48||c&gt;57)&amp;&amp;c!=EOF;c=gc()); if(c==45&amp;&amp;c!=EOF) sn=-1,c=gc(); for(x=0;c&gt;=48&amp;&amp;c&lt;=57&amp;&amp;c!=EOF;x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=gc()); x*=sn; } template &lt;typename _tp&gt; inline void write(_tp x,char text=-1){ if(x&lt;0) pc(45),x=-x; if(!x) pc(48); else{ int digit[22]; for(digit[0]=0;x;digit[++digit[0]]=x%10,x/=10); for(;digit[0];pc(digit[digit[0]--]^48)); } if(text&gt;=0) pc(text); }}int n,m,k;int d[50],f[maxn+1],g[maxn+1],mu[maxn+1],F[maxn+1];std::tr1::unordered_map&lt;int,long long&gt; ans;long long T(re int x){ re long long res=0; for(re int i=1;i&lt;=d[0];++i) res+=1LL*(x/d[i])*mu[d[i]]; return res;}long long S(re int N){ if(N&lt;=maxn) return F[N]; if(ans.count(N)) return ans[N]; re long long res=1,lst=T(1); for(re int l=2,r;l&lt;=N;l=r+1){ r=N/(N/l); re long long tmp=T(r); res-=S(N/l)*(tmp-lst); lst=tmp; } return ans[N]=res;}int main(){ cltstream::read(n); cltstream::read(m); cltstream::read(k); for(re int i=1;i&lt;=k;++i) if(k%i==0) d[++d[0]]=i; mu[1]=F[1]=1; for(re int i=2;i&lt;=maxn;++i){ if(!f[i]){ g[++g[0]]=i; mu[i]=-1; F[i]=-(k%i!=0); } for(re int j=1;j&lt;=g[0]&amp;&amp;i*g[j]&lt;=maxn;++j){ f[i*g[j]]=1; if(i%g[j]){ mu[i*g[j]]=mu[i]*mu[g[j]]; F[i*g[j]]=F[i]*F[g[j]]; } else break; } } for(re int i=1;i&lt;=maxn;++i) F[i]+=F[i-1]; re long long res=0,lst=0; for(re int l=1,r;l&lt;=n&amp;&amp;l&lt;=m;l=r+1){ r=min(n/(n/l),m/(m/l)); re long long tmp=S(r); res+=(n/l)*T(m/l)*(tmp-lst); lst=tmp; } cltstream::write(res); clop(); return 0;}","link":"/luogu-p1587-solution/"},{"title":"FWT抄袭笔记","text":"看到坐在我左边的dalao在学FWT。 想着二轮前学一些很酷很炫很失败的算法，于是来背一下学一下吧。 抄袭来源。 引入我们利用FFT可以在$O(n\\log n)$的时间复杂度内计算 H[k]=(F\\times G)[k]=\\sum_{i+j=k}F[i]G[j]假如说我们把这个式子变一变 H[k]=(F\\vee G)[k]=\\sum_{i\\vee j=k}F[i]G[j]H[k]=(F\\wedge G)[k]=\\sum_{i\\wedge j=k}F[i]G[j]H[k]=(F\\oplus G)[k]=\\sum_{i\\oplus j=k}F[i]G[j]其中$\\vee$指按位或，$\\wedge$指按位与，$\\oplus$指按位异或。 我们还是希望能够在$O(n\\log n)$的时间复杂度内计算出答案。 这种时候我们就需要FWT（快速沃尔什变换，Fast Walsh–Hadamard Transformation）了。 在FFT中，我们先计算出了$F$和$G$的点值多项式，然后将对应位直接相乘得到了$F\\times G$的点值多项式，最后还原回了$F\\times G$。 类似地，我们可不可以试着计算出两个多项式$F^{\\prime},G^{\\prime}$，使得 (F\\times G)^{\\prime}=F^{\\prime}\\cdot G^{\\prime}当然可以啊不然还怎么会有FWT（ 一些约定对于两个向量$A$和$B$，我们令 (A,B)=(A[0],A[1],\\cdots,B[0],B[1],\\cdots)设$F$的项数为$2^{t}$。为了方便，我们将其看做一个$2^{t}$维向量 (F[0],F[1],\\cdots,F[2^{t}-1])然后我们定义 F_{0}=(F[0],F[1],\\cdots,F[2^{t-1}-1])F_{1}=(F[2^{t-1}],F[2^{t-1}+1],\\cdots,F[2^{t}-1])正变换按位或定义 F^{\\prime}=\\begin{cases} &(F_{0}^{\\prime},F_{1}^{\\prime}+F_{0}^{\\prime})\\;\\;\\;\\;\\;\\;\\;\\;&(t\\gt 0)\\\\ &F&(t=0) \\end{cases}我们发现 F^{\\prime}[i]=\\sum_{j\\vee i=i}F[j]$t=0$时这十分显然，我们来考虑$t\\gt 0$时的情况。 首先很明显的一点是$j\\vee i=i\\Leftrightarrow j\\subseteq i$，也就是说$j$是$i$的子集。 对于$F_{1}$中的一个下标$i$，我们在$F_{1}$左边接上$F_{0}$后，这个$i$就多了一个$2^{t-1}$。 之前$i$的每一个子集$j$，也同样多了一个$2^{t-1}$，它们产生的贡献已经被统计在了$F_{1}^{\\prime}[i]$内。 那么去掉这个$2^{t-1}$，我们还有$j\\subseteq i+2^{t-1}$，这部分其实就是$F_{0}^{\\prime}[i]$的值。 据此，我们就有 \\begin{aligned} F^{\\prime}\\cdot G^{\\prime}[i]&=\\left(\\sum_{j\\subseteq i}F[j]\\right)\\left(\\sum_{k\\subseteq i}G[k]\\right)\\\\ &=\\sum_{j\\vee k\\subseteq i}F[j]G[k]\\\\ &=\\sum_{l\\subseteq i}\\sum_{j\\vee k=l}F[j]G[k]\\\\ &=\\sum_{l\\subseteq i}(F\\vee G)[l]\\\\ &=(F\\vee G)^{\\prime}[i] \\end{aligned}按位与定义 F^{\\prime}=\\begin{cases} &(F_{0}^{\\prime}+F_{1}^{\\prime},F_{1}^{\\prime})\\;\\;\\;\\;\\;\\;\\;\\;&(t\\gt 0)\\\\ &F&(t=0) \\end{cases}它具有类似的性质 F^{\\prime}[i]=\\sum_{j\\wedge i=i}F[j](F\\wedge G)^{\\prime}=F^{\\prime}\\cdot G^{\\prime}证明略。 按位异或定义 F^{\\prime}=\\begin{cases} &(F_{0}^{\\prime}+F_{1}^{\\prime},F_{0}^{\\prime}-F_{1}^{\\prime})\\;\\;\\;\\;\\;\\;\\;\\;&(t\\gt 0)\\\\ &F&(t=0) \\end{cases}然后我们发现按位异或并没有像上面一样的和子集相关的性质。因此我们需要通过一些其他方式来证明它的正确性。 首先 (F+G)^{\\prime}=F^{\\prime}+G^{\\prime}如果$F$和$G$都只有一项，这十分显然。 否则 \\begin{aligned} F^{\\prime}+G^{\\prime}&=(F_{0}^{\\prime}+F_{1}^{\\prime},F_{0}^{\\prime}-F_{1}^{\\prime})+(G_{0}^{\\prime}+G_{1}^{\\prime},G_{0}^{\\prime}-G_{1}^{\\prime})\\\\ &=(F_{0}^{\\prime}+G_{0}^{\\prime}+F_{1}^{\\prime}+G_{1}^{\\prime},F_{0}^{\\prime}+G_{0}^{\\prime}-F_{1}^{\\prime}-G_{1}^{\\prime})\\\\ &=((F+G)_{0}^{\\prime}+(F+G)_{1}^{\\prime},(F+G)_{0}^{\\prime}-(F+G)_{1}^{\\prime})\\\\ &=(F+G)^{\\prime} \\end{aligned}(F\\oplus G)^{\\prime}=F^{\\prime}\\cdot G^{\\prime}这个不会证，告辞。 逆变换就是把刚刚算出来的$F^{\\prime}$变回$F$。 F=\\begin{cases} &F^{\\prime}&(t=0)\\\\ &\\begin{cases} &(F_{0},F_{1}-F_{0})&(\\vee)\\\\ &(F_{0}-F_{1},F_{1})&(\\wedge)\\\\ &(\\cfrac{F_{0}+F_{1}}{2},\\cfrac{F_{0}-F_{1}}{2})\\;\\;\\;\\;\\;\\;\\;\\;&(\\oplus) \\end{cases}\\;\\;\\;\\;\\;\\;\\;\\;&(t\\gt 0) \\end{cases}啥意思啊看不懂啊（ 然后您就可以切掉这道板子题了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#include&lt;cstdio&gt;#define re register#define maxn 17#define mod 998244353namespace cltstream{ #define size 1048576 char cltin[size+1],*ih=cltin,*it=cltin; inline char gc(){ #ifdef ONLINE_JUDGE if(ih==it){ it=(ih=cltin)+fread(cltin,1,size,stdin); if(ih==it) return EOF; } return *ih++; #else return getchar(); #endif } char cltout[size+1],*oh=cltout,*ot=cltout+size; inline void pc(char c){ if(oh==ot){ fwrite(cltout,1,size,stdout); oh=cltout; } *oh++=c; } #define clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout),cltstream::oh=cltstream::cltout #undef size template &lt;typename _tp&gt; inline void read(_tp&amp; x){ int sn=1; char c=gc(); for(;c!=45&amp;&amp;(c&lt;48||c&gt;57)&amp;&amp;c!=EOF;c=gc()); if(c==45&amp;&amp;c!=EOF) sn=-1,c=gc(); for(x=0;c&gt;=48&amp;&amp;c&lt;=57&amp;&amp;c!=EOF;x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=gc()); x*=sn; } template &lt;typename _tp&gt; inline void write(_tp x,char text=-1){ if(x&lt;0) pc(45),x=-x; if(!x) pc(48); else{ int digit[22]; for(digit[0]=0;x;digit[++digit[0]]=x%10,x/=10); for(;digit[0];pc(digit[digit[0]--]^48)); } if(text&gt;=0) pc(text); }}int n;int F[1&lt;&lt;maxn][3],G[1&lt;&lt;maxn][3];#define FWT(F,tp) {\\ for(re int p=1;p&lt;n;p&lt;&lt;=1)\\ for(re int i=0;i&lt;n;i+=p&lt;&lt;1)\\ for(re int j=i;j&lt;i+p;++j){\\ F[j+p][0]=!tp?(F[j+p][0]+F[j][0])%mod:(F[j+p][0]-F[j][0]+mod)%mod;\\ F[j][1]=!tp?(F[j][1]+F[j+p][1])%mod:(F[j][1]-F[j+p][1]+mod)%mod;\\ re int x=F[j][2],y=F[j+p][2];\\ F[j][2]=(x+y)%mod;\\ F[j+p][2]=(x-y+mod)%mod;\\ if(tp){\\ F[j][2]=499122177LL*F[j][2]%mod;\\ F[j+p][2]=499122177LL*F[j+p][2]%mod;\\ }\\ }\\}int main(){ cltstream::read(n); n=1&lt;&lt;n; for(re int i=0;i&lt;n;++i){ cltstream::read(F[i][0]); F[i][1]=F[i][2]=F[i][0]; } for(re int i=0;i&lt;n;++i){ cltstream::read(G[i][0]); G[i][1]=G[i][2]=G[i][0]; } FWT(F,0); FWT(G,0); for(re int j=0;j&lt;3;++j) for(re int i=0;i&lt;n;++i) F[i][j]=1LL*F[i][j]*G[i][j]%mod; FWT(F,1); for(re int j=0;j&lt;3;++j) for(re int i=0;i&lt;n;++i) cltstream::write(F[i][j],i&lt;n-1?32:10); clop(); return 0;} 单位元我们知道FFT中的单位元多项式是$F(x)=1$，类似地，FWT是否也拥有这样的一个单位元呢？ 当然是有的。 对于按位或和按位异或来说，它们的单位元是 (1,0,\\cdots,0,0)对于按位与来说，它的单位元是 (0,0,\\cdots,0,1)求逆既然有了单位元，我们就不禁会想……这东西能求逆吗？ 大概……能吧。 以下所有运算在模$998244353$意义下进行。 按位或给定一个多项式$F$，让你求出一个多项式$G$，使得 F\\vee G=(1,0,\\cdots,0,0)首先我们需要知道 F\\vee G=(F_{0}\\vee G_{0},F_{0}\\vee G_{1}+F_{1}\\vee G_{0}+F_{1}\\vee G_{1})注意到左半部分和右半部分的下标有一个重要区别就是从右往左第$t$位是否为$1$。 如果某个下标和右半部分的某个下标进行了按位或，它的第$t$位一定是$1$，那么它就跑到右半部分去了。 否则，即两个左半部分的下标进行了按位或，这种情况结果还是在左半部分。 然后我们就可以往下推了 \\begin{aligned} F_{0}\\vee G_{1}+F_{1}\\vee G_{0}+F_{1}\\vee G_{1}&=0\\\\ (F_{0}+F_{1})\\vee G_{1}&=-F_{1}\\vee G_{0}\\\\ G_{1}&=-F_{1}\\vee G_{0}\\vee (F_{0}+F_{1})^{-1} \\end{aligned}边界条件$G[0]=F[0]^{-1}$。 大致代码如下 123456789101112131415161718192021void Inv(re int* F,re int* G,re int n){ if(n==1) G[0]=cltpow(F[0],mod-2); else{ int tmp1[1&lt;&lt;maxn],tmp2[1&lt;&lt;maxn]; Inv(F,G,n&gt;&gt;1); for(re int i=0;i&lt;(n&gt;&gt;1);++i) tmp1[i]=F[i]+F[(n&gt;&gt;1)+i]; Inv(tmp1,tmp2,n&gt;&gt;1); FWT(F+(n&gt;&gt;1),n&gt;&gt;1,0); FWT(G,n&gt;&gt;1,0); FWT(tmp2,n&gt;&gt;1,0); for(re int i=0;i&lt;(n&gt;&gt;1);++i) tmp2[i]=1LL*F[(n&gt;&gt;1)+i]*G[i]%mod*tmp2[i]%mod; FWT(F+(n&gt;&gt;1),n&gt;&gt;1,1); FWT(G,n&gt;&gt;1,1); FWT(tmp2,n&gt;&gt;1,1); for(re int i=0;i&lt;(n&gt;&gt;1);++i) G[(n&gt;&gt;1)+i]=(mod-tmp2[i])%mod; }} 时间复杂度非常显然是$O(n^{2}2^{n})$。 按位与给定一个多项式$F$，让你求出一个多项式$G$，使得 F\\wedge G=(0,0,\\cdots,0,1)我们可以用类似的过程得到如下结论 F\\wedge G=(F_{0}\\wedge G_{0}+F_{0}\\wedge G_{1}+F_{1}\\wedge G_{0},F_{1}\\wedge G_{1})G_{0}=-F_{0}\\wedge G_{1}\\wedge (F_{0}+F_{1})^{-1}按位异或给定一个多项式$F$，让你求出一个多项式$G$，使得 F\\oplus G=(1,0,\\cdots,0,0)首先我们有 F\\oplus G=(F_{0}\\oplus G_{0}+F_{1}\\oplus G_{1},F_{0}\\oplus G_{1}+F_{1}\\oplus G_{0})也就是说 F_{0}\\oplus G_{0}+F_{1}\\oplus G_{1}=\\epsilonF_{0}\\oplus G_{1}+F_{1}\\oplus G_{0}=0将上面两个式子相加、相减，得到 (F_{0}+F_{1})\\oplus(G_{0}+G_{1})=\\epsilon(F_{0}-F_{1})\\oplus(G_{0}-G_{1})=\\epsilon于是 G_{0}=\\cfrac{(F_{0}+F_{1})^{-1}+(F_{0}-F_{1})^{-1}}{2}G_{1}=\\cfrac{(F_{0}+F_{1})^{-1}-(F_{0}-F_{1})^{-1}}{2}时间复杂度$O(n2^{n})$。 这就没了？并不是。 如果您按照上面的式子写好程序，然后往里面输入 1221 2 3 4 这样一组数据，您会发现您的程序给出的结果并不正确。 那么原因是什么呢？是我们式子推错了吗？ 输出一下中间的运算过程，我们发现，在中间有一步，我们计算$(2,2)^{-1}$时，需要用到$(0)^{-1}$。 显然它不存在，但是同样显然的是，如果$(2,2)^{-1}$存在，那么这个过程不应该出现这样的问题。 所以说原因就是，$(2,2)^{-1}$，或者更进一步地，$(1,2,3,4)^{-1}$不存在。 子集卷积让我来看看有没有点进去看完题面一脸懵逼地关闭标签页的。 这道题是让我们求这个东西 h_{R}=\\sum_{S\\vee T=R,S\\wedge T=\\varnothing}f_{S}g_{T}这比我们之前看到的卷积拥有更加严格的要求，$S\\wedge T=\\varnothing$，很明显，这是在提示我们抄题解。 我们定义 F_{i,S}=\\begin{cases} &f_{S}\\;\\;\\;\\;\\;\\;\\;\\;&(|S|=i)\\\\ &0&(|S|\\neq i) \\end{cases}G_{i,S}=\\begin{cases} &g_{S}\\;\\;\\;\\;\\;\\;\\;\\;&(|S|=i)\\\\ &0&(|S|\\neq i) \\end{cases}H_{i,S}=\\begin{cases} &h_{S}\\;\\;\\;\\;\\;\\;\\;\\;&(|S|=i)\\\\ &0&(|S|\\neq i) \\end{cases}然后我们从小到大枚举$i$，计算 H_{i}=\\sum_{j=0}^{i}F_{j}\\vee G_{i-j}为了理解这个式子，我们先将其展开 H_{i,R}=\\sum_{j=0}^{i}\\sum_{S\\vee T=R}F_{j,S}G_{i-j,T}根据定义，$F_{i,S}$和$G_{i,S}$有值当且仅当$|S|=i$，因此这就相当于 H_{i,R}=\\sum_{S\\vee T=R,|S|+|T|=i}F_{|S|,S}G_{|T|,T}因为$S$和$T$可能会有交集，从而$i\\gt |R|$时$H_{i,R}$也可能有值，这是不符合定义的，因此（如果有必要的话）我们需要手动清空。 代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293#include&lt;cstdio&gt;#define re register#define maxn 20#define mod 1000000009namespace cltstream{ #define size 1048576 char cltin[size+1],*ih=cltin,*it=cltin; inline char gc(){ #ifdef ONLINE_JUDGE if(ih==it){ it=(ih=cltin)+fread(cltin,1,size,stdin); if(ih==it) return EOF; } return *ih++; #else return getchar(); #endif } char cltout[size+1],*oh=cltout,*ot=cltout+size; inline void pc(char c){ if(oh==ot){ fwrite(cltout,1,size,stdout); oh=cltout; } *oh++=c; } #define clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout),cltstream::oh=cltstream::cltout #undef size template &lt;typename _tp&gt; inline void read(_tp&amp; x){ int sn=1; char c=gc(); for(;c!=45&amp;&amp;(c&lt;48||c&gt;57)&amp;&amp;c!=EOF;c=gc()); if(c==45&amp;&amp;c!=EOF) sn=-1,c=gc(); for(x=0;c&gt;=48&amp;&amp;c&lt;=57&amp;&amp;c!=EOF;x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=gc()); x*=sn; } template &lt;typename _tp&gt; inline void write(_tp x,char text=-1){ if(x&lt;0) pc(45),x=-x; if(!x) pc(48); else{ int digit[22]; for(digit[0]=0;x;digit[++digit[0]]=x%10,x/=10); for(;digit[0];pc(digit[digit[0]--]^48)); } if(text&gt;=0) pc(text); }}int n,N;int cnt[1&lt;&lt;maxn],F[maxn+1][1&lt;&lt;maxn],G[maxn+1][1&lt;&lt;maxn],H[maxn+1][1&lt;&lt;maxn];inline void FWT(re int* F,re int tp){ for(re int p=1;p&lt;N;p&lt;&lt;=1) for(re int i=0;i&lt;N;i+=p&lt;&lt;1) for(re int j=i;j&lt;i+p;++j) F[j+p]=!tp?(F[j+p]+F[j])%mod:(F[j+p]-F[j]+mod)%mod;}int main(){ cltstream::read(n); N=1&lt;&lt;n; for(re int i=1;i&lt;N;++i) cnt[i]=cnt[i&gt;&gt;1]+(i&amp;1); for(re int i=0;i&lt;N;++i) cltstream::read(F[cnt[i]][i]); for(re int i=0;i&lt;N;++i) cltstream::read(G[cnt[i]][i]); for(re int i=0;i&lt;=n;++i){ FWT(F[i],0); FWT(G[i],0); for(re int j=0;j&lt;=i;++j) for(re int S=0;S&lt;N;++S) H[i][S]=(H[i][S]+1LL*F[j][S]*G[i-j][S]%mod)%mod; FWT(H[i],1); for(re int S=0;S&lt;N;++S) cnt[S]==i||(H[i][S]=0); } for(re int i=0;i&lt;N;++i) cltstream::write(H[cnt[i]][i],32); clop(); return 0;} 例题","link":"/fwt-learning-notes/"},{"title":"「SDOI2019R1游记」僕らは泥を這いつくばるもの","text":"被强大无比且随手吊打我的shzr催更了，于是诚惶诚恐赶来写这篇游记。 Day -X经过讨论，我们机房研究出了以下两个堪称完美的战术，若能施加实际行动，定能令SLYZ省选大获全胜： 让潮子分身，在每一位dalao（如rqy、ckw等）身边分别派一个，然后潮他们，他们就炸了。 让潮子在厕所蹲着，每看到有选手上厕所，等他上到一半跑到他背后，潮之曰「你稳了」，他就炸了。 这都什么鬼东西（ Day -2「省选快到了，我想回家休息休息。」 像这样理直气壮地请假回家颓废了。 Day 0下午12：30从学校坐车走，等到了济南已经是大概16：00了。 到了宾馆loli让我们自由组合。然后mhr学长主动邀请我住一个房间。 我直接就答应了。 晚上晚上出去吃饭的时候，潮子一直在潮。 就比如说钦定wzx的SAM没有了A，只剩下了一些奇怪的东西一道题都A不动了。 可惜绝大部分名言已经失传了。 这可真是糟糕，OI文学界的一大损失啊。 Day 1就算没有解压密码也是可以看压缩包内部的文件有哪些的。 然后就看到了T3有16个样例有点方。 解压密码直接一坨乱码。龙虾选手表示解压体验(?)极差。 T1诶怎么感觉有点像超级钢琴啊。 但是因为我超级钢琴只会ST表+堆，想了想发现这题不能这么做。 好吧，暴力60分先安排上。 出了考场发现人均A掉T1。 T2字符串（ 不难想到这么一个做法：对于这$n_{a}+n_{b}$个串每一个建一个点，如果$A$类串$x$支配$B$类串$y$，或者$B$类串$x$是$A$类串$y$的前缀，从$x$向$y$连边。最后整张图有环就是$-1$，没有D个P就出来了。 然后暴力建图。莫名其妙能有60分。 T3写作传统题读作提交答案题。 考场上只想出来了1_998244353的12分。 然后出考场被各路dalao吊打。 关于测试点8-16，一开始我的想法是给出两个数$x,y$，有一个长度为$x$的区间从左向右扫过$[1,y]$这个区间。 但实际上是$[x,y]$这个区间内每个数的性质。想到这一点后面的一些数据范围比较小的点就没啥问题了。 但是数据范围比较大的点怎么办？ 打一些比较小的表（ 标程70KB了一下。 下午首先是讲评。 没有抢到座位于是只能站着。 因为非常吵什么也听不清。 印象比较深的是讲到T3突然一阵掌声。 然后回到宾馆快乐地颓废。 晚上集体不想出去吃于是点了肯德基，然后……诶诶诶你们什么时候吃完的太快了吧（ Day 2T1看到题目名我还以为是网络流。 然后我就在想有没有网络流计数这种操作。 大概是没有吧。 打了个爆搜结果还炸了。 T2看上去好神仙啊。 考场上写了45分的状压枚举子集。 结果一出考场听说人均75，就我不会链的贪心和$O(n^{2})$的做法，自毙了。 T3想写一写$L=n$或$k=1$的情况。 到最后发现什么也不会，只想到了$L=n$且$k=1$的情况。喜提8分。 但是最后测出来好像是12分来着？没仔细看。 下午因为有人要回去所以讲评提前了半小时。 虽然说抢到了一个座位可是今天比昨天还吵真的什么也听不见了。 T3标程887行了解一下（ 结果接我们回东营的车咕了大概有一个多小时吧，最后得有20：30才到家。 晚上当然是回家……啊什么明天就正常上课啦？咕了！ 总结最后60+60+12+0+45+12=189。 随便抓只猴子就比我考的高/kk","link":"/sdoi2019r1-notes/"},{"title":"伯努利数失败笔记","text":"「クールでまばゆいばかりのアルゴリズムを学ばないでください、それはうまく検索することが最も重要です。」 ——loli 以上，我失败了（ 前半部分的抄袭来源。 定义伯努利数$B_{n}$具有如下性质： \\sum_{i=0}^{n}C_{n+1}^{i}B_{i}=[n=0]自然数幂和我们定义 S(n,k)=\\sum_{i=0}^{n-1}i^{k}T(n,k)=\\cfrac{1}{k+1}\\sum_{i=0}^{k}C_{k+1}^{i}B_{i}n^{k-i+1}我们希望证明$S(n,k)=T(n,k)$。 在这里，我们采用一种名为「强归纳法」（或者「完全归纳法」）的方法。具体来说，假设我们已经对于任意的$0\\leqslant j\\lt k$，证明了$S(n,j)=T(n,j)$成立，利用这个结论推出$S(n,k)=T(n,k)$成立。 当$k=0$时 S(n,k)=nT(n,k)=C_{1}^{0}B_{0}n因为我们有 C_{1}^{0}B_{0}=[0=0]=1从而$S(n,k)=T(n,k)$成立。 当$k\\gt 0$时 S(n,k+1)=\\sum_{i=0}^{n-1}i^{k+1}\\begin{aligned} S(n,k+1)+n^{k+1}&=\\sum_{i=0}^{n-1}(i+1)^{k+1}\\\\ &=\\sum_{i=0}^{n-1}\\sum_{j=0}^{k+1}C_{k+1}^{j}i^{j}\\\\ &=\\sum_{j=0}^{k+1}C_{k+1}^{j}\\sum_{i=0}^{n-1}i^{j}\\\\ &=\\sum_{j=0}^{k+1}C_{k+1}^{j}S(n,j)\\\\ &=\\sum_{j=0}^{k}C_{k+1}^{j}S(n,j)+C_{k+1}^{k+1}S(n,k+1) \\end{aligned}注意到$C_{k+1}^{k+1}=1$，我们就能得到 n^{k+1}=\\sum_{j=0}^{k}C_{k+1}^{j}S(n,j)因为我们已经对于任意的$0\\leqslant j\\lt k$，证明了$S(n,j)=T(n,j)$成立，我们就可以将上式进一步变形 \\begin{aligned} n^{k+1}&=\\sum_{j=0}^{k}C_{k+1}^{j}S(n,j)\\\\ &=\\sum_{j=0}^{k-1}C_{k+1}^{j}T(n,j)+C_{k+1}^{k}S(n,k)\\\\ &=\\sum_{j=0}^{k-1}C_{k+1}^{j}T(n,j)+C_{k+1}^{k}S(n,k)+C_{k+1}^{k}T(n,k)-C_{k+1}^{k}T(n,k)\\\\ &=\\sum_{j=0}^{k}C_{k+1}^{j}T(n,j)+C_{k+1}^{k}S(n,k)-C_{k+1}^{k}T(n,k) \\end{aligned}接下来，如果我们能够证明 n^{k+1}=\\sum_{j=0}^{k}C_{k+1}^{j}T(n,j)自然就能得出$S(n,k)=T(n,k)$。 愉快地推式子 \\begin{aligned} \\sum_{j=0}^{k}C_{k+1}^{j}T(n,j)&=\\sum_{j=0}^{k}C_{k+1}^{j}\\cfrac{1}{j+1}\\sum_{i=0}^{j}C_{j+1}^{i}B_{i}n^{j-i+1}\\\\ &=\\sum_{j=0}^{k}C_{k+1}^{j}\\cfrac{1}{j+1}\\sum_{i=0}^{j}C_{j+1}^{j-i}B_{j-i}n^{i+1}\\\\ &=\\sum_{j=0}^{k}C_{k+1}^{j}\\cfrac{1}{j+1}\\sum_{i=0}^{j}C_{j+1}^{i+1}B_{j-i}n^{i+1}\\\\ &=\\sum_{j=0}^{k}C_{k+1}^{j}\\cfrac{1}{j+1}\\sum_{i=0}^{j}\\cfrac{j+1}{i+1}C_{j}^{i}B_{j-i}n^{i+1}\\\\ &=\\sum_{j=0}^{k}C_{k+1}^{j}\\sum_{i=0}^{j}\\cfrac{1}{i+1}C_{j}^{i}B_{j-i}n^{i+1}\\\\ &=\\sum_{i=0}^{j}\\cfrac{1}{i+1}\\sum_{j=i}^{k}C_{k+1}^{j}C_{j}^{i}B_{j-i}n^{i+1}\\\\ &=\\sum_{i=0}^{j}\\cfrac{1}{i+1}\\sum_{j=i}^{k}C_{k+1}^{i}C_{k-i+1}^{j-i}B_{j-i}n^{i+1}\\\\ &=\\sum_{i=0}^{j}\\cfrac{1}{i+1}C_{k+1}^{i}n^{i+1}\\sum_{j=0}^{k-i}C_{k-i+1}^{j}B_{j} \\end{aligned}上面的第二个等号是将后面的那个$\\sum$倒过来（$i\\rightarrow j-i$）求和。 返回本页面最上端之后，我们回想起伯努利数还有个这么个性质 \\sum_{i=0}^{n}C_{n+1}^{i}B_{i}=[n=0]于是 \\begin{aligned} \\sum_{j=0}^{k}C_{k+1}^{j}T(n,j)&=\\sum_{i=0}^{j}\\cfrac{1}{i+1}C_{k+1}^{i}n^{i+1}\\sum_{j=0}^{k-i}C_{k-i+1}^{j}B_{j}\\\\ &=\\sum_{i=0}^{j}\\cfrac{1}{i+1}C_{k+1}^{i}n^{i+1}[i=k]\\\\ &=\\cfrac{1}{k+1}C_{k+1}^{k}n^{k+1}\\\\ &=n^{k+1} \\end{aligned}\\text{QED}诶刚才我干了些什么来着哦我好像是证明了这么一个东西 \\sum_{i=0}^{n-1}i^{k}=\\cfrac{1}{k+1}\\sum_{i=0}^{k}C_{k+1}^{i}B_{i}n^{k-i+1}如何求伯努利数根据题解，我们知道伯努利数的生成函数是 \\cfrac{x}{e^{x}-1}=\\cfrac{x}{\\sum\\limits_{i=1}^{+\\infty}\\cfrac{x^{i}}{i!}}=\\cfrac{1}{\\sum\\limits_{i=0}^{+\\infty}\\cfrac{x^{i}}{(i+1)!}}例题「Luogu-P3711」仓鼠的数学题\\begin{aligned} \\sum_{i=0}^{n}a_{i}\\sum_{j=0}^{x}j^{i}&=\\sum_{i=0}^{n}a_{i}x^{i}+\\sum_{i=0}^{n}a_{i}\\sum_{j=0}^{x-1}j^{i}\\\\ &=\\sum_{i=0}^{n}a_{i}x^{i}+\\sum_{i=0}^{n}\\cfrac{a_{i}}{i+1}\\sum_{j=0}^{i}C_{i+1}^{j}B_{j}x^{i-j+1}\\\\ &=\\sum_{i=0}^{n}a_{i}x^{i}+\\sum_{i=0}^{n}\\cfrac{a_{i}}{i+1}\\sum_{j=0}^{i}C_{i+1}^{i-j}B_{i-j}x^{j+1}\\\\ &=\\sum_{i=0}^{n}a_{i}x^{i}+\\sum_{i=0}^{n}\\cfrac{a_{i}}{i+1}\\sum_{j=0}^{i}\\cfrac{(i+1)!}{(i-j)!(j+1)!}B_{i-j}x^{j+1}\\\\ &=\\sum_{i=0}^{n}a_{i}x^{i}+\\sum_{i=0}^{n}i!a_{i}\\sum_{j=0}^{i}\\cfrac{1}{(j+1)!}\\cfrac{B_{i-j}}{(i-j)!}x^{j+1}\\\\ &=\\sum_{i=0}^{n}a_{i}x^{i}+\\sum_{j=0}^{n}\\cfrac{1}{(j+1)!}\\sum_{i=j}^{n}i!a_{i}\\cfrac{B_{i-j}}{(i-j)!}x^{j+1} \\end{aligned}定义 F(x)=\\sum_{i=0}^{n}(n-i)!a_{n-i}x^{i}B(x)=\\sum_{i=0}^{n}\\cfrac{B_{i}}{i!}x^{i}那么 \\begin{aligned} \\sum_{i=0}^{n}a_{i}\\sum_{j=0}^{x}j^{i}&=\\sum_{i=0}^{n}a_{i}x^{i}+\\sum_{j=0}^{n}\\cfrac{1}{(j+1)!}\\sum_{i=j}^{n}i!a_{i}\\cfrac{B_{i-j}}{(i-j)!}x^{j+1}\\\\ &=\\sum_{i=0}^{n}a_{i}x^{i}+\\sum_{j=0}^{n}\\cfrac{FB[n-j]}{(j+1)!}x^{j+1} \\end{aligned}","link":"/bernoulli-number-learning-notes/"},{"title":"「AT987」高橋君","text":"传送门 Luogu 第一道AtCoder的题解。 联动一波asuldb。 「啊这题怎么做啊。看起来好难啊。不会啊。」 「我们来蒙一个做法吧。比如说就莫队了！」 \\sum_{i=0}^{m+1}C_{n}^{i}=\\sum_{i=0}^{m}C_{n}^{i}+C_{n}^{m+1}\\sum_{i=0}^{m}C_{n+1}^{i}=\\sum_{i=0}^{m}(C_{n}^{i}+C_{n}^{i-1})=\\sum_{i=0}^{m}C_{n}^{i}+\\sum_{i=0}^{m-1}C_{n}^{i-1}=2\\sum_{i=0}^{m}C_{n}^{i}-C_{n}^{m}这是左右端点向右移动的情况。向左移动就反过来。 就这样。 但是不知道为什么奇偶性排序会WA。 好短啊QAQ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;#define re register#define maxn 100000#define mod 1000000007#define id(a) (a/sq+1)#define C(n,m) (1LL*fac[n]*inv[m]%mod*inv[n-m]%mod)namespace cltstream{ #define size 1048576 char cltin[size+1],*ih=cltin,*it=cltin; inline char gc(){ #ifdef ONLINE_JUDGE if(ih==it){ it=(ih=cltin)+fread(cltin,1,size,stdin); if(ih==it) return EOF; } return *ih++; #else return getchar(); #endif } char cltout[size+1],*oh=cltout,*ot=cltout+size; inline void pc(char c){ if(oh==ot){ fwrite(cltout,1,size,stdout); oh=cltout; } *oh++=c; } #define clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout),cltstream::oh=cltstream::cltout #undef size template &lt;typename _tp&gt; inline void read(_tp&amp; x){ int sn=1; char c=gc(); for(;c!=45&amp;&amp;(c&lt;48||c&gt;57)&amp;&amp;c!=EOF;c=gc()); if(c==45&amp;&amp;c!=EOF) sn=-1,c=gc(); for(x=0;c&gt;=48&amp;&amp;c&lt;=57&amp;&amp;c!=EOF;x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=gc()); x*=sn; } template &lt;typename _tp&gt; inline void write(_tp x,char text=-1){ if(x&lt;0) pc(45),x=-x; if(!x) pc(48); else{ int digit[22]; for(digit[0]=0;x;digit[++digit[0]]=x%10,x/=10); for(;digit[0];pc(digit[digit[0]--]^48)); } if(text&gt;=0) pc(text); }}int n,sq;int fac[maxn+1],inv[maxn+1];struct Query{ int t,l,r;};Query q[maxn+1];int ans[maxn+1];inline bool operator&lt;(re Query p1,re Query p2){ return id(p1.l)==id(p2.l)?p1.r&lt;p2.r:p1.l&lt;p2.l;}int main(){ fac[0]=inv[0]=fac[1]=inv[1]=1; for(re int i=2;i&lt;=maxn;++i) inv[i]=(mod-1LL*mod/i*inv[mod%i]%mod)%mod; for(re int i=2;i&lt;=maxn;++i){ fac[i]=1LL*fac[i-1]*i%mod; inv[i]=1LL*inv[i-1]*inv[i]%mod; } cltstream::read(n); sq=maxn/sqrt(n); for(re int i=1;i&lt;=n;++i){ q[i].t=i; cltstream::read(q[i].r); cltstream::read(q[i].l); } std::sort(q+1,q+n+1); re int L=0,R=0,res=1; for(re int i=1;i&lt;=n;++i){ for(;R&lt;q[i].r;res=(2*res-C(R,L)+mod)%mod,++R); for(;R&gt;q[i].r;--R,res=inv[2]*(res+C(R,L))%mod); for(;L&lt;q[i].l;++L,res=(res+C(R,L))%mod); for(;L&gt;q[i].l;res=(res-C(R,L)+mod)%mod,--L); ans[q[i].t]=res; } for(re int i=1;i&lt;=n;++i) cltstream::write(ans[i],10); clop(); return 0;}","link":"/at987-solution/"},{"title":"后缀数组自闭笔记","text":"省选前最后两周。同时也是退役前最后两周。 在wzx的鼓动下开了字符串。 然后自闭了。 以下，我们约定，$S_{l,r}$表示字符串$S$下标为$[l,r]$的子串，下标从$1$开始。超过串长的部分用小于其他所有字符的空字符填充。 后缀排序std::sort（光速逃 不过std::sort也是可以做的（ 我们发现，这种做法的瓶颈在于比较两个后缀的大小。我们可以二分+Hash求出它们的最长公共前缀的长度，然后比较这个前缀后一个字符的大小。这么做的时间复杂度是$O(n\\log^{2}n)$的。 但是没什么用（ 然后我们就需要用到后缀数组（Suffix Array）了。 SA一共有四种构建方式，分别是$O(n\\log n)$的倍增，$O(n)$的DC3和SA-IS，以及$O(1)$的潮爷排序。但是后三种太高端了我都不会（ 假设对于每一个位置$i$，我们已经按照$S_{i,i+k-1}$的大小排好了序，并且有了一个排名。我们以$i$的排名为第一关键字，$i+k$的排名为第二关键字，排一遍序，整个字符串就被按照$S_{i,i+2k-1}$的大小排好了序。当所有位置的排名都不同时，说明整个过程可以结束了。 但是问题来了，排一遍序不是$O(n\\log n)$的吗（ 我们有基数排序啊（ 123456789101112131415161718192021222324252627282930313233343536373839404142// s[i]：原字符串// fst[i]：后缀i的第一关键字// snd[i]：第二关键字排名为i的后缀// tak[i]：桶// sa[i]：排名为i的后缀// 一开始时以首字符为第一关键字，位置为第二关键字排序for(re int i=1;i&lt;=n;++i) ++tak[fst[i]=s[i]];for(re int i=1;i&lt;=122;++i) tak[i]+=tak[i-1]; // 处理桶内前缀和，用来求出第一关键字为i的后缀的最大可能排名for(re int i=n;i&gt;=1;--i) sa[tak[fst[i]]--]=i; // 第一关键字相同时，第二关键字排名越大总排名越大，因此倒序枚举 // 因为第二关键字是位置，所以snd[i]=ifor(re int mx=122,k=1;;k&lt;&lt;=1){ re int cnt=0; for(re int i=n-k+1;i&lt;=n;++i) snd[++cnt]=i; // (n-k,n]的这些后缀没有第二关键字，因此排名最靠前 for(re int i=1;i&lt;=n;++i) if(sa[i]&gt;k) snd[++cnt]=sa[i]-k; for(re int i=1;i&lt;=mx;++i) tak[i]=0; for(re int i=1;i&lt;=n;++i) ++tak[fst[i]]; for(re int i=1;i&lt;=mx;++i) tak[i]+=tak[i-1]; for(re int i=n;i&gt;=1;--i) sa[tak[fst[snd[i]]]--]=snd[i]; for(re int i=1;i&lt;=n;++i) snd[i]=fst[i]; // 因为要生成下一轮排序时的第一关键字，把fst里的信息先扔到snd里 for(re int i=1;i&lt;=n;++i) fst[sa[i]]=fst[sa[i-1]]+(snd[sa[i]]!=snd[sa[i-1]]||snd[sa[i]+k]!=snd[sa[i-1]+k]); // 如果当前后缀与前一个后缀相同则共用排名，否则+1 if(fst[sa[n]]==n) break; else mx=fst[sa[n]];} 看上去非常的绕（ 最后直接输出sa数组即可。 rnk数组rnk[i]表示排名为$i$的后缀。 不难发现rnk[sa[i]]=sa[rnk[i]]=i。 het数组大概算是SA的重点。 令lcp(x,y)表示$x,y$两个后缀的最长公共前缀（Longest Common Prefix）的长度。 het[i]就被定义为lcp(sa[i],sa[i-1])。het[1]=0。 不难发现lcp(x,z)=min(lcp(x,y),lcp(y,z))(x&lt;y&lt;z)，lcp(x,y)=min{lcp(i,i-1)}=min{het[i]}(rnk[x]&lt;i&lt;=rnk[y])。 那么问题来了，怎么求呢（ 首先我们是肯定不能暴力枚举的。 二分+Hash？太麻烦而且复杂度不够优秀（ SA的het数组有一个性质，就是het[rnk[i]]&gt;=het[rnk[i-1]]-1。 我们只考虑het[rnk[i-1]]&gt;0时的情况。 令k=sa[rnk[i-1]-1]，lcp(i-1,k)=het[rnk[i-1]]，又因为后缀$i$是后缀$i-1$删去首字符得到的，后缀$k+1$是后缀$k$删去首字符得到的，从而lcp(i,k+1)=het[rnk[i-1]]-1。 后缀$i-1$比后缀$k$大，删去首字符后，后缀$i$肯定也比后缀$k+1$大。根据lcp的性质我们有lcp(i,sa[rnk[i]-1])&gt;=lcp(i,k+1)，也即het[rnk[i]]&gt;=het[rnk[i-1]]-1。 利用这个性质，我们就可以在$O(n)$的时间复杂度内求出het数组了。 1234567for(re int i=1,j=0;i&lt;=n;++i) if(rnk[i]&gt;1){ j-=!!j; re int pos=sa[rnk[i]-1]; for(;i+j&lt;=n&amp;&amp;pos+j&lt;=n&amp;&amp;s[i+j]==s[pos+j];++j); het[rnk[i]]=j; } 然后SA就彻底建好了。没错就这么点东西（ 板子应用不同子串个数给定一个长度为$n$的字符串$S$，求其本质不同的子串的数量。 首先有一个很显然的结论是，如果一个字符串是$S$的子串，那么它一定是$S$的若干个排名连续的后缀的公共前缀。 对于排名为$1$和排名为$2$的两个后缀来说，它们一共有het[2]个公共前缀；排名为$2$和排名为$3$的两个后缀一共有het[3]个公共前缀…… 因此，$S$的不同子串个数就是它的所有子串个数，$\\cfrac{n(n+1)}{2}$，减去所有het的和。 最长公共子串给定$n$个字符串$S_{1},S_{2},\\cdots,S_{n}$，求它们的最长公共子串。 我们首先将这$n$个串拼在一起，中间插入特殊字符将相邻的两个串隔开。然后我们将每个串内部的字符染色，第$1$个串染成颜色$1$，第$2$个串染成颜色$2$，用尺取法找出sa[l],sa[l+1],...,sa[r]覆盖全部$n$种颜色的区间$[l,r]$，求出其中min{het[i]}(l&lt;i&lt;=r)的最大值即可。 模式串出现次数给定$n$个文本串和$m$个模式串，询问每个模式串在$n$个文本串中一共出现了多少次。 首先将所有文本串拼在一起。对于每一个模式串，如果我们能够找到这个长串的任意一个后缀$x$，使得其拥有这个模式串作为前缀，然后找到一个最小的$l$和一个最大的$r$，使得min{het[i]}(l&lt;i&lt;=rnk[x])和min{het[i]}(rnk[x]&lt;i&lt;=r)均大于等于该模式串长度，$r-l+1$就是答案。不难看出向两边取$\\min$这个操作具有单调性，因此我们可以二分。 但是问题来了，我们该怎么找到这个后缀啊。 一想，把模式串也接到文本串后就可以了。 那如果说模式串出现了互相包含的情况呢？ 我们可以再开一个数组col，col[i]表示sa[i]的首字符是否属于一个文本串。因为这个是静态的，直接一遍前缀和就行。 母串数量给定$n$个文本串和$m$个模式串，询问每个模式串在多少个文本串中出现过。也就是说，在同一个文本串中出现多次只记一次。 和上面一样，只不过是最后一步col[i]表示sa[i]的首字符所属的文本串的编号，对于每一个模式串，二分出区间后数一下颜色种类数。 课后习题自己找去吧（ 然后您就会发现字符串的题一道比一道神仙（","link":"/suffix-array-learning-notes/"},{"title":"「Ynoi2014D2T2」人人本着正义之名","text":"传送门 一人血书放大常数Splay一条生路。 之前Ynoi2014唯一一道没公开的题。 写个$O(nm)$的暴力就有30了。 我们来分析一下操作$3,4,5,6$都在干些啥。 以操作$3$为例，如果在操作前，有一个位置的数字是$1$，它左边是一个$0$，操作完之后那个$0$就会变成$1$。除此之外不会再有其它改变。 仔细想象一下这个过程，我们发现这实际上是将操作区间内所有极长连续$1$的左端点向左扩展了$1$位，所有极长连续$0$的右端点向左收缩了$1$位。 操作$4,5,6$也是类似的。 那么我们写一棵珂朵莉树就可以获得50分了。 但实际上emmmmm……我的珂朵莉树可能和别人不一样（ 别人的珂朵莉树： 我的珂朵莉树： 那么满分做法？ 手写平衡树。没了。 虽然这么说，但是lxl都写了将近10KB（ 总体思路就是，手写平衡树维护所有极长连续段的长度，并不需要维护端点因为可以算出来，单独维护还麻烦。每个节点维护子树内极长连续$0$和$1$的数量、长度最小值，以及连续段的长度变化量（标记）。修改时判断一下如果最小值变成了$0$，那么就暴力重构。反正lxl说因为有前两个操作的存在这么做时间复杂度是对的。 首先有一个问题就是，这样做每个节点维护的必须要是极长连续段。想象一下，如果有两个相邻的节点值都是$1$，我们进行一次操作$3$或$4$，会发生什么？ 两个节点的长度都加了$1$。然后整个序列莫名其妙多出来$1$个数。再然后您就WA了。 然后就是各种各样乱七八糟的细节。虽然这么说但好像没什么可列举的了。 然后您按照上面的思路打完四五百行的代码之后交上去一看： 虽然说暴力重构的时间复杂度应该是对的，但是不难发现它常数大啊。 但是如果不重构，合并相邻的连续段就会变得非常麻烦。 结论就是这题不可写，散了吧散了吧。","link":"/luogu-p5066-solution-not/"},{"title":"来扯点多项式？","text":"在luogu上看到了多项式三角函数/反三角函数的板子。 不过还没加进公共题库，没人交，于是不敢交（ 于是来口胡一波吧。 三角函数总之就是求$\\sin F(x)$，$\\cos F(x)$，其他的三角函数都可以用这两个凑出来因此不需要单独讨论。 虽然说我们也有$\\cos x=\\sin(x+\\cfrac{\\pi}{2})$，但是问题来了，模意义下怎么表示$\\pi$（ 首先我们有欧拉公式 e^{ix}=\\cos x+i\\sin x于是 e^{iF}=\\cos F+i\\sin F根据定义，$i^{2}\\equiv -1\\equiv 998244352\\pmod{998244353}$。而$998244352$是模$998244353$的二次剩余，说人话就是这样的$i$是存在的。 但是问题来了，我们该怎么分离$\\sin$和$\\cos$？ 我们还需要有 e^{i(-F)}=\\cos F-i\\sin F很明显地 \\sin F=\\cfrac{e^{iF}-e^{i(-F)}}{2i}\\cos F=\\cfrac{e^{iF}+e^{i(-F)}}{2}反三角函数求$\\arcsin F(x)$，$\\arccos F(x)$。 我们令答案的多项式为$G(x)$。 我们都知道 \\sin^{2}x+\\cos^{2}x=1于是知道了$\\sin G$或者是$\\cos G$，我们就可以推出另一项，然后再根据 e^{iG}=\\cos G+i\\sin GG=\\cfrac{\\ln(\\cos G+i\\sin G)}{i}就可以算出$G$了。 那么$\\arctan F(x)$？ \\sin^{2}G+\\cos^{2}G=1因为$\\tan G$有意义，所以$\\cos G\\neq0$。 \\tan^{2}G+1=\\sec^{2}G\\cos G=\\cfrac{1}{\\sqrt{\\tan^{2}G+1}}但是看着就麻烦（ Updated on 2019-03-18 上面这种做法大概不是正解，因为这样需要对一个常数项不是$1$，最低次非零系数也不是$1$的多项式求平方根，很明显这需要二次剩余，而且我不会。 考虑倍增。 \\sin G_{0}-F\\equiv 0\\pmod{x^{t}}\\sin G-F\\equiv 0\\pmod{x^{2t}}G\\equiv G_{0}-\\cfrac{\\sin G_{0}-F}{(\\sin G_{0}-F)^{\\prime}}\\equiv G_{0}-\\cfrac{\\sin G_{0}-F}{\\cos G_{0}}\\pmod{x^{2t}}然后是$\\arccos$。 G\\equiv G_{0}-\\cfrac{\\cos G_{0}-F}{(\\cos G_{0}-F)^{\\prime}}\\equiv G_{0}+\\cfrac{\\cos G_{0}-F}{\\sin G_{0}}\\pmod{x^{2t}}然后是$\\arctan$。不过我不怎么会求导$\\tan$（ \\begin{aligned} (\\tan x)^{\\prime}&=(\\cfrac{\\sin x}{\\cos x})^{\\prime}\\\\ &=\\cfrac{(\\sin x)^{\\prime}}{\\cos x}+\\sin x(\\cfrac{1}{\\cos x})^{\\prime}\\\\ &=1+\\tan^{2}x \\end{aligned}G\\equiv G_{0}-\\cfrac{\\tan G_{0}-F}{(\\tan G_{0}-F)^{\\prime}}\\equiv G_{0}+\\cfrac{\\tan G_{0}-F}{1+\\tan^{2} G_{0}}\\pmod{x^{2t}}这大概不能写（ 多项式GCD/LCM既然多项式能够整除和取模，那么GCD和LCM一定也是可以算的吧！ ……应该可以吧（","link":"/polynomial-triangle-function/"},{"title":"生成函数学习笔记","text":"又被wzx吊打了QAQ 来写一篇生成函数吧QAQ 本文全部内容抄袭自这篇blog和这篇blog 定义一个数列$\\{a_{0},a_{1},\\cdots,a_{n}\\}$的生成函数$f(x)$被定义为 f(x)=\\sum_{i=0}^{n}a_{i}x^{i}就这样（ 封闭表达式但是这个形式比较玄乎，不便于我们推式子。特别是当我们需要求一个无穷数列的生成函数时。于是我们希望能够进一步化简。 比如说，当$a_{n}=c^{n}$，即这个数列是$\\{1,c,c^{2},\\cdots\\}$时，它的生成函数是 f(x)=\\sum_{i=0}^{n}c^{i}x^{i}=\\cfrac{1-(cx)^{n+1}}{1-cx}就是一个简单地等比数列求和。很明显，当$x\\in(-1,1)$时，如果$n$趋向于正无穷大，则上式等于$\\cfrac{1}{1-cx}$。 我们现在来分析一下斐波那契数列的生成函数。 \\begin{aligned} F(x)&=\\sum_{i=0}^{n}F_{i}x^{i}\\\\ &=\\sum_{i=0}^{n}(F_{i-1}+F_{i-2})x^{i} \\end{aligned}为了方便，我们定义当$n\\lt 0$时，$F_{n}=0$。 然后我们发现$F_{1}=F_{0}+F_{-1}=0+0=0$，于是我们再加上一项$[i=1]$。 \\begin{aligned} F(x)&=\\sum_{i=0}^{n}(F_{i-1}+F_{i-2}+[i=1])x^{i}\\\\ &=x+\\sum_{i=0}^{n}(F_{i-1}+F_{i-2})x^{i}\\\\ &=x+x\\sum_{i=0}^{n}F_{i-1}x^{i-1}+x^{2}\\sum_{i=0}^{n}F_{i-2}x^{i-2}\\\\ &=x+xF(x)+x^{2}F(x) \\end{aligned}于是 F(x)=\\cfrac{x}{1-x-x^{2}}通项公式斐波那契数那么问题来了，我们闲着没事求这个生成函数有什么用啊。 求通项公式。 我们知道形如$a_{n}=c^{n}$的数列的生成函数等于$\\cfrac{1}{1-cx}$，我们可以试着将$\\cfrac{x}{1-x-x^{2}}$分解成两个类似形式的分式的和。 设 1-x-x^{2}=(1-ax)(1-bx)\\begin{cases} &a+b=1\\\\ &ab=-1 \\end{cases} \\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\; \\begin{cases} &a=\\cfrac{1+\\sqrt{5}}{2}\\\\ &b=\\cfrac{1-\\sqrt{5}}{2} \\end{cases}再设 \\cfrac{c}{1-\\cfrac{1+\\sqrt{5}}{2}x}+\\cfrac{d}{1-\\cfrac{1-\\sqrt{5}}{2}x}=\\cfrac{x}{(1-\\cfrac{1+\\sqrt{5}}{2}x)(1-\\cfrac{1-\\sqrt{5}}{2}x)}\\cfrac{c}{1-\\cfrac{1+\\sqrt{5}}{2}x}+\\cfrac{d}{1-\\cfrac{1-\\sqrt{5}}{2}x}=\\cfrac{c-\\cfrac{1-\\sqrt{5}}{2}cx+d-\\cfrac{1+\\sqrt{5}}{2}dx}{(1-\\cfrac{1+\\sqrt{5}}{2}x)(1-\\cfrac{1-\\sqrt{5}}{2}x)}于是 c-\\cfrac{1-\\sqrt{5}}{2}cx+d-\\cfrac{1+\\sqrt{5}}{2}dx=x等式右边没有常数项，因此$c+d$应当是$0$。再继续接下去，我们得到 \\begin{cases} &c=\\cfrac{1}{\\sqrt{5}}\\\\ &d=-\\cfrac{1}{\\sqrt{5}} \\end{cases}于是 \\begin{aligned} F(x)&=\\cfrac{1}{\\sqrt{5}}\\cfrac{1}{1-\\cfrac{1+\\sqrt{5}}{2}x}-\\cfrac{1}{\\sqrt{5}}\\cfrac{1}{1-\\cfrac{1-\\sqrt{5}}{2}x}\\\\ &=\\sum_{i=0}^{n}\\cfrac{1}{\\sqrt{5}}\\left(\\cfrac{1+\\sqrt{5}}{2}\\right)^{i}x^{i}-\\sum_{i=0}^{n}\\cfrac{1}{\\sqrt{5}}\\left(\\cfrac{1-\\sqrt{5}}{2}\\right)^{i}x^{i}\\\\ &=\\sum_{i=0}^{n}\\cfrac{1}{\\sqrt{5}}\\left(\\left(\\cfrac{1+\\sqrt{5}}{2}\\right)^{i}-\\left(\\cfrac{1-\\sqrt{5}}{2}\\right)^{i}\\right)x^{i} \\end{aligned}结论就是 F_{n}=\\cfrac{1}{\\sqrt{5}}\\left(\\left(\\cfrac{1+\\sqrt{5}}{2}\\right)^{n}-\\left(\\cfrac{1-\\sqrt{5}}{2}\\right)^{n}\\right)卡特兰数\\begin{aligned} F(x)&=\\sum_{i=0}^{n}C_{i}x^{i}\\\\ &=\\sum_{i=0}^{n}\\left(\\sum_{j=0}^{i-1}C_{j}C_{i-j-1}+[i=0]\\right)x^{i}\\\\ &=1+\\sum_{i=0}^{n}\\left(\\sum_{j=0}^{i-1}C_{j}C_{i-j-1}\\right)x^{i}\\\\ &=1+x\\sum_{i=0}^{n}\\left(\\sum_{j=0}^{i-1}C_{j}C_{i-j-1}\\right)x^{i-1}\\\\ &=1+xF^{2}(x) \\end{aligned}于是 xF^{2}(x)-F(x)+1=0F(x)=\\cfrac{1\\pm\\sqrt{1-4x}}{2x}2xF(x)=1\\pm\\sqrt{1-4x}当$x=0$时 2\\times 0\\times 1=1\\pm1因此根号前应该取负。至此我们得到 F(x)=\\cfrac{1-\\sqrt{1-4x}}{2x}那么通项公式呢？ 根据一个我抄过来的广义二项式定理，我们有 \\begin{aligned} \\sqrt{1-4x}&=1+\\sum_{i=1}^{n}\\cfrac{(-1)^{i-1}}{i2^{2i-1}}C_{2i-2}^{i-1}(-4x)^{i}\\\\ &=1+2\\sum_{i=1}^{n}\\cfrac{(-1)^{2i-1}}{i}C_{2i-2}^{i-1}x^{i}\\\\ &=1-2\\sum_{i=1}^{n}\\cfrac{1}{i}C_{2i-2}^{i-1}x^{i} \\end{aligned}\\begin{aligned} F(x)&=\\cfrac{1-\\sqrt{1-4x}}{2x}\\\\ &=\\sum_{i=1}^{n}\\cfrac{1}{i}C_{2i-2}^{i-1}x^{i-1}\\\\ &=\\sum_{i=0}^{n}\\cfrac{1}{i+1}C_{2i}^{i}x^{i} \\end{aligned}于是 C_{n}=\\cfrac{1}{n+1}C_{2n}^{n}默慈金数等会默慈金数是个什么鬼？（ 默慈金数一般记为$M_{n}$，被定义为在均匀分布在一个圆上的$n$个有编号的点之间连出彼此不相交的弦的方案数。一根弦也不连也是一种方案。 M_{0}=1M_{n}=M_{n-1}+\\sum_{i=0}^{n-2}M_{i}M_{n-i-2}\\begin{aligned} F(x)&=\\sum_{i=0}^{n}M_{i}x^{i}\\\\ &=\\sum_{i=0}^{n}\\left(M_{i-1}+\\sum_{j=0}^{i-2}M_{j}M_{i-j-2}+[i=0]\\right)x^{i}\\\\ &=1+\\sum_{i=0}^{n}\\left(M_{i-1}+\\sum_{j=0}^{i-2}M_{j}M_{i-j-2}\\right)x^{i}\\\\ &=1+xF(x)+x^{2}F^{2}(x) \\end{aligned}于是 x^{2}F^{2}(x)+(x-1)F(x)+1=0F(x)=\\cfrac{1-x\\pm\\sqrt{1-2x-3x^{2}}}{2x^{2}}总之根号前应该取负（ \\begin{aligned} F(x)&=\\cfrac{1-x-\\sqrt{1-2x-3x^{2}}}{2x^{2}}\\\\ &=\\cfrac{2-2x-2\\sqrt{1-2x-3x^{2}}}{4x^{2}}\\\\ &=\\cfrac{(1+x)-2\\sqrt{(1+x)(1-3x)}+(1-3x)}{4x^{2}}\\\\ &=\\cfrac{(\\sqrt{1+x}-\\sqrt{1-3x})^{2}}{4x^{2}} \\end{aligned}woc这什么鬼东西溜了溜了。 留作课后习题，哪位dalao推出来了让我%一%（ 例题「TJOI2015」概率论首先很明显，互不同构的二叉树一共$C_{n}$棵，其中$C_{n}$是卡特兰数。现在我们希望求出这些二叉树的叶子结点总数，我们记为$F_{n}$。不难发现 F_{0}=0F_{1}=1F_{n}=2\\sum_{i=0}^{n-1}C_{i}F_{n-i-1}+[i=1]\\begin{aligned} F(x)&=\\sum_{i=0}^{n}F_{i}x^{i}\\\\ &=\\sum_{i=0}^{n}\\left(2\\sum_{j=0}^{i-1}C_{j}F_{i-j-1}+[i=1]\\right)x^{i}\\\\ &=x+2\\sum_{i=0}^{n}\\left(\\sum_{j=0}^{i-1}C_{j}F_{i-j-1}\\right)x^{i}\\\\ &=x+2xCF(x) \\end{aligned}于是 F(x)=\\cfrac{x}{1-2xC(x)}其中$C(x)$是卡特兰数的生成函数，我们知道它的值是$\\cfrac{1-\\sqrt{1-4x}}{2x}$，所以说 F(x)=\\cfrac{x}{\\sqrt{1-4x}}然后我又不会了（ (xC(x))^{\\prime}=\\cfrac{1}{\\sqrt{1-4x}}=\\cfrac{F(x)}{x}(xC(x))^{\\prime}=\\sum_{i=0}^{n}(i+1)C_{i}x^{i}\\cfrac{F(x)}{x}=\\sum_{i=0}^{n}F_{i}x^{i-1}=\\sum_{i=-1}^{n}F_{i+1}x^{i}我们就得到 iC_{i-1}=F_{i}于是 \\begin{aligned} \\text{Ans}&=\\cfrac{F_{n}}{C_{n}}\\\\ &=\\cfrac{nC_{n-1}}{C_{n}}\\\\ &=\\cfrac{C_{2n-2}^{n-1}}{\\cfrac{1}{n+1}C_{2n}^{n}}\\\\ &=\\cfrac{\\cfrac{(2n-2)!}{(n-1)!(n-1)!}}{\\cfrac{(2n)!}{n!(n+1)!}}\\\\ &=\\cfrac{(2n-2)!n!(n+1)!}{(n-1)!(n-1)!(2n)!}\\\\ &=\\cfrac{n(n+1)}{2(2n-1)} \\end{aligned}「国家集训队」整数的lqp拆分其实这道题我几个月前推出来了一个$O(n^{2})$的式子（ 如果记答案为$G_{n}$，我们有 G_{n}=\\sum_{i=0}^{n}F_{i}G_{n-i}其中$F_{n}$是斐波那契数。为了方便，我们强行定义$G_{0}=1$。 \\begin{aligned} G(x)&=\\sum_{i=0}^{n}G_{i}x^{i}\\\\ &=\\sum_{i=0}^{n}\\left(\\sum_{j=0}^{i}F_{j}G_{i-j}+[i=0]\\right)x^{i}\\\\ &=1+\\sum_{i=0}^{n}\\left(\\sum_{j=0}^{i}F_{j}G_{i-j}\\right)x^{i}\\\\ &=1+FG(x) \\end{aligned}其中$F(x)$是斐波那契数的生成函数。于是 G(x)=\\cfrac{1}{1-F(x)}=\\cfrac{1-x-x^{2}}{1-2x-x^{2}}=1+\\cfrac{x}{1-2x-x^{2}}多出来的那个$1$是$G_{0}$，可以无视掉。 设 (1-ax)(1-bx)=1-2x-x^{2}（中间过程略） \\begin{cases} &a=1+\\sqrt{2}\\\\ &b=1-\\sqrt{2} \\end{cases}再设 \\cfrac{c}{1-(1+\\sqrt{2})x}+\\cfrac{d}{1-(1-\\sqrt{2})x}=\\cfrac{x}{1-2x-x^{2}}（中间过程略$\\times 2$） \\begin{cases} &c=\\cfrac{1}{2\\sqrt{2}}\\\\ &d=-\\cfrac{1}{2\\sqrt{2}} \\end{cases}于是 \\begin{aligned} G(x)&=1+\\cfrac{1}{2\\sqrt{2}}\\cfrac{1}{1-(1+\\sqrt{2})x}-\\cfrac{1}{2\\sqrt{2}}\\cfrac{1}{1-(1-\\sqrt{2})x}\\\\ &=1+\\sum_{i=0}^{n}\\cfrac{1}{2\\sqrt{2}}\\left((1+\\sqrt{2})^{i}-(1-\\sqrt{2})^{i}\\right)x^{i} \\end{aligned}最终结论就是 G_{n}=\\cfrac{(1+\\sqrt{2})^{n}-(1-\\sqrt{2})^{n}}{2\\sqrt{2}}根据暴力枚举，我们得出$\\sqrt{2}\\equiv 59713600\\pmod{10^{9}+7}$。","link":"/generating-function-learning-notes/"},{"title":"「Luogu-P4705」Van♂游戏","text":"下个月就要省选了我还在颓怕不是要凉 然后再一翻wzx的blog发现他更新频率快到爆炸 大概这就是神吧 啊啊我好菜啊，不过还是来抄篇题解吧 传送门 令$\\text{Ans}[t]$表示$t$次价值： \\begin{aligned} \\text{Ans}[t]&=\\sum_{i=1}^{n}\\sum_{j=1}^{m}(a_{i}+b_{j})^{t}\\\\ &=\\sum_{i=1}^{n}\\sum_{j=1}^{m}\\sum_{k=0}^{t}C_{t}^{k}a_{i}^{k}b_{j}^{t-k}\\\\ &=t!\\sum_{k=0}^{t}\\cfrac{\\sum a_{i}^{k}}{k!}\\cfrac{\\sum b_{j}^{t-k}}{(t-k)!} \\end{aligned}然后我们看到了$\\sum a_{i}^{k}$这种东西，要算的话时间复杂度至少要是$O(nt)$的（ 从这里往下是抄的题解。 定义 F(x)=\\prod_{i=1}^{n}(a_{i}x+1)\\begin{aligned} G(x)&=\\ln F(x)\\\\ &=\\ln\\prod_{i=1}^{n}(a_{i}x+1)\\\\ &=\\sum_{i=1}^{n}\\ln(a_{i}x+1) \\end{aligned}我们先来考虑如何求出$F$。定义$Q_{i}$为从$\\{a_{n}\\}$中选出$i$个数相乘，这样的所有方案结果的总和，且$Q_{0}=1$。我们有 F(x)=\\sum_{i=0}^{n}Q_{i}x^{i}然后分治。假设我们现在已经求出了$[l,mid]$上的$Q_{L,0},Q_{L,1},\\cdots,Q_{L,mid-l+1}$和$(mid,r]$上的$Q_{R,0},Q_{R,1},\\cdots,Q_{R,r-mid}$，不难发现 Q_{i}=\\sum_{j=0}^{i}Q_{L,j}Q_{R,i-j}这部分的时间复杂度为$O(n\\log^{2}n)$。 然后我们将$G$在$1$这个位置泰勒展开。先回忆一下泰勒展开的式子 g(x)=\\sum\\limits_{i=1}^{+\\infty}\\cfrac{f^{(i)}(x_{0})}{i!}(x-x_{0})^i\\ln^{(n)}(x)=(-1)^{n-1}(n-1)!x^{-n}\\begin{aligned} G(x)&=\\sum_{i=1}^{n}\\ln(a_{i}x+1)\\\\ &=\\sum_{i=1}^{n}\\sum_{j=1}^{+\\infty}\\cfrac{\\ln^{(j)}(1)}{j!}a_{i}^{j}x^{j}\\\\ &=\\sum_{i=1}^{n}\\sum_{j=1}^{+\\infty}\\cfrac{(-1)^{j-1}(j-1)!1^{-j}}{j!}a_{i}^{j}x^{j}\\\\ &=\\sum_{i=1}^{n}\\sum_{j=1}^{+\\infty}\\cfrac{(-1)^{j-1}}{j}a_{i}^{j}x^{j}\\\\ &=\\sum_{j=1}^{+\\infty}\\cfrac{(-1)^{j-1}}{j}\\left(\\sum_{i=1}^{n}a_{i}^{j}\\right)x^{j} \\end{aligned} 令人窒息（ 然后这道题就做出来了（ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205#include&lt;cstdio&gt;#define re register#define maxn 524288#define mod 998244353#define swap(a,b) a^=b,b^=a,a^=bnamespace cltstream{ #define size 1048576 char cltin[size+1],*ih=cltin,*it=cltin; inline char gc(){ #ifdef ONLINE_JUDGE if(ih==it){ it=(ih=cltin)+fread(cltin,1,size,stdin); if(ih==it) return EOF; } return *ih++; #else return getchar(); #endif } char cltout[size+1],*oh=cltout,*ot=cltout+size; inline void pc(char c){ if(oh==ot){ fwrite(cltout,1,size,stdout); oh=cltout; } *oh++=c; } #define clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout),cltstream::oh=cltstream::cltout #undef size template &lt;typename _tp&gt; inline void read(_tp&amp; x){ int sn=1; char c=gc(); for(;c!=45&amp;&amp;(c&lt;48||c&gt;57)&amp;&amp;c!=EOF;c=gc()); if(c==45&amp;&amp;c!=EOF) sn=-1,c=gc(); for(x=0;c&gt;=48&amp;&amp;c&lt;=57&amp;&amp;c!=EOF;x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=gc()); x*=sn; } template &lt;typename _tp&gt; inline void write(_tp x,char text=-1){ if(x&lt;0) pc(45),x=-x; if(!x) pc(48); else{ int digit[22]; for(digit[0]=0;x;digit[++digit[0]]=x%10,x/=10); for(;digit[0];pc(digit[digit[0]--]^48)); } if(text&gt;=0) pc(text); }}int n,m,t;int unit[2][24],rev[maxn+1],inv[maxn+1]={1,1};int A[maxn+1],B[maxn+1],F[maxn+1],G[maxn+1],tmp1[maxn+1],tmp2[maxn+1];inline int cltpow(re int x,re int y){ re int res=1; for(;y;){ if(y&amp;1) res=1LL*res*x%mod; x=1LL*x*x%mod; y&gt;&gt;=1; } return res;}inline void NTT(re int* F,re int n,re int tp){ for(re int i=0;i&lt;n;++i) if(i&lt;(rev[i]=(rev[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)?(n&gt;&gt;1):0))) swap(F[i],F[rev[i]]); for(re int k=1,p=1;p&lt;n;++k,p&lt;&lt;=1) for(re int i=0;i&lt;n;i+=p&lt;&lt;1) for(re int j=i,tmp=1;j&lt;i+p;++j,tmp=1LL*tmp*unit[tp][k]%mod){ re int x=F[j],y=1LL*F[j+p]*tmp%mod; F[j]=(x+y)%mod; F[j+p]=(x-y+mod)%mod; } re int v=cltpow(n,tp*(mod-2)); for(re int i=0;i&lt;n;++i) F[i]=1LL*F[i]*v%mod;}inline void Inv(re int* F,re int* G,re int n){ re int N=1; for(;N&lt;n;N&lt;&lt;=1); N&lt;&lt;=1; for(re int i=0;i&lt;N;++i) G[i]=0; G[0]=cltpow(F[0],mod-2); for(re int i=1,j=4;i&lt;n;i&lt;&lt;=1,j&lt;&lt;=1){ NTT(G,j,0); for(re int k=0;k&lt;(i&lt;&lt;1);++k) tmp1[k]=F[k]; for(re int k=(i&lt;&lt;1);k&lt;j;++k) tmp1[k]=0; NTT(tmp1,j,0); for(re int k=0;k&lt;j;++k) G[k]=(2-1LL*tmp1[k]*G[k]%mod+mod)*G[k]%mod; NTT(G,j,1); for(re int k=(i&lt;&lt;1);k&lt;j;++k) G[k]=0; } for(re int i=n;i&lt;N;++i) G[i]=0;}inline void Ln(re int* F,re int* G,re int n){ re int N=1; for(;N&lt;n;N&lt;&lt;=1); N&lt;&lt;=1; for(re int i=1;i&lt;n;++i) G[i-1]=1LL*F[i]*i%mod; G[n-1]=0; for(re int i=n;i&lt;N;++i) G[i]=0; NTT(G,N,0); Inv(F,tmp2,n); NTT(tmp2,N,0); for(re int i=0;i&lt;N;++i) G[i]=1LL*G[i]*tmp2[i]%mod; NTT(G,N,1); for(re int i=n-1;i&gt;=1;--i) G[i]=1LL*G[i-1]*inv[i]%mod; G[0]=0; for(re int i=n;i&lt;N;++i) G[i]=0;}void calc(re int* P,re int l,re int r){ if(l&lt;r){ re int mid=(l+r)&gt;&gt;1,N=1; calc(P,l,mid); calc(P,mid+1,r); for(;N&lt;r-l+2;N&lt;&lt;=1); F[0]=1; for(re int i=1;i&lt;=mid-l+1;++i) F[i]=P[l+i-1]; for(re int i=mid-l+2;i&lt;N;++i) F[i]=0; NTT(F,N,0); G[0]=1; for(re int i=1;i&lt;=r-mid;++i) G[i]=P[mid+i]; for(re int i=r-mid+1;i&lt;N;++i) G[i]=0; NTT(G,N,0); for(re int i=0;i&lt;N;++i) F[i]=1LL*F[i]*G[i]%mod; NTT(F,N,1); for(re int i=1;i&lt;=r-l+1;++i) P[l+i-1]=F[i]; }}int main(){ unit[0][23]=cltpow(3,119); unit[1][23]=cltpow(332748118,119); for(re int i=0;i&lt;2;++i) for(re int j=22;j&gt;=0;--j) unit[i][j]=1LL*unit[i][j+1]*unit[i][j+1]%mod; for(re int i=2;i&lt;=maxn;++i) inv[i]=(mod-1LL*mod/i*inv[mod%i]%mod)%mod; cltstream::read(n); cltstream::read(m); A[0]=1; for(re int i=1;i&lt;=n;++i) cltstream::read(A[i]); B[0]=1; for(re int i=1;i&lt;=m;++i) cltstream::read(B[i]); cltstream::read(t); calc(A,1,n); calc(B,1,m); Ln(A,F,t+1); Ln(B,G,t+1); F[0]=n; for(re int i=1,j=1;i&lt;=t;j=1LL*j*(mod-inv[i])%mod,++i) F[i]=1LL*F[i]*j%mod; G[0]=m; for(re int i=1,j=1;i&lt;=t;j=1LL*j*(mod-inv[i])%mod,++i) G[i]=1LL*G[i]*j%mod; re int N=1; for(;N&lt;(t&lt;&lt;1|1);N&lt;&lt;=1); for(re int i=t+1;i&lt;N;++i) F[i]=G[i]=0; NTT(F,N,0); NTT(G,N,0); for(re int i=0;i&lt;N;++i) F[i]=1LL*F[i]*G[i]%mod; NTT(F,N,1); N=cltpow(1LL*n*m%mod,mod-2); for(re int i=1,j=N;i&lt;=t;++i,j=1LL*j*i%mod) cltstream::write(1LL*F[i]*j%mod,10); clop(); return 0;}","link":"/luogu-p4705-solution/"},{"title":"「网络流学习笔记Part II」总之XJB写点啥（","text":"Part I大概是这篇。 去郑州的时候讲的网络流部分。 什么你说游记？咕咕咕。 一种似乎没有名字的二元组模型简化版你有两台机器和$n$个任务。用第一台机器完成第$i$个任务需要付出$a_{i}$的代价，用第二台完成需要$b_{i}$的代价。你有$m$个三元组（虽然说不是标题说的二元组不过不要在意这些细节），每一个三元组形如$(x,y,c)$，意思是如果$x$和$y$两个任务在不同的机器上完成需要额外付出$c$的代价。你需要完成这$n$个任务，并最小化代价和。 我们都知道最小割=最大流。因此在一些题目中，如果无法将问题抽象成最大流问题，我们可以试着抽象成最小割问题。 对于任务$i$，连边$(S,i,a_{i}),(i,T,b_{i})$。对于一个三元组$(x,y,c)$，连边$(x,y,c),(y,x,c)$。 割断$(S,i,a_{i})$意味着任务$i$在第一台机器上完成，割断$(i,T,b_{i})$意味着任务$i$在第二台机器上完成。 首先很明显的是，同时割断$(S,i,a_{i})$和$(i,T,b_{i})$一定不是最优的决策。因此一个任务只会在一台机器上被完成。 对于一个三元组$(x,y,c)$，如果我们同时割断$(S,x,a_{x})$和$(S,y,a_{y})$，$S$与$T$直接就断开了，这样我们的代价是$a_{x}+a_{y}$。同时割断$(x,T,b_{x})$和$(y,T,b_{y})$也是类似的。 如果说我们同时割断$(S,x,a_{x})$和$(y,T,b_{y})$，图上仍存在$\\{(S,y,a_{y}),(y,x,c),(x,T,b_{x})\\}$这样一条路径，我们还需要割断$(y,x,c)$，这样我们的代价是$a_{x}+b_{y}+c$。同时割断$(x,T,b_{x})$和$(S,y,a_{y})$也是类似的。 一般化你有两台机器和$n$个任务。用第一台机器完成第$i$个任务需要付出$a_{i}$的代价，用第二台完成需要$b_{i}$的代价。你有$m$个六元组，每一个六元组形如$(x,y,c_{1},c_{2},c_{3},c_{4})$，意思是你需要为$x$和$y$这两个任务付出一些额外代价： 如果任务$x$在第一台机器上完成，任务$y$在第一台机器上完成，这个额外代价是$c_{1}$。 如果任务$x$在第二台机器上完成，任务$y$在第二台机器上完成，这个额外代价是$c_{2}$。 如果任务$x$在第一台机器上完成，任务$y$在第二台机器上完成，这个额外代价是$c_{3}$。 如果任务$x$在第二台机器上完成，任务$y$在第一台机器上完成，这个额外代价是$c_{4}$。 你需要完成这$n$个任务，并最小化代价和。 首先仍然是连边$(S,i,a_{i}),(i,T,b_{i})$。对于每一个六元组，连边$(S,x,A),(S,y,B),(x,T,C),(y,T,D),(x,y,E),(y,x,F)$。我们发现 如果任务$x$在第一台机器上完成，任务$y$在第一台机器上完成，我们需要割断$(S,x,A),(S,y,B)$，付出$A+B$的代价。 如果任务$x$在第二台机器上完成，任务$y$在第二台机器上完成，我们需要割断$(x,T,C),(y,T,D)$，付出$C+D$的代价。 如果任务$x$在第一台机器上完成，任务$y$在第二台机器上完成，我们需要割断$(S,x,A),(y,T,D),(y,x,F)$，付出$A+D+F$的代价。 如果任务$x$在第二台机器上完成，任务$y$在第一台机器上完成，我们需要割断$(S,y,B),(x,T,C),(x,y,E)$，付出$B+C+E$的代价。 因此我们列出如下的方程组 \\begin{cases} &A+B=c_{1}&(1)\\\\ &C+D=c_{2}&(2)\\\\ &A+D+F=c_{3}\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;&(3)\\\\ &B+C+E=c_{4}&(4) \\end{cases}因为我们要将问题转化成最大流问题，首先想到，我们要有$A,B,C,D,E,F\\geqslant 0$。注意到，$(S,x,A)$和$(x,T,C)$中有且仅有一条边会出现在最小割集中，因此我们可以将$A$和$C$同时加上一个数，求出最小割后在答案中减去。$B$和$D$也可以类似处理。 需要注意的是，$E$和$F$不能被这样处理，因为我们不能确定它们在答案中产生了几次贡献。 $(3)+(4)-(1)-(2)$，我们得到 E+F=c_{3}+c_{4}-c_{1}-c_{2}定义$K=c_{3}+c_{4}-c_{1}-c_{2}$，当$K\\geqslant 0$时它有意义，我们直接令$E=F=\\cfrac{K}{2}$即可。 剩下的四个量随便给几个值，好算就行。 其实就算$K\\lt 0$有时也是可以做的，但是我太菜了不会（ 因为太菜了所以没有图（ 例题「国家集训队」happiness题目要求最大化总收益，我们可以先将所有数取相反数，然后最小化总代价。 令位置$i$选文的单独收益是$a_{i}$，选理的单独收益是$b_{i}$，连边$(S,i,-a_{i}),(i,T,-b_{i})$。 考虑一对相邻的位置，他们都选文的额外收益是$v_{1}$，都选理的额外收益是$v_{2}$，列出方程组 \\begin{cases} &A+B=-v_{1}\\\\ &C+D=-v_{2}\\\\ &A+D+E=0\\\\ &B+C+E=0 \\end{cases} \\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\; \\begin{cases} &A=-\\cfrac{v_{1}}{2}\\\\ &B=-\\cfrac{v_{1}}{2}\\\\ &C=-\\cfrac{v_{2}}{2}\\\\ &D=-\\cfrac{v_{2}}{2}\\\\ &E=\\cfrac{v_{1}+v_{2}}{2} \\end{cases}为了避免浮点数，我们把上面所有边的容量乘以$2$，包括$(S,i,-a_{i}),(i,T,-b_{i})$，最后再除回来。 然后，为了避免负数，我们将$A,B,C,D$加上$v_{1}+v_{2}$，把边$(S,i,-2a_{i}),(i,T,-2b_{i})$的容量加上$2a_{i}+2b_{i}$，最后再减回来。 总结一下就是，对于一个位置$i$，连边$(S,i,2b_{i}),(i,T,2a_{i})$。对于一对相邻位置$x,y$，连边$(S,x,v_{2}),(S,y,v_{2}),(x,T,v_{1}),(y,T,v_{1}),(x,y,v_{1}+v_{2}),(y,x,v_{1}+v_{2})$。 \\text{Ans}=\\sum(a_{i}+b_{i})+\\sum(v_{1}+v_{2})-\\cfrac{\\text{MinCut}(S,T)}{2}但是我的代码不知道为什么写炸了（ 反正这个式子应该是没问题的（ 那么告辞吧（ 闭合子图定义对于一个有向图$G$，它的一个闭合子图指的是一个顶点集合$V$，满足$V\\subset G$，且 \\forall u\\in V\\wedge(u,v)\\in G,v\\in V其中$|V|$最大的$V$被称为$G$的最大闭合子图。 如果$G$中的点有点权，$\\sum_{u\\in V}w(u)$最大的$V$被称为$G$的最大权闭合子图。 解法首先，我们还是需要将所有点权取相反数，转为求最小权闭合子图。 对于$G$中的一个点$x$，割断与$S$之间的边表示$x\\notin V$，割断与$T$之间的边表示$x\\in V$。对于$G$中的一条边$(x,y)$，如果$x\\in V$，那么一定有$y\\in V$。我们可以认为，如果令$x\\in V$，$y\\notin V$，需要付出$+\\infty$的代价。由此列出方程组 \\begin{cases} &A+B=0\\\\ &C+D=-w(x)-w(y)\\\\ &A+D+F=-w(x)\\\\ &B+C+E=-w(y)+\\infty \\end{cases} \\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\; \\begin{cases} &A=0\\\\ &B=0\\\\ &C=-w(x)\\\\ &D=-w(y)\\\\ &E=+\\infty\\\\ &F=0 \\end{cases}于是，去掉所有容量为$0$的边，我们得到$(x,T,-w(x)),(y,T,-w(y)),(x,y,+\\infty)$这三条边。如果$w(x)\\geqslant 0$，我们需要把边$(S,x,0),(x,T,-w(x))$的容量都加上$w(x)$，相当于是把$(x,T,-w(x))$换成了$(S,x,w(x))$。 总结一下就是，对于原图中的一个正权点$x$，连边$(S,x,w(x))$，对于原图中的一个负权点$x$，连边$(x,T,-w(x))$。对于原图中的一条边$(x,y)$，连边$(x,y,+\\infty)$。 \\text{Ans}=\\sum_{w(x)\\geqslant 0}w(x)-\\text{MinCut}(S,T)","link":"/network-flow-learning-notes-pt2/"},{"title":"「Luogu-P3613」睡觉困难综合征","text":"传送门 xjb扯以前刚学树剖时看到这题感觉好神仙啊没法做啊。 然后现在学了LCT过来一看，这不就一水题（ xjb写了棵LCT一交。 emmmmmm…… 然后改的时候才发现全是细节错误，LCT的部分动都没动一下（ 就比如说，下面是我第一次交的程序的主程序部分。 12345678910111213141516171819202122232425262728293031for(re int i=1;i&lt;=m;++i){ int opt,x,y; cltstream::read(opt); cltstream::read(x); cltstream::read(y); if(opt==1){ int z; //我都不知道我当时是怎么想的（ cltstream::read(z); split(mempool+x,mempool+y); re unsigned long long ans0=(mempool+y)-&gt;ans0,ans1=(mempool+y)-&gt;ans1,ans=0; for(re int j=k-1;j&gt;=0;--j) if(((ans0&gt;&gt;j)&amp;1)&gt;=((ans1&gt;&gt;j)&amp;1)||z&lt;(1&lt;&lt;j)) //甚至忘了用1ULL（ ans^=ans0&amp;(1&lt;&lt;j); else{ z-=1&lt;&lt;j; ans^=ans1&amp;(1&lt;&lt;j); } cltstream::write(ans,10); } else{ unsigned long long z; cltstream::read(z); access(mempool+x); (mempool+x)-&gt;tp=y; (mempool+x)-&gt;val=z; (mempool+y)-&gt;pushUp(); //？？？ }} 然后我Splay节点的内部信息甚至开成了unsigned，excuse me？？？ 不这个东西这不是我写的（ 真正的题解首先LCT。 不过首先的首先您还是要先做了这道题。 每个Splay节点维护两个值，分别是把$0$和$-1$在它所在的实链的一部分中按照深度递增的方向跑一遍得到的结果。 我们记这两个值为ans0和ans1。 左子树和节点本身的信息很好维护。 而关于右子树，看上去我们没办法迅速求出把到现在为止的ans0和ans1扔进去跑一遍的结果。 但是注意到这些都是按位运算，位与位之间不互相影响。 我们可以对于ans0中是$1$的那些位，提取出rc-&gt;ans1的对应位，对于ans0中是$0$的那些位，提取出rc-&gt;ans0的对应位。 然后ans1也类似处理就行了。 123456789101112131415161718192021222324struct SplayNode{ SplayNode *ftr,*lc,*rc; int tp,rev; unsigned val,ans0,ans1; inline unsigned long long apply(unsigned long long x){ return tp==1?(x&amp;val):tp==2?(x|val):(x^val); } /*...*/ inline void pushUp(){ ans0=0,ans1=-1; if(lc!=NULL){ ans0=lc-&gt;ans0; ans1=lc-&gt;ans1; } ans0=apply(ans0),ans1=apply(ans1); if(rc!=NULL){ ans0=(ans0&amp;rc-&gt;ans1)|((~ans0)&amp;rc-&gt;ans0); ans1=(ans1&amp;rc-&gt;ans1)|((~ans1)&amp;rc-&gt;ans0); } }}; 但是还有一个问题是，LCT在连边和提取路径时需要makeRoot，也就是说需要区间翻转。 但是由于不同种类的位运算混在一起没有交换律，我们无法快速地算出翻转后的答案。 那么提前维护好就行了。提前维护好sna0和sna1，表示把$0$和$-1$反过来跑一遍的结果。 然后就没了。","link":"/luogu-p3613-solution/"},{"title":"「年轻人，你渴望力量吗？」","text":"标题来自某学长安利min_25筛的方式（ 概述我们知道，杜教筛可以在$O(n^{\\tfrac{2}{3}})$的时间复杂度内计算某些给定的积性函数的前缀和。 但是现在我们希望更快。于是我们有了min_25筛（ 以下，我们约定$p$是一个质数。$\\mathbb{P}_{i}$表示第$i$小的质数，$\\mathbb{P}_{0}=0$。$\\text{minp}(n)$表示$n$最小的质因数，$\\text{minp}(1)=0$。 现在我们要求一个积性函数$f$的前缀和。我们需要它满足以下两条性质： $f(p)$是一个可以快速求前缀和的完全积性函数，或者能用多个这样的函数运算得到。 $f(p^{k})$可以快速求，大概$O(k)$以内就可以。 第一部分我们要对每一个$x=\\lfloor\\cfrac{n}{i}\\rfloor(i\\in\\mathbb{N}\\cap[1,n])$，求出 \\sum_{i=1}^{x}[i\\in\\mathbb{P}]f(i)定义 F(x,y)=\\sum_{i=1}^{x}[i\\in\\mathbb{P}\\vee\\text{minp}(i)\\gt\\mathbb{P}_{y}]f^{\\prime}(i)也就是把所有质数和最小质因数大于$\\mathbb{P}_y$的合数全部当成质数代入$f^{\\prime}$求值并求和。不难发现 F(x,+\\infty)=\\sum_{i=1}^{x}[i\\in\\mathbb{P}]f(i)我们回忆一下埃式筛法的运行过程。 筛完$k$次后，我们除去了最小质因数小于等于$\\mathbb{P}_{k}$的合数，剩下了质数和最小质因数大于$\\mathbb{P}_k$的合数。 可以看到这和$F(x,y)$的定义十分吻合。$F(x,y)$就是埃式筛法筛完$y$次后，没有被筛掉的数的$f^{\\prime}$的值的和。 首先，第$y$次筛掉的最小的数很明显是$\\mathbb{P}_{y}^{2}$，如果$\\mathbb{P}_{y}^{2}\\gt x$，我们什么也筛不掉，此时$F(x,y)=F(x,y-1)$。 也因此，筛质数筛到$\\sqrt{n}$即可。 否则，即$\\mathbb{P}_{y}^{2}\\leqslant x$，我们将所有数除以$\\mathbb{P}_{y}$，之前所有最小质因数等于$\\mathbb{P}_{y}$的合数一一对应到了现在所有大于等于$\\mathbb{P}_{y}$的数。 又因为$f^{\\prime}$是完全积性的，假如我们有一个需要筛掉的数$z$，我们可以通过$f^{\\prime}(\\cfrac{z}{\\mathbb{P}_{y}})f^{\\prime}(\\mathbb{P}_{y})$计算$f^{\\prime}(z)$。 那么看起来 F(x,y)=F(x,y-1)-f^{\\prime}(\\mathbb{P}_{y})F(\\lfloor\\cfrac{n}{\\mathbb{P}_{y}}\\rfloor,y-1)$F(\\lfloor\\cfrac{n}{\\mathbb{P}_{y}}\\rfloor,y-1)$包含了三类数的$f^{\\prime}$的值： 大于等于$\\mathbb{P}_{y}$的质数。 最小质因数大于等于$\\mathbb{P}_{y}$（大于$\\mathbb{P}_{y-1}$）的合数。 小于$\\mathbb{P}_{y}$的质数。 但是很明显第三类数不能被除去，因此实际上 F(x,y)=F(x,y-1)-f^{\\prime}(\\mathbb{P}_{y})\\left(F(\\lfloor\\cfrac{n}{\\mathbb{P}_{y}}\\rfloor,y-1)-\\sum_{i=1}^{y-1}f^{\\prime}(\\mathbb{P}_{i})\\right)综上所述 F(x,y)=\\begin{cases} &F(x,y-1)-f^{\\prime}(\\mathbb{P}_{y})\\left(F(\\lfloor\\cfrac{n}{\\mathbb{P}_{y}}\\rfloor,y-1)-\\sum\\limits_{i=1}^{y-1}f^{\\prime}(\\mathbb{P}_{i})\\right)\\;\\;&(\\mathbb{P}_{y}^{2}\\leqslant x)\\\\ &F(x,y-1)&(\\mathbb{P}_{y}^{2}\\gt x) \\end{cases}初值为 F(x,0)=\\sum_{i=2}^{x}f^{\\prime}(i)注意到第二维只与$y-1$有关，我们可以滚掉。 还有一个问题。这类题目的$n$会很大，我们无法开一个长度为$n$的数组。 因为$x=\\lfloor\\cfrac{n}{i}\\rfloor(i\\in\\mathbb{N}\\cap[1,n])$，这样的$x$最多只有$2\\sqrt{n}$个，我们可以离散化存储。 具体实现细节我说不清，看代码吧（ 123456789101112131415161718192021222324252627282930313233cltstream::read(n);sq=sqrt(n);for(re int i=2;i&lt;=sq;++i){ if(!f[i]){ g[++g[0]]=i; fsum[g[0]]=fsum[g[0]-1]+/**/; //注释处应填f`(i) } for(re int j=1;j&lt;=g[0]&amp;&amp;i*g[j]&lt;=sq;++j){ f[i*g[j]]=1; if(!(i%g[j])) break; }}m=0;for(re int l=1,r;l&lt;=n;r=n/(n/l),l=r+1){ w[++m]=n/l; //编号对应的离散化前的值 F[m]=/**/; //注释处应填\\sum_{t=2}^{w[m]}f`(t) if(w[m]&lt;=sq) id1[w[m]]=m; else id2[n/w[m]]=m; //分段存储值对应的编号，这样数组只需要开到sqrt{n}}for(re int j=1;j&lt;=g[0];++j) for(re int i=1;i&lt;=m&amp;&amp;w[i]&gt;=g[j]*g[j];++i){ //w[i]&gt;=g[j]*g[j]，所以w[i]/g[j]&gt;=g[j] re int id=w[i]/g[j]&lt;=sq?id1[w[i]/g[j]]:id2[n/(w[i]/g[j])]; F[i]-=/**/*(F[id]-fsum[j-1]); //注释处应填f`(g[j]) } 这一部分的时间复杂度已被证明是$O(\\cfrac{n^{\\tfrac{3}{4}}}{\\log n})$。然而看上去很奇怪（ 第二部分在第一部分中我们求出了所有质数的贡献，现在我们要扩展到全体整数。 定义 S(x,y)=\\sum_{i=1}^{x}[\\text{minp}(i)\\geqslant\\mathbb{P}_{y}]f(i)也就是所有最小质因数大于等于$\\mathbb{P}_{y}$的数的$f$的值的和。我们最终要求的就是$S(n,1)+f(1)$。 首先我们需要统计所有质数的贡献，也就是$F(x,+\\infty)-\\sum\\limits_{i=1}^{y-1}f(\\mathbb{P}_{i})$。 关于合数，我们枚举最小的质因数，然后把所有数除以这个数的若干次幂，得到的商的最小质因数应当大于这个数。 \\sum_{i=y}^{\\mathbb{P}_{i}^{2}\\leqslant n}\\sum_{j=1}^{\\mathbb{P}_{i}^{j+1}\\leqslant n}f(\\mathbb{P}_{i}^{j})S(\\lfloor\\cfrac{x}{\\mathbb{P}_{i}^{j}}\\rfloor,i+1)但是还有一个问题是$S(\\lfloor\\cfrac{x}{\\mathbb{P}_{i}^{j}}\\rfloor,i+1)$中不包括$f(1)$，因此$f(\\mathbb{P}_{i}^{j})$没有被统计，我们需要手动算进来 \\sum_{i=y}^{\\mathbb{P}_{i}^{2}\\leqslant n}\\sum_{j=1}^{\\mathbb{P}_{i}^{j+1}\\leqslant n}\\left(f(\\mathbb{P}_{i}^{j})S(\\lfloor\\cfrac{x}{\\mathbb{P}_{i}^{j}}\\rfloor,i+1)+f(\\mathbb{P}_{i}^{j+1})\\right)于是 S(x,y)=F(x,+\\infty)-\\sum\\limits_{i=1}^{y-1}f(\\mathbb{P}_{i})+\\sum_{i=y}^{\\mathbb{P}_{i}^{2}\\leqslant n}\\sum_{j=1}^{\\mathbb{P}_{i}^{j+1}\\leqslant n}\\left(f(\\mathbb{P}_{i}^{j})S(\\lfloor\\cfrac{x}{\\mathbb{P}_{i}^{j}}\\rfloor,i+1)+f(\\mathbb{P}_{i}^{j+1})\\right)然后暴力搜，记忆化都不需要，时间复杂度还是$O(\\cfrac{n^{\\tfrac{3}{4}}}{\\log n})$。就很神奇（ 12345678910111213int S(re int x,re int y){ if(x&lt;=1||g[y]&gt;x) return 0; else{ re int id=x&lt;=sq?id1[x]:id2[n/x]; re int res=F[id]-fsum[y-1]; for(re int i=y;i&lt;=g[0]&amp;&amp;g[i]*g[i]&lt;=x;++i) for(re int p=g[i];p*g[i]&lt;=x;p*=g[i]) res+=/*1*/*S(x/p,i+1)+/*2*/; //1处应填f(p)，2处应填f(p*g[i]) return res; }} 「Luogu-P4213」「模板」杜教筛（Sum）首先我们有 \\varphi(p)=\\text{id}(p)-1\\mu(p)=-1然后$\\text{id}$和$1$都是能$O(1)$求前缀和完全积性函数，因此可以用min_25筛搞。 说起来比较麻烦，min_25筛不结合代码大概也很难理解，所以说直接上代码（ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128#include&lt;cstdio&gt;#include&lt;cmath&gt;#define re register#define maxn 50000namespace cltstream{ #define size 1048576 char cltin[size+1],*ih=cltin,*it=cltin; inline char gc(){ #ifdef ONLINE_JUDGE if(ih==it){ it=(ih=cltin)+fread(cltin,1,size,stdin); if(ih==it) return EOF; } return *ih++; #else return getchar(); #endif } char cltout[size+1],*oh=cltout,*ot=cltout+size; inline void pc(char c){ if(oh==ot){ fwrite(cltout,1,size,stdout); oh=cltout; } *oh++=c; } #define clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout),cltstream::oh=cltstream::cltout #undef size template &lt;typename _tp&gt; inline void read(_tp&amp; x){ int sn=1; char c=gc(); for(;c!=45&amp;&amp;(c&lt;48||c&gt;57)&amp;&amp;c!=EOF;c=gc()); if(c==45&amp;&amp;c!=EOF) sn=-1,c=gc(); for(x=0;c&gt;=48&amp;&amp;c&lt;=57&amp;&amp;c!=EOF;x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=gc()); x*=sn; } template &lt;typename _tp&gt; inline void write(_tp x,char text=-1){ if(x&lt;0) pc(45),x=-x; if(!x) pc(48); else{ int digit[22]; for(digit[0]=0;x;digit[++digit[0]]=x%10,x/=10); for(;digit[0];pc(digit[digit[0]--]^48)); } if(text&gt;=0) pc(text); }}int t,n,sq,m;int f[maxn+1],g[maxn+1],w[(maxn&lt;&lt;1)+1],id1[maxn+1],id2[maxn+1];int prmcnt[maxn+1],prmCnt[(maxn&lt;&lt;1)+1];long long prmsum[maxn+1],prmSum[(maxn&lt;&lt;1)+1];long long getPhi(re int x,re int y){ if(x&lt;=1||g[y]&gt;x) return 0; else{ re int id=x&lt;=sq?id1[x]:id2[n/x]; re long long res=(prmSum[id]-prmCnt[id])-(prmsum[y-1]-prmcnt[y-1]); for(re int i=y;i&lt;=g[0]&amp;&amp;1LL*g[i]*g[i]&lt;=x;++i) for(re int p=g[i];1LL*p*g[i]&lt;=x;p*=g[i]) res+=1LL*p/g[i]*(g[i]-1)*getPhi(x/p,i+1)+1LL*p*(g[i]-1); return res; }}int getMu(re int x,re int y){ if(x&lt;=1||g[y]&gt;x) return 0; else{ re int id=x&lt;=sq?id1[x]:id2[n/x]; re int res=prmcnt[y-1]-prmCnt[id]; for(re int i=y;i&lt;=g[0]&amp;&amp;1LL*g[i]*g[i]&lt;=x;++i) res-=getMu(x/g[i],i+1); return res; }}int main(){ for(re int i=2;i&lt;=maxn;++i){ if(!f[i]){ g[++g[0]]=i; prmcnt[g[0]]=prmcnt[g[0]-1]+1; prmsum[g[0]]=prmsum[g[0]-1]+i; } for(re int j=1;j&lt;=g[0]&amp;&amp;1LL*i*g[j]&lt;=maxn;++j){ f[i*g[j]]=1; if(!(i%g[j])) break; } } cltstream::read(t); for(;t;--t){ cltstream::read(n); sq=sqrt(n); m=0; for(re int l=1,r;l&lt;=n;r=n/(n/l),l=r+1){ w[++m]=n/l; prmCnt[m]=w[m]-1; prmSum[m]=1LL*(w[m]-1)*(w[m]+2)/2; if(w[m]&lt;=sq) id1[w[m]]=m; else id2[n/w[m]]=m; } for(re int j=1;j&lt;=g[0];++j) for(re int i=1;i&lt;=m&amp;&amp;w[i]&gt;=1LL*g[j]*g[j];++i){ re int id=w[i]/g[j]&lt;=sq?id1[w[i]/g[j]]:id2[n/(w[i]/g[j])]; prmCnt[i]-=prmCnt[id]-prmcnt[j-1]; prmSum[i]-=1LL*g[j]*(prmSum[id]-prmsum[j-1]); } cltstream::write(getPhi(n,1)+1,32); cltstream::write(getMu(n,1)+1,10); } clop(); return 0;} 上为min_25筛，下为杜教筛。 min_25筛的优势不仅在于时间复杂度，它还可以筛一些乱七八糟的东西。就比如说 「LOJ6053」简单的函数总结一下这个函数： f(1)=1f\\left(\\prod_{i=1}^{N}p_{i}^{r_{i}}\\right)=\\prod_{i=1}^{N}(p_{i}\\otimes r_{i})其中$\\otimes$表示按位异或。 按位异或从十进制的角度来看无异于玄学，因此杜教筛就没法做了（ 注意到 f(p)=p\\otimes 1=\\begin{cases} &p+1\\;\\;&(p=2)\\\\ &p-1\\;\\;&(p\\gt 2) \\end{cases}我们可以在算前缀和时将$f(2)$当成$2-1$，然后特判一下加回来。 然后还是要用min_25筛的前半部分筛出$\\text{id}$和$1$，其实和上面的$\\varphi$没多大区别就是加了点细节（ 好像这种能随便看代码的OJ可以直接扔个提交记录。 「UOJ188」Sanrd次大质因数和。 其实这个题面有点考阅读的。 但是我们发现次大质因数这个函数和质数并没有什么关系，而且不积性。说好的只能筛积性函数呢（ 我们来分析一下min_25筛的运行过程。 调用到$S(x,y)$时，剩下的最小质因数大于等于$\\mathbb{P}_{y}$的数中，只有质数与$\\mathbb{P}_{y-1}$相乘之后能够得到次大质因数为$\\mathbb{P}_{y-1}$的数。这部分可以直接算。 关于次大质因数大于$\\mathbb{P}_{y-1}$的，还是枚举递归暴力搜。然后还是没有算$f(\\mathbb{P}_{i}^{j})$，手动加。 123456789101112long long S(re long long n,re long long x,re int y){ if(x&lt;=1||g[y]&gt;x) return 0; else{ re int k=id[x&lt;=sq?x:n/x+sq]; re long long res=(y&gt;1?g[y-1]:0)*(prmCnt[k]-y+1); for(re int i=y;i&lt;=g[0]&amp;&amp;1LL*g[i]*g[i]&lt;=x;++i) for(re long long p=g[i];p*g[i]&lt;=x;p*=g[i]) res+=S(n,x/p,i+1)+g[i]; return res; }} 提交记录。 一道比一道神仙，像我这种菜鸡只能抄题解了（ 课后习题 「LOJ572」「LibreOJ Round #11」Misaka Network与求和 「SP34096」DIVCNTK - Counting Divisors (general) 「SP19985」GCDEX2 - GCD Extreme (hard) 「SP19975」APS2 - Amazing Prime Sequence (hard) 其它文献 https://www.luogu.org/blog/ShadowassIIXVIIIIV/solution-sp34096 https://www.cnblogs.com/zhoushuyu/p/9187319.html https://www.cnblogs.com/cjyyb/p/10169190.html","link":"/min-25-sieve-learning-notes/"},{"title":"动态树学习笔记","text":"24号要出去学习，趁现在先自己xjb学点啥。 基本概念首先我们有一道模板题。 我们所熟悉的树链剖分指的是重链剖分。也就是定义一个节点的子树大小最大的儿子为它的重儿子，连接重儿子的边叫做重边，若干条重边连在一起形成重链。除了重儿子以外的儿子被称为轻儿子，连接轻儿子的边叫做轻边。 这样一来，我们给原树的节点重新标号，使得一条重链上的所有节点的新标号是连续的，然后通过线段树或者树状数组等能够处理区间的数据结构进行维护，通过轻边合并两条重链上的信息。时间复杂度一般是$O(n\\log^{2}n)$。 但是这样有一个问题，因为线段树，又或者是树状数组，都是静态的数据结构，它们不能支持我们在上面xjb捣鼓。反映到原树上，这就意味着我们边的轻重只能也是静态的。这会带来很多不便。就比如说，我们现在要维护一片森林，要求支持动态连边、删边，同时需要查询某条链上的信息。 很明显这是重链剖分无法胜任的。为了解决这个问题，我们需要一种能够动态修改边的轻重的算法，也就是实链剖分。 实链剖分一般被称为LCT，全称Link-Cat Tree Linear Challestend Transformation Link-Cut Tree，也就是动态树。 与重链剖分类似地，我们根据实际情况，随便钦定一个节点的某个儿子为它的实儿子，连接实儿子的边叫做实边，若干条实边连在一起形成实链。除了实儿子以外的儿子被称为虚儿子，连接虚儿子的边叫做虚边。 为了实现它，我们需要通过更加灵活的Splay来维护每一条实链。它具有如下性质： 每棵Splay维护的是一条原森林中深度严格递增的路径，也就是一条实链。 每个节点属于且仅属于一棵Splay。 如果一个节点在原森林中有多个儿子，只有一个与它在同一颗Splay中，也就是实儿子。其他儿子所在的Splay的根节点有一根父指针指向这个节点，但是从这个节点访问不到它们。 不同于重链剖分，就算一个节点有至少一个儿子，也可以没有实儿子。 以下图片来自https://wenku.baidu.com/view/75906f160b4e767f5acfcedb。 我们来看这样一棵树 其中粗线表示实边，虚线表示虚边。 它所对应的Splay森林可能长下面这样，每一个绿框内都是一棵Splay。 当然这并不是唯一的。 为了方便，我先放出我Splay的代码实现 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970struct SplayNode{ SplayNode *ftr,*ls,*rs; int val,sum,rev; inline int isRoot(){ return ftr==NULL||(ftr-&gt;ls!=this&amp;&amp;ftr-&gt;rs!=this); //判断一个节点是否是原森林中的一棵树的树根 } inline void reverse(){ std::swap(ls,rs); rev^=1; } inline void pushDown(){ if(rev){ if(ls!=NULL) ls-&gt;reverse(); if(rs!=NULL) rs-&gt;reverse(); rev=0; } } inline void pushUp(){ sum=val; if(ls!=NULL) sum^=ls-&gt;sum; if(rs!=NULL) sum^=rs-&gt;sum; }};SplayNode mempool[maxn+1];inline void rotate(re SplayNode* p){ re SplayNode* q=p-&gt;ftr; q-&gt;pushDown(); p-&gt;pushDown(); p-&gt;ftr=q-&gt;ftr; if(p-&gt;ftr!=NULL){ if(p-&gt;ftr-&gt;ls==q) p-&gt;ftr-&gt;ls=p; if(p-&gt;ftr-&gt;rs==q) p-&gt;ftr-&gt;rs=p; } if(q-&gt;rs==p){ q-&gt;rs=p-&gt;ls; if(q-&gt;rs!=NULL) q-&gt;rs-&gt;ftr=q; p-&gt;ls=q; q-&gt;ftr=p; } else{ q-&gt;ls=p-&gt;rs; if(q-&gt;ls!=NULL) q-&gt;ls-&gt;ftr=q; p-&gt;rs=q; q-&gt;ftr=p; } q-&gt;pushUp(); p-&gt;pushUp();}inline void splay(re SplayNode* p){//不同于我们以前写的Splay，现在我们只需要将一个节点旋转到根即可 for(;!p-&gt;isRoot();rotate(p)) if(!p-&gt;ftr-&gt;isRoot()) rotate((p-&gt;ftr-&gt;ftr-&gt;ls==p-&gt;ftr)==(p-&gt;ftr-&gt;ls==p)?p-&gt;ftr:p);} access首先我们有一个基本操作 1void access(SplayNode*) 首先有一个问题是，这个单词怎么读？ /ək'ses/？不不不应该是/'ækses/。 如果您有兴趣，可以在这里看看自己以前都读错了多少单词（ 这个函数的作用是打通指定节点到根节点的路径，将这条路径修改成实链，并抛弃指定节点自身的实儿子。 我们来看看这个函数的具体过程。还是上面的例子，现在我们调用access(N)，整棵树会变成这样 虽然说好像图上用的还是轻重……不过这些细节就不要在意啦（ 首先我们调用splay(N)，令$\\text{N}$成为它所在的Splay的根节点，然后它所在的实链中再往下的部分就到了它的右子树中，我们直接回收它的右儿子指针即可。需要注意的是，我们并没有切断这条边，只是让它变虚，因此它的右儿子的父指针不应该被修改。 向上找到$\\text{N}$的父亲$\\text{I}$，调用splay(I)，回收$\\text{I}$的右儿子指针。不过这一次，我们需要再令其指向$\\text{N}$，然后$\\text{N}$就成了$\\text{I}$的实儿子了。 然后继续向上，找到$\\text{I}$的父亲$\\text{H}$，调用splay(H)，并令$\\text{H}$的右儿子指针指向$\\text{I}$。 最后一步，找到$\\text{H}$的父亲$\\text{A}$，调用splay(A)，并令$\\text{A}$的右儿子指针指向$\\text{H}$。 然后我们看到，$\\text{N}$和$\\text{A}$到了同一颗Splay中，完成任务，返回。 代码实现： 1234567891011121314inline void access(re SplayNode* p){ splay(p); p-&gt;pushDown(); p-&gt;rs=NULL; p-&gt;pushUp(); for(re SplayNode* q=p;q-&gt;ftr!=NULL;q=q-&gt;ftr){ splay(q-&gt;ftr); q-&gt;ftr-&gt;pushDown(); q-&gt;ftr-&gt;rs=q; q-&gt;ftr-&gt;pushUp(); } splay(p); //据说闲着没事瞎转转有利于摊开时间复杂度（} findRoot有了access，我们就可以随心所欲的瞎搞了。比如说 1SplayNode* findRoot(SplayNode*) 返回给定节点所在的树的树根，也就是调用完access后它所在的实链上深度最小的节点。 因为access的最后自带了一个splay，这个时候给定节点已经是Splay的根节点了，我们直接循环跳左儿子指针即可。 123456inline SplayNode* findRoot(re SplayNode* p){ access(p); for(;p-&gt;ls!=NULL;p=p-&gt;ls); splay(p); return p;} makeRoot &amp;&amp; split现在我们要提取出树上两个给定节点之间的路径。但是我们知道，这样的路径不一定满足深度严格递增，也就是说，它可能不能够出现在一棵Splay中。 不过办法总是有的。比如说我们指定了两个节点$x$和$y$，我们先调用access(x)，然后考虑翻转$x$的子树之后会发生什么。 access结束后，$x$没有右子树，翻转之后就没有了左子树，也就是说，现在没有比$x$的深度更小的节点了。换句话说就是，$x$现在成为了树根。 那么这样一来，$x$到$y$的路径就一定满足深度严格递增了，我们只需调用一次access(y)就可以把它抽出来。 我们实现下面两个函数 1void makeRoot(SplayNode*) 令给定节点成为树根。 1void split(SplayNode*,SplayNode*) 抽出给定的两个节点之间的路径。不过虽然说模板题保证联通，还是有必要稍微考虑一下不连通的情况的。 123456789inline void makeRoot(re SplayNode* p){ access(p); p-&gt;reverse();}inline void split(re SplayNode* p,re SplayNode* q){ makeRoot(p); access(q);} link我们需要实现函数 1void link(SplayNode*,SplayNode*) 在给定的两个节点间连一条边。特殊地，如果说给定的两个节点已经联通，什么都不做直接返回。不过这是模板题的要求，有些题可能会让你输出操作失败，这种情况下改一下返回值就行。 思路很简单。假设我们指定$x$和$y$两个节点，首先调用makeRoot(x)，然后检查findRoot(y)的返回值。如果不是$x$，说明两个节点不连通，将$x$的父指针指向$y$；否则，即findRoot(y)==x，说明两个节点联通，直接返回。 12345inline void link(re SplayNode* p,re SplayNode* q){ makeRoot(p); if(findRoot(q)!=p) p-&gt;ftr=q;} cut我们需要实现函数 1void cut(SplayNode*,SplayNode*) 切断给定的两个节点之间的边。不存在就什么也不做。 需要注意的是，两个节点$x$和$y$之间直接有边相连，不仅要求$x$与$y$联通，还要求它们在Splay中是相邻的两个节点。为了避免讨论深度的大小关系，我们先调用makeRoot(x)，此时$y$应该是$x$的右儿子，并且它不能有左儿子。 1234567inline void cut(re SplayNode* p,re SplayNode* q){ makeRoot(p); if(findRoot(q)==p&amp;&amp;q-&gt;ftr==p&amp;&amp;q-&gt;ls==NULL){ q-&gt;ftr=p-&gt;rs=NULL; p-&gt;pushUp(); }} 把上面这么一些东西写好之后，再根据题目要求搞一搞，您就可以切掉模板题了。 完整板子：include&lt;cstdio&gt;#include&lt;algorithm&gt;#define re register#define maxn 300000namespace cltstream{ #define size 1048576 char cltin[size+1],*ih=cltin,*it=cltin; inline char gc(){ #ifdef ONLINE_JUDGE if(ih==it){ it=(ih=cltin)+fread(cltin,1,size,stdin); if(ih==it) return EOF; } return *ih++; #else return getchar(); #endif } char cltout[size+1],*oh=cltout,*ot=cltout+size; inline void pc(char c){ if(oh==ot){ fwrite(cltout,1,size,stdout); oh=cltout; } *oh++=c; } #define clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout),cltstream::oh=cltstream::cltout #undef size template &lt;typename _tp&gt; inline void read(_tp&amp; x){ int sn=1; char c=gc(); for(;c!=45&amp;&amp;(c&lt;48||c&gt;57)&amp;&amp;c!=EOF;c=gc()); if(c==45&amp;&amp;c!=EOF) sn=-1,c=gc(); for(x=0;c&gt;=48&amp;&amp;c&lt;=57&amp;&amp;c!=EOF;x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=gc()); x*=sn; } template &lt;typename _tp&gt; inline void write(_tp x,char text=-1){ if(x&lt;0) pc(45),x=-x; if(!x) pc(48); else{ int digit[22]; for(digit[0]=0;x;digit[++digit[0]]=x%10,x/=10); for(;digit[0];pc(digit[digit[0]--]^48)); } if(text&gt;=0) pc(text); } template &lt;typename _tp&gt; inline void swap(_tp&amp; x,_tp&amp; y){ _tp z=x; x=y; y=z; }}struct LinkCutTree{ struct SplayNode{ SplayNode *ftr,*ls,*rs; int val,sum,rev; inline int isRoot(){ return ftr==NULL||(ftr-&gt;ls!=this&amp;&amp;ftr-&gt;rs!=this); } inline void reverse(){ std::swap(ls,rs); rev^=1; } inline void pushDown(){ if(rev){ if(ls!=NULL) ls-&gt;reverse(); if(rs!=NULL) rs-&gt;reverse(); rev=0; } } inline void pushUp(){ sum=val; if(ls!=NULL) sum^=ls-&gt;sum; if(rs!=NULL) sum^=rs-&gt;sum; } }; SplayNode mempool[maxn+1]; inline void rotate(re SplayNode* p){ re SplayNode* q=p-&gt;ftr; q-&gt;pushDown(); p-&gt;pushDown(); p-&gt;ftr=q-&gt;ftr; if(p-&gt;ftr!=NULL){ if(p-&gt;ftr-&gt;ls==q) p-&gt;ftr-&gt;ls=p; if(p-&gt;ftr-&gt;rs==q) p-&gt;ftr-&gt;rs=p; } if(q-&gt;rs==p){ q-&gt;rs=p-&gt;ls; if(q-&gt;rs!=NULL) q-&gt;rs-&gt;ftr=q; p-&gt;ls=q; q-&gt;ftr=p; } else{ q-&gt;ls=p-&gt;rs; if(q-&gt;ls!=NULL) q-&gt;ls-&gt;ftr=q; p-&gt;rs=q; q-&gt;ftr=p; } q-&gt;pushUp(); p-&gt;pushUp(); } inline void splay(re SplayNode* p){ for(;!p-&gt;isRoot();rotate(p)) if(!p-&gt;ftr-&gt;isRoot()) rotate((p-&gt;ftr-&gt;ftr-&gt;ls==p-&gt;ftr)==(p-&gt;ftr-&gt;ls==p)?p-&gt;ftr:p); } inline void build(re int n){ for(re int i=1;i&lt;=n;++i){ re SplayNode* p=mempool+i; p-&gt;ftr=p-&gt;ls=p-&gt;rs=NULL; cltstream::read(p-&gt;val); p-&gt;sum=p-&gt;val; p-&gt;rev=0; } } inline void access(re SplayNode* p){ splay(p); p-&gt;pushDown(); p-&gt;rs=NULL; p-&gt;pushUp(); for(re SplayNode* q=p;q-&gt;ftr!=NULL;q=q-&gt;ftr){ splay(q-&gt;ftr); q-&gt;ftr-&gt;pushDown(); q-&gt;ftr-&gt;rs=q; q-&gt;ftr-&gt;pushUp(); } splay(p); } inline SplayNode* findRoot(re SplayNode* p){ access(p); for(;p-&gt;ls!=NULL;p=p-&gt;ls); splay(p); return p; } inline void makeRoot(re SplayNode* p){ access(p); p-&gt;reverse(); } inline void split(re SplayNode* p,re SplayNode* q){ makeRoot(p); access(q); } inline void link(re SplayNode* p,re SplayNode* q){ makeRoot(p); if(findRoot(q)!=p) p-&gt;ftr=q; } inline void cut(re SplayNode* p,re SplayNode* q){ makeRoot(p); if(findRoot(q)==p&amp;&amp;q-&gt;ftr==p&amp;&amp;q-&gt;ls==NULL){ q-&gt;ftr=p-&gt;rs=NULL; p-&gt;pushUp(); } } inline int queryPathXorSum(re int x,re int y){ split(mempool+x,mempool+y); return (mempool+y)-&gt;sum; } inline void createEdge(re int x,re int y){ link(mempool+x,mempool+y); } inline void destoryEdge(re int x,re int y){ cut(mempool+x,mempool+y); } inline void modifyVertice(re int x,re int y){ splay(mempool+x); (mempool+x)-&gt;val=y; (mempool+x)-&gt;pushUp(); } void printTree(re SplayNode* p){ if(p!=NULL){ p-&gt;pushDown(); printTree(p-&gt;ls); printf( \"%d(%d,%d,%d)\\n\", p-mempool, p-&gt;ftr!=NULL?p-&gt;ftr-mempool:-1, p-&gt;ls!=NULL?p-&gt;ls-mempool:-1, p-&gt;rs!=NULL?p-&gt;rs-mempool:-1 ); printTree(p-&gt;rs); } }};int n,m;LinkCutTree QAQ;int main(){\\ cltstream::read(n); cltstream::read(m); QAQ.build(n); for(re int i=1;i&lt;=m;++i){ int opt,x,y; cltstream::read(opt); cltstream::read(x); cltstream::read(y); switch(opt){ case 0: cltstream::write(QAQ.queryPathXorSum(x,y),10); break; case 1: QAQ.createEdge(x,y); break; case 2: QAQ.destoryEdge(x,y); break; case 3: QAQ.modifyVertice(x,y); break; } } clop(); return 0;} 是不是感觉很好写呢（ 用LCT维护子树信息咕咕咕。","link":"/link-cut-tree-learning-notes/"},{"title":"2019-01-20：loli的两场模拟赛的题解","text":"今天loli搞了上午下午连续两场模拟赛，于是来写一篇题解。 上午记为D1，下午记为D2。 D1T1 简 - simple给你$2n$个数，让你配成$n$对数，每个数恰属于一对数，一对数的得分是其中的较小值，让你最大化得分和。 $n\\leqslant 100000$。 不予置评。 T2 单 - single给你一棵树，每个点有点权$a_{i}$，$dist(u,v)$表示$u$到$v$的树上路径经过的边数。定义 b_{u}=\\sum_{i=1}^{n}dist(u,i)a_{i}还会给你一个$\\text{tp}$，$\\text{tp}=0$时给你$\\{a_{n}\\}$让你求$\\{b_{n}\\}$，$\\text{tp}=1$时给你$\\{b_{n}\\}$让你求$\\{a_{n}\\}$。多组数据。 $n\\leqslant 100000,T\\leqslant 5$。 $\\text{tp}=0$时就是一个简单的树形DP。 $\\text{tp}=1$……高斯消元？不是很会写而且$O(n^{3})$会T飞啊（ 他给的题解我也没看懂（ 我就打了$\\text{tp}=0$的$30$分。 T3 题 - problem有一个平面直角坐标系。一开始你在原点，每次移动可以从$(x,y)$移动到$(x+1,y)$，$(x-1,y)$，$(x,y+1)$，$(x,y-1)$。再给你一个无穷点集$S$，你只能停留在这个点集内的点上，问你恰好$n$步后回到原点的方案数。对$10^{9}+7$取模。 关于$S$，首先会给你一个$\\text{tp}$，然后$S$如下定义 S=\\begin{cases} &\\{(x,y)\\mid x,y\\in\\mathbb{Z}\\}\\;\\;&(\\text{tp}=0)\\\\ &\\{(x,y)\\mid x\\in\\mathbb{N},y=0\\}&(\\text{tp}=1)\\\\ &\\{(x,y)\\mid xy=0\\}&(\\text{tp}=2)\\\\ &\\{(x,y)\\mid x,y\\in\\mathbb{N}\\}&(\\text{tp}=3) \\end{cases}$n\\leqslant 100000$，$n\\equiv 0\\pmod{2}$，$\\text{tp}\\in\\{0,1,2,3\\}$。特殊地，当$\\text{tp}=2$时$n\\leqslant 1000$。 四合一数论提答（ 很明显，无论是$x$坐标上还是$y$坐标上，我们都需要移动偶数次。再加上$n$保证是偶数，我们可以将$n$除以$2$，然后走$2n$步。 $\\text{tp}=0$时，我们枚举$2i$步沿$x$轴方向走，$2(n-i)$步沿$y$轴方向走。我们可以将这抽象成一个序列，其中有$i$个$x+1/x-1$，$n-i$个$y+1/y-1$，总排列方案数就是$\\cfrac{(2n)!}{i!i!(n-i)!(n-i)!}$。因此 \\text{Ans}=(2n)!\\sum_{i=0}^{n}\\cfrac{1}{i!i!(n-i)!(n-i)!}$\\text{tp}=1$直接卡特兰数。 $\\text{tp}=2$比较特殊。因为我们不能离开坐标系，一旦我们离开了原点，我们必须要先走回原点，才能沿着另一个坐标轴的方向继续走。我们可以考虑两种不同的括号，不同种括号之间不能嵌套，然后问有多少个长度为$2n$的序列是匹配的。 如果说我们有连续一段一共$i$对同种括号，不难发现排列方案数是$\\cfrac{(2i)!}{i!i!}$，于是我们就有了一个$O(n^{2})$的DP f[x]=\\sum_{i=1}^{x}f[x-i]\\cfrac{(2i)!}{i!i!}其实如果改一下模数的话这个东西可以用NTT优化到$O(n\\log n)$的。虽然现在这个样子MTT也能搞……但是我不会写（ $\\text{tp}=3$大概是$\\text{tp}=0$与$\\text{tp}=1$的结合。枚举沿$x$轴方向走多少步，然后两个方向分别卡特兰，然后把两个序列合并起来。于是 \\begin{aligned} \\text{Ans}&=\\sum_{i=0}^{n}C_{2n}^{2i}C_{i}C_{n-i}\\\\ &=\\sum_{i=0}^{n}\\cfrac{(2n)!}{(2i)!(2(n-i))!}\\left(\\cfrac{(2i)!}{i!i!}-\\cfrac{(2i)!}{(i+1)!(i-1)!}\\right)\\left(\\cfrac{(2(n-i))!}{(n-i)!(n-i)!}-\\cfrac{(2(n-i))!}{(n-i+1)!(n-i-1)!}\\right)\\\\ &=(2n)!\\sum_{i=0}^{n}\\left(\\cfrac{1}{i!i!}-\\cfrac{1}{(i+1)!(i-1)!}\\right)\\left(\\cfrac{1}{(n-i)!(n-i)!}-\\cfrac{1}{(n-i+1)!(n-i-1)!}\\right) \\end{aligned}于是愉快地$230$直接rank1（ 话说wzx打了$240$分的啊……然而炸成$210$（ D2T1 印章 - seal给你一张$n\\times m$的纸，上面有些格子要印墨水。你有一个$r\\times c$的印章，上面有些格子是凸起的可以印。纸和印章不可以旋转，不可以重复印同一个格子，不可以把墨水印到纸外面去。问是否可行。多组数据。 $n,m,r,c\\leqslant 1000,T\\leqslant 10$。 首先我们不难想出一个$O((n-r)(m-c)rc)$也就是差不多$O(n^{4})$的暴力。不过这样只有$60$分。当时我用了一个bitset瞎搞了一波把复杂度降到了$O(n^{3})$，然而……并没有什么用（ 拿了$60$就跑（ T2 多边形 - polygon一个$0-n$边形被定义为一个正常的$n$边形。对于一个$k-n$边形，对于它最外层的每一条边，我们向外做$n$边形，得到一个$(k+1)-n$边形。 这是一个$0-4$边形 这是一个$1-4$边形 这是一个$2-4$边形 给你一个$k-n$边形，问你它的生成树数量。对$998244353$取模。 $0\\leqslant k\\leqslant 10^{6},3\\leqslant n\\leqslant 10^{9}$。 告辞（ 彻底放弃治疗（ T3 扔球 - ball给你$n$个球和$n$个瓶子，编号从$1$到$n$。每个球只能扔到指定集合的瓶子里。对于每个球，把它指定集合里的瓶子按编号从小到大排序，然后依次往里面扔球。每次扔进去的概率是$p$，扔不进去就试下一个瓶子，试完所有瓶子一遍还是没扔进去就从头再来一遍直到扔进去为止。指定集合为空就跳过这个球。 所有球扔完之后，记$i$号球被扔进了$a_{i}$号瓶子，问你$\\{a_{n}\\}$的期望逆序对数量。四舍五入保留两位小数。 如果扔球时跳过了$i$号球，那么当做$a_{i}$不存在。 $n\\leqslant 500000,0.4\\leqslant p\\leqslant 0.6$。记$i$号球的指定集合为$S_{i}$，$\\Sigma|S_{i}|\\leqslant 500000$。 从后往前扫，扫到$x$时枚举$a_{x}$的可能取值$y$，将答案累加上$a_{x}=y$的概率与$a_{x+1}$到$a_{n}$中小于$y$的数的数量的期望值的乘积。然后$a_{x}$到$a_{n}$中$y$的出现次数的期望值就是$a_{x+1}$到$a_{n}$中$y$的出现次数的期望值再加上$a_{x}=y$的概率。 套个树状数组就行。 但是等会，$a_{x}=y$的概率怎么算啊。 首先我们考虑集合中最小的那个数，把球扔进那个瓶子的概率应该是 \\begin{aligned} \\lim_{n\\rightarrow+\\infty}\\sum_{i=0}^{n}(1-p)^{i|S_{x}|}p&=p\\cfrac{(1-p)^{(n+1)|S_{x}|}-1}{(1-p)^{|S_{x}|}-1}\\\\ &=\\cfrac{p}{1-(1-p)^{|S_{x}|}} \\end{aligned}那么第$2$小呢？首先我们第一次扔不能扔进去，所以首先需要乘个$1-p$，然后就和上面一样了。依次类推，扔进编号第$i$小的瓶子的概率为 \\cfrac{p(1-p)^{i-1}}{1-(1-p)^{|S_{x}|}}最后总分只有$160$，被$190$分的wzx吊着打（","link":"/lolioi-2019-01-20-solutions/"},{"title":"「HEOI2016&#x2F;TJOI2016」求和","text":"传送门 感觉最近意志消沉啥也不想干，于是继续来颓blog（ 仔细一推发现也不是什么很难的题，感觉几天前的自己就是个傻子（ 首先我们知道如果$n\\gt m$，$S(n,m)=0$。于是我们将原式写成 \\sum_{i=0}^{n}\\sum_{j=0}^{n}2^{j}j!S(i,j)=\\sum_{j=0}^{n}2^{j}j!\\sum_{i=0}^{n}S(i,j)第二类斯特林数有一个通项公式，它长这样 S(n,m)=\\cfrac{1}{m!}\\sum_{i=0}^{m}(-1)^{i}C(m,i)(m-i)^{n}直观理解一下，$S(n,m)$说的是将$n$个有标号的小球放进$m$个无标号的盒子，且不允许空盒的方案数。我们令$F(n,m,k)$表示将$n$个有标号的小球放进$m$个有标号的盒子，且其中至少有$k$个空盒的方案数。不难发现 F(n,m,k)=C(m,k)(m-k)^{n}然后我们容斥一下，得到将$n$个有标号的小球放进$m$个有标号的盒子，且不允许空盒的方案数$G(n,m)$。不难发现 G(n,m)=\\sum_{i=0}^{m}(-1)^{i}F(n,m,i)=\\sum_{i=0}^{m}(-1)^{i}C(m,i)(m-i)^{n}因为$S(n,m)$的定义中要求盒子无标号，我们再除以盒子的排列方案$m!$即可。 然后我们继续推式子 \\begin{aligned} \\sum_{j=0}^{n}2^{j}j!\\sum_{i=0}^{n}S(i,j)&=\\sum_{j=0}^{n}2^{j}j!\\sum_{i=0}^{n}\\cfrac{1}{j!}\\sum_{k=0}^{j}(-1)^{k}C(j,k)(j-k)^{i}\\\\ &=\\sum_{j=0}^{n}2^{j}j!\\sum_{i=0}^{n}\\cfrac{1}{j!}\\sum_{k=0}^{j}(-1)^{k}\\cfrac{j!}{k!(j-k)!}(j-k)^{i}\\\\ &=\\sum_{j=0}^{n}2^{j}j!\\sum_{i=0}^{n}\\sum_{k=0}^{j}\\cfrac{(-1)^{k}}{k!(j-k)!}(j-k)^{i}\\\\ &=\\sum_{j=0}^{n}2^{j}j!\\sum_{k=0}^{j}\\cfrac{(-1)^{k}}{k!(j-k)!}\\sum_{i=0}^{n}(j-k)^{i} \\end{aligned}我们看到右边就是一个等比数列求和，于是 \\sum_{j=0}^{n}2^{j}j!\\sum_{k=0}^{j}\\cfrac{(-1)^{k}}{k!(j-k)!}\\sum_{i=0}^{n}(j-k)^{i}=\\sum_{j=0}^{n}2^{j}j!\\sum_{k=0}^{j}\\cfrac{(-1)^{k}}{k!}\\cfrac{(j-k)^{n+1}-1}{(j-k)!(j-k-1)}定义 F[i]=\\cfrac{(-1)^{i}}{i!}右边的等比数列求和比较麻烦，我们需要一些特判。 G[i]=\\begin{cases} &1&(i=0)\\\\ &n+1&(i=1)\\\\ &\\cfrac{i^{n+1}-1}{i!(i-1)}\\;\\;&(i>1) \\end{cases}然后我们就有 \\sum_{j=0}^{n}2^{j}j!\\sum_{k=0}^{j}\\cfrac{(-1)^{k}}{k!}\\cfrac{(j-k)^{n+1}-1}{(j-k)!(j-k-1)}=\\sum_{j=0}^{n}2^{j}j!(F\\times G)[j]这么一想前几天的我还只会暴力二项式定理展开（","link":"/luogu-p4091-solution/"},{"title":"有上下界的网络流问题与预留推进学习笔记","text":"感觉最近好颓啊（ 这是一篇正在咕咕咕的blog。 无源汇有上下界可行流我们发现，这道题中每条边的流量有一个下界。相比起我们以前做过的网络流题目，我们发现它们并不对流量下界作出要求，也就是说，下界都是$0$。一种简单的想法就是，将每条边的流量上界置为$\\text{upper}(e)-\\text{lower}(e)$，下界置为$0$。然后我们发现，这样做可能会导致流量不平衡，我们需要调整。令 w(u)=\\sum_{v\\in V,(v,u)\\in E}\\text{lower}((v,u))-\\sum_{v\\in V,(u,v)\\in E}\\text{lower}((u,v)) 如果$w(u)=0$，说明我们不需要对点$u$做出调整。 如果$w(u)\\gt 0$，说明调整上下界后，流入$u$的流量减少地要比流出$u$的流量多，我们就建立一个源点，从其向点$u$连一条流量上界为$w(u)$的边。 如果$w(u)\\lt 0$，说明调整上下界后，流出$u$的流量减少地要比流入$u$的流量多，我们就建立一个汇点，从点$u$向其连一条流量上界为$-w(u)$的边。 然后直接跑一边从源点到汇点的最大流即可。 需要注意的是我们额外向图中加入的边，加入它们的目的是为了平衡流量，易知，如果它们没有完全满载，就一定不能完全平衡原图的流量，此时问题无解。 否则，我们就已经构造出了一组可行解。 有源汇有上下界最大流这道题与上面的区别在于限制了源点和汇点，并且要求求出最大流。 我们可以从汇点到源点连一条流量上界为$+\\infty$的边，然后这整个网络就循环了，然后我们跑一遍无源汇有上下界可行流。 需要注意的是，我们毕竟只是求出了可行流，原图可能还并没有满载。因此，我们删去之前求解可行流时创建的超源和超汇，在原图的残余网络上再跑一边最大流，两次的流量之和就是问题的解。 当然，求解可行流时无解的话，整个问题无解。 有源汇有上下界最小流还没看懂，先咕着。 最高标号预流推进（HLPP-Highest Label Preflow Pushing？）还没看懂，先咕着。","link":"/something-about-network-flow-learning-notes/"},{"title":"类欧几里得算法学习笔记","text":"其实我也不知道这个算法的英文名是啥（ 我就yy出来一个「Similar Euclid Algorithm」（ 给你六个非负整数$n,a,b,c,k_{1},k_{2}$，你需要求出 \\sum_{i=0}^{n}i^{k_{1}}\\lfloor\\cfrac{ai+b}{c}\\rfloor^{k_{2}}\\pmod{1000000007}$n,a,b,c\\leqslant 10^{9}$，$k_{1}+k_{2}\\leqslant 10$。 太难了，告辞（ 所以我们现在来研究简单一点的。 给你四个非负整数$n,a,b,c$，你需要求出 \\begin{aligned} f(n,a,b,c)&\\equiv\\sum_{i=0}^{n}\\lfloor\\cfrac{ai+b}{c}\\rfloor\\pmod{998244353}\\\\ g(n,a,b,c)&\\equiv\\sum_{i=0}^{n}i\\lfloor\\cfrac{ai+b}{c}\\rfloor\\pmod{998244353}\\\\ h(n,a,b,c)&\\equiv\\sum_{i=0}^{n}\\lfloor\\cfrac{ai+b}{c}\\rfloor^{2}\\pmod{998244353} \\end{aligned}$n,a,b,c\\leqslant 10^{9}$，$10^{5}$组询问。 传送门 于是我们开始愉快地推式子。首先我们暂不考虑取模，也就是下文中先用等号代替同余。 首先考虑$f(n,a,b,c)$，假设$a\\geqslant c\\vee b\\geqslant c$ \\begin{aligned} f(n,a,b,c)&=\\sum_{i=0}^{n}\\lfloor\\cfrac{ai+b}{c}\\rfloor\\\\ &=\\sum_{i=0}^{n}\\left(\\lfloor\\cfrac{(a\\operatorname{mod}c)i+(b\\operatorname{mod}c)}{c}\\rfloor+i\\lfloor\\cfrac{a}{c}\\rfloor+\\lfloor\\cfrac{b}{c}\\rfloor\\right)\\\\ &=\\sum_{i=0}^{n}\\lfloor\\cfrac{(a\\operatorname{mod}c)i+(b\\operatorname{mod}c)}{c}\\rfloor+\\cfrac{n(n+1)}{2}\\lfloor\\cfrac{a}{c}\\rfloor+(n+1)\\lfloor\\cfrac{b}{c}\\rfloor\\\\ &=f(n,a\\operatorname{mod}c,b\\operatorname{mod}c,c)+\\cfrac{n(n+1)}{2}\\lfloor\\cfrac{a}{c}\\rfloor+(n+1)\\lfloor\\cfrac{b}{c}\\rfloor \\end{aligned}也就是说，我们只需要重点关注$a\\lt c\\wedge b\\lt c$时的情况即可。我们令$m=\\lfloor\\cfrac{an+b}{c}\\rfloor$，然后继续往下推 \\begin{aligned} f(n,a,b,c)&=\\sum_{i=0}^{n}\\lfloor\\cfrac{ai+b}{c}\\rfloor\\\\ &=\\sum_{i=0}^{n}\\sum_{j=1}^{m}\\left[j\\leqslant\\lfloor\\cfrac{ai+b}{c}\\rfloor\\right]\\\\ &=\\sum_{i=0}^{n}\\sum_{j=0}^{m-1}\\left[cj+c\\leqslant ai+b\\right]\\\\ &=\\sum_{i=0}^{n}\\sum_{j=0}^{m-1}\\left[ai\\geqslant cj+c-b\\right]\\\\ &=\\sum_{i=0}^{n}\\sum_{j=0}^{m-1}\\left[i\\geqslant\\cfrac{cj+c-b}{a}\\right]\\\\ \\end{aligned}然后我们发现，我们可能需要在$\\cfrac{cj+c-b}{a}$周围来一个上取整，然而上取整并没有什么比较好的性质。 考虑转换一下思路。既然$cj+c\\leqslant ai+b$，我们就有$cj+c\\lt ai+b+1$，然后再往下 \\begin{aligned} f(n,a,b,c)&=\\sum_{i=0}^{n}\\sum_{j=0}^{m-1}\\left[cj+c\\lt ai+b+1\\right]\\\\ &=\\sum_{i=0}^{n}\\sum_{j=0}^{m-1}\\left[ai\\gt cj+c-b-1\\right]\\\\ &=\\sum_{i=0}^{n}\\sum_{j=0}^{m-1}\\left[i\\gt\\lfloor\\cfrac{cj+c-b-1}{a}\\rfloor\\right]\\\\ &=\\sum_{j=0}^{m-1}\\left(n-\\lfloor\\cfrac{cj+c-b-1}{a}\\rfloor\\right)\\\\ &=mn-\\sum_{j=0}^{m-1}\\lfloor\\cfrac{cj+c-b-1}{a}\\rfloor\\\\ &=mn-f(m-1,c,c-b-1,a) \\end{aligned}然后我们看到，这个函数它递归了！ 注意到$(a,b,c)$变成了$(c,c-b-1,a)$，虽然我不是很能理解，反正这个东西最多递归$\\log a$次，时间复杂度就是$O(\\log a)$了。 然后考虑$g(n,a,b,c)$。 $a\\geqslant c\\vee b\\geqslant c$： \\begin{aligned} g(n,a,b,c)&=\\sum_{i=0}^{n}i\\lfloor\\cfrac{ai+b}{c}\\rfloor\\\\ &=\\sum_{i=0}^{n}\\left(i\\lfloor\\cfrac{(a\\operatorname{mod}c)i+(b\\operatorname{mod}c)}{c}\\rfloor+i^{2}\\lfloor\\cfrac{a}{c}\\rfloor+i\\lfloor\\cfrac{b}{c}\\rfloor\\right)\\\\ &=\\sum_{i=0}^{n}i\\lfloor\\cfrac{(a\\operatorname{mod}c)i+(b\\operatorname{mod}c)}{c}\\rfloor+\\cfrac{n(n+1)(2n+1)}{6}\\lfloor\\cfrac{a}{c}\\rfloor+\\cfrac{n(n+1)}{2}\\lfloor\\cfrac{b}{c}\\rfloor\\\\ &=g(n,a\\operatorname{mod}c,b\\operatorname{mod}c,c)+\\cfrac{n(n+1)(2n+1)}{6}\\lfloor\\cfrac{a}{c}\\rfloor+\\cfrac{n(n+1)}{2}\\lfloor\\cfrac{b}{c}\\rfloor \\end{aligned}$a\\lt c\\wedge b\\lt c$，当然$m$还是$\\lfloor\\cfrac{an+b}{c}\\rfloor$： \\begin{aligned} g(n,a,b,c)&=\\sum_{i=0}^{n}i\\lfloor\\cfrac{ai+b}{c}\\rfloor\\\\ &=\\sum_{i=0}^{n}\\sum_{j=1}^{m}i\\left[j\\leqslant\\lfloor\\cfrac{ai+b}{c}\\rfloor\\right]\\\\ &=\\sum_{i=0}^{n}\\sum_{j=0}^{m-1}i\\left[i\\gt\\lfloor\\cfrac{cj+c-b-1}{a}\\rfloor\\right] \\end{aligned}我们可以把上面这个式子理解成$\\gt\\lfloor\\cfrac{cj+c-b-1}{a}\\rfloor$且$\\leqslant n$的所有自然数之和，于是差分一下我们得到 \\begin{aligned} g(n,a,b,c)&=\\sum_{j=0}^{m-1}\\left(\\cfrac{n(n+1)}{2}-\\cfrac{1}{2}\\lfloor\\cfrac{cj+c-b-1}{a}\\rfloor^{2}-\\cfrac{1}{2}\\lfloor\\cfrac{cj+c-b-1}{a}\\rfloor\\right)\\\\ &=\\cfrac{mn(n+1)}{2}-\\cfrac{1}{2}\\sum_{j=0}^{m-1}\\lfloor\\cfrac{cj+c-b-1}{a}\\rfloor^{2}-\\cfrac{1}{2}\\sum_{j=0}^{m-1}\\lfloor\\cfrac{cj+c-b-1}{a}\\rfloor\\\\ &=\\cfrac{mn(n+1)}{2}-\\cfrac{1}{2}h(m-1,c,c-b-1,a)-\\cfrac{1}{2}f(m-1,c,c-b-1,a) \\end{aligned}我们看到这个函数调用了$h(n,a,b,c)$，我们接下来就来研究一下这个函数。 $a\\geqslant c\\vee b\\geqslant c$： \\begin{aligned} h(n,a,b,c)&=\\sum_{i=0}^{n}\\lfloor\\cfrac{ai+b}{c}\\rfloor^{2}\\\\ &=\\sum_{i=0}^{n}\\left(\\lfloor\\cfrac{(a\\operatorname{mod}c)i+(b\\operatorname{mod}c)}{c}\\rfloor+i\\lfloor\\cfrac{a}{c}\\rfloor+\\lfloor\\cfrac{b}{c}\\rfloor\\right)^{2}\\\\ &=\\sum_{i=0}^{n}\\left( \\lfloor\\cfrac{(a\\operatorname{mod}c)i+(b\\operatorname{mod}c)}{c}\\rfloor^{2} +i^{2}\\lfloor\\cfrac{a}{c}\\rfloor^{2} +\\lfloor\\cfrac{b}{c}\\rfloor^{2} +2i\\lfloor\\cfrac{a}{c}\\rfloor\\lfloor\\cfrac{(a\\operatorname{mod}c)i+(b\\operatorname{mod}c)}{c}\\rfloor +2\\lfloor\\cfrac{b}{c}\\rfloor\\lfloor\\cfrac{(a\\operatorname{mod}c)i+(b\\operatorname{mod}c)}{c}\\rfloor +2i\\lfloor\\cfrac{a}{c}\\rfloor\\lfloor\\cfrac{b}{c}\\rfloor \\right)\\\\ &= \\sum_{i=0}^{n}\\lfloor\\cfrac{(a\\operatorname{mod}c)i+(b\\operatorname{mod}c)}{c}\\rfloor^{2} +\\cfrac{n(n+1)(2n+1)}{6}\\lfloor\\cfrac{a}{c}\\rfloor^{2} +(n+1)\\lfloor\\cfrac{b}{c}\\rfloor^{2}\\\\& +2\\lfloor\\cfrac{a}{c}\\rfloor\\sum_{i=0}^{n}i\\lfloor\\cfrac{(a\\operatorname{mod}c)i+(b\\operatorname{mod}c)}{c}\\rfloor +2\\lfloor\\cfrac{b}{c}\\rfloor\\sum_{i=0}^{n}\\lfloor\\cfrac{(a\\operatorname{mod}c)i+(b\\operatorname{mod}c)}{c}\\rfloor +n(n+1)\\lfloor\\cfrac{a}{c}\\rfloor\\lfloor\\cfrac{b}{c}\\rfloor \\\\ &= h(n,a\\operatorname{mod}c,b\\operatorname{mod}c,c) +2\\lfloor\\cfrac{a}{c}\\rfloor g(n,a\\operatorname{mod}c,b\\operatorname{mod}c,c) +2\\lfloor\\cfrac{b}{c}\\rfloor f(n,a\\operatorname{mod}c,b\\operatorname{mod}c,c)\\\\& +\\cfrac{n(n+1)(2n+1)}{6}\\lfloor\\cfrac{a}{c}\\rfloor^{2} +(n+1)\\lfloor\\cfrac{b}{c}\\rfloor^{2} +n(n+1)\\lfloor\\cfrac{a}{c}\\rfloor\\lfloor\\cfrac{b}{c}\\rfloor \\end{aligned}您绝对想象不到上面这一坨子东西的$\\TeX$源码长什么样（ $a\\lt c\\wedge b\\lt c$： \\begin{aligned} h(n,a,b,c)&=\\sum_{i=0}^{n}\\lfloor\\cfrac{ai+b}{c}\\rfloor^{2}\\\\ &=\\sum_{i=0}^{n}\\sum_{j=1}^{m^{2}}\\left[j\\leqslant\\lfloor\\cfrac{ai+b}{c}\\rfloor^{2}\\right]\\\\ &=\\sum_{i=0}^{n}\\sum_{j=0}^{m^{2}-1}\\left[c^{2}j+c^{2}\\lt a^{2}i^{2}+2abi+b^{2}+1\\right]\\\\ &=\\sum_{i=0}^{n}\\sum_{j=0}^{m^{2}-1}\\left[i\\gt\\sqrt{\\lfloor\\cfrac{c^{2}j+c^{2}-2abi-b^{2}-1}{a^{2}}\\rfloor}\\right] \\end{aligned} 然后我们发现推不下去了。 不过办法总是有的。首先我们有一个看起来没啥用的式子 x^{2}=2\\sum_{i=1}^{n}i-x套进去 \\begin{aligned} h(n,a,b,c)&=\\sum_{i=0}^{n}\\lfloor\\cfrac{ai+b}{c}\\rfloor^{2}\\\\ &=\\sum_{i=0}^{n}\\left(2\\sum_{j=1}^{\\lfloor\\tfrac{ai+b}{c}\\rfloor}j-\\lfloor\\cfrac{ai+b}{c}\\rfloor\\right)\\\\ &=2\\sum_{i=0}^{n}\\sum_{j=1}^{\\lfloor\\tfrac{ai+b}{c}\\rfloor}j-\\sum_{i=0}^{n}\\lfloor\\cfrac{ai+b}{c}\\rfloor\\\\ &=2\\sum_{j=1}^{m}j\\sum_{i=0}^{n}\\left[j\\leqslant\\lfloor\\cfrac{ai+b}{c}\\rfloor\\right]-f(n,a,b,c)\\\\ &=2\\sum_{j=0}^{m-1}(j+1)\\sum_{i=0}^{n}\\left[i\\gt\\lfloor\\cfrac{cj+c-b-1}{a}\\rfloor\\right]-f(n,a,b,c)\\\\ &=2\\sum_{j=0}^{m-1}(j+1)\\left(n-\\lfloor\\cfrac{cj+c-b-1}{a}\\rfloor\\right)-f(n,a,b,c)\\\\ &=m(m+1)n-2\\sum_{j=0}^{m-1}j\\lfloor\\cfrac{cj+c-b-1}{a}\\rfloor-2\\sum_{j=0}^{m-1}\\lfloor\\cfrac{cj+c-b-1}{a}\\rfloor-f(n,a,b,c)\\\\ &=m(m+1)n-2g(m-1,c,c-b-1,a)-2f(m-1,c,c-b-1,a)-f(n,a,b,c)\\\\ \\end{aligned}然后我们看到它奇迹般地递归了！ 我们来总结一下。 f(n,a,b,c)=\\sum_{i=0}^{n}\\lfloor\\cfrac{ai+b}{c}\\rfloor=\\begin{cases} &f(n,a\\operatorname{mod}c,b\\operatorname{mod}c,c)+\\cfrac{n(n+1)}{2}\\lfloor\\cfrac{a}{c}\\rfloor+(n+1)\\lfloor\\cfrac{b}{c}\\rfloor\\;\\;&(a\\geqslant c\\vee b\\geqslant c)\\\\ &mn-f(m-1,c,c-b-1,a)&(a\\lt c\\wedge b\\lt c) \\end{cases}g(n,a,b,c)=\\sum_{i=0}^{n}i\\lfloor\\cfrac{ai+b}{c}\\rfloor=\\begin{cases} &g(n,a\\operatorname{mod}c,b\\operatorname{mod}c,c)+\\cfrac{n(n+1)(2n+1)}{6}\\lfloor\\cfrac{a}{c}\\rfloor+\\cfrac{n(n+1)}{2}\\lfloor\\cfrac{b}{c}\\rfloor\\;\\;&(a\\geqslant c\\vee b\\geqslant c)\\\\ &\\cfrac{mn(n+1)}{2}-\\cfrac{1}{2}h(m-1,c,c-b-1,a)-\\cfrac{1}{2}f(m-1,c,c-b-1,a)&(a\\lt c\\wedge b\\lt c) \\end{cases}h(n,a,b,c)=\\sum_{i=0}^{n}\\lfloor\\cfrac{ai+b}{c}\\rfloor^{2}=\\begin{cases} &h(n,a\\operatorname{mod}c,b\\operatorname{mod}c,c) +2\\lfloor\\cfrac{a}{c}\\rfloor g(n,a\\operatorname{mod}c,b\\operatorname{mod}c,c) +2\\lfloor\\cfrac{b}{c}\\rfloor f(n,a\\operatorname{mod}c,b\\operatorname{mod}c,c)\\\\& +\\cfrac{n(n+1)(2n+1)}{6}\\lfloor\\cfrac{a}{c}\\rfloor^{2} +(n+1)\\lfloor\\cfrac{b}{c}\\rfloor^{2} +n(n+1)\\lfloor\\cfrac{a}{c}\\rfloor\\lfloor\\cfrac{b}{c}\\rfloor\\;\\; &(a\\geqslant c\\vee b\\geqslant c)\\\\ &m(m+1)n-2g(m-1,c,c-b-1,a)-2f(m-1,c,c-b-1,a)-f(n,a,b,c)&(a\\lt c\\wedge b\\lt c) \\end{cases}但是还有一个细节，如果说$n=0$或$a=0$，我们需要直接特判，大概像这样： f(n,a,b,c)=\\begin{cases} &\\lfloor\\cfrac{b}{c}\\rfloor\\;\\;&(n=0)\\\\ &(n+1)\\lfloor\\cfrac{b}{c}\\rfloor&(a=0) \\end{cases}g(n,a,b,c)=\\begin{cases} &0\\;\\;&(n=0)\\\\ &\\cfrac{n(n+1)}{2}\\lfloor\\cfrac{b}{c}\\rfloor&(a=0) \\end{cases}h(n,a,b,c)=\\begin{cases} &\\lfloor\\cfrac{b}{c}\\rfloor^{2}&(n=0)\\\\ &(n+1)\\lfloor\\cfrac{b}{c}\\rfloor^{2}&(a=0) \\end{cases}另外写的时候注意三个函数值要套在结构体里一起算，不然还是会T。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#include&lt;cstdio&gt;#define re register#define mod 998244353namespace cltstream{ #define size 1048576 char cltin[size+1],*ih=cltin,*it=cltin; inline char gc(){ #ifdef ONLINE_JUDGE if(ih==it){ it=(ih=cltin)+fread(cltin,1,size,stdin); if(ih==it) return EOF; } return *ih++; #else return getchar(); #endif } char cltout[size+1],*oh=cltout,*ot=cltout+size; inline void pc(char c){ if(oh==ot){ fwrite(cltout,1,size,stdout); oh=cltout; } *oh++=c; } #define clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout),cltstream::oh=cltstream::cltout #undef size template &lt;typename _tp&gt; inline void read(_tp&amp; x){ int sn=1; char c=gc(); for(;c!=45&amp;&amp;(c&lt;48||c&gt;57)&amp;&amp;c!=EOF;c=gc()); if(c==45&amp;&amp;c!=EOF) sn=-1,c=gc(); for(x=0;c&gt;=48&amp;&amp;c&lt;=57&amp;&amp;c!=EOF;x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=gc()); x*=sn; } template &lt;typename _tp&gt; inline void write(_tp x,char text=-1){ if(x&lt;0) pc(45),x=-x; if(!x) pc(48); else{ int digit[22]; for(digit[0]=0;x;digit[++digit[0]]=x%10,x/=10); for(;digit[0];pc(digit[digit[0]--]^48)); } if(text&gt;=0) pc(text); }}int t,a,b,c,n,I2=499122177,I6=166374059;struct Query{ int f,g,h; Query(re int _f,re int _g,re int _h){ f=_f; g=_g; h=_h; }};inline Query query(re int a,re int b,re int c,re int n){ if(!n){ b/=c; return Query(b,0,1LL*b*b%mod); } if(!a){ b/=c; return Query(1LL*(n+1)*b%mod,1LL*n*(n+1)%mod*I2%mod*b%mod,1LL*(n+1)*b%mod*b%mod); } if(a&gt;=c||b&gt;=c){ re Query res=query(a%c,b%c,c,n); a/=c, b/=c; return Query( (res.f+1LL*n*(n+1)%mod*I2%mod*a%mod+1LL*(n+1)*b%mod)%mod, (res.g+1LL*n*(n+1)%mod*(2*n+1)%mod*I6%mod*a%mod+1LL*n*(n+1)%mod*I2%mod*b%mod)%mod, (res.h+2LL*a*res.g%mod+2LL*b*res.f%mod +1LL*n*(n+1)%mod*(2*n+1)%mod*I6%mod*a%mod*a%mod +1LL*(n+1)*b%mod*b%mod+1LL*n*(n+1)%mod*a%mod*b%mod)%mod ); } else{ re int m=(1LL*a*n+b)/c; re Query res=query(c,c-b-1,a,m-1); re int tmp=((1LL*m*n%mod-res.f)%mod+mod)%mod; return Query( tmp, ((1LL*m*n%mod*(n+1)%mod-res.h-res.f)%mod+mod)*I2%mod, ((1LL*m*(m+1)%mod*n%mod-2LL*res.g%mod-2LL*res.f%mod-tmp)%mod+mod)%mod ); }}int main(){ cltstream::read(t); for(;t;--t){ cltstream::read(n); cltstream::read(a); cltstream::read(b); cltstream::read(c); Query ans=query(a,b,c,n); cltstream::write(ans.f,32); cltstream::write(ans.h,32); cltstream::write(ans.g,10); } clop(); return 0;} 那么问题来了，这个东西有什么用啊。 没啥用（ 其他的模板题我就不举了，我们来看一下这样一道题。 看到推平操作我们可以直接往珂朵莉树上想了。 那么对于被推平的一段区间，我们将其压成一个节点丢到珂朵莉树上，然后维护六个信息l,r,L,R,a,b，表示其对应原序列中的$[l,r]$这段区间，里面一共有$\\sum_{i=L}^{R}ai\\operatorname{mod}b$颗石头。注意这里的l,r,L,R一定不要搞混，我就是因为这样WA了整整四遍（。 这三个样例一定是故意的。 然后每次我们初始化一个节点的时候直接算出节点内的石头总数，像下面这样： \\sum_{i=L}^{R}ai\\operatorname{mod}b=\\sum_{i=L}^{R}\\left(ai-\\lfloor\\cfrac{ai}{b}\\rfloor b\\right)=\\cfrac{(R+L)(R-L+1)}{2}-\\sum_{i=0}^{R}\\lfloor\\cfrac{ai}{b}\\rfloor b+\\sum_{i=0}^{L-1}\\lfloor\\cfrac{ai}{b}\\rfloor b直接一波板子套上去。 还有就是，这么算的话中间量会爆long long，我们可以考虑用__int128_t来存。不过这个类型在本地一般是编译不了的，虽然说交到OJ上基本没问题。我们可以 123#ifdef ONLINE_JUDGE #define int __int128_t#endif 然后把一些没必要用或者是不能用__int128_t的改成signed即可。 代码还是有必要贴一下的。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145#include&lt;cstdio&gt;#include&lt;iostream&gt;#include&lt;set&gt;#define re register#define _it std::set&lt;node&gt;::iterator#ifdef ONLINE_JUDGE #define int __int128_t#endifnamespace cltstream{ #define size 1048576 char cltin[size+1],*ih=cltin,*it=cltin; inline char gc(){ #ifdef ONLINE_JUDGE if(ih==it){ it=(ih=cltin)+fread(cltin,1,size,stdin); if(ih==it) return EOF; } return *ih++; #else return getchar(); #endif } char cltout[size+1],*oh=cltout,*ot=cltout+size; inline void pc(char c){ if(oh==ot){ fwrite(cltout,1,size,stdout); oh=cltout; } *oh++=c; } #define clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout),cltstream::oh=cltstream::cltout #undef size template &lt;typename _tp&gt; inline void read(_tp&amp; x){ signed sn=1; char c=gc(); for(;c!=45&amp;&amp;(c&lt;48||c&gt;57)&amp;&amp;c!=EOF;c=gc()); if(c==45&amp;&amp;c!=EOF) sn=-1,c=gc(); for(x=0;c&gt;=48&amp;&amp;c&lt;=57&amp;&amp;c!=EOF;x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=gc()); x*=sn; } template &lt;typename _tp&gt; inline void write(_tp x,char text=-1){ if(x&lt;0) pc(45),x=-x; if(!x) pc(48); else{ signed digit[50]; for(digit[0]=0;x;digit[++digit[0]]=x%10,x/=10); for(;digit[0];pc(digit[digit[0]--]^48)); } if(text&gt;=0) pc(text); }}int n,m;inline int simEuc(re int n,re int a,re int b,re int c){ if(!n) return b/c; if(!a) return (n+1)*(b/c); if(a&gt;=c||b&gt;=c){ re int res=simEuc(n,a%c,b%c,c); return res+n*(n+1)*(a/c)/2+(n+1)*(b/c); } else{ re int m=(a*n+b)/c; return m*n-simEuc(m-1,c,c-b-1,a); }}struct node{ int l,r,L,R,a,b,sum; node(re int _l,re int _r,re int _L,re int _R,re int _a,re int _b){ l=_l; r=_r; L=_L; R=_R; a=_a; b=_b; sum=(R+L)*(R-L+1)*a/2-simEuc(R,a,0,b)*b+simEuc(L-1,a,0,b)*b; }};std::set&lt;node&gt; s;inline bool operator&lt;(re node p1,re node p2){ return p1.l&lt;p2.l;}inline _it split(re int pos){ re _it it=s.lower_bound(node(pos,0,1,0,0,1)); if(it!=s.end()&amp;&amp;it-&gt;l==pos) return it; else{ --it; re int l=it-&gt;l,r=it-&gt;r,L=it-&gt;L,R=it-&gt;R,a=it-&gt;a,b=it-&gt;b; s.erase(it); s.insert(node(l,pos-1,L,L+pos-l-1,a,b)); return s.insert(node(pos,r,L+pos-l,R,a,b)).first; }}inline void modifyStone(re int l,re int r,re int a,re int b){ re _it itr=split(r+1),itl=split(l); s.erase(itl,itr); s.insert(node(l,r,1,r-l+1,a,b));}inline int queryStone(re int l,re int r){ re _it itr=split(r+1),itl=split(l); re int res=0; for(;itl!=itr;res+=itl-&gt;sum,++itl); return res;}signed main(){ cltstream::read(n); cltstream::read(m); s.insert(node(1,n,1,0,0,1)); for(re int i=1;i&lt;=m;++i){ re int opt,l,r,a,b; cltstream::read(opt); cltstream::read(l); cltstream::read(r); if(opt==1){ cltstream::read(a); cltstream::read(b); modifyStone(l,r,a,b); } else cltstream::write(queryStone(l,r),10); } clop(); return 0;}","link":"/similar-euclid-algorithm-learning-notes/"},{"title":"「HEOI2012」采花","text":"传送门 Taduro的题解 sto Taduro orz 首先，读完题一定有人要跳出来喊「莫队！」。 莫队！ 然后再一看数据范围 对于$100\\%$的数据，$1\\leqslant c\\leqslant n,m\\leqslant 2\\times 10^{6}$。 笑容逐渐消失。 然后根据数据范围，我们不难猜出正解是树状数组。然后问题来了，树状数组什么时候有这种操作了。 首先这个样例比较菜，我们手造一个： 11 6 2 4 2 3 6 2 首先我们维护一个nxt数组，表示当前颜色下一次出现的位置，不存在的话就是$0$。上面的样例对应的nxt差不多长这样： i $1$ $2$ $3$ $4$ $5$ $6$ $7$ $8$ c[i] $1$ $6$ $2$ $4$ $2$ $3$ $6$ $2$ nxt[i] $0$ $7$ $5$ $0$ $8$ $0$ $0$ $0$ 然后我们把所有询问离线下来，以左端点为第一关键字，右端点为第二关键字排一下序。维护一个指针，让它一直跟着当前询问的左端点走。一开始它在$1$。 然后我们还需要一个数组ans，对于每一种颜色，我们令其在指针所在位置及其之后的部分中第二次出现的位置的ans为$1$。 i $1$ $2$ $3$ $4$ $5$ $6$ $7$ $8$ c[i] $1$ $6$ $2$ $4$ $2$ $3$ $6$ $2$ ans[i] $0$ $0$ $0$ $0$ $1$ $0$ $1$ $0$ 因为一种颜色第一次出现不会被统计，第二次出现才会被统计，在这之后就算再出现也不会多统计了。 不难发现，此时$\\sum_{i=1}^{x}ans[i]$就是询问1 x的答案。 需要移动指针时，我们每次只移动一个位置。移动完之后，移动前指针所在位置的颜色第二次出现的位置就变成了第一次出现，因此我们需要将这个位置上的ans置为$0$。同理，第三次就变成了第二次，因此我们需要将其置为$1$。因为我们每次只移动一个位置，所以说只有一个颜色的状态会发生变化。 这个时候nxt数组就派上用场了，我们可以通过它块速地定位到当前颜色后面的出现位置。 让我们以上面的样例为例，稍微模拟一下指针的移动（下划线表示指针当前位置）： i $\\underline{1}$ $2$ $3$ $4$ $5$ $6$ $7$ $8$ c[i] $1$ $6$ $2$ $4$ $2$ $3$ $6$ $2$ ans[i] $0$ $0$ $0$ $0$ $1$ $0$ $1$ $0$ i $1$ $\\underline{2}$ $3$ $4$ $5$ $6$ $7$ $8$ c[i] $1$ $6$ $2$ $4$ $2$ $3$ $6$ $2$ ans[i] $0$ $0$ $0$ $0$ $1$ $0$ $1$ $0$ i $1$ $2$ $\\underline{3}$ $4$ $5$ $6$ $7$ $8$ c[i] $1$ ${\\color{red}6}$ $2$ $4$ $2$ $3$ ${\\color{red}6}$ $2$ ans[i] $0$ $0$ $0$ $0$ $1$ $0$ ${\\color{red}0}$ $0$ i $1$ $2$ $3$ $\\underline{4}$ $5$ $6$ $7$ $8$ c[i] $1$ $6$ ${\\color{red}2}$ $4$ ${\\color{red}2}$ $3$ $6$ ${\\color{red}2}$ ans[i] $0$ $0$ $0$ $0$ ${\\color{red}0}$ $0$ $0$ ${\\color{red}1}$ 对于一次询问l r，我们将指针移动到l这个位置之后查询$\\sum_{i=l}^{r}ans[i]$即可。 代码就不贴了，其实我还没写（","link":"/luogu-p4113-solution/"},{"title":"「AHOI2017&#x2F;HNOI2017」礼物","text":"传送门 首先我们要有一个简单粗暴的暴力。 \\min\\limits_{x=0}^{n-1}\\min\\limits_{c_{1}=0,c_{2}=0}^{m}\\sum\\limits_{i=0}^{n-1}(A_{i}+c_{1}-B_{(i+x)\\%n}-c_{2})^{2}因为我们关心的只是两个数的差的平方，我们完全可以将$c_{1}$和$c_{2}$这两个非负整数合并成一个整数$c$。 \\min\\limits_{x=0}^{n-1}\\min\\limits_{c=-m}^{m}\\sum\\limits_{i=0}^{n-1}(A_{i}-B_{(i+x)\\%n}+c)^{2}我们仔细观察一下那个$\\Sigma$。 \\begin{aligned} &\\sum\\limits_{i=0}^{n-1}(A_{i}-B_{(i+x)\\%n}+c)^{2}\\\\ =&\\sum\\limits_{i=0}^{n-1}(A_{i}^{2}+B_{(i+x)\\%n}^{2}+c^{2}-2A_{i}B_{(i+x)\\%n}+2cA_{i}-2cB_{(i+x)\\%n})\\\\ =&\\sum\\limits_{i=0}^{n-1}A_{i}^{2}+\\sum\\limits_{i=0}^{n-1}B_{i}^{2}+nc^{2}+2c(\\sum\\limits_{i=0}^{n-1}A_{i}-\\sum\\limits_{i=0}^{n-1}B_{i})-2\\sum\\limits_{i=0}^{n-1}A_{i}B_{(i+x)\\%n} \\end{aligned}首先$\\Sigma A_{i}^{2}$和$\\Sigma B_{i}^{2}$可以看成是常数项。 $nc^{2}+2c(\\Sigma A_{i}-\\Sigma B_{i})$可以看成是一个关于$c$的二次函数，令$k=(\\Sigma A_{i}-\\Sigma B_{i})$，我们知道它在$c=-\\cfrac{k}{n}$处取得最小值。但是根据题意，$c$应当是一个整数，因此我们需要将$c=\\lfloor -\\cfrac{k}{n}\\rfloor$和$c=\\lceil -\\cfrac{k}{n}\\rceil$两者都代入原式，然后取较小值。 然后我们想要求出$\\Sigma A_{i}B_{(i+x)\\%n}$的最大值，加上上面那两项就是最终答案了。首先这个取模不好搞，我们把它拆开。 \\sum\\limits_{i=0}^{n-x-1}A_{i}B_{i+x}+\\sum\\limits_{i=0}^{x-1}A_{i-x+n}B_{i}然后我们看到这个东西好像卷积啊，但是卷积要求两个下标加起来是常数，这个下标是加上一个数没办法卷积啊。 然后一想，我们可以倒过来搞啊。 定义$F^{R}(x)$是将$F(x)$的系数数组翻转过来得到的新多项式。于是我们可以将上式写成 \\begin{aligned} &\\sum\\limits_{i=0}^{n-x-1}A_{i}B^{R}_{n-x-1-i}+\\sum\\limits_{i=0}^{x-1}A^{R}_{x-1-i}B_{i}\\\\ =&(AB^{R})_{n-x-1}+(A^{R}B)_{x-1} \\end{aligned}然后套一波多项式乘法的板子，扫一遍系数求个最大值就行了。需要注意的是当$x=0$的时候就只有$(AB^{R})_{n-1}$一项。 以下是代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135#include&lt;cstdio&gt;#include&lt;cmath&gt;#define re register#define maxn 131072#define mod 998244353#define max(a,b) ((a)&gt;=(b)?(a):(b))#define min(a,b) ((a)&lt;=(b)?(a):(b))#define swap(a,b) a^=b,b^=a,a^=bnamespace cltstream{ #define size 1048576 char cltin[size+1],*ih=cltin,*it=cltin; inline char gc(){ #ifdef ONLINE_JUDGE if(ih==it){ it=(ih=cltin)+fread(cltin,1,size,stdin); if(ih==it) return EOF; } return *ih++; #else return getchar(); #endif } char cltout[size+1],*oh=cltout,*ot=cltout+size; inline void pc(char c){ if(oh==ot){ fwrite(cltout,1,size,stdout); oh=cltout; } *oh++=c; } #define clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout),cltstream::oh=cltstream::cltout #undef size template &lt;typename _tp&gt; inline void read(_tp&amp; x){ int sn=1; char c=gc(); for(;c!=45&amp;&amp;(c&lt;48||c&gt;57)&amp;&amp;c!=EOF;c=gc()); if(c==45&amp;&amp;c!=EOF) sn=-1,c=gc(); for(x=0;c&gt;=48&amp;&amp;c&lt;=57&amp;&amp;c!=EOF;x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=gc()); x*=sn; } template &lt;typename _tp&gt; inline void write(_tp x,char text=-1){ if(x&lt;0) pc(45),x=-x; if(!x) pc(48); else{ int digit[22]; for(digit[0]=0;x;digit[++digit[0]]=x%10,x/=10); for(;digit[0];pc(digit[digit[0]--]^48)); } if(text&gt;=0) pc(text); }}int n,m,ans,k,mx;int unit[2][24],rev[maxn+1],A[maxn+1],B[maxn+1],C[maxn+1],D[maxn+1];inline int cltpow(re int x,re int y){ re int res=1; for(;y;){ if(y&amp;1) res=1LL*res*x%mod; x=1LL*x*x%mod; y&gt;&gt;=1; } return res;}inline void NTT(re int* F,re int n,re int tp){ for(re int i=0;i&lt;n;++i) if(i&lt;rev[i]) swap(F[i],F[rev[i]]); for(re int k=1,p=1;p&lt;n;++k,p&lt;&lt;=1) for(re int i=0;i&lt;n;i+=p&lt;&lt;1) for(re int j=i,tmp=1;j&lt;i+p;++j,tmp=1LL*tmp*unit[tp][k]%mod){ re int x=F[j],y=1LL*F[j+p]*tmp%mod; F[j]=(x+y)%mod; F[j+p]=(x-y+mod)%mod; } re int v=cltpow(n,tp*(mod-2)); for(re int i=0;i&lt;n;++i) F[i]=1LL*F[i]*v%mod;}int main(){ cltstream::read(n); cltstream::read(m); for(re int i=0;i&lt;n;++i){ cltstream::read(A[i]); ans+=A[i]*A[i]; k+=A[i]; C[n-1-i]=A[i]; } for(re int i=0;i&lt;n;++i){ cltstream::read(B[i]); ans+=B[i]*B[i]; k-=B[i]; D[n-1-i]=B[i]; } ans+=min(n*floor(1.0*k/n)*floor(1.0*k/n)-2*k*floor(1.0*k/n),n*ceil(1.0*k/n)*ceil(1.0*k/n)-2*k*ceil(1.0*k/n)); unit[0][23]=cltpow(3,119); unit[1][23]=cltpow(332748118,119); for(re int i=0;i&lt;2;++i) for(re int j=22;j&gt;=0;--j) unit[i][j]=1LL*unit[i][j+1]*unit[i][j+1]%mod; for(m=1;m&lt;n;m&lt;&lt;=1); m&lt;&lt;=1; for(re int i=0;i&lt;m;++i) rev[i]=(rev[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)?(m&gt;&gt;1):0); NTT(A,m,0); NTT(B,m,0); NTT(C,m,0); NTT(D,m,0); for(re int i=0;i&lt;m;++i){ A[i]=1LL*A[i]*D[i]%mod; B[i]=1LL*B[i]*C[i]%mod; } NTT(A,m,1); NTT(B,m,1); mx=A[n-1]; for(re int i=1;i&lt;n;++i) mx=max(mx,A[n-1-i]+B[i-1]); cltstream::write(ans-=2*mx); clop(); return 0;}","link":"/luogu-p3723-solution/"},{"title":"「Luogu-P5162」WD与积木","text":"9102年的第一篇blog。 传送门 大概算是我用NTT切的第一道非模板题。 其实本来应该是这道。不过调不出来了弃了。 首先我们会有一种想法是将方案数和每种方案的层数和分别求出来，然后一除就可以了。我们令$F[i]$表示$i$块积木所有堆放方案的层数和，$G[i]$表示$i$块积木的堆放方案数。 首先考虑如何求方案数。我们可以枚举第一层放了哪些积木。于是我们大胆地写出这样一个$n^{2}$的方程： G[n]=\\sum\\limits_{i=0}^{n}C_{n}^{i}G[n-i]但是这样对吗？ 代入$n=0$我们发现 G[0]=C_{0}^{0}G[0]=G[0] 注意到，这主要是因为$C_{n}^{0}=1$导致的，因此我们强行将它定义成$0$就好了。 那然后$G[0]$应该等于几？ G[1]=C_{1}^{0}G[1]+C_{1}^{1}G[0]=G[0]=1所以说$G[0]=1$。 如果说您再往下算几项，您就会发现令$G[0]=1$是一个正确的选择。 再然后，我们看到这个式子像极了卷积。我们先来把组合数拆开 G[n]=n!\\sum\\limits_{i=0}^{n}\\cfrac{1}{i!}\\times\\cfrac{G[n-i]}{(n-i)!}定义 H[n]=\\begin{cases} &0&(n=0)\\\\ &\\cfrac{1}{n!}\\;\\;&(n>1) \\end{cases}G[n]=n!\\sum\\limits_{i=0}^{n}H[i]\\times\\cfrac{G[n-i]}{(n-i)!}注意到我们在运算时先除以了$n-i$的阶乘，累加完之后又乘了一个$n$的逆元。这就启示我们，如果我们定义 G^{\\prime}[n]=\\cfrac{G[n]}{n!}就可以得到 \\begin{aligned} G^{\\prime}[n]&=\\sum\\limits_{i=0}^{n}H[i]\\times G^{\\prime}[n-i]\\\\ G^{\\prime}&=G^{\\prime}H+1 \\end{aligned}注意不要忘了$+1$。因为很明显地$G^{\\prime}H[0]=0$，而$G^{\\prime}[0]=1$。 然后我们就有 G^{\\prime}=\\cfrac{1}{1-H}然后接下来我们并不需要还原出$G$。直接考虑$F$，也就是层数和。 首先还是枚举第一层放了哪些积木。不过需要注意的是，因为我们把第一层单独考虑了，因此每有一种堆放方案，我们就要再多算上一层。因此 F[n]=G[n]+\\sum\\limits_{i=0}^{n}C_{n}^{i}F[n-i]然后我们拆开组合数，引入上面的$H$数组，并令$F[0]=0$。至于为什么，留作习题自证（ \\begin{aligned} F[n]&=G[n]+n!\\sum\\limits_{i=0}^{n}H[i]\\times\\cfrac{F[n-i]}{(n-i)!}\\\\ &=n!\\sum\\limits_{i=0}^{n}H[i]\\times\\cfrac{F[n-i]+G[n-i]}{(n-i)!}\\\\ F^{\\prime}[n]&=\\cfrac{F[n]}{n!}\\\\ &=\\sum\\limits_{i=0}^{n}H[i]\\times(F^{\\prime}[n-i]+G^{\\prime}[n-i])\\\\ F^{\\prime}&=H(F^{\\prime}+G^{\\prime}) \\end{aligned}不过这次我们就不需要$+1$了。 解上面的方程，我们得到 F^{\\prime}=\\cfrac{HG^{\\prime}}{1-H}=\\cfrac{G^{\\prime}}{(1-H)^{2}}然后我们总结一下 H[n]=\\begin{cases} &0&(n=0)\\\\ &\\cfrac{1}{n!}\\;\\;&(n>1) \\end{cases}G^{\\prime}=\\cfrac{1}{1-H}F^{\\prime}=\\cfrac{G^{\\prime}}{(1-H)^{2}}最后的答案，也就是$n$块积木的期望层数，就是$\\cfrac{F[n]}{G[n]}$。然后不难发现$\\cfrac{F^{\\prime}[n]}{G^{\\prime}[n]}=\\cfrac{F[n]}{G[n]}$。 我就是不贴代码（ 反正会的应该都能写出来了吧（","link":"/luogu-p5162-solution/"},{"title":"题目组试题选讲","text":" 输入密码继续阅读","link":"/timuzu-solutions/"},{"title":"关于块状分块的研究报告","text":"db88ea21dde1523cc6d4f97d6db5a895331a20ae7c4b3e1920a46894d67c16158b8748430d3e479e2f382bde45c84473a4260a618622b3ba92370399f561cf3fbc452ed39122bd7c3b6c208a6af237caf522c9e4ebc12f3d079cdad60cc0bb172da3827cab3a174918a0aaf3fa7b8f28f3f22714e65b0de09795f1747f6c421e1e5efb57ed2618bce8145a16277110a4f83b75242d75bf01c7afcf6f2992f0ded31e1782efd7f917e1539531734198a3208bf349aaa7805d7f7102c66ef7b8f37a56a48e559835a4e45e39d05a3fe27e4479296a346f8ed861e20f8f984a2f00a067d37e5df033d0e7371b03c7d5f9d5740ccdd3bc5937aa9fd55bc31e9fd37bde00d3a075fca0cd268a383ea7daf7761d1f88fc2206b7bf1ab20beb062aea20509cb83868af50cd2e6ade15a91cf44e5fade0b2b132826397b4ae947ba4a147bfcbbf7725d8caf0e43b0991701aa38df70b84c2fbc0569b48797324e614a72d61cb9ab8be82e2503e9400e854c4fa4e7eb0bc76c0ccd52d97a251ee6da05529460f291c5bb0cf4ae62090667b8b0daa104d67475c576823f4ca7beaf0cab3ce1978e2de67c619a13b509368424064feaa5435194fbb7bee75cc3d6bc2e4d314b6a021a30d5dc43a54d5443ba73a06a4a88df90f8044fc42767a2ca015ca5577e3a720ac97394fb26b49830eb68c09de21adce45cdc69465de977c569c9307a29a2d51e4a029e71d492feafb26840495e6debc7f3d4dd2cd3ed3ec10ffb658e561976939833295493105598584713f3206840f6a40e47f94bc9dea9323dd54e60f30e603a550e54f0bf3515035061ece1d9dde05ac0ebb7caf69b3ee9c48606d444def797353545fb307c880fea1e5080d7af45e16369bc575a139f1362ce89aafefa0c5a2ae701adb8fb3d4394aebd98ca8721eca63a75daaab383851bdb5e592b452a77d0e191eae3dfc8a860fac7593587ff7923280b6a3350a0080e1d3e5b6a7b6c6c3ae1092db6a9653bac9ae67c44df44d8c4669f0289234a86ad72b30974b02d375b877a7592b9c8b5517596b2f7be2262a7826987bc9f6dbd5a9c06db4cfb8bbedb42f30972846cab74fb8e7b3303d3824365541323d50512117cd6dea7a0aa53a2c9a070507b69a019745d495cc8c124d49516fca44693a720869da9bf573a904f2c232fe883193cbd8a4c8bbc46cc661b1b6690922543f9c1cfe654ac0a0232cd47ee8cda7d8e4559258093df0d3a348630d7c2b945d2ff2db786d1232f227ce4a35d519b69ff4aae14c066fd942b7cf83df76a4b910d985801c62f35c4113eeff1f27c6a35c8c84d192b717decced96ee283303705cc1663b604c201de4eb09f8b22e12c22f74fcf5c1659199a8bdca027ac98672fb41d8774c3f0e5cde15bed1bc83d9aa7adb4c3faf184731185e3228be8fb896aaf2cc9d60b01174179c40649b5d2428e051b472b30e097a9ce4a3381d0ccf6ef14581c41e4fd121aae249af859893049732aade2371351dd172d67c047ffac199e7b7f1036c2d0fef5abcdedb364fd6d8d46cddf94abeae160e79cbd720f073fa1cb6515af1565cb918b08bcc3bf457af28cb4f3e442c7b054e5894ea388d90ebae45c90f0fe5f521f64c7e4416919f7e7fcf7ccaee4f8a82eefcb844ce2fc66427963d73f002869fe4af3d5d548cc86c1bfc798aa073ca0c4b632a2aecfb274a7b8705f49d36390cb58d3aec1f1efdba949b66222b931dcf4575fa62fbd49a44784a01ce5a452278bd8adcb0e7968bcf017a42a23faf0452a421f382a2c158d2cc82286c462b3b0366660b9708e7ee67837318671ab2d8b9daae3d40fbeb2510f2ee4ecc13ef51244d3b27989f0579046c30d459f2600be9f43f3ed8f258a7a93e2b2da8f48fc2e3d3dde25d1e9d204619cffed2a8b001e69318e21233973491bf8564e48e7da16832813a4a67df9b9b1b9b65df89292d2844ab827869de42b61f8aef458fff5cc20a0ba8e7553257105783f2e945ba433383507c7b8a39609a8c5b19b81d1641e83d41a5cff1bbdeaf6e42ff9821f23b2b1d5de7e2a8385bd9a39d92cb85cb6c4a0c0d4a0d9ace0447794d55ea72b710676fa597ad4a5711a00c8d4bc760a9cefe34abaae643b8f7c50f78d5bbccdd35298db5fdcea399fe68248b6d437dc8dac99e7121a4a0dd7fddb3311adac857b646a87520d6fe7f64c10c4c6ebf9ecd265770de0853f0af3ff89ea298603211d65e49e8e8218e8844d28ddc1b41bc1186d19c6031574772c47e18f6db4bebefe04cc960ad72e54e2cfd6404d5e4f267524572e6f15a24d8983f067ee8def3a2f46c328f5dc603f4f6681a7f83e4c1bbedcfa33c736e36e848129d21ab19b6cc143a554cf60ab62164a1ac95d2dcc6dd59963b3c16e0e62caf93a63d225624dd21a05f7c549a560198eeb92216bdc49fd04495424c0c62f65958cb09f43d144cfb6d661b10773f885891eabdaf4ec492c322f5b36a0c95325606f7c8e95d0940557ebb5928d51b257b313d2e5461f759b4486c073ce73acc20c13e1cbb5994fc3a1927636819ae4f8c794bc20bbecf006399e69fb0865dfa58c0e14ebc0ce36a24b65969079452890d48e512f98ff778430e08b86dc3cb04c0580aa4b675e5c63fc2710aac4cbb0d8e974b6a08225014030187e8e8b50b1ae32221bff7ce4d53e2de1a073c5be091c941fb0fe224b1a3fa63773c687e785bdea297777bf3a5c6259a8f2be92ede5ab6287a005594230ddb9e887a071659fa0ad6c0a4153c0a68752da129eeafd8e8ebfec11d0c727edc31d824e54c6c2727928d847ab53d53d0b3c988691999aa9b94e33e99cbbd1c1ea750c82ca01933558d1f8ba035589ae8228282323e9ef6c6fd07a4b9604b35d87d1c1befc9afd35466c41bf99fc418c1c70968ea64a3d48e34ccc3023be01628d7ab4838f25ff32d6594b01c622f1e9113a4923815691d956db1e39ab37e8a82e5b55a224a021498a50027caf184970afeb0f3a91d585868e0d979dc6866c61e3c2e50ed5613369e798554ff8a75c8d8e5b065bc929263f8575eb2d9300577bb73e04221a01aa44d4a475ed390bb5c4e6fab61d6853ad9e5ab203efe9dd1d9 输入密码继续阅读","link":"/block-decomposition/"},{"title":"「多项式学习笔记Part II」多项式的进阶操作","text":"以下，如果不特别声明，则所有运算在模$998244353$意义下进行。 接下来的前置知识泰勒展开说实话，其实我也不是很能理解这个东西（ 我就凭感觉xjb扯了（ 现在我们有一个函数$f(x)$，我们想要用一个多项式$g(x)$来近似$x$在$x_{0}$附近时$f(x)$的取值。 我们令 g(x)=\\sum\\limits_{i=0}^{n}g[i](x-x_{0})^{i}我们想要让$x\\rightarrow x_{0}$时，$g$在$x$处的各阶导数与$f$在$x_{0}$处的各阶导数分别相等。 我们先考虑$0$阶，也就是原函数。因为$x\\rightarrow x_{0}$，所有包含$x-x_{0}$的项都可以忽略，因此我们有 g[0]=f(x_{0})然后是$1$阶 g^{\\prime}(x)=\\sum\\limits_{i=1}^{n}ig[i](x-x_{0})^{i-1}=g[1]=f^{\\prime}(x_{0})再然后是$2$阶 g^{\\prime\\prime}(x)=\\sum\\limits_{i=2}^{n}i(i-1)g[i](x-x_{0})^{i-2}=2g[2]=f^{\\prime\\prime}(x_{0})最后是$3$阶 g^{\\prime\\prime\\prime}(x)=\\sum\\limits_{i=3}^{n}i(i-1)(i-2)g[i](x-x_{0})^{i-3}=6g[3]=f^{\\prime\\prime\\prime}(x_{0})我们发现$g[n]$有如下的规律 g[n]=\\cfrac{f^{(n)}(x_{0})}{n!}综上所述 g(x)=\\sum\\limits_{i=0}^{n}\\cfrac{f^{(i)}(x_{0})}{i!}(x-x_{0})^i应该吧（ 多项式牛顿迭代考虑一个$n-1$次多项式$F(x)$，我们希望求出一个多项式$G(x)$，使得 F(G(x))\\equiv 0\\pmod{x^{n}}我们采用倍增的思想，假设我们已经求出了一个$G_{0}$使得 F(G_{0})\\equiv 0\\pmod{x^{t}}我们希望求出一个$G$使得 F(G)\\equiv 0\\pmod{x^{2t}}我们将$F$在$G_{0}$这里进行泰勒展开： \\begin{aligned} F(G)&=F(G_{0})\\\\ &+F^{\\prime}(G_{0})(G-G_{0})\\\\ &+\\cfrac{F^{\\prime\\prime}(G_{0})}{2}(G-G_{0})^{2}\\\\ &+\\cdots\\end{aligned}注意到 \\begin{aligned} F(G)-F(G_{0})&\\equiv 0\\pmod{x^{t}}\\\\ G-G_{0}&\\equiv 0\\pmod{x^{t}} \\end{aligned}也就是说$G-G_{0}$的最低非零系数的项数大于等于$t$，$(G-G_{0})^{k}$的最低非零系数的项数大于等于$kt$，从而我们有 \\begin{aligned} F(G)&\\equiv F(G_{0})+F^{\\prime}(G_{0})(G-G_{0})\\pmod{x^{2t}}\\\\ F^{\\prime}(G_{0})G&\\equiv F^{\\prime}(G_{0})G_{0}-F(G_{0})\\pmod{x^{2t}}\\\\ G&\\equiv G_{0}-\\cfrac{F(G_{0})}{F^{\\prime}(G_{0})}\\pmod{x^{2t}} \\end{aligned}然后我们就一直倍增，倍增到$t\\geqslant n$为止，此时$G_{0}$即为所求多项式。 多项式求逆给你一个$n-1$次多项式$F(x)$，让你求出一个多项式$G(x)$，使得 F(x)\\times G(x)\\equiv 1\\pmod{x^{n}}假设我们已经求出了$G_{0}$使得 F\\times G_{0}\\equiv 1\\pmod{x^{t}}我们希望找到一个$G$使得 F\\times G\\equiv 1\\pmod{x^{2t}}据说能用牛顿迭代推，然而我不会（ 考虑正常一点的方式，虽然说还是倍增。 \\begin{aligned} F\\times G-F\\times G_{0}&\\equiv 0\\pmod{x^{t}}\\\\ G-G_{0}&\\equiv 0\\pmod{x^{t}}\\\\ (G-G_{0})^{2}&\\equiv 0\\pmod{x^{2t}}\\\\ G^{2}-2GG_{0}+G_{0}^{2}&\\equiv 0\\pmod{x^{2t}} \\end{aligned}两边同时乘$F$ \\begin{aligned} G-2G_{0}+FG_{0}^{2}&\\equiv 0\\pmod{x^{2t}}\\\\ G&\\equiv 2G_{0}-FG_{0}^{2}\\pmod{x^{2t}} \\end{aligned}边界条件也很明显，就是当$t=1$时，$G[0]\\equiv F[0]^{-1}$。 说起来是很简单对吧……然而我真正开始写了才发现自己就是个傻子啥也不会（ 关于代码……现在还不是时候（ 后面有一道超级综合题在等着我们（ 多项式对数函数给你一个$n-1$次多项式$F(x)$，让你求出一个多项式$G(x)$，使得 G(x)\\equiv\\ln F(x)\\pmod{x^{n}}对上式两边求导 G^{\\prime}\\equiv F^{\\prime}\\ln^{\\prime}F\\pmod{x^{n}}又因为 \\ln^{\\prime}x=\\frac{1}{x}我们就得到 G^{\\prime}\\equiv\\cfrac{F^{\\prime}}{F}\\pmod{x^{n}}求导+求逆+不定积分即可。 多项式指数函数超级综合题来了。 给你一个$n-1$次多项式$F(x)$，让你求出一个多项式$G(x)$，使得 G(x)\\equiv e^{F(x)}\\pmod{x^{n}}首先 \\ln G-F\\equiv 0\\pmod{x^{n}}我们把$F$看成是常数项，定义函数 A(G)=\\ln G-FA^{\\prime}(G)=\\ln^{\\prime}G=\\cfrac{1}{G}套牛顿迭代 \\begin{aligned} G&\\equiv G_{0}-\\cfrac{A(G_{0})}{A{^\\prime}(G_{0})}\\\\ &\\equiv G_{0}(1-\\ln G_{0}+F)\\pmod{x^{2t}} \\end{aligned}然后把以上提到的所有板子全都复制过来就行了（ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163#include&lt;cstdio&gt;#include&lt;cstring&gt;#define re register#define maxn 524288#define mod 998244353#define swap(a,b) a^=b,b^=a,a^=bnamespace cltstream{ #define size 1048576 char cltin[size+1],*ih=cltin,*it=cltin; inline char gc(){ #ifdef ONLINE_JUDGE if(ih==it){ it=(ih=cltin)+fread(cltin,1,size,stdin); if(ih==it) return EOF; } return *ih++; #else return getchar(); #endif } char cltout[size+1],*oh=cltout,*ot=cltout+size; inline void pc(char c){ if(oh==ot){ fwrite(cltout,1,size,stdout); oh=cltout; } *oh++=c; } #define clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout) #undef size template &lt;typename _tp&gt; inline void read(_tp&amp; x){ int sn=1; char c=gc(); for(;c!=45&amp;&amp;(c&lt;48||c&gt;57)&amp;&amp;c!=EOF;c=gc()); if(c==45&amp;&amp;c!=EOF) sn=-1,c=gc(); for(x=0;c&gt;=48&amp;&amp;c&lt;=57&amp;&amp;c!=EOF;x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=gc()); x*=sn; } template &lt;typename _tp&gt; inline void write(_tp x,char text=-1){ if(x&lt;0) pc(45),x=-x; if(!x) pc(48); else{ int digit[22]; for(digit[0]=0;x;digit[++digit[0]]=x%10,x/=10); for(;digit[0];pc(digit[digit[0]--]^48)); } if(text&gt;=0) pc(text); }}int n;int unit[2][24],rev[maxn+1],inv[maxn+1]={0,1},F[maxn+1],G[maxn+1],tmp1[maxn+1],tmp2[maxn+1],tmp3[maxn+1],tmp4[maxn+1];inline int cltpow(re int x,re int y){ re int res=1; for(;y;){ if(y&amp;1) res=1LL*res*x%mod; x=1LL*x*x%mod; y&gt;&gt;=1; } return res;}inline void NTT(re int* F,re int n,re int tp){ for(re int i=0;i&lt;n;++i) if(i&lt;(rev[i]=(rev[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)?(n&gt;&gt;1):0))) swap(F[i],F[rev[i]]); for(re int k=1,p=1;p&lt;n;++k,p&lt;&lt;=1) for(re int i=0;i&lt;n;i+=p&lt;&lt;1) for(re int j=i,tmp=1;j&lt;i+p;++j,tmp=1LL*tmp*unit[tp][k]%mod){ re int x=F[j],y=1LL*F[j+p]*tmp%mod; F[j]=(x+y)%mod; F[j+p]=(x-y+mod)%mod; } re int v=cltpow(n,tp*(mod-2)); for(re int i=0;i&lt;n;++i) F[i]=1LL*F[i]*v%mod;}inline void Inv(re int* F,re int* G,re int n){ G[0]=cltpow(F[0],mod-2); for(re int i=1,j=4;i&lt;n;i&lt;&lt;=1,j&lt;&lt;=1){ for(re int k=0;k&lt;(i&lt;&lt;1);++k) tmp1[k]=F[k]; NTT(tmp1,j,0); NTT(G,j,0); for(re int k=0;k&lt;j;++k) G[k]=(2-1LL*tmp1[k]*G[k]%mod+mod)*G[k]%mod; NTT(G,j,1); for(re int k=(i&lt;&lt;1);k&lt;j;++k) G[k]=0; for(re int k=0;k&lt;j;++k) tmp1[k]=0; }}inline void Ln(re int* F,re int* G,re int n){ for(re int i=1;i&lt;n;++i) G[i-1]=1LL*F[i]*i%mod; Inv(F,tmp2,n); re int N=1; for(;N&lt;n;N&lt;&lt;=1); N&lt;&lt;=1; NTT(G,N,0); NTT(tmp2,N,0); for(re int i=0;i&lt;N;++i) G[i]=1LL*G[i]*tmp2[i]%mod; NTT(G,N,1); for(re int i=n-1;i&gt;=1;--i) G[i]=1LL*G[i-1]*inv[i]%mod; G[0]=0; for(re int i=n;i&lt;N;++i) G[i]=0; for(re int i=0;i&lt;N;++i) tmp2[i]=0;}inline void Exp(re int* F,re int* G,re int n){ G[0]=1; for(re int i=1,j=2;i&lt;(n&lt;&lt;1);i&lt;&lt;=1,j&lt;&lt;=1){ Ln(G,tmp3,i); for(re int k=0;k&lt;i;++k) tmp4[k]=F[k]; NTT(tmp3,j,0); NTT(tmp4,j,0); NTT(G,j,0); for(re int k=0;k&lt;j;++k) G[k]=((1LL-tmp3[k]+tmp4[k])%mod+mod)*G[k]%mod; NTT(G,j,1); for(re int k=0;k&lt;j;++k) tmp3[k]=tmp4[k]=0; }}int main(){ unit[0][23]=cltpow(3,119); unit[1][23]=cltpow(332748118,119); for(re int i=0;i&lt;2;++i) for(re int j=22;j&gt;=0;--j) unit[i][j]=1LL*unit[i][j+1]*unit[i][j+1]%mod; for(re int i=2;i&lt;=maxn;++i) inv[i]=(mod-1LL*mod/i*inv[mod%i]%mod)%mod; cltstream::read(n); for(re int i=0;i&lt;n;++i) cltstream::read(F[i]); Exp(F,G,n); for(re int i=0;i&lt;n;++i) cltstream::write(G[i],i&lt;n-1?32:-1); clop(); return 0;} 多项式开平方根给你一个$n-1$次多项式$F(x)$，让你求出一个多项式$G(x)$，使得 G^{2}(x)\\equiv F(x)\\pmod{x^{n}}牛顿迭代吼啊！ A(G)=G^{2}-FA^{\\prime}(G)=2G\\begin{aligned} G&\\equiv G_{0}-\\cfrac{A(G_{0})}{A{^\\prime}(G_{0})}\\\\ &\\equiv G_{0}-\\cfrac{G_{0}^{2}-F}{2G_{0}}\\\\ &\\equiv\\cfrac{G_{0}^{2}+F}{2G_{0}}\\\\ &=\\cfrac{1}{2}(G_{0}+\\cfrac{F}{G_{0}})\\pmod{x^{2t}} \\end{aligned}复制粘贴吼啊！ 我刚才都学了些啥破玩意一道例题。 Remote Judge。 这是读题前的我： 这是读题后的我： 这是知道了这题正解是多项式开平方根后的我： 我……我怕不是学了个假的多项式哦（ 厚颜无耻地抄题解（ 首先我们搞出生成函数（然而并不是很懂） G(x)=\\sum\\limits_{i=0}^{m}G[i]x^{i}其中 G[i]=[i\\in\\{c_{1},c_{2},\\cdots,c_{n}\\}]定义$F[i]$表示权值为$i$的神犇二叉树的数量，我们有 F[0]=1F[x]=\\sum\\limits_{i=0}^{x}G[i]\\sum\\limits_{j=0}^{x-i}F[j]F[x-i-j]就是先枚举根节点权值（$i$），再枚举左子树权值（$j$），然后算出右子树权值（$x-i-j$）。 然后是一些神仙操作 \\begin{aligned} F[x]&=\\sum\\limits_{i=0}^{x}G[i]\\sum\\limits_{j=0}^{x-i}F[j]F[x-i-j]\\\\ &=\\sum\\limits_{i=0}^{x}G[i]F^{2}[x-i]\\\\ &=(GF^{2})[x] \\end{aligned}令人窒息（ 然后我们就有 GF^{2}+1=F但是为什么要$+1$？因为$F(0)=F[0]=1$而$G(0)=G[0]=0$。 于是解上面这个一元二次方程，我们得到 F=\\cfrac{1\\pm\\sqrt{1-4G}}{2G}但是这个形式还是不是很好搞，我们将分子分母同时乘$(1\\mp\\sqrt{1-4G})$，然后化简一波 F=\\cfrac{2}{1\\mp\\sqrt{1-4G}}如果根号前取负，代入$x=0$，分母就减成$0$了；而如果取正，我们就得到很健康的$\\cfrac{2}{2}=1$。综上所述 F=\\cfrac{2}{1+\\sqrt{1-4G}}本来接下来应该有代码实现的，但是我拒绝咕咕咕。 其实是调不出来了（","link":"/polynomial-learning-notes-pt2/"},{"title":"「多项式学习笔记Part I」最基本的多项式乘法","text":"最近正好月考，然而并不想去月考，于是来颓blog吧。 给你一个$n-1$次多项式$F(x)$和一个$m-1$次多项式$G(x)$，让你求$(F\\times G)(x)$的各项系数。$n,m\\leqslant 10^{6}$。 我们不妨将$F(x)$的$i$次项系数记为$F[i]$ F(x)=\\sum\\limits_{i=0}^{n-1}F[i]x^{i}G(x)=\\sum\\limits_{i=0}^{m-1}G[i]x^{i}(F\\times G)(x)=\\sum\\limits_{i=0}^{n-1}\\sum\\limits_{j=0}^{m-1}F[i]G[j]x^{i+j}(F\\times G)[k]=\\sum\\limits_{0\\leqslant i","link":"/polynomial-learning-notes-pt1/"},{"title":"关于最优化分块时间复杂度的研究报告","text":"最近在刷Ynoi，然后卡常卡到自闭，于是来系统地研究一下分块的复杂度。 假设我们有一个长度为$n$的序列，块的大小是$x$，令$y=\\cfrac{n}{x}$。对于每一次修改操作，我们的运算量是$\\text{A}x+\\text{B}y$。根据均值不等式 \\cfrac{1}{2}(x+y)\\geqslant\\sqrt{xy}我们有 \\text{A}x+\\text{B}y\\geqslant2\\sqrt{\\text{AB}n}当且仅当$x=\\sqrt{\\cfrac{\\text{B}}{\\text{A}}n}$时取等号。此时时间复杂度最小，为$O(\\sqrt{\\text{AB}n})$。 以上。","link":"/sqrt-decomposition-complexity-optimization/"},{"title":"「未来算法Episode I」严格根号分块实现树套树","text":"分块天下第一！！！！！！！！！ 我也不知道我为什么要写这个玩意，大概是我真的被这个外挂一般的东西吓到了吧。 我们从头说起。点开上面的那个评测记录，我们可以看到一道树套树的模板题。 先退一步来说，假如说我们去掉操作$3$，剩下的操作都可以用主席树来完成。 然而麻烦的是，我们在树上存的是前缀和。想要修改的话，暴力的复杂度是单次$O(n\\operatorname{log}n)$的。 那我们就在外层套个树状数组，把修改$O(n\\operatorname{log}n)$查询$O(\\operatorname{log}n)$均摊成全部$O(\\operatorname{log}^{2}n)$。 然而，很遗憾，我不会树套树，一点都不会，就连上面的这段文字也是我瞎扯出来的。 考虑无敌的分块。 一般我们想到的分块就是在块内维护std::set。这样操作$3$可以做到$O(\\operatorname{log}\\sqrt{n})$，操作$1$、$4$、$5$可以做到$O(\\sqrt{n}\\operatorname{log}\\sqrt{n})$。至于操作$2$，我们在外层套一个二分，然后检查二分到的数的排名是不是$k$，时间复杂度$O(\\operatorname{log}10^{9}\\sqrt{n}\\operatorname{log}\\sqrt{n})$。 然而很明显的，这样做的效率十分低下，除了实现复杂度相对树套树小了一点以外没有任何优势。 我们来看一下Shadowice1984dalao在他的另一篇题解中做出的评价： 这其实是一个误区。主席树之所以采取了二分的思路来解决问题是因为我们要求回答单次询问做到$O(\\operatorname{log}n)$的复杂度，这时候唯一的可行思路就是二分否则我们无法将复杂度控制在一个$\\text{log}$之内。 但是我们现在是使用分块解决问题。分块是有自己复杂度的，就是$O(\\sqrt{n})$而不是$O(\\operatorname{log}n)$，这意味着分块其实和$\\text{log}$的数据结构以及二分法并不是很搭（因为分块的结构本质上就不支持二分）。如果我们需要强行嵌入$\\text{log}$的数据结构的话在绝大部分情况下都会使复杂度凭空多出个$\\text{log}$来，这在强调常数的根号算法中绝对是致命的。 我也是从这位dalao的blog里看到了严格根号分块实现树套树这种未来算法。 主要思想其实不难理解，既然分块和$\\text{log}$不适合放在一起，我们就再套个分块，或者说，把值域也分成块。 定义cnt1[i][j]表示前$i$个块内有多少个元素的值在第$j$个块内，cnt2[i][j]表示前$i$个块内有多少个$j$（当然是离散化后的）。不难发现预处理出这两个数组的时间复杂度是$O((n+m)\\sqrt{n})$的。 然后我们来分析每个操作该怎么实现： 首先考虑序列中的整块。从头开始扫一遍值域块，一直扫到给定数所在块的前一个块，然后再在给定数所在块内从头扫到给定数的前一个，查询扫过的值有多少落在这些整块内。剩下的边角块自然地暴力判断。 还是从头扫一遍值域块，看看每个值域块内有多少数落在给定区间内，大概判断出答案在哪个值域块内。然后在这个值域块内再扫一遍即可。需要注意的是我们需要再开两个数组tmp1和tmp2来保存边角块的信息。 直接$O(\\sqrt{n})$暴力重构两个cnt就好。 需要两个类似于操作$2$的临时数组，存储的信息也是类似的。首先在给定数所在值域块内从后往前扫，找到答案直接退出。否则还是从后往前扫所有值域块，找到第一个非空的块然后进去找。 操作$4$换个方向即可。 综上所述，该算法的时间复杂度为$O((n+m)\\sqrt{n}+m\\sqrt{n+m})$。当$n$，$m$取到极限值时，差不多是$38172068$，相比之下$O(m\\operatorname{log}^{2}n)\\approx 12183043$。看起来好像比不过树套树，实际上开个$\\text{O}2$跑得比谁都快，正如一开始那张图所示。 不过代码写出来有点长的：include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define re register#define maxn 50000#define maxm 50000#define maxs 230#define max(a,b) ((a)&gt;=(b)?(a):(b))#define min(a,b) ((a)&lt;=(b)?(a):(b))#define lowbit(a) ((a)&amp;(-(a)))namespace cltstream{ #define size 1048576 char cltin[size+1],*ih=cltin,*it=cltin; inline char gc(){ #ifdef ONLINE_JUDGE if(ih==it){ it=(ih=cltin)+fread(cltin,1,size,stdin); if(ih==it) return EOF; } return *ih++; #else return getchar(); #endif } char cltout[size+1],*oh=cltout,*ot=cltout+size; inline void pc(char c){ if(oh==ot){ fwrite(cltout,1,size,stdout); oh=cltout; } *oh++=c; } #define clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout) #undef size template &lt;typename _tp&gt; inline void read(_tp&amp; x){ int sn=1; char c=gc(); for(;c!=45&amp;&amp;(c&lt;48||c&gt;57)&amp;&amp;c!=EOF;c=gc()); if(c==45&amp;&amp;c!=EOF) sn=-1,c=gc(); for(x=0;c&gt;=48&amp;&amp;c&lt;=57&amp;&amp;c!=EOF;x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=gc()); x*=sn; } template &lt;typename _tp&gt; inline void write(_tp x,char text=-1){ if(x&lt;0) pc(45),x=-x; if(!x) pc(48); else{ int digit[22]; for(digit[0]=0;x;digit[++digit[0]]=x%10,x/=10); for(;digit[0];pc(digit[digit[0]--]^48)); } if(text&gt;=0) pc(text); }}int n,m,sq1,sq2;int id1[maxn+1],id2[maxn+maxm+1],p[maxn+maxm+1];int a[maxn+1],opt[maxm+1][4];int cnt1[maxs+1][(maxs&lt;&lt;1)+1],cnt2[maxs+1][maxn+maxm+1],tmp1[(maxs&lt;&lt;1)+1],tmp2[maxn+maxm+1];int main(){ cltstream::read(n); cltstream::read(m); for(;(sq1+1)*(sq1+1)&lt;=n;++sq1); for(re int i=1;i&lt;=n;++i){ id1[i]=(i-1)/sq1+1; cltstream::read(a[i]); p[++p[0]]=a[i]; } for(re int i=1;i&lt;=m;++i){ cltstream::read(opt[i][0]); cltstream::read(opt[i][1]); cltstream::read(opt[i][2]); if(opt[i][0]!=3) cltstream::read(opt[i][3]); else p[++p[0]]=opt[i][2]; } std::sort(p+1,p+p[0]+1); p[0]=std::unique(p+1,p+p[0]+1)-p-1; for(;(sq2+1)*(sq2+1)&lt;=p[0];++sq2); for(re int i=1;i&lt;=p[0];++i) id2[i]=(i-1)/sq2+1; for(re int i=1;i&lt;=n;++i){ a[i]=std::lower_bound(p+1,p+p[0]+1,a[i])-p; ++cnt1[id1[i]][id2[a[i]]]; ++cnt2[id1[i]][a[i]]; } for(re int i=1;i&lt;=id1[n];++i){ for(re int j=1;j&lt;=id2[p[0]];++j) cnt1[i][j]+=cnt1[i-1][j]; for(re int j=1;j&lt;=p[0];++j) cnt2[i][j]+=cnt2[i-1][j]; } for(re int i=1;i&lt;=m;++i){ re int l,r,x,ans=0; switch(opt[i][0]){ case 1: l=opt[i][1],r=opt[i][2],x=std::lower_bound(p+1,p+p[0]+1,opt[i][3])-p; if(id1[l]&lt;id1[r]){ for(re int j=l;j&lt;=id1[l]*sq1;++j) ans+=(a[j]&lt;x); for(re int j=(id1[r]-1)*sq1+1;j&lt;=r;++j) ans+=(a[j]&lt;x); for(re int j=1;j&lt;id2[x];++j) ans+=cnt1[id1[r]-1][j]-cnt1[id1[l]][j]; for(re int j=(id2[x]-1)*sq2+1;j&lt;x;++j) ans+=cnt2[id1[r]-1][j]-cnt2[id1[l]][j]; } else for(re int j=l;j&lt;=r;++j) ans+=(a[j]&lt;x); cltstream::write(ans+1,10); break; case 2: l=opt[i][1],r=opt[i][2],x=opt[i][3]; if(id1[l]&lt;id1[r]){ for(re int j=l;j&lt;=id1[l]*sq1;++j){ ++tmp1[id2[a[j]]]; ++tmp2[a[j]]; } for(re int j=(id1[r]-1)*sq1+1;j&lt;=r;++j){ ++tmp1[id2[a[j]]]; ++tmp2[a[j]]; } for(re int j=1;;++j) if(x&gt;cnt1[id1[r]-1][j]-cnt1[id1[l]][j]+tmp1[j]) x-=cnt1[id1[r]-1][j]-cnt1[id1[l]][j]+tmp1[j]; else{ for(re int k=(j-1)*sq2+1;k&lt;=j*sq2;++k) if(x&gt;cnt2[id1[r]-1][k]-cnt2[id1[l]][k]+tmp2[k]) x-=cnt2[id1[r]-1][k]-cnt2[id1[l]][k]+tmp2[k]; else{ cltstream::write(p[k],10); break; } break; } for(re int j=l;j&lt;=id1[l]*sq1;++j){ --tmp1[id2[a[j]]]; --tmp2[a[j]]; } for(re int j=(id1[r]-1)*sq1+1;j&lt;=r;++j){ --tmp1[id2[a[j]]]; --tmp2[a[j]]; } } else{ for(re int j=l;j&lt;=r;++j){ ++tmp1[id2[a[j]]]; ++tmp2[a[j]]; } for(re int j=1;;++j) if(x&gt;tmp1[j]) x-=tmp1[j]; else{ for(re int k=(j-1)*sq2+1;k&lt;=j*sq2;++k) if(x&gt;tmp2[k]) x-=tmp2[k]; else{ cltstream::write(p[k],10); break; } break; } for(re int j=l;j&lt;=r;++j){ --tmp1[id2[a[j]]]; --tmp2[a[j]]; } } break; case 3: l=opt[i][1],x=std::lower_bound(p+1,p+p[0]+1,opt[i][2])-p; for(re int j=id1[l];j&lt;=id1[n];++j){ --cnt1[j][id2[a[l]]]; ++cnt1[j][id2[x]]; --cnt2[j][a[l]]; ++cnt2[j][x]; } a[l]=x; break; case 4: l=opt[i][1],r=opt[i][2],x=std::lower_bound(p+1,p+p[0]+1,opt[i][3])-p; if(id1[l]&lt;id1[r]){ for(re int j=l;j&lt;=id1[l]*sq1;++j){ ++tmp1[id2[a[j]]]; ++tmp2[a[j]]; } for(re int j=(id1[r]-1)*sq1+1;j&lt;=r;++j){ ++tmp1[id2[a[j]]]; ++tmp2[a[j]]; } for(re int j=x-1;j&gt;=(id2[x]-1)*sq2+1&amp;&amp;!ans;--j) if(cnt2[id1[r]-1][j]-cnt2[id1[l]][j]+tmp2[j]) ans=j; for(re int j=id2[x]-1;j&gt;=1&amp;&amp;!ans;--j) if(cnt1[id1[r]-1][j]-cnt1[id1[l]][j]+tmp1[j]) for(re int k=j*sq2;k&gt;=(j-1)*sq2+1&amp;&amp;!ans;--k) if(cnt2[id1[r]-1][k]-cnt2[id1[l]][k]+tmp2[k]) ans=k; for(re int j=l;j&lt;=id1[l]*sq1;++j){ --tmp1[id2[a[j]]]; --tmp2[a[j]]; } for(re int j=(id1[r]-1)*sq1+1;j&lt;=r;++j){ --tmp1[id2[a[j]]]; --tmp2[a[j]]; } } else{ for(re int j=l;j&lt;=r;++j){ ++tmp1[id2[a[j]]]; ++tmp2[a[j]]; } for(re int j=x-1;j&gt;=(id2[x]-1)*sq2+1&amp;&amp;!ans;--j) if(tmp2[j]) ans=j; for(re int j=id2[x]-1;j&gt;=1&amp;&amp;!ans;--j) if(tmp1[j]) for(re int k=j*sq2;k&gt;=(j-1)*sq2+1&amp;&amp;!ans;--k) if(tmp2[k]) ans=k; for(re int j=l;j&lt;=r;++j){ --tmp1[id2[a[j]]]; --tmp2[a[j]]; } } cltstream::write(ans?p[ans]:-2147483647,10); break; case 5: l=opt[i][1],r=opt[i][2],x=std::upper_bound(p+1,p+p[0]+1,opt[i][3])-p-1; if(id1[l]&lt;id1[r]){ for(re int j=l;j&lt;=id1[l]*sq1;++j){ ++tmp1[id2[a[j]]]; ++tmp2[a[j]]; } for(re int j=(id1[r]-1)*sq1+1;j&lt;=r;++j){ ++tmp1[id2[a[j]]]; ++tmp2[a[j]]; } for(re int j=x+1;j&lt;=id2[x]*sq2&amp;&amp;!ans;++j) if(cnt2[id1[r]-1][j]-cnt2[id1[l]][j]+tmp2[j]) ans=j; for(re int j=id2[x]+1;j&lt;=id2[p[0]]&amp;&amp;!ans;++j) if(cnt1[id1[r]-1][j]-cnt1[id1[l]][j]+tmp1[j]) for(re int k=(j-1)*sq2+1;k&lt;=j*sq2&amp;&amp;!ans;++k) if(cnt2[id1[r]-1][k]-cnt2[id1[l]][k]+tmp2[k]) ans=k; for(re int j=l;j&lt;=id1[l]*sq1;++j){ --tmp1[id2[a[j]]]; --tmp2[a[j]]; } for(re int j=(id1[r]-1)*sq1+1;j&lt;=r;++j){ --tmp1[id2[a[j]]]; --tmp2[a[j]]; } } else{ for(re int j=l;j&lt;=r;++j){ ++tmp1[id2[a[j]]]; ++tmp2[a[j]]; } for(re int j=x+1;j&lt;=id2[x]*sq2&amp;&amp;!ans;++j) if(tmp2[j]) ans=j; for(re int j=id2[x]+1;j&lt;=id2[p[0]]&amp;&amp;!ans;++j) if(tmp1[j]) for(re int k=(j-1)*sq2+1;k&lt;=j*sq2&amp;&amp;!ans;++k) if(tmp2[k]) ans=k; for(re int j=l;j&lt;=r;++j){ --tmp1[id2[a[j]]]; --tmp2[a[j]]; } } cltstream::write(ans?p[ans]:2147483647,10); } } clop(); return 0;} 我还没写啥呢咋就$12\\text{KB}$了（ 这大概会成为一个系列，名字就叫做「未来算法」（Future Algorithm），不过也说不定，会不会以后哪天突然蹦出来个「未来算法Episode II」也说不定（","link":"/future-algorithm-ep1/"},{"title":"一些乱七八糟的数论","text":"最近在洛谷日报的待审核列表里翻到了杜教筛的相关内容，打算连着之前的卷积反演啥的一起复习一下。 抄袭来源参考文献： 铃悬的数学小讲堂——狄利克雷卷积与莫比乌斯反演 浅谈杜教筛 铃悬的数学小讲堂——杜教筛 数论函数定义与相关性质数论函数就是定义域为$\\mathbb{N}^{+}$的函数。 两个数论函数相加，就是简单地把函数值相加。 (f+g)(n)=f(n)+g(n)数乘也是类似的。 (\\alpha f)(n)=\\alpha f(n)点积也是类似的。 (f\\cdot g)(n)=f(n)g(n)好像没啥用。 在数论函数相关的运算中，一个非常重要的运算是狄利克雷卷积。两个数论函数的狄利克雷卷积是这样定义的： (f\\times g)(n)=\\sum\\limits_{i\\mid n}f(i)g(\\cfrac{n}{i})或者说： (f\\times g)(n)=\\sum\\limits_{ij=n}f(i)g(j)它具有以下的一些性质： 交换律，即$f\\times g=g\\times f$。 这很明显。 结合律，即$(f\\times g)\\times h=f\\times(g\\times h)$。 \\begin{aligned} ((f\\times g)\\times h)(n)&=\\sum\\limits_{ij=n}(\\sum\\limits_{kl=i}f(k)g(l))h(j)\\\\ &=\\sum\\limits_{ijk=n}f(i)g(j)h(k) \\end{aligned}\\begin{aligned} (f\\times(g\\times h))(n)&=\\sum\\limits_{ij=n}f(i)(\\sum\\limits_{kl=j}g(k)h(l))\\\\ &=\\sum\\limits_{ijk=n}f(i)g(j)h(k) \\end{aligned}分配率，即$(f+g)\\times h=f\\times h+g\\times h$。 \\begin{aligned} ((f+g)\\times h)(n)&=\\sum\\limits_{ij=n}(f+g)(i)h(j)\\\\ &=\\sum\\limits_{ij=n}f(i)h(j)+g(i)h(j)\\\\ &=(f\\times h)(n)+(g\\times h)(n) \\end{aligned}单位元为$\\epsilon(n)=[n=1]$，$f\\times\\epsilon =f$。 这也很明显。 对于任意一个满足$f(1)\\neq 0$的函数$f$，都存在唯一的一个函数$g$使得$f\\times g=\\epsilon$。这时我们称$g$是$f$的逆。 我们可以这样定义一个函数的逆： g(n)=\\cfrac{\\epsilon(n)-\\sum\\limits_{i\\mid n,i\\neq 1}f(i)g(\\cfrac{n}{i})}{f(1)}这样我们就有 \\begin{aligned} (f\\times g)(n)&=\\sum_{i\\mid n}f(i)g(\\cfrac{n}{i})\\\\ &=f(1)g(n)+\\sum_{i\\mid n,i\\neq 1}f(i)g(\\cfrac{n}{i})\\\\ &=\\epsilon(n)-\\sum\\limits_{i\\mid n,i\\neq 1}f(i)g(\\cfrac{n}{i})+\\sum_{i\\mid n,i\\neq 1}f(i)g(\\cfrac{n}{i})\\\\ &=\\epsilon(n) \\end{aligned}积性函数与完全积性函数如果一个数论函数$f$满足 \\forall x,y\\in\\mathbb{N}^{+}\\wedge x\\perp y\\;\\;f(xy)=f(x)f(y)我们就说$f$是一个积性函数。 特别的，如果上式去掉$x\\perp y$仍成立，则称$f$是一个完全积性函数。 很明显地，任意一个积性函数$f$一定有$f(1)=1$，这样才能有$f(1\\times n)=f(1)\\times f(n)=f(n)$。 常见的完全积性函数有$\\epsilon,id^{k}$。$\\epsilon$在上文已经提到过。$id^{k}(n)=n^k$。这两个函数的完全积性十分明显。 常见的积性函数有$\\varphi,d,\\sigma$。$\\varphi(n)$的值等于小于等于$n$且与$n$互质的正整数的数量。$d(n)$和$\\sigma(n)$的值分别等于$n$的约数个数和约数和。 关于$\\varphi$的积性，我并不会证（ 我们来分析$d$的积性。首先，根据唯一分解定理，$n$的每个因数都可以唯一地分解成$n$所有质因子的非负整数次幂乘积。不妨设 n=\\prod\\limits_{i=1}^{N}p_{i}^{r_{i}}其中$p_{i}$都是质数，所有$r_{i}$都是正整数。对于每一个$p_{i}$，它的指数有$(r_{i}+1)$种取值，因而我们有 d(n)=\\prod\\limits_{i=1}^{N}(r_{i}+1)我们再假设有一个$m$，且 m=\\prod\\limits_{i=1}^{M}q_{i}^{s_{i}}如果说$n\\perp m$，肯定有 \\forall i\\in [1,N]\\cap\\mathbb{Z},j\\in [1,M]\\cap\\mathbb{Z}\\;\\;p_{i}\\neq q_{j}于是我们就有 nm=(\\prod\\limits_{i=1}^{N}p_{i}^{r_{i}})(\\prod\\limits_{j=1}^{M}q_{j}^{s_{j}})\\begin{aligned} d(nm)&=(\\prod\\limits_{i=1}^{N}(r_{i}+1))(\\prod\\limits_{j=1}^{M}(s_{j}+1))\\\\ &=d(n)d(m) \\end{aligned}不妨再反过来考虑。如果说$n\\not\\perp m$，那么一定存在一对$(i,j)(i\\in [1,N]\\cap\\mathbb{Z},j\\in [1,M]\\cap\\mathbb{Z})$，使得$p_{i}=q_{j}$。那么$d(n)d(m)$就会有一个因子是$(r_{i}+1)(s_{j}+1)=r_{i}s_{j}+r_{i}+s_{j}+1$。但是仔细思考我们会发现，$d(nm)$中对应的项应该是$r_{i}+s_{j}+1$。因而此时$d(nm)\\neq d(n)d(m)$。 我们再来分析$\\sigma$的积性。还是设 n=\\prod\\limits_{i=1}^{N}p_{i}^{r_{i}}其中$p_{i}$都是质数，所有$r_{i}$都是正整数。与$d$不同的是，现在我们是要用$p_{i}$乘出$n$的因数，$p_{i}$在此过程中可以产生的贡献为$p_{i}^x(x\\in [0,r_{i}]\\cap\\mathbb{Z})$。我们可以把这想象成一个$N$个数组，第$i$个数组的长度为$r_{i}+1$，第$j$个元素为$p_{i}^{j-1}$。现在我们每次从每个数组里选出恰好一个元素相乘，要求所有方案的乘积之和。我们知道，这个问题的答案就是 \\prod\\limits_{i=1}^{N}\\sum\\limits_{j=0}^{r_{i}}p_{i}^{j}这正是$\\sigma(n)$的值。 接下来的过程就与上文证明$d$的积性如出一辙了，在此不再重复。 现在我们来分析，两个积性函数的卷积是否也是积性函数。虽然说都这么问了肯定就是了。 \\begin{aligned} (f\\times g)(n)(f\\times g)(m)&=(\\sum\\limits_{i\\mid n}f(i)g(\\cfrac{n}{i}))(\\sum\\limits_{j\\mid m}f(j)g(\\cfrac{m}{j}))\\\\ &=\\sum\\limits_{i\\mid n}\\sum\\limits_{j\\mid m}f(i)g(\\cfrac{n}{i})f(j)g(\\cfrac{m}{j})\\\\ &=\\sum\\limits_{i\\mid n}\\sum\\limits_{j\\mid m}f(ij)g(\\cfrac{nm}{ij})\\\\ &=\\sum\\limits_{k\\mid nm}f(k)g(\\cfrac{nm}{k})\\\\ &=(f\\times g)(nm) \\end{aligned}关于上面的第四个等号。时刻注意$n\\perp m$，在这种前提下，我们枚举到的$i$和$j$一定也是互质的，那么$ij$的所有值一定是互不相同的。这从$d(nm)=d(n)d(m)$这一等式中也能看出。 再接下来，我们来分析一下一个积性函数的逆是否也是积性函数。 设有一个积性函数$f$，它的逆是$g$。 当$nm=1$时，$g(1)=1$。 当$nm&gt;1$时，我们假设对于任意$n^{\\prime}m^{\\prime}&lt;nm$，都有$g(n^{\\prime}m^{\\prime})=g(n^{\\prime})g(m^{\\prime})$。此时 \\begin{aligned} g(nm)&=-\\sum\\limits_{k\\mid nm,k\\neq 1}f(k)g(\\cfrac{nm}{k})\\\\ &=-\\sum\\limits_{i\\mid n,j\\mid m,ij\\neq 1}f(i)f(j)g(\\cfrac{n}{i})g(\\cfrac{m}{j})\\\\ &=g(n)g(m)-\\sum\\limits_{i\\mid n,j\\mid m}f(i)f(j)g(\\cfrac{n}{i})g(\\cfrac{m}{j})\\\\ &=g(n)g(m)-(\\sum\\limits_{i\\mid n}f(i)g(\\cfrac{n}{i}))(\\sum\\limits_{j\\mid m}f(j)g(\\cfrac{m}{j}))\\\\ &=g(n)g(m)-\\epsilon(n)\\epsilon(m)\\\\ &=g(n)g(m) \\end{aligned}其实上面这些全都是抄来的（ 莫比乌斯反演正向反演定义$\\mu$为$1$的逆。也就是说，$\\mu\\times 1=\\epsilon$。 如果您看过其他的一些关于莫比乌斯反演的学习笔记的话，您可能会看到如下的定义： 首先地，$\\mu(1)=1$。当$n&gt;1$时，如果$n$的所有质因子互不相同，设其有$k$个质因子，那么$\\mu(n)=(-1)^{k}$。否则，$\\mu(n)=0$。 那么，这两种定义等价吗？ 考虑到$\\mu$是一个积性函数，对于任意一个$n&gt;1$，如果我们把它分解成 n=\\prod\\limits_{i=1}^{N}p_{i}^{r_{i}}我们就有 \\mu(n)=\\prod\\limits_{i=1}^{N}\\mu(p_{i}^{r_{i}})因此，确定一个积性函数的函数值的关键在于确定其在质数的非负整数次幂上的取值。 设有一个质数$p$。不难发现 \\mu(p)=-\\mu(1)=-1\\mu(p^{2})=-\\mu(1)-\\mu(p)=-1+1=0\\mu(p^{3})=-\\mu(1)-\\mu(p)-\\mu(p^{2})=-1+1+0=0\\vdots至此，不难看出上文给出的两种定义是等价的。 那么这个东西有什么用呢？ 我们设 F(n)=\\sum\\limits_{i\\mid n}f(i)或者等价地说，$F=f\\times 1$。我们可以得到 \\begin{aligned} F&=f\\times 1\\\\ F\\times\\mu&=f\\times 1\\times\\mu\\\\ F\\times\\mu&=f \\end{aligned}像这样，如果说$F$相对好求，而$f$相对难求，我们就可以通过上式来减小我们求解$f$的难度。具体地说 f(n)=\\sum\\limits_{i\\mid n}F(i)\\mu(\\cfrac{n}{i})反向反演有些时候我们还需要用到像下面这样反过来的莫比乌斯反演 F(n)=\\sum\\limits_{n\\mid d}f(d)⇔f(n)=\\sum\\limits_{n\\mid d}F(d)\\mu(\\cfrac{d}{n})我们可以定义一种新的运算 (f\\otimes g)(n)=\\sum\\limits_{n\\mid d}f(d)g(\\cfrac{d}{n})我们不难证明出它具有结合律。具体过程与上文证明狄利克雷卷积的结合律的过程基本重复。那么我们就有 F=f\\otimes 1⇔F\\otimes\\mu=f于是就有了上面的反向反演。 Updated on 2018-12-03 例题……还是算了吧（ 发现反演常用的套路都忘的差不多了，还是别丢人了（ 杜教筛实现与模板题接下来才是主要内容。 现在，我们要求一个积性函数的前$n$项和。$n\\leqslant 10^{10}$。 我们定义 S(n)=\\sum\\limits_{i=1}^{n}f(i)再拿来一个积性函数$g$，然后把它与$f$卷积并求前缀和。 \\begin{aligned} \\sum_{i=1}^{n}(f\\times g)(i)&=\\sum_{i=1}^{n}\\sum_{j\\mid i}f(j)g(\\cfrac{i}{j})\\\\ &=\\sum_{i=1}^{n}g(i)\\sum_{j=1}^{\\lfloor\\frac{n}{i}\\rfloor}f(j)\\\\ &=\\sum_{i=1}^{n}g(i)S(\\lfloor\\cfrac{n}{i}\\rfloor) \\end{aligned}然而我的语文实在是太菜了，大概说也说不明白，自行理解吧（ 因为$g$也是积性函数，有$g(1)=1$，所以 \\begin{aligned} S(n)&=g(1)S(n)\\\\ &=\\sum_{i=1}^{n}g(i)S(\\lfloor\\cfrac{n}{i}\\rfloor)-\\sum_{i=2}^{n}g(i)S(\\lfloor\\cfrac{n}{i}\\rfloor)\\\\ &=\\sum_{i=1}^{n}(f\\times g)(i)-\\sum_{i=2}^{n}g(i)S(\\lfloor\\cfrac{n}{i}\\rfloor) \\end{aligned}就是说从第一项开始的前缀和减去从第二项开始的前缀和等于第一项本身。 如果说我们选择的$g$可以让我们迅速地求出$f\\times g$和$g$的前缀和，我们就可以做到快速求$f$的前缀和了。 关于后面的$g(i)S(\\lfloor\\cfrac{n}{i}\\rfloor)$，如果直接暴力算复杂度会是$O(n)$的，在大部分情况下，这是无法接受的。 我们来分析一下$\\lfloor\\cfrac{n}{i}\\rfloor$。如果$1\\leqslant i\\leqslant\\sqrt{n}$，因为$i$只有$\\sqrt{n}$种不同的取值，$\\lfloor\\cfrac{n}{i}\\rfloor$同样也只有$\\sqrt{n}$种不同的取值。如果$\\sqrt{n}&lt;i\\leqslant n$，$1\\leqslant\\lfloor\\cfrac{n}{i}\\rfloor&lt;\\sqrt{n}$，又因为要向下取整，自然也只有$\\sqrt{n}$种不同的取值。如果我们能够把$\\lfloor\\cfrac{n}{i}\\rfloor$相同的$i$一起计算，就能够将时间杂度优化到$O(\\sqrt{n})$。 大体代码如下： 1234for(re int l=1,r;l&lt;=n;l=r+1){ r=n/(n/l); //......} 关于$r$的这个上界是怎么来的，我并不会证（ 这样一来，要计算$S(n)$，我们需要调用所有的$\\lfloor\\cfrac{n}{x}\\rfloor$，分别是$\\lfloor\\cfrac{n}{1}\\rfloor,\\lfloor\\cfrac{n}{2}\\rfloor,\\cdots,\\lfloor\\cfrac{n}{\\sqrt{n}}\\rfloor,\\sqrt{n},\\sqrt{n}-1,\\cdots,1$。单独计算一个$S(n)$的时间复杂度很明显是$O(\\sqrt{n})$的。那么这样一来，总体的时间复杂度就是 \\begin{aligned} O(\\sum\\limits_{i=1}^{\\sqrt{n}}\\sqrt{i}+\\sqrt{\\lfloor\\cfrac{n}{i}\\rfloor})&=O(\\sum\\limits_{i=1}^{\\sqrt{n}}\\sqrt{\\lfloor\\cfrac{n}{i}\\rfloor})\\\\ &=O(\\int\\limits_{1}^{\\sqrt{n}}\\sqrt{\\lfloor\\cfrac{n}{x}\\rfloor}dx)\\\\ &=O(\\int\\limits_{1}^{\\sqrt{n}}\\sqrt{\\cfrac{n}{x}}dx)\\\\ &=O(2n^{\\frac{1}{2}}(n^{\\frac{1}{4}}-1))\\\\ &=O(n^{\\frac{3}{4}}) \\end{aligned}因为相比之下$\\sqrt{\\lfloor\\cfrac{n}{i}\\rfloor}$很明显要大一些，我们就可以将$\\sqrt{i}$舍去。然后去掉取整符号并用积分近似。 这个实现方法还可以优化。具体来讲，我们先线性筛出前$m$项，然后再用杜教筛。这么做的时间复杂度是$O(m+\\cfrac{n}{\\sqrt{m}})$，当$m=n^{\\frac{2}{3}}$时取得最小值$O(n^{\\frac{2}{3}})$。 举个例子，就比如说我们要求 \\sum\\limits_{i=1}^{n}\\varphi(i)我们取$f=\\varphi,g=1$，这样根据$\\varphi$的性质，$f\\times g=id$。不难看出$g$与$f\\times g$的前缀和都可以$O(1)$求。具体的代码实现差不多长这样： 1234567891011121314151617181920long long getSum(int n){ if(n&lt;=maxn) return phi[n]; //phi是提前线性筛好的前缀和 if(ans.count(n)) return ans[n]; //ans用来实现记忆化的哈希表，比如说unordered_map re long long res=1LL*n*(n+1)&gt;&gt;1; //f*g的前缀和 for(re int l=2,r;l&lt;=n;l=r+1){ //注意要从2开始 r=n/(n/l); res-=(r-l+1)*getSum(n/l); //r-l+1是g的前缀和 //像这样递归+记忆化求解f的前缀和 } return ans[n]=res; //返回的时候不要忘记存一下 //就比如说我就忘过一次（} 以及，不用哈希表也是可以的。因为我们查询的数都是形如$\\lfloor\\cfrac{n}{x}\\rfloor$的，当这个值大于$n^{\\frac{2}{3}}$，即$x&lt;n^{\\frac{1}{3}}$时，我们才会到哈希表里查询。因此我们可以令ans[x]表示$S(\\lfloor\\cfrac{n}{x}\\rfloor)$。具体代码我就不写了（ 再举个例子，求 \\sum\\limits_{i=1}^{n}\\mu(i)取$f=\\mu,g=1,f\\times g=\\epsilon$。代码和上面差不多。 如果您理解了上面两个函数，这道模板题您就可以切了。 其他题「Luogu-P3768」简单的数学题快乐地推式子： \\begin{aligned} \\sum\\limits_{i=1}^{n}i\\sum\\limits_{j=1}^{n}j\\text{gcd}(i,j)&=\\sum\\limits_{d=1}^{n}d^{3}\\sum\\limits_{i=1}^{\\lfloor\\frac{n}{d}\\rfloor}i\\sum\\limits_{j=1}^{\\lfloor\\frac{n}{d}\\rfloor}j[i\\perp j]\\\\ &=\\sum\\limits_{d=1}^{n}d^{3}\\sum\\limits_{i=1}^{\\lfloor\\frac{n}{d}\\rfloor}i\\sum\\limits_{j=1}^{\\lfloor\\frac{n}{d}\\rfloor}j\\sum\\limits_{x\\mid i,x\\mid j}\\mu(x)\\\\ &=\\sum\\limits_{d=1}^{n}d^{3}\\sum\\limits_{x=1}^{\\lfloor\\frac{n}{d}\\rfloor}x^{2}\\mu(x)\\text{Sum}^{2}(\\lfloor\\cfrac{n}{dx}\\rfloor)\\\\ &=\\sum\\limits_{i=1}^{n}\\text{Sum}^{2}(\\lfloor\\cfrac{n}{i}\\rfloor)i^{2}\\sum\\limits_{j\\mid i}j\\mu(\\cfrac{i}{j})\\\\ &=\\sum\\limits_{i=1}^{n}\\text{Sum}^{2}(\\lfloor\\cfrac{n}{i}\\rfloor)i^{2}\\varphi(i) \\end{aligned}其中 \\text{Sum}(n)=\\sum\\limits_{i=1}^{n}i最后一步是因为 \\begin{aligned} id\\times\\mu&=\\varphi\\times 1\\times\\mu\\\\ &=\\varphi\\times\\epsilon\\\\ &=\\varphi \\end{aligned}理解不了上面的式子的话就多看看吧（ 不难发现我们是要求$f(n)=n^{2}\\varphi(n)$的前缀和，那么，我们该怎么选取$g$呢？ 枚举瞎蒙（ 考虑$g(n)=n^{2}$。 \\begin{aligned} (f\\times g)(n)&=\\sum\\limits_{i\\mid n}f(i)g(\\cfrac{n}{i})\\\\ &=\\sum\\limits_{i\\mid n}i^{2}\\varphi(i)\\cfrac{n^{2}}{i^{2}}\\\\ &=n^{2}\\sum\\limits_{i\\mid n}\\varphi(i)\\\\ &=n^{3} \\end{aligned}其实我都不知道我当时是怎么想到这种操作的（ 然后就和上面一样了。 「Luogu-U18201」分析矿洞不知道从哪翻出来的题（ 是某场个人邀请赛的$\\text{T}1$，从某种意义上也能看出那场比赛有多么神仙。 \\begin{aligned} \\sum\\limits_{i=1}^{n}\\sum\\limits_{j=1}^{n}\\varphi(\\text{gcd}^{2}(i,j))&=\\sum\\limits_{d=1}^{n}\\varphi(d^{2})\\sum\\limits_{i=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\sum\\limits_{j=1}^{\\lfloor\\frac{n}{d}\\rfloor}[i\\perp j]\\\\ &=\\sum\\limits_{d=1}^{n}\\varphi(d^{2})\\sum\\limits_{i=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\sum\\limits_{j=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\sum\\limits_{x\\mid i,x\\mid j}\\mu(x)\\\\ &=\\sum\\limits_{d=1}^{n}\\varphi(d^{2})\\sum\\limits_{x=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\mu(x)\\lfloor\\cfrac{n}{dx}\\rfloor^{2}\\\\ &=\\sum\\limits_{i=1}^{n}\\lfloor\\cfrac{n}{i}\\rfloor^{2}\\sum\\limits_{j\\mid i}\\varphi(j^{2})\\mu(\\cfrac{i}{j})\\\\ &=\\sum\\limits_{i=1}^{n}\\lfloor\\cfrac{n}{i}\\rfloor^{2}\\sum\\limits_{j\\mid i}j\\varphi(j)\\mu(\\cfrac{i}{j}) \\end{aligned}设$f_1(n)=n\\varphi(n),f_2(n)=\\mu(n)$，考虑筛$f=f_1\\times f_2$的前缀和。然而，与上面的其它题不同，并不存在一个$g$使我们能够$O(1)$地求出$g$和$f\\times g$的前缀和。一种较优的方案是，令$g=1$，$f\\times g=(id\\cdot\\varphi)\\times\\mu\\times 1=id\\cdot\\varphi$，这样，我们还需要筛出$f_1(n)=n\\varphi(n)$的前缀和。 怎么办？ 再套一层杜教筛！ 然而可能是常数会有些大也可能是我太菜了自带大常数，好像会跑的很慢（ 以及，像这种$n$爆了int的，一定要注意经常取模。因为这个WA了好几次（ 最后，源文件$17\\text{KB}​$祭，blog翻页祭。","link":"/number-theory-learning-notes/"},{"title":"「NOIp2018游记」夢の終わるところ","text":"€€£：禁赛警告。 Day 0自从一周前放假回来以后，我就开始一颓不振： 明天就是NOIp2018复赛了，大概算是我人生中的第四场NOIp了。上午我和平时一样在颓废，同时看着其他dalao随手切神仙题。然后我看到yemdalao写了一篇NOIp2018禁赛记游记，想着禁赛真有趣，我就写下了这篇游记。 其他dalao都在机房补文化课而我在颓blog（ 于是，此处以下，Updated on 2018-11-12。 Updated on 2018-11-14 看了其他dalao的blog发现自己写得实在是太菜了，于是大改一波。 但就算这样好像也没什么可写的。看到其他dalao用了大段文字来描写自己做题时的心理活动，但是……今年的题都是简单的想一想就会了，难的看一眼就能明白谁打正解谁退役，能有什么心理活动啊（逃 中午去超市随便买了点吃的就走了，然后上了车直接就睡过去了，到了CYYZ大概15点了。 然后一抽考场发现是外校，赛前先rp--。 然后和wzxdalao分到了一个宿舍。听说他被mhr学长奶了一路，我大概是被传染了吧（ 下午一直在换宿舍，理由都差不多，就是其他学校的同一个学校的想住在同一个宿舍，莫名感觉rp被补回来了（ 除那之外就没啥了，算是颓了一个下午。 晚上试机，庆幸自己用的是Win7，然后对面机房就是XP，下午的rp看来补得有效（ 试机就xjb打了个st表，还有我平时用的快读板子，当时是都存到E盘了，说不定明天会用得上。 反正板子是不可能打炸的，这辈子都不可能的。 因为某些原因，试机时间被推迟了，回来已经过了10点，就直接睡了。 Day 1早上懒得吃早饭了，就一个人在宿舍里发呆，想着自己肯定什么东西都带全了，结果一到考场发现准考证没带，尴尬.jpg。不过还好，我被允许先进考场了。 然后一打开E盘发现被清了，只有题目。 Day1的解压密码是不是就我一个人不懂啊（ 那么于是，到了8：30，我点开今天的题目，定神一看…… T1智障单调栈，有不开数组的做法，不过我懒得细想了，反正score+=100。 T2稍微想一想不难想到完全背包，score+=100。 T3神仙树上操作……切不动切不动。我就打了$m=1$的20分和树是一条链中的5分。 估分100+100+25=225。 出考场后……啥啥啥，今天考了三道原题？爆破！把NOIp爆破掉，并从此以后不再接受CCF的公开赛！（ 前两题没什么意外的。不过，是不是是个人T3就能骗到55分啊（ 那我可真是太菜了（ 下午日常发呆，然后晚上是快乐的颓废时间。 中午买的零食一个下午就全吃完了（ Day 2早上莫名起不来，然后就没吃早饭。 这次我东西是真的带全了（ Day2的解压密码依然不懂，然后是今天的题目： T1NOIp开始考基环树了么……不过还算简单，找到环以后暴力断边然后dfs即可。听crydalao说有$O(n)$的做法，不过他调了两个小时还是放弃了。 现在回想起来，我当时用了个什么智障存图方法啊……先开个邻接表，对每个点std::sort一遍。然后维护一个邻接矩阵处理断边（ 为什么不直接用邻接矩阵呢（ T2神仙结论题……切不动切不动。随便打了个爆搜找到了$n=2$和$n=3$时的规律。虽然说$n=1$时规律很明显，然而我当时智障忘判断了（ T3究极神仙题，读完题yy出ddp，然而不会，只拿了$O(nm)$的44分。 估分100+65+44=204（不存在的，肯定比这个低）。 这么两天算下来，乐观估计的话，差不多有100+100+25+100+65+44=434分，保守估计应该不会掉到400分以下，应该算是稳了吧…… 不不不不存在的，我一定会六道题全部写炸然后华丽爆零并退役（ 好像其他dalao们都有这样那样乱七八糟的地方出锅了啊…… 下午请假回家开心地颓废。 Extra Notes果然是等到NOIp结束后才更新的。 以及，我比较菜，第一次写游记，写的可能一定很菜，所以……算了，告辞。 Updated on 2018-11-26 好像有些晚的更新。 出正式成绩之后被教练赶回教室补了一段时间文化课，感觉刚刚度过了人生中最长的一星期（ 具体成绩差不多是100+100+20+100+65+36=421。 以上。","link":"/noip-2018-notes/"},{"title":"「Luogu-P5009」毒瘤分块题","text":"传送门 从来没做过这么毒瘤的题qaq 就算看了题解现在还是一脸懵逼qaq 首先，题目带了分块，我们可以先考虑分块。但是我太菜了不知道分块怎么写，所以我写的线段树qaq 对$v$的修改相对来说比较简单，我们来重点看对$a$和$b$的修改。假设在某个时刻$t_1$，我们将某个$a_i$加上了$x$，然后又在某个时刻$t_2(t_2&gt;t_1)$，我们要查询之前那个位置上的值，很明显地，答案应该是$v_i+t_1a_ib_i+(t_2-t_1)(a_i+x)b_i$。但是如果真的像这样计算，每次修改就要在这个表达式后面加上一项，很难有效地维护大量的修改。考虑到对$v$的修改比较简单，我们可以通过修改$v$将表达式维持在一个较为简单的形式。形式化地，我们可以找到一个$v_i^\\prime$使得$v_i^\\prime+t_1(a_i+x)b_i=v+t_1a_ib_i$，并将$v_i$修改至$v_i^\\prime$，然后查询的时候我们就可以直接返回$v_i^\\prime+t_2(a_i+x)b_i$了。不难发现$v_i^\\prime=v_i-t_1xb_i$。 需要注意的是，因为我们要使用线段树维护，必然会遇到同一个区间被连续修改多次的情况。假设有这样一个区间，区间内$a$的总修改值是$x$，$b$的总修改值是$y$，那么在某一时刻$t$，该区间内所有值的和应该是$\\Sigma v_i+t\\Sigma (a_i+x)(b_i+y)$。现在我们考虑将$a$加上$z$，此时$\\Sigma v_i^\\prime+t\\Sigma (a_i+x+z)(b_i+y)=\\Sigma v_i+t\\Sigma (a_i+x)(b_i+y)$，即$\\Sigma v_i^\\prime=\\Sigma v_i-tz\\Sigma (b_i+y)$。 不过，上式中$tz\\Sigma (b_i+y)$的$(b_i+y)$指的是修改后的$b_i$的值，我们是肯定不能在下推标记时存储每一个历史版本的$b_i$的。我们考虑拆括号，将上式拆成$tz\\Sigma b_i+tzy$，其中$tzy$是一个常数，我们可以直接累加入标记。而至于$tz\\Sigma b_i$，考虑到每层节点的$\\Sigma b_i$都不同，我们可以维护一个$B$，意思是$\\Sigma v_i+=B\\Sigma b_i$，每次修改时$B+=tz$。当然，我们还需要一个标记来记录对$a$自身的修改。对$b$的修改也是类似的。 然后是毒瘤的下推标记。 123456addv[son]+=A[father]*suma[son]+B[father]*sumb[son]+addv[father];//就是上面这句qaq现在还是一脸懵逼qaqA[son]+=A[father];B[son]+=B[father];adda[son]+=adda[father];addb[son]+=addf[father]; 其实我也不知道我上面在扯些啥，所以以下是代码，反正应该没人能看懂我的清奇写法（ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225#include&lt;cstdio&gt;#define re register#define maxn 200005#define maxm 200005#define mod 100000007namespace cltstream{ #define size 1048576 char cltin[size+1],*ih=cltin,*it=cltin; inline char gc(){ #ifdef ONLINE_JUDGE if(ih==it){ it=(ih=cltin)+fread(cltin,1,size,stdin); if(ih==it) return EOF; } return *ih++; #else return getchar(); #endif } char cltout[size+1],*oh=cltout,*ot=cltout+size; inline void pc(char c){ if(oh==ot){ fwrite(cltout,1,size,stdout); oh=cltout; } *oh++=c; } #define clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout) #undef size template &lt;typename _tp&gt; inline void read(_tp&amp; x){ int sn=1; char c=gc(); for(;c!=45&amp;&amp;(c&lt;48||c&gt;57)&amp;&amp;c!=EOF;c=gc()); if(c==45&amp;&amp;c!=EOF) sn=-1,c=gc(); for(x=0;c&gt;=48&amp;&amp;c&lt;=57&amp;&amp;c!=EOF;x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=gc()); x*=sn; } template &lt;typename _tp&gt; inline void write(_tp x,char text=-1){ if(x&lt;0) pc(45),x=-x; if(!x) pc(48); else{ int digit[22]; for(digit[0]=0;x;digit[++digit[0]]=x%10,x/=10); for(;digit[0];pc(digit[digit[0]--]^48)); } if(text&gt;=0) pc(text); }}int n,m;int sumv[(maxn&lt;&lt;2)+1],suma[(maxn&lt;&lt;2)+1],sumb[(maxn&lt;&lt;2)+1],sump[(maxn&lt;&lt;2)+1];int A[(maxn&lt;&lt;2)+1],B[(maxn&lt;&lt;2)+1];int addv[(maxn&lt;&lt;2)+1],adda[(maxn&lt;&lt;2)+1],addb[(maxn&lt;&lt;2)+1];inline void pushDown(int cur,int ln,int rn){ sumv[cur&lt;&lt;1]=(sumv[cur&lt;&lt;1]+1LL*A[cur]*suma[cur&lt;&lt;1]%mod)%mod; sumv[cur&lt;&lt;1]=(sumv[cur&lt;&lt;1]+1LL*B[cur]*sumb[cur&lt;&lt;1]%mod)%mod; sumv[cur&lt;&lt;1]=(sumv[cur&lt;&lt;1]+1LL*ln*addv[cur]%mod)%mod; sump[cur&lt;&lt;1]=(sump[cur&lt;&lt;1]+1LL*adda[cur]*sumb[cur&lt;&lt;1]%mod)%mod; sump[cur&lt;&lt;1]=(sump[cur&lt;&lt;1]+1LL*addb[cur]*suma[cur&lt;&lt;1]%mod)%mod; sump[cur&lt;&lt;1]=(sump[cur&lt;&lt;1]+1LL*adda[cur]*addb[cur]%mod*ln%mod)%mod; suma[cur&lt;&lt;1]=(suma[cur&lt;&lt;1]+1LL*ln*adda[cur]%mod)%mod; sumb[cur&lt;&lt;1]=(sumb[cur&lt;&lt;1]+1LL*ln*addb[cur]%mod)%mod; addv[cur&lt;&lt;1]=(addv[cur&lt;&lt;1]+1LL*A[cur]*adda[cur&lt;&lt;1]%mod)%mod; addv[cur&lt;&lt;1]=(addv[cur&lt;&lt;1]+1LL*B[cur]*addb[cur&lt;&lt;1]%mod)%mod; addv[cur&lt;&lt;1]=(addv[cur&lt;&lt;1]+addv[cur])%mod; A[cur&lt;&lt;1]=(A[cur&lt;&lt;1]+A[cur])%mod; B[cur&lt;&lt;1]=(B[cur&lt;&lt;1]+B[cur])%mod; adda[cur&lt;&lt;1]=(adda[cur&lt;&lt;1]+adda[cur])%mod; addb[cur&lt;&lt;1]=(addb[cur&lt;&lt;1]+addb[cur])%mod; sumv[cur&lt;&lt;1|1]=(sumv[cur&lt;&lt;1|1]+1LL*A[cur]*suma[cur&lt;&lt;1|1]%mod)%mod; sumv[cur&lt;&lt;1|1]=(sumv[cur&lt;&lt;1|1]+1LL*B[cur]*sumb[cur&lt;&lt;1|1]%mod)%mod; sumv[cur&lt;&lt;1|1]=(sumv[cur&lt;&lt;1|1]+1LL*rn*addv[cur]%mod)%mod; sump[cur&lt;&lt;1|1]=(sump[cur&lt;&lt;1|1]+1LL*adda[cur]*sumb[cur&lt;&lt;1|1]%mod)%mod; sump[cur&lt;&lt;1|1]=(sump[cur&lt;&lt;1|1]+1LL*addb[cur]*suma[cur&lt;&lt;1|1]%mod)%mod; sump[cur&lt;&lt;1|1]=(sump[cur&lt;&lt;1|1]+1LL*adda[cur]*addb[cur]%mod*rn%mod)%mod; suma[cur&lt;&lt;1|1]=(suma[cur&lt;&lt;1|1]+1LL*rn*adda[cur]%mod)%mod; sumb[cur&lt;&lt;1|1]=(sumb[cur&lt;&lt;1|1]+1LL*rn*addb[cur]%mod)%mod; addv[cur&lt;&lt;1|1]=(addv[cur&lt;&lt;1|1]+1LL*A[cur]*adda[cur&lt;&lt;1|1]%mod)%mod; addv[cur&lt;&lt;1|1]=(addv[cur&lt;&lt;1|1]+1LL*B[cur]*addb[cur&lt;&lt;1|1]%mod)%mod; addv[cur&lt;&lt;1|1]=(addv[cur&lt;&lt;1|1]+addv[cur])%mod; A[cur&lt;&lt;1|1]=(A[cur&lt;&lt;1|1]+A[cur])%mod; B[cur&lt;&lt;1|1]=(B[cur&lt;&lt;1|1]+B[cur])%mod; adda[cur&lt;&lt;1|1]=(adda[cur&lt;&lt;1|1]+adda[cur])%mod; addb[cur&lt;&lt;1|1]=(addb[cur&lt;&lt;1|1]+addb[cur])%mod; A[cur]=B[cur]=addv[cur]=adda[cur]=addb[cur]=0;}inline void pushUp(int cur){ sumv[cur]=(sumv[cur&lt;&lt;1]+sumv[cur&lt;&lt;1|1])%mod; suma[cur]=(suma[cur&lt;&lt;1]+suma[cur&lt;&lt;1|1])%mod; sumb[cur]=(sumb[cur&lt;&lt;1]+sumb[cur&lt;&lt;1|1])%mod; sump[cur]=(sump[cur&lt;&lt;1]+sump[cur&lt;&lt;1|1])%mod;}void build(int cur,int l,int r){ if(l==r){ cltstream::read(sumv[cur]); cltstream::read(suma[cur]); cltstream::read(sumb[cur]); sumv[cur]=(sumv[cur]%mod+mod)%mod; suma[cur]=(suma[cur]%mod+mod)%mod; sumb[cur]=(sumb[cur]%mod+mod)%mod; sump[cur]=1LL*suma[cur]*sumb[cur]%mod; } else{ int mid=(l+r)&gt;&gt;1; build(cur&lt;&lt;1,l,mid); build(cur&lt;&lt;1|1,mid+1,r); pushUp(cur); }}int query(int L,int R,int t,int cur,int l,int r){ if(l&gt;=L&amp;&amp;r&lt;=R) return (sumv[cur]+1LL*t*sump[cur]%mod)%mod; else{ int mid=(l+r)&gt;&gt;1,res=0; pushDown(cur,mid-l+1,r-mid); if(L&lt;=mid) res=(res+query(L,R,t,cur&lt;&lt;1,l,mid))%mod; if(R&gt;mid) res=(res+query(L,R,t,cur&lt;&lt;1|1,mid+1,r))%mod; return res; }}void modifyV(int L,int R,int x,int cur,int l,int r){ if(l&gt;=L&amp;&amp;r&lt;=R){ sumv[cur]=(sumv[cur]+1LL*(r-l+1)*x%mod)%mod; addv[cur]=(addv[cur]+x)%mod; } else{ int mid=(l+r)&gt;&gt;1; pushDown(cur,mid-l+1,r-mid); if(L&lt;=mid) modifyV(L,R,x,cur&lt;&lt;1,l,mid); if(R&gt;mid) modifyV(L,R,x,cur&lt;&lt;1|1,mid+1,r); pushUp(cur); }}void modifyA(int L,int R,int t,int x,int cur,int l,int r){ if(l&gt;=L&amp;&amp;r&lt;=R){ sumv[cur]=(sumv[cur]+(-1LL*x*t%mod*sumb[cur]%mod+mod)%mod)%mod; suma[cur]=(suma[cur]+1LL*(r-l+1)*x%mod)%mod; sump[cur]=(sump[cur]+1LL*sumb[cur]*x%mod)%mod; B[cur]=(B[cur]+(-1LL*x*t%mod+mod)%mod)%mod; addv[cur]=(addv[cur]+(-1LL*x*t%mod*addb[cur]%mod+mod)%mod)%mod; adda[cur]=(adda[cur]+x)%mod; } else{ int mid=(l+r)&gt;&gt;1; pushDown(cur,mid-l+1,r-mid); if(L&lt;=mid) modifyA(L,R,t,x,cur&lt;&lt;1,l,mid); if(R&gt;mid) modifyA(L,R,t,x,cur&lt;&lt;1|1,mid+1,r); pushUp(cur); }}void modifyB(int L,int R,int t,int x,int cur,int l,int r){ if(l&gt;=L&amp;&amp;r&lt;=R){ sumv[cur]=(sumv[cur]+(-1LL*x*t%mod*suma[cur]%mod+mod)%mod)%mod; sumb[cur]=(sumb[cur]+1LL*(r-l+1)*x%mod)%mod; sump[cur]=(sump[cur]+1LL*suma[cur]*x%mod)%mod; A[cur]=(A[cur]+(-1LL*x*t%mod+mod)%mod)%mod; addv[cur]=(addv[cur]+(-1LL*x*t%mod*adda[cur]%mod+mod)%mod)%mod; addb[cur]=(addb[cur]+x)%mod; } else{ int mid=(l+r)&gt;&gt;1; pushDown(cur,mid-l+1,r-mid); if(L&lt;=mid) modifyB(L,R,t,x,cur&lt;&lt;1,l,mid); if(R&gt;mid) modifyB(L,R,t,x,cur&lt;&lt;1|1,mid+1,r); pushUp(cur); }}int main(){ cltstream::read(n); cltstream::read(m); build(1,1,n); for(re int i=1;i&lt;=m;++i){ int opt,t,l,r,x; cltstream::read(opt); cltstream::read(t); cltstream::read(l); cltstream::read(r); switch(opt){ case 1: cltstream::write(query(l,r,t,1,1,n),10); break; case 2: cltstream::read(x); modifyA(l,r,t,(x%mod+mod)%mod,1,1,n); break; case 3: cltstream::read(x); modifyB(l,r,t,(x%mod+mod)%mod,1,1,n); break; case 4: cltstream::read(x); modifyV(l,r,(x%mod+mod)%mod,1,1,n); break; } } clop(); return 0;} 大概是我太菜了不适合做这种毒瘤题吧qaq 距 在NOIp2018爆零 还剩 1 天。","link":"/luogu-p5009-solution/"},{"title":"状态压缩动态规划学习笔记","text":"把标签和分类连在一起读就是标题了（ 好像上一篇珂朵莉树学习笔记也是这样（ 马上就要复赛了，但反正我已经退役预定了来颓blog吧。 首先我们来看一道例题，「USACO06NOV」玉米田Corn Fields。 首先，我们想到定义f[i][...]表示当前处理到第$i$行，然后blablabla一堆状态的总方案数。既然任意两块草地之间不能有公共边，我们肯定需要记录第$i$行哪些地方种了草，哪些地方没种草。那么我们记录的状态就是……f[i][0/1]...(省略10个[0/1])...[0/1]，后面$12$维状态中第$j+1$维表示的是第$i$行第$j$列是否种草。 但是等等……$13$维的状态…… 注意到，后面$12$维状态只有$0$和$1$，于是我们就有了这么一个想法：把后$12$维状态看成一个$2$进制数，其中从右往左第$i$位表示当前行第$i$列是否种草，$1$表示种，$0$表示不种。在这一过程中，我们将后$12$维状态「压缩」成了一个$2$进制数，这也正是「状态压缩」这个名字的含义。 于是，现在我们定义f[i][S]表示当前处理到第$i$行，其中第$i$行的状态是$S$的总方案数。在转移时，我们还需要判断状态是否合法，我们可以定义a[i]表示第$i$行哪些格子能种草，$1$表示能，$0$表示不能。valid[S]表示如果不考虑某些格子不能种草，状态$S$是否合法，也就是是否不存在两个相邻的$1$。a[i]在读入时就可以处理出来，至于valid[S]，我们可以通过这样的一个循环处理出来： 12for(re int i=1;i&lt;(1&lt;&lt;m);++i) valid[i]=valid[i&gt;&gt;1]&amp;(~(i&amp;(i&gt;&gt;1)&amp;1)); 用人话来讲就是[S是否合法]=[S&gt;&gt;1是否合法]&amp;[S与S&gt;&gt;1的最后一位是否不同为1]。 在转移时，我们认为当前枚举到的状态是合法的当且仅当它只在能种草的格子上种草，并且不与上一行的状态冲突，也就是(S|a[i])==a[i]&amp;&amp;valid[S]&amp;&amp;(S&amp;S')==0。 123456789for(re int i=0;i&lt;(1&lt;&lt;m);++i) if((i|a[1])==a[1]&amp;&amp;valid[i]) f[1][i]=1;for(re int i=2;i&lt;=n;++i) for(re int j=0;j&lt;(1&lt;&lt;m);++j) if((j|a[i])==a[i]&amp;&amp;valid[j]) for(re int k=0;k&lt;(1&lt;&lt;m);++k) if((k|a[i-1])==a[i-1]&amp;&amp;valid[k]&amp;&amp;(k&amp;j)==0) (f[i][j]+=f[i-1][k])%=mod; 粗略计算的话，时间复杂度差不多是$O(n4^m)$，最坏情况下差不多是$12\\times 4^{12}=201326592$，看着很吓人，然而实际上，其中大部分状态都是不合法的，会被我们的两个if剪掉，因而实际运行跑得比谁都快（ 为了更好地体会状压的复杂度的神奇之处，我们再来看一下这道题，「NOI2001」炮兵阵地。 因为一个炮兵部队的攻击范围能够上下扩展两行，我们在记录状态时，需要记录之前两行的状态，也就是用f[i][S1][S2]表示当前处理到第$i$行，第$i-1$行状态为$S1$，第$i$状态为$S2$时最多能放多少个炮兵部队。我们自然也需要记录a[i]和valid[S]，不过，这次valid[s]的预处理过程差不多是这样： 12for(re int i=1;i&lt;(1&lt;&lt;m);++i){ valid[i]=(i&amp;1)?valid[i&gt;&gt;3]&amp;((~i)&gt;&gt;2)&amp;((~i)&gt;&gt;1):valid[i&gt;&gt;1]; 看起来有些非常复杂，用人话来讲就是……诶我当时是不是写错了（ ……不好像又没写错…… 好吧没写错。 如果$S$的最后一位是$1$，则[S是否合法]=[S&gt;&gt;3是否合法]&amp;[S的倒数第2位和倒数第3位是否都为0]，否则[S是否合法]=[S&gt;&gt;1是否合法]。 因为我们要求的是最多能放多少个炮兵部队，我们还需要知道某个状态放了多少个炮兵部队，也就是某个状态$S$在二进制下$1$的个数，我们可以这样处理： 12for(re int i=1;i&lt;(1&lt;&lt;m);++i) cnt[i]=cnt[i&gt;&gt;1]+(i&amp;1); 转移过程如下： 12345678910111213for(re int i=0;i&lt;(1&lt;&lt;m);++i) if((i|a[1])==a[1]&amp;&amp;valid[i]) for(re int j=0;j&lt;(1&lt;&lt;m);++j) if((j|a[2])==a[2]&amp;&amp;valid[j]&amp;&amp;(i&amp;j)==0) f[2][i][j]=cnt[i]+cnt[j];for(re int i=3;i&lt;=n;++i) for(re int j=0;j&lt;(1&lt;&lt;m);++j) if((j|a[i-2])==a[i-2]&amp;&amp;valid[j]) for(re int k=0;k&lt;(1&lt;&lt;m);++k) if((k|a[i-1])==a[i-1]&amp;&amp;valid[k]&amp;&amp;(j&amp;k)==0) for(re int l=0;l&lt;(1&lt;&lt;m);++l) if((l|a[i])==a[i]&amp;&amp;valid[l]&amp;&amp;(l&amp;j)==0&amp;&amp;(l&amp;k)==0) f[i][k][l]=max(f[i][k][l],f[i-1][j][k]+cnt[l]); 时间复杂度差不多是$O(n8^m)$，最坏情况下差不多是$100\\times 8^{10}=107374182400$，然而由于转移过程中的大量剪枝，实际时间复杂度差不多是$O(\\text{won’t TLE})$（ 我们再来看一个状压的应用，「SP3953」MMINPAID - Paid Roads，或者您也可以反正我就是在洛谷上提交。 大概是一道最短路，然而与一般的最短路不同的是，在这道题中，经过某条边之前所经过的节点集合如果不同，可能会导致花费的不同。这样一来，我们一般的最短路算法就会有后效性。解决方法也很简单，就是把经过节点集合压缩到一个$2$进制数内。定义dis[u][S]为只经过$S$内的节点的前提下，从$1$到$u$的最小花费。对于$u$发出的所有边的终点$v$，dis[v][S|(1&lt;&lt;(v-1))]=min(dis[v][S|(1&lt;&lt;(v-1))],dis[u][S]+cost)，其中$cost$表示经过从$u$到$v$这条边的花费，当然这需要分情况讨论。 这样一来，我们只需要写一个可重复入队的堆优化Dijkstra就可以了。需要注意的是，我们需要把节点与经过节点集合看成是一个整体，或者说，将它们联系在一起然后抽象成一个「点」。 我是不会说我把impossible打成Impossible然后交上去WA了一发的（ 一般情况下，如果一道题数据范围很小，但是爆搜过不去，比如说$n\\leqslant 20$，就很有可能是状压题或者也有可能是神仙剪枝题。大部分状压的时间复杂度都不会直接是一个$O(2^n)$，$O(n2^n)$或者说$O(n^22^n)$大概比较常见，当然我比较菜，做过的题比较少，所以这一段基本是瞎扯。 以上，我觉得我的状压讲的差不多了（","link":"/status-compression-learning-notes/"},{"title":"珂朵莉树学习笔记","text":"还有三周就是NOIp复赛了，我还在这学些乱七八糟的东西怕不是要凉。 话说上面那个数字是3你们看的出来吗，反正我在我的编辑器内看不出来。 总之就是，我们机房的一位珂学家突然沉迷数据结构并不知道从哪翻出来的毒瘤数据结构。 我们先来看一道毒瘤例题，「CF896C」Willem, Chtholly and Seniorious。 如果只看前三个操作的话，虽然我不会写也没写过，我觉得分块大概是可以做的。然而操作四是个什么鬼？区间$10^{9}$次方和？认真的？ 这种时候我们就需要用到珂朵莉树了。珂朵莉树的英文名叫Old Driver Tree，简称ODT。当然您也可以叫它Chtholly Tree。从本质上来讲，珂朵莉树是一种基于std::set的暴力数据结构，虽然您也可以手写一颗平衡树，它的高效几乎全部建立在数据的完全随机上。如果您看过一些其他的珂朵莉树的学习笔记或者是题解的话，您应该总是会看到这样一句话： 珂朵莉树的核心操作在于推平一段区间，使一整段区间内的东西变得一样。 那么怎么推平呢？不急，我们慢慢讲。 珂朵莉树存储的是区间，而且每个区间内的所有值都相同，也就是说，我们需要存储的是一个区间的左右端点和值。我们可以写一个结构体： 1234567891011121314151617struct node{ int l,r; mutable long long val; //这里的mutable是为了让我们在之后的修改过程中可以修改val的值 node(int _l,int _r=-1,long long _val=-1){ //调用时_r或_val不填的话默认-1，为了后面split时方便 l=_l; r=_r; val=_val; }};std::set&lt;node&gt; s;inline bool operator&lt;(node p,node q){ return p.l&lt;q.l;} 然后我们就可以初始化了。对于这道题，我们可以像这样初始化： 12for(re int i=1;i&lt;=n;++i) s.insert(node(i,i,rnd()%maxval+1)); 初始化完了？ 初始化完了。 然后就是珂朵莉树的核心操作之一， 1std::&lt;set&gt;::iterator split(int pos) 作用是分离出一个左端点为pos的区间并返回它的迭代器。它的具体实现如下： 1234567891011121314151617#define _it std::set&lt;node&gt;::iterator//上面这句手打非常麻烦，建议宏定义inline _it split(int pos){ _it it=std::lower_bound(s.begin(),s.end(),node(pos)); //找第一个左端点大于等于pos的区间 if(it!=s.end()&amp;&amp;it-&gt;l==pos) return it; //如果找到了一个左端点恰好为pos的区间，我们就不用split了，直接返回它的迭代器 --it; //否则当前区间的左端点一定大于pos，pos这个位置一定在前一个区间内 int l=it-&gt;l,r=it-&gt;r; long long val=it-&gt;val; s.erase(it); s.insert(node(l,pos-1,val)); return s.insert(node(pos,r,val)).first; //将区间[l,r]删除，并插入区间[l,pos)和[pos,r]} 虽然只是把一个区间砍成两半又放回去了，但我们并不是在做无用功，因为我们把原区间与操作无关的部分分离开了。 insert函数的返回值类型是std::pair&lt;std::_Rb_tree_const_iterator&lt;node&gt;,bool&gt;，别问我啥意思我也不懂，我只是从它的错误报告里抄过来了，因此我们需要加个.first。 std::set内部是用红黑树实现的，虽然我没写过，不过据说，它每次操作的时间复杂度都是近似$O(\\operatorname{log}n)$的。 然后是一个同样很核心的操作， 1void assign(int l,int r,int x) 将区间$[l,r]$推平，全部赋成$x$。它的具体实现如下： 123456789inline void assign(int l,int r,int x){ _it itr=split(r+1),itl=split(l); //注意一定要先split(r+1)再split(l)，因为如果l与r+1一开始恰好在同一区间内 //后split(r+1)~~大概~~会修改树中左端点为l的区间的迭代器 s.erase(itl,itr); //将[itl,itr)内所有区间删除 s.insert(node(l,r,x)); //用一个大区间取代它们} 这就完了？ 这就完了。 assign操作保证了珂朵莉树的时间复杂度，在数据随机的情况下，会使得set的大小迅速减小，并最终趋于$\\operatorname{log}n$。本题的操作二就只需调用一次assign(l,r,x)即可。 然后是剩下的三个操作，一个比一个暴力。 操作一，一个一个区间地拿出来加。 12345inline void IntervalAdd(int l,int r,int x){ _it itr=split(r+1),itl=split(l); for(re _it p=itl;p!=itr;++p) p-&gt;val+=x;} 就这么几行？ 就这么几行。 操作三，把所有区间取出来，然后直接调用std::sort。 12345678910111213inline long long IntervalXth(int l,int r,int x){ _it itr=split(r+1),itl=split(l); vec.clear(); for(re _it p=itl;p!=itr;++p) vec.push_back(std::make_pair(p-&gt;val,p-&gt;r-p-&gt;l+1)); std::sort(vec.begin(),vec.end()); for(re unsigned i=0;i&lt;vec.size();++i){ x-=vec[i].second; if(x&lt;=0) return vec[i].first; } return 0;} 操作四，暴力快速幂。 1234567inline int IntervalXpow(int l,int r,int x,int y){ _it itr=split(r+1),itl=split(l); int res=0; for(re _it p=itl;p!=itr;++p) res=(1LL*res+1LL*(p-&gt;r-p-&gt;l+1)*cltpow(p-&gt;val%y,x,y)%y)%y; return res;} 您可能会想，这么暴力的东西，时间复杂度确定不会动不动原地起爆？ 这是我在CodeForces上的提交记录： 这是我之前提到的那位不愿意透露姓名的珂学家的跑得最快的一次提交记录： 珂幻.jpg 因为珂朵莉树的高效几乎全部建立在数据的完全随机上，能用珂朵莉树做的题并没有多少，大部分是在做正解是线段树之类的题想不出正解时骗分用。就比如说，我在学习珂朵莉树时参考的一篇题解提到了「CF915E」Physical Education Lessons，然而…… Updated on 2018-11-01 后来我卡了卡常数过了…… 以及，删掉了某些内容（ 于是，接下来是珂朵莉树的完整板子。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;#include&lt;set&gt;#define re register#define maxn 100000#define _it std::set&lt;node&gt;::iteratornamespace cltstream{ #ifdef ONLINE_JUDGE #define size 1048576 char str[size+1],*head=str,*tail=str; inline char gc(){ if(head==tail){ tail=(head=str)+fread(str,1,size,stdin); if(head==tail) return EOF; } return *head++; } #undef size #else #define gc getchar #endif template &lt;typename _tp&gt; inline void read(_tp&amp; x){ int sn=1; char c=gc(); for(;c!=45&amp;&amp;(c&lt;48||c&gt;57)&amp;&amp;c!=EOF;c=gc()); if(c==45&amp;&amp;c!=EOF) sn=-1,c=gc(); for(x=0;c&gt;=48&amp;&amp;c&lt;=57&amp;&amp;c!=EOF;x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=gc()); x*=sn; } template &lt;typename _tp&gt; inline void write(_tp x,char text=' '){ if(x&lt;0) putchar(45),x=-x; if(!x) putchar(48); else{ int digit[20]; for(digit[0]=0;x;digit[++digit[0]]=x%10,x/=10); for(;digit[0];putchar(digit[digit[0]--]^48)); } putchar(text); }}int n,m,seed,maxval;struct node{ int l,r; mutable long long val; node(int _l,int _r=-1,long long _val=-1){ l=_l; r=_r; val=_val; }};std::set&lt;node&gt; s;std::vector&lt;std::pair&lt;long long,int&gt; &gt; vec;inline int rnd(){ int res=seed; seed=(7LL*seed+13)%1000000007; return res;}inline void swap(int&amp; l,int&amp; r){ int tmp=l; l=r; r=tmp;}int cltpow(int x,int y,int mod){ if(y==1) return x; int res=cltpow(x,y&gt;&gt;1,mod); res=1LL*res*res%mod; if(y&amp;1) res=1LL*res*x%mod; return res;}inline bool operator&lt;(node p,node q){ return p.l&lt;q.l;}inline _it split(int pos){ _it it=std::lower_bound(s.begin(),s.end(),node(pos)); if(it!=s.end()&amp;&amp;it-&gt;l==pos) return it; --it; int l=it-&gt;l,r=it-&gt;r; long long val=it-&gt;val; s.erase(it); s.insert(node(l,pos-1,val)); return s.insert(node(pos,r,val)).first;}inline void IntervalAdd(int l,int r,int x){ _it itr=split(r+1),itl=split(l); for(re _it p=itl;p!=itr;++p) p-&gt;val+=x;}inline void IntervalAssign(int l,int r,int x){//就是之前提到的assign _it itr=split(r+1),itl=split(l); s.erase(itl,itr); s.insert(node(l,r,x));}inline long long IntervalXth(int l,int r,int x){ _it itr=split(r+1),itl=split(l); vec.clear(); for(re _it p=itl;p!=itr;++p) vec.push_back(std::make_pair(p-&gt;val,p-&gt;r-p-&gt;l+1)); std::sort(vec.begin(),vec.end()); for(re unsigned i=0;i&lt;vec.size();++i){ x-=vec[i].second; if(x&lt;=0) return vec[i].first; } return 0;}inline int IntervalXpow(int l,int r,int x,int y){ _it itr=split(r+1),itl=split(l); int res=0; for(re _it p=itl;p!=itr;++p) res=(1LL*res+1LL*(p-&gt;r-p-&gt;l+1)*cltpow(p-&gt;val%y,x,y)%y)%y; return res;}int main(){ cltstream::read(n); cltstream::read(m); cltstream::read(seed); cltstream::read(maxval); for(re int i=1;i&lt;=n;++i) s.insert(node(i,i,rnd()%maxval+1)); for(re int i=1;i&lt;=m;++i){ int opt=rnd()%4+1,l=rnd()%n+1,r=rnd()%n+1,x,y; if(l&gt;r) swap(l,r); switch(opt){ case 1: x=rnd()%maxval+1; IntervalAdd(l,r,x); break; case 2: x=rnd()%maxval+1; IntervalAssign(l,r,x); break; case 3: x=rnd()%(r-l+1)+1; cltstream::write(IntervalXth(l,r,x),'\\n'); break; case 4: x=rnd()%maxval+1; y=rnd()%maxval+1; cltstream::write(IntervalXpow(l,r,x,y),'\\n'); break; } } return 0;} 以上。","link":"/chtholly-tree-learning-notes/"},{"title":"「SDOI2009」虔诚的墓主人","text":"传送门 几个月前某学姐给我推荐的毒瘤题之一。然而我直到现在也只切掉两道，我真是太菜了。 首先，为了方便，我们将题目中所给的坐标系顺时针旋转一下，令正下为$x$轴正方向。我们先考虑单独一块墓地的虔诚度的计算。设其往左数有$L$棵常青树，往右数有$R$棵常青树，往上数有$U$棵常青树，往下数有$D$棵常青树，其虔诚度就是 C_{L}^{k}C_{R}^{k}C_{U}^{k}C_{D}^{k}考虑到墓地不能和常青树重合，又有$k\\geqslant 1$，虔诚度为正的，也就是会对答案产生有效贡献的墓地，一定是在某几棵常青树之间。我们在读入时就可以统计出第$x$行，第$y$列上有多少棵常青树，分别记为$sumx[x]$，$sumy[y]$。然后我们令$x$坐标为第一关键字，$y$坐标为第二关键字，将所有常青树按坐标从小到大排序，然后按顺序遍历一遍。假设我们遍历到了第$i$棵常青树，记$cntx[x]$为前$i-1$棵常青树中第$x$行上有多少棵常青树，$cnty[y]$为前$i-1$棵常青树中第$y$列上有多少棵常青树，当前常青树坐标为$(x[i],y[i])$。如果$x[i]=x[i-1]$，则第$i$棵常青树与第$i-1$棵常青树之间就有可能有虔诚度为正的墓地。具体地，它们的虔诚度之和为 C_{cntx[x[i]]}^{k}C_{sumx[x[i]]-cntx[x[i]]}^{k}(\\sum\\limits_{i=y[i-1]+1}^{y[i]-1}C_{cnty[i]}^{k}C_{sumy[i]-cnty[i]}^{k})怎么快速地查询与修改后面那个$\\Sigma$所涉及到的值？树状数组啊当然如果您非要写些乱七八糟的数据结构也没人拦着您。 坐标范围很大，因此我们需要离散化。而且很明显地，没有常青树的行与列是不需要考虑的。 1234567891011121314#include&lt;cstdio&gt;struct NOIp{ unsigned long long RP,score;};NOIp NOIp2018;int main(){ for(;;){ NOIp2018.RP++; NOIp2018.score++; } return 0;} 以及，明天就是NOIp初赛了，在那之后三周就是复赛，我还不想退役啊但是我实在是太菜了qaq。","link":"/luogu-p2154-solution/"},{"title":"「Luogu-P4900」食堂","text":"传送门 闲着没事写篇题解（ 简单来说，就是要求 \\sum\\limits_{i=A}^{B}\\sum\\limits_{j=1}^{i}\\lbrace\\frac{i}{j}\\rbrace\\pmod{998244353}其中$\\lbrace x\\rbrace$表示取$x$的小数部分。 稍加思索，我们不难发现 \\begin{aligned} &\\sum\\limits_{i=A}^{B}\\sum\\limits_{j=1}^{i}\\lbrace\\frac{i}{j}\\rbrace\\\\ \\equiv&\\sum\\limits_{i=A}^{B}\\sum\\limits_{j=1}^{i}i\\%j\\times j^{-1}\\\\ \\equiv&\\sum\\limits_{i=1}^{B}\\sum\\limits_{j=1}^{i}i\\%j\\times j^{-1}-\\sum\\limits_{i=1}^{A-1}\\sum\\limits_{j=1}^{i}i\\%j\\times j^{-1} \\pmod{998244353} \\end{aligned}因此，我们只需要关注下式的值 \\sum\\limits_{i=1}^{n}\\sum\\limits_{j=1}^{i}i\\%j\\times j^{-1}\\pmod{998244353}我们可以参考一下这道题 在这道题中，我们定义了 f(x)=\\sum\\limits_{i=1}^{n}x\\%i首先，如果不考虑$x\\%i=0$的情况，我们有 x\\%i=(x-1)\\%i+1f(x)=f(x-1)+n如果$x\\%i=0$，我们需要从$f(x)$中减去$i$，而所有满足该条件的$i$的和就是$x$的约数和，因此 f(x)=f(x-1)+n-\\sigma(x)我们可以类似地定义 g(x)=\\sum\\limits_{i=1}^{n}x\\%i\\times i^{-1}\\pmod{998244353}h(x)=\\sum\\limits_{i\\mid x}i\\times i^{-1}\\equiv\\sum\\limits_{i\\mid x}1\\equiv d(x)\\pmod{998244353}从而我们有 g(x)\\equiv g(x-1)+\\sum\\limits_{i=1}^{n}i^{-1}-d(x)\\pmod{998244353}然而我们需要的是 \\sum\\limits_{i=1}^{n}ans(i)\\pmod{998244353}其中 ans(x)=\\sum\\limits_{i=1}^{x}x\\%i\\times i^{-1}\\pmod{998244353}不难发现当$i&lt;j$时$i\\%j=i$，从而 \\begin{aligned} &g(x)-ans(x)\\\\ \\equiv&\\sum\\limits_{i=x+1}^{n}x\\%i\\times i^{-1}\\\\ \\equiv&\\sum\\limits_{i=x+1}^{n}x\\times i^{-1} \\pmod{998244353} \\end{aligned}最终，我们得到 ans(x)\\equiv g(x)-x\\sum\\limits_{i=x+1}^{n}i^{-1}\\sum\\limits_{i=1}^{n}\\sum\\limits_{j=1}^{i}i\\%j\\times j^{-1}\\equiv\\sum\\limits_{i=1}^{n}ans(i)\\pmod{998244353}把上面这一坨东西预处理出来，我们就可以$O(1)$地处理所有询问了。","link":"/luogu-p4900-solution/"},{"title":"「Luogu-P3924」康娜的线段树","text":"传送门 读完题目以后，首先一种简单的想法就是建一颗线段树然后模拟，每个节点维护它所管理的区间内所有数的和以及他自身被访问的概率，以及它和它的子树内所有节点的前两个属性的乘积之和。然后你再一看数据范围： 对于$70\\%$的数据，保证$1\\leqslant n,m\\leqslant 10^{5}$。 对于$100\\%$的数据，保证$1\\leqslant n,m\\leqslant 10^{6}$。 也就是说，上述做法最多只能拿$70$分。为什么说「最多」呢？因为这道题在中间运算过程中需要使用浮点数，而浮点数是自带大常数的，如果你的程序写得再丑一点常数再大一点，说不定$70$分都拿不到了。 Updated on 2018-10-09 不好意思时间复杂度算错了我太菜了。 但反正线段树需要卡常才能过（ 我们来想办法优化。考虑到，对于线段树的每一个非叶子节点，它所维护的区间和也只是原序列中某一段数字的和，如果我们能把这些节点被访问的概率下推到它的每一个叶子节点，也许就能达到优化的目的。 定义$E_i$为叶子节点$[i,i]$对答案的贡献，$c_i$为其所有祖先节点被访问的概率之和，不难发现$c_ia_i=E_i$。我们只要预处理出$c_i$，计算出$\\prod_{i=1}^{n}c_ia_i$，然后处理出$c_i$的前缀和，每次操作直接查询操作区间内$c_i$的和，再乘以他给的那个数，累加到答案上就可以了。 稍加分析，我们不难得出如下结论。设根节点深度为$0$，则任意一个节点，就比如说$x$，被访问的概率为$2^{-dep[x]}$，其中$dep[x]$表示$x$的深度。而对于$x$子树内的每一个叶子节点$[i,i]$，我们执行一次$c_i+=2^{-dep[x]}$即可。我们可以用一次类似于树形DP的DFS来完成这一过程。需要注意的是，我们肯定不能暴力枚举所有叶子节点，在DFS时，我们实际上修改的是$c$数组的差分数组，DFS结束后再还原出$c$数组即可。 以及，最后一句话。 这道题卡精度。","link":"/luogu-p3924-solution/"},{"title":"「Luogu-T47720」孤立元","text":"传送门 自己出的第一道毒瘤数论题。 对于每一个$i(1&lt;i&lt;n)$，如果它成为了孤立元，那么一定有$i-1\\notin B$且$i+1\\notin B$，而其他$n-3$个数无论怎样都无法阻止$i$对所有孤立元的和产生贡献，此时，其他$n-3$个数中有且仅有$m-1$个属于$B$，其总方案数为$C_{n-3}^{m-1}$。而对于$1$和$n$来说，它们只有$1$个相邻的元素，因此方案数为$C_{n-2}^{m-1}$。本题答案即为 \\frac{\\sum_{i=2}^{n-1}iC_{n-3}^{m-1}+(n+1)C_{n-2}^{m-1}}{C_{n}^{m}}将这个式子进行一系列惨无人道的化简与整理后，我们得到如下形式 \\frac{m(n+1)(n-m)(n-m-1)}{2n(n-1)}+\\frac{m(n+1)(n-m)}{n(n-1)} Updated on 2018-10-10 之前公式写错了，分子上的$m$全都漏掉了（ 以及，我们还可以将上式继续整理： \\frac{m(n+1)(n-m)(n-m+1)}{2n(n-1)}以及，顺便测试了一下新的快读板子，然后发现#ifdef真没用也可能是我太菜了（ Updated on 2018-10-16 好吧我当时并不会用#ifdef（ 以及，标程经过一系列丧心病狂的卡常卡到了$1861\\text{ms}$，最慢的一个点只跑了$300\\text{ms}$不到。截至本日，另外两个切掉这道题的$\\text{dalao}$最慢的一个点也只跑了$400\\text{ms}$上下。我要不要考虑加强一波数据或者缩一波时限呢？所以说为什么我当初在本地测的时候平均每个点$500\\text{ms}$，是我们机房的电脑太菜了吗（ 于是做法就有了，先$O(n)$预处理一遍，然后单次询问即可$O(1)$解决。 但是常数好像会很大，我原计划是要将数据范围开到$10^{7}$级别的，然而自己写的标程都跑不过，于是只能一路削到现在的$10^{6}$……","link":"/luogu-t47720-solution/"},{"title":"Hello World","text":"总算是搞出来了一个自己觉得海星的blog……","link":"/hello-world/"}],"tags":[{"name":"数论","slug":"数论","link":"/tags/%E6%95%B0%E8%AE%BA/"},{"name":"组合数学","slug":"组合数学","link":"/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"},{"name":"期望","slug":"期望","link":"/tags/%E6%9C%9F%E6%9C%9B/"},{"name":"其它","slug":"其它","link":"/tags/%E5%85%B6%E5%AE%83/"},{"name":"Luogu","slug":"Luogu","link":"/tags/Luogu/"},{"name":"差分","slug":"差分","link":"/tags/%E5%B7%AE%E5%88%86/"},{"name":"SDOI","slug":"SDOI","link":"/tags/SDOI/"},{"name":"2009","slug":"2009","link":"/tags/2009/"},{"name":"离散化","slug":"离散化","link":"/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/"},{"name":"树状数组","slug":"树状数组","link":"/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"},{"name":"状态压缩","slug":"状态压缩","link":"/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"},{"name":"动态规划","slug":"动态规划","link":"/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"珂朵莉树","slug":"珂朵莉树","link":"/tags/%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91/"},{"name":"线段树","slug":"线段树","link":"/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"},{"name":"NOIp","slug":"NOIp","link":"/tags/NOIp/"},{"name":"2018","slug":"2018","link":"/tags/2018/"},{"name":"杜教筛","slug":"杜教筛","link":"/tags/%E6%9D%9C%E6%95%99%E7%AD%9B/"},{"name":"树套树","slug":"树套树","link":"/tags/%E6%A0%91%E5%A5%97%E6%A0%91/"},{"name":"分块","slug":"分块","link":"/tags/%E5%88%86%E5%9D%97/"},{"name":"FFT","slug":"FFT","link":"/tags/FFT/"},{"name":"NTT","slug":"NTT","link":"/tags/NTT/"},{"name":"块状分块","slug":"块状分块","link":"/tags/%E5%9D%97%E7%8A%B6%E5%88%86%E5%9D%97/"},{"name":"题目组","slug":"题目组","link":"/tags/%E9%A2%98%E7%9B%AE%E7%BB%84/"},{"name":"毒瘤","slug":"毒瘤","link":"/tags/%E6%AF%92%E7%98%A4/"},{"name":"AHOI","slug":"AHOI","link":"/tags/AHOI/"},{"name":"HNOI","slug":"HNOI","link":"/tags/HNOI/"},{"name":"2017","slug":"2017","link":"/tags/2017/"},{"name":"HEOI","slug":"HEOI","link":"/tags/HEOI/"},{"name":"2012","slug":"2012","link":"/tags/2012/"},{"name":"莫队","slug":"莫队","link":"/tags/%E8%8E%AB%E9%98%9F/"},{"name":"类欧几里得","slug":"类欧几里得","link":"/tags/%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/"},{"name":"网络流","slug":"网络流","link":"/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"},{"name":"最大流","slug":"最大流","link":"/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"},{"name":"预留推进","slug":"预留推进","link":"/tags/%E9%A2%84%E7%95%99%E6%8E%A8%E8%BF%9B/"},{"name":"TJOI","slug":"TJOI","link":"/tags/TJOI/"},{"name":"2016","slug":"2016","link":"/tags/2016/"},{"name":"loli","slug":"loli","link":"/tags/loli/"},{"name":"模拟赛","slug":"模拟赛","link":"/tags/%E6%A8%A1%E6%8B%9F%E8%B5%9B/"},{"name":"树链剖分","slug":"树链剖分","link":"/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"},{"name":"LCT","slug":"LCT","link":"/tags/LCT/"},{"name":"Splay","slug":"Splay","link":"/tags/Splay/"},{"name":"min_25筛","slug":"min-25筛","link":"/tags/min-25%E7%AD%9B/"},{"name":"生成函数","slug":"生成函数","link":"/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"},{"name":"多项式","slug":"多项式","link":"/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"},{"name":"三角函数","slug":"三角函数","link":"/tags/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/"},{"name":"字符串","slug":"字符串","link":"/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"SA","slug":"SA","link":"/tags/SA/"},{"name":"Ynoi","slug":"Ynoi","link":"/tags/Ynoi/"},{"name":"2014","slug":"2014","link":"/tags/2014/"},{"name":"平衡树","slug":"平衡树","link":"/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"},{"name":"AtCoder","slug":"AtCoder","link":"/tags/AtCoder/"},{"name":"玄学","slug":"玄学","link":"/tags/%E7%8E%84%E5%AD%A6/"},{"name":"伯努利数","slug":"伯努利数","link":"/tags/%E4%BC%AF%E5%8A%AA%E5%88%A9%E6%95%B0/"},{"name":"2019","slug":"2019","link":"/tags/2019/"},{"name":"FWT","slug":"FWT","link":"/tags/FWT/"},{"name":"BZOJ","slug":"BZOJ","link":"/tags/BZOJ/"},{"name":"容斥","slug":"容斥","link":"/tags/%E5%AE%B9%E6%96%A5/"},{"name":"提交答案","slug":"提交答案","link":"/tags/%E6%8F%90%E4%BA%A4%E7%AD%94%E6%A1%88/"},{"name":"Codeforces","slug":"Codeforces","link":"/tags/Codeforces/"},{"name":"DFS序","slug":"DFS序","link":"/tags/DFS%E5%BA%8F/"},{"name":"BFS序","slug":"BFS序","link":"/tags/BFS%E5%BA%8F/"},{"name":"斯特林数","slug":"斯特林数","link":"/tags/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/"},{"name":"向量","slug":"向量","link":"/tags/%E5%90%91%E9%87%8F/"},{"name":"矩阵乘法","slug":"矩阵乘法","link":"/tags/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/"},{"name":"点分治","slug":"点分治","link":"/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"},{"name":"虚树","slug":"虚树","link":"/tags/%E8%99%9A%E6%A0%91/"},{"name":"交互","slug":"交互","link":"/tags/%E4%BA%A4%E4%BA%92/"},{"name":"随机算法","slug":"随机算法","link":"/tags/%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95/"},{"name":"杂题","slug":"杂题","link":"/tags/%E6%9D%82%E9%A2%98/"},{"name":"东方","slug":"东方","link":"/tags/%E4%B8%9C%E6%96%B9/"},{"name":"2020","slug":"2020","link":"/tags/2020/"},{"name":"矩阵","slug":"矩阵","link":"/tags/%E7%9F%A9%E9%98%B5/"},{"name":"Nono 443","slug":"Nono-443","link":"/tags/Nono-443/"},{"name":"STG","slug":"STG","link":"/tags/STG/"},{"name":"RPG","slug":"RPG","link":"/tags/RPG/"},{"name":"2D","slug":"2D","link":"/tags/2D/"},{"name":"像素风","slug":"像素风","link":"/tags/%E5%83%8F%E7%B4%A0%E9%A3%8E/"},{"name":"平台跳跃","slug":"平台跳跃","link":"/tags/%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83/"},{"name":"同学聚会","slug":"同学聚会","link":"/tags/%E5%90%8C%E5%AD%A6%E8%81%9A%E4%BC%9A/"},{"name":"颓废","slug":"颓废","link":"/tags/%E9%A2%93%E5%BA%9F/"},{"name":"推理","slug":"推理","link":"/tags/%E6%8E%A8%E7%90%86/"},{"name":"解谜","slug":"解谜","link":"/tags/%E8%A7%A3%E8%B0%9C/"},{"name":"猴子","slug":"猴子","link":"/tags/%E7%8C%B4%E5%AD%90/"},{"name":"猫","slug":"猫","link":"/tags/%E7%8C%AB/"},{"name":"随笔","slug":"随笔","link":"/tags/%E9%9A%8F%E7%AC%94/"},{"name":"Rogue","slug":"Rogue","link":"/tags/Rogue/"},{"name":"希腊神话背景","slug":"希腊神话背景","link":"/tags/%E5%B8%8C%E8%85%8A%E7%A5%9E%E8%AF%9D%E8%83%8C%E6%99%AF/"},{"name":"剧情丰富","slug":"剧情丰富","link":"/tags/%E5%89%A7%E6%83%85%E4%B8%B0%E5%AF%8C/"},{"name":"肝","slug":"肝","link":"/tags/%E8%82%9D/"},{"name":"瞪眼","slug":"瞪眼","link":"/tags/%E7%9E%AA%E7%9C%BC/"},{"name":"构造","slug":"构造","link":"/tags/%E6%9E%84%E9%80%A0/"},{"name":"暴力 DP","slug":"暴力-DP","link":"/tags/%E6%9A%B4%E5%8A%9B-DP/"},{"name":"CodeForces","slug":"CodeForces","link":"/tags/CodeForces/"},{"name":"思维","slug":"思维","link":"/tags/%E6%80%9D%E7%BB%B4/"},{"name":"DP","slug":"DP","link":"/tags/DP/"},{"name":"状态压缩 DP","slug":"状态压缩-DP","link":"/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9-DP/"},{"name":"二分答案","slug":"二分答案","link":"/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"},{"name":"最小生成树","slug":"最小生成树","link":"/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"},{"name":"Boruvka","slug":"Boruvka","link":"/tags/Boruvka/"},{"name":"树形 DP","slug":"树形-DP","link":"/tags/%E6%A0%91%E5%BD%A2-DP/"},{"name":"随机游走","slug":"随机游走","link":"/tags/%E9%9A%8F%E6%9C%BA%E6%B8%B8%E8%B5%B0/"},{"name":"图论","slug":"图论","link":"/tags/%E5%9B%BE%E8%AE%BA/"},{"name":"数学期望","slug":"数学期望","link":"/tags/%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B/"},{"name":"莫比乌斯反演","slug":"莫比乌斯反演","link":"/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"},{"name":"卡特兰数","slug":"卡特兰数","link":"/tags/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/"},{"name":"根号算法","slug":"根号算法","link":"/tags/%E6%A0%B9%E5%8F%B7%E7%AE%97%E6%B3%95/"},{"name":"DFS 序","slug":"DFS-序","link":"/tags/DFS-%E5%BA%8F/"},{"name":"BFS 序","slug":"BFS-序","link":"/tags/BFS-%E5%BA%8F/"},{"name":"卡牌游戏","slug":"卡牌游戏","link":"/tags/%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F/"},{"name":"爬山","slug":"爬山","link":"/tags/%E7%88%AC%E5%B1%B1/"},{"name":"大学","slug":"大学","link":"/tags/%E5%A4%A7%E5%AD%A6/"},{"name":"群论","slug":"群论","link":"/tags/%E7%BE%A4%E8%AE%BA/"},{"name":"Burnside 引理","slug":"Burnside-引理","link":"/tags/Burnside-%E5%BC%95%E7%90%86/"},{"name":"观察性质","slug":"观察性质","link":"/tags/%E8%A7%82%E5%AF%9F%E6%80%A7%E8%B4%A8/"},{"name":"2-SAT","slug":"2-SAT","link":"/tags/2-SAT/"},{"name":"Dijkstra","slug":"Dijkstra","link":"/tags/Dijkstra/"},{"name":"斜率优化","slug":"斜率优化","link":"/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"},{"name":"简单题","slug":"简单题","link":"/tags/%E7%AE%80%E5%8D%95%E9%A2%98/"},{"name":"贪心","slug":"贪心","link":"/tags/%E8%B4%AA%E5%BF%83/"},{"name":"OEIS","slug":"OEIS","link":"/tags/OEIS/"},{"name":"计数","slug":"计数","link":"/tags/%E8%AE%A1%E6%95%B0/"},{"name":"以撒的结合","slug":"以撒的结合","link":"/tags/%E4%BB%A5%E6%92%92%E7%9A%84%E7%BB%93%E5%90%88/"},{"name":"MOD","slug":"MOD","link":"/tags/MOD/"},{"name":"Epiphany","slug":"Epiphany","link":"/tags/Epiphany/"},{"name":"排序","slug":"排序","link":"/tags/%E6%8E%92%E5%BA%8F/"},{"name":"原题","slug":"原题","link":"/tags/%E5%8E%9F%E9%A2%98/"},{"name":"ICPC","slug":"ICPC","link":"/tags/ICPC/"},{"name":"2022","slug":"2022","link":"/tags/2022/"},{"name":"网络赛","slug":"网络赛","link":"/tags/%E7%BD%91%E7%BB%9C%E8%B5%9B/"},{"name":"施工中","slug":"施工中","link":"/tags/%E6%96%BD%E5%B7%A5%E4%B8%AD/"},{"name":"概率论","slug":"概率论","link":"/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"},{"name":"矩阵快速幂","slug":"矩阵快速幂","link":"/tags/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"},{"name":"博弈论","slug":"博弈论","link":"/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"},{"name":"公平组合游戏","slug":"公平组合游戏","link":"/tags/%E5%85%AC%E5%B9%B3%E7%BB%84%E5%90%88%E6%B8%B8%E6%88%8F/"},{"name":"Regional","slug":"Regional","link":"/tags/Regional/"},{"name":"合肥","slug":"合肥","link":"/tags/%E5%90%88%E8%82%A5/"},{"name":"难题","slug":"难题","link":"/tags/%E9%9A%BE%E9%A2%98/"},{"name":"模拟","slug":"模拟","link":"/tags/%E6%A8%A1%E6%8B%9F/"},{"name":"最短路","slug":"最短路","link":"/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"name":"背包","slug":"背包","link":"/tags/%E8%83%8C%E5%8C%85/"},{"name":"数据结构","slug":"数据结构","link":"/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"多点求值","slug":"多点求值","link":"/tags/%E5%A4%9A%E7%82%B9%E6%B1%82%E5%80%BC/"},{"name":"线性代数","slug":"线性代数","link":"/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"},{"name":"转置原理","slug":"转置原理","link":"/tags/%E8%BD%AC%E7%BD%AE%E5%8E%9F%E7%90%86/"}],"categories":[{"name":"题解","slug":"题解","link":"/categories/%E9%A2%98%E8%A7%A3/"},{"name":"未分类","slug":"未分类","link":"/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"},{"name":"学习笔记","slug":"学习笔记","link":"/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"游记","slug":"游记","link":"/categories/%E6%B8%B8%E8%AE%B0/"},{"name":"未来算法","slug":"未来算法","link":"/categories/%E6%9C%AA%E6%9D%A5%E7%AE%97%E6%B3%95/"},{"name":"研究报告","slug":"研究报告","link":"/categories/%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/"},{"name":"瞎扯","slug":"瞎扯","link":"/categories/%E7%9E%8E%E6%89%AF/"},{"name":"瞎搞","slug":"瞎搞","link":"/categories/%E7%9E%8E%E6%90%9E/"},{"name":"颓废","slug":"颓废","link":"/categories/%E9%A2%93%E5%BA%9F/"},{"name":"口胡","slug":"口胡","link":"/categories/%E5%8F%A3%E8%83%A1/"},{"name":"颓废（没那回事）","slug":"颓废（没那回事）","link":"/categories/%E9%A2%93%E5%BA%9F%EF%BC%88%E6%B2%A1%E9%82%A3%E5%9B%9E%E4%BA%8B%EF%BC%89/"},{"name":"学术","slug":"学术","link":"/categories/%E5%AD%A6%E6%9C%AF/"}]}